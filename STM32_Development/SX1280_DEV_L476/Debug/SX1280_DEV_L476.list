
SX1280_DEV_L476.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006190  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08006318  08006318  00016318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006430  08006430  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08006430  08006430  00016430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006438  08006438  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006438  08006438  00016438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08006440  08006440  00016440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08006448  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000430  20000060  080064a4  00020060  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  080064a4  00020490  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024fbb  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004291  00000000  00000000  0004508a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001408  00000000  00000000  00049320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f9f  00000000  00000000  0004a728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c1c1  00000000  00000000  0004b6c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019718  00000000  00000000  00077888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ff1c8  00000000  00000000  00090fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005aa4  00000000  00000000  00190168  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00195c0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000060 	.word	0x20000060
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006300 	.word	0x08006300

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000064 	.word	0x20000064
 80001c4:	08006300 	.word	0x08006300

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_uldivmod>:
 80009a4:	b953      	cbnz	r3, 80009bc <__aeabi_uldivmod+0x18>
 80009a6:	b94a      	cbnz	r2, 80009bc <__aeabi_uldivmod+0x18>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bf08      	it	eq
 80009ac:	2800      	cmpeq	r0, #0
 80009ae:	bf1c      	itt	ne
 80009b0:	f04f 31ff 	movne.w	r1, #4294967295
 80009b4:	f04f 30ff 	movne.w	r0, #4294967295
 80009b8:	f000 b970 	b.w	8000c9c <__aeabi_idiv0>
 80009bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c4:	f000 f806 	bl	80009d4 <__udivmoddi4>
 80009c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d0:	b004      	add	sp, #16
 80009d2:	4770      	bx	lr

080009d4 <__udivmoddi4>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	9e08      	ldr	r6, [sp, #32]
 80009da:	460d      	mov	r5, r1
 80009dc:	4604      	mov	r4, r0
 80009de:	460f      	mov	r7, r1
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d14a      	bne.n	8000a7a <__udivmoddi4+0xa6>
 80009e4:	428a      	cmp	r2, r1
 80009e6:	4694      	mov	ip, r2
 80009e8:	d965      	bls.n	8000ab6 <__udivmoddi4+0xe2>
 80009ea:	fab2 f382 	clz	r3, r2
 80009ee:	b143      	cbz	r3, 8000a02 <__udivmoddi4+0x2e>
 80009f0:	fa02 fc03 	lsl.w	ip, r2, r3
 80009f4:	f1c3 0220 	rsb	r2, r3, #32
 80009f8:	409f      	lsls	r7, r3
 80009fa:	fa20 f202 	lsr.w	r2, r0, r2
 80009fe:	4317      	orrs	r7, r2
 8000a00:	409c      	lsls	r4, r3
 8000a02:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a06:	fa1f f58c 	uxth.w	r5, ip
 8000a0a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a0e:	0c22      	lsrs	r2, r4, #16
 8000a10:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a14:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a18:	fb01 f005 	mul.w	r0, r1, r5
 8000a1c:	4290      	cmp	r0, r2
 8000a1e:	d90a      	bls.n	8000a36 <__udivmoddi4+0x62>
 8000a20:	eb1c 0202 	adds.w	r2, ip, r2
 8000a24:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a28:	f080 811c 	bcs.w	8000c64 <__udivmoddi4+0x290>
 8000a2c:	4290      	cmp	r0, r2
 8000a2e:	f240 8119 	bls.w	8000c64 <__udivmoddi4+0x290>
 8000a32:	3902      	subs	r1, #2
 8000a34:	4462      	add	r2, ip
 8000a36:	1a12      	subs	r2, r2, r0
 8000a38:	b2a4      	uxth	r4, r4
 8000a3a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a3e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a42:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a46:	fb00 f505 	mul.w	r5, r0, r5
 8000a4a:	42a5      	cmp	r5, r4
 8000a4c:	d90a      	bls.n	8000a64 <__udivmoddi4+0x90>
 8000a4e:	eb1c 0404 	adds.w	r4, ip, r4
 8000a52:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a56:	f080 8107 	bcs.w	8000c68 <__udivmoddi4+0x294>
 8000a5a:	42a5      	cmp	r5, r4
 8000a5c:	f240 8104 	bls.w	8000c68 <__udivmoddi4+0x294>
 8000a60:	4464      	add	r4, ip
 8000a62:	3802      	subs	r0, #2
 8000a64:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a68:	1b64      	subs	r4, r4, r5
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	b11e      	cbz	r6, 8000a76 <__udivmoddi4+0xa2>
 8000a6e:	40dc      	lsrs	r4, r3
 8000a70:	2300      	movs	r3, #0
 8000a72:	e9c6 4300 	strd	r4, r3, [r6]
 8000a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7a:	428b      	cmp	r3, r1
 8000a7c:	d908      	bls.n	8000a90 <__udivmoddi4+0xbc>
 8000a7e:	2e00      	cmp	r6, #0
 8000a80:	f000 80ed 	beq.w	8000c5e <__udivmoddi4+0x28a>
 8000a84:	2100      	movs	r1, #0
 8000a86:	e9c6 0500 	strd	r0, r5, [r6]
 8000a8a:	4608      	mov	r0, r1
 8000a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a90:	fab3 f183 	clz	r1, r3
 8000a94:	2900      	cmp	r1, #0
 8000a96:	d149      	bne.n	8000b2c <__udivmoddi4+0x158>
 8000a98:	42ab      	cmp	r3, r5
 8000a9a:	d302      	bcc.n	8000aa2 <__udivmoddi4+0xce>
 8000a9c:	4282      	cmp	r2, r0
 8000a9e:	f200 80f8 	bhi.w	8000c92 <__udivmoddi4+0x2be>
 8000aa2:	1a84      	subs	r4, r0, r2
 8000aa4:	eb65 0203 	sbc.w	r2, r5, r3
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	4617      	mov	r7, r2
 8000aac:	2e00      	cmp	r6, #0
 8000aae:	d0e2      	beq.n	8000a76 <__udivmoddi4+0xa2>
 8000ab0:	e9c6 4700 	strd	r4, r7, [r6]
 8000ab4:	e7df      	b.n	8000a76 <__udivmoddi4+0xa2>
 8000ab6:	b902      	cbnz	r2, 8000aba <__udivmoddi4+0xe6>
 8000ab8:	deff      	udf	#255	; 0xff
 8000aba:	fab2 f382 	clz	r3, r2
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	f040 8090 	bne.w	8000be4 <__udivmoddi4+0x210>
 8000ac4:	1a8a      	subs	r2, r1, r2
 8000ac6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aca:	fa1f fe8c 	uxth.w	lr, ip
 8000ace:	2101      	movs	r1, #1
 8000ad0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ad4:	fb07 2015 	mls	r0, r7, r5, r2
 8000ad8:	0c22      	lsrs	r2, r4, #16
 8000ada:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ade:	fb0e f005 	mul.w	r0, lr, r5
 8000ae2:	4290      	cmp	r0, r2
 8000ae4:	d908      	bls.n	8000af8 <__udivmoddi4+0x124>
 8000ae6:	eb1c 0202 	adds.w	r2, ip, r2
 8000aea:	f105 38ff 	add.w	r8, r5, #4294967295
 8000aee:	d202      	bcs.n	8000af6 <__udivmoddi4+0x122>
 8000af0:	4290      	cmp	r0, r2
 8000af2:	f200 80cb 	bhi.w	8000c8c <__udivmoddi4+0x2b8>
 8000af6:	4645      	mov	r5, r8
 8000af8:	1a12      	subs	r2, r2, r0
 8000afa:	b2a4      	uxth	r4, r4
 8000afc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b00:	fb07 2210 	mls	r2, r7, r0, r2
 8000b04:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b08:	fb0e fe00 	mul.w	lr, lr, r0
 8000b0c:	45a6      	cmp	lr, r4
 8000b0e:	d908      	bls.n	8000b22 <__udivmoddi4+0x14e>
 8000b10:	eb1c 0404 	adds.w	r4, ip, r4
 8000b14:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b18:	d202      	bcs.n	8000b20 <__udivmoddi4+0x14c>
 8000b1a:	45a6      	cmp	lr, r4
 8000b1c:	f200 80bb 	bhi.w	8000c96 <__udivmoddi4+0x2c2>
 8000b20:	4610      	mov	r0, r2
 8000b22:	eba4 040e 	sub.w	r4, r4, lr
 8000b26:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b2a:	e79f      	b.n	8000a6c <__udivmoddi4+0x98>
 8000b2c:	f1c1 0720 	rsb	r7, r1, #32
 8000b30:	408b      	lsls	r3, r1
 8000b32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b3a:	fa05 f401 	lsl.w	r4, r5, r1
 8000b3e:	fa20 f307 	lsr.w	r3, r0, r7
 8000b42:	40fd      	lsrs	r5, r7
 8000b44:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b48:	4323      	orrs	r3, r4
 8000b4a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b4e:	fa1f fe8c 	uxth.w	lr, ip
 8000b52:	fb09 5518 	mls	r5, r9, r8, r5
 8000b56:	0c1c      	lsrs	r4, r3, #16
 8000b58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b5c:	fb08 f50e 	mul.w	r5, r8, lr
 8000b60:	42a5      	cmp	r5, r4
 8000b62:	fa02 f201 	lsl.w	r2, r2, r1
 8000b66:	fa00 f001 	lsl.w	r0, r0, r1
 8000b6a:	d90b      	bls.n	8000b84 <__udivmoddi4+0x1b0>
 8000b6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000b70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b74:	f080 8088 	bcs.w	8000c88 <__udivmoddi4+0x2b4>
 8000b78:	42a5      	cmp	r5, r4
 8000b7a:	f240 8085 	bls.w	8000c88 <__udivmoddi4+0x2b4>
 8000b7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000b82:	4464      	add	r4, ip
 8000b84:	1b64      	subs	r4, r4, r5
 8000b86:	b29d      	uxth	r5, r3
 8000b88:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b8c:	fb09 4413 	mls	r4, r9, r3, r4
 8000b90:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000b94:	fb03 fe0e 	mul.w	lr, r3, lr
 8000b98:	45a6      	cmp	lr, r4
 8000b9a:	d908      	bls.n	8000bae <__udivmoddi4+0x1da>
 8000b9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000ba0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ba4:	d26c      	bcs.n	8000c80 <__udivmoddi4+0x2ac>
 8000ba6:	45a6      	cmp	lr, r4
 8000ba8:	d96a      	bls.n	8000c80 <__udivmoddi4+0x2ac>
 8000baa:	3b02      	subs	r3, #2
 8000bac:	4464      	add	r4, ip
 8000bae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bb2:	fba3 9502 	umull	r9, r5, r3, r2
 8000bb6:	eba4 040e 	sub.w	r4, r4, lr
 8000bba:	42ac      	cmp	r4, r5
 8000bbc:	46c8      	mov	r8, r9
 8000bbe:	46ae      	mov	lr, r5
 8000bc0:	d356      	bcc.n	8000c70 <__udivmoddi4+0x29c>
 8000bc2:	d053      	beq.n	8000c6c <__udivmoddi4+0x298>
 8000bc4:	b156      	cbz	r6, 8000bdc <__udivmoddi4+0x208>
 8000bc6:	ebb0 0208 	subs.w	r2, r0, r8
 8000bca:	eb64 040e 	sbc.w	r4, r4, lr
 8000bce:	fa04 f707 	lsl.w	r7, r4, r7
 8000bd2:	40ca      	lsrs	r2, r1
 8000bd4:	40cc      	lsrs	r4, r1
 8000bd6:	4317      	orrs	r7, r2
 8000bd8:	e9c6 7400 	strd	r7, r4, [r6]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	2100      	movs	r1, #0
 8000be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be4:	f1c3 0120 	rsb	r1, r3, #32
 8000be8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bec:	fa20 f201 	lsr.w	r2, r0, r1
 8000bf0:	fa25 f101 	lsr.w	r1, r5, r1
 8000bf4:	409d      	lsls	r5, r3
 8000bf6:	432a      	orrs	r2, r5
 8000bf8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bfc:	fa1f fe8c 	uxth.w	lr, ip
 8000c00:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c04:	fb07 1510 	mls	r5, r7, r0, r1
 8000c08:	0c11      	lsrs	r1, r2, #16
 8000c0a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c0e:	fb00 f50e 	mul.w	r5, r0, lr
 8000c12:	428d      	cmp	r5, r1
 8000c14:	fa04 f403 	lsl.w	r4, r4, r3
 8000c18:	d908      	bls.n	8000c2c <__udivmoddi4+0x258>
 8000c1a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c22:	d22f      	bcs.n	8000c84 <__udivmoddi4+0x2b0>
 8000c24:	428d      	cmp	r5, r1
 8000c26:	d92d      	bls.n	8000c84 <__udivmoddi4+0x2b0>
 8000c28:	3802      	subs	r0, #2
 8000c2a:	4461      	add	r1, ip
 8000c2c:	1b49      	subs	r1, r1, r5
 8000c2e:	b292      	uxth	r2, r2
 8000c30:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c34:	fb07 1115 	mls	r1, r7, r5, r1
 8000c38:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c3c:	fb05 f10e 	mul.w	r1, r5, lr
 8000c40:	4291      	cmp	r1, r2
 8000c42:	d908      	bls.n	8000c56 <__udivmoddi4+0x282>
 8000c44:	eb1c 0202 	adds.w	r2, ip, r2
 8000c48:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c4c:	d216      	bcs.n	8000c7c <__udivmoddi4+0x2a8>
 8000c4e:	4291      	cmp	r1, r2
 8000c50:	d914      	bls.n	8000c7c <__udivmoddi4+0x2a8>
 8000c52:	3d02      	subs	r5, #2
 8000c54:	4462      	add	r2, ip
 8000c56:	1a52      	subs	r2, r2, r1
 8000c58:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000c5c:	e738      	b.n	8000ad0 <__udivmoddi4+0xfc>
 8000c5e:	4631      	mov	r1, r6
 8000c60:	4630      	mov	r0, r6
 8000c62:	e708      	b.n	8000a76 <__udivmoddi4+0xa2>
 8000c64:	4639      	mov	r1, r7
 8000c66:	e6e6      	b.n	8000a36 <__udivmoddi4+0x62>
 8000c68:	4610      	mov	r0, r2
 8000c6a:	e6fb      	b.n	8000a64 <__udivmoddi4+0x90>
 8000c6c:	4548      	cmp	r0, r9
 8000c6e:	d2a9      	bcs.n	8000bc4 <__udivmoddi4+0x1f0>
 8000c70:	ebb9 0802 	subs.w	r8, r9, r2
 8000c74:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	e7a3      	b.n	8000bc4 <__udivmoddi4+0x1f0>
 8000c7c:	4645      	mov	r5, r8
 8000c7e:	e7ea      	b.n	8000c56 <__udivmoddi4+0x282>
 8000c80:	462b      	mov	r3, r5
 8000c82:	e794      	b.n	8000bae <__udivmoddi4+0x1da>
 8000c84:	4640      	mov	r0, r8
 8000c86:	e7d1      	b.n	8000c2c <__udivmoddi4+0x258>
 8000c88:	46d0      	mov	r8, sl
 8000c8a:	e77b      	b.n	8000b84 <__udivmoddi4+0x1b0>
 8000c8c:	3d02      	subs	r5, #2
 8000c8e:	4462      	add	r2, ip
 8000c90:	e732      	b.n	8000af8 <__udivmoddi4+0x124>
 8000c92:	4608      	mov	r0, r1
 8000c94:	e70a      	b.n	8000aac <__udivmoddi4+0xd8>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	e742      	b.n	8000b22 <__udivmoddi4+0x14e>

08000c9c <__aeabi_idiv0>:
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop

08000ca0 <_ZN6SX128x8HalPreTxEv>:
	virtual void HalGpioWrite(GpioPinFunction_t func, uint8_t value) = 0;
	virtual void HalSpiTransfer(uint8_t *buffer_in, const uint8_t *buffer_out, uint16_t size) = 0;
	void HalSpiRead(uint8_t *buffer_in, uint16_t size);
	void HalSpiWrite(const uint8_t *buffer_out, uint16_t size);

	virtual void HalPreTx() {}
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	bf00      	nop
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <_ZN6SX128x8HalPreRxEv>:
	virtual void HalPreRx() {}
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <_ZN6SX128x9HalPostTxEv>:
	virtual void HalPostTx() {}
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	bf00      	nop
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <_ZN6SX128x9HalPostRxEv>:
	virtual void HalPostRx() {}
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	bf00      	nop
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <_ZN6SX128x12GetDioStatusEv>:
	virtual void WriteRegister(uint16_t address, uint8_t value);
	virtual void ReadRegister(uint16_t address, uint8_t *buffer, uint16_t size);
	virtual uint8_t ReadRegister(uint16_t address);
	virtual void WriteBuffer(uint8_t offset, uint8_t *buffer, uint8_t size);
	virtual void ReadBuffer(uint8_t offset, uint8_t *buffer, uint8_t size);
	virtual uint8_t GetDioStatus(void) {
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
		return 0;
 8000cf8:	2300      	movs	r3, #0
	}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr

08000d06 <_ZN6SX128x18GetFirmwareVersionEv>:
//		WriteRegister( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
//	}
//}

uint16_t SX128x::GetFirmwareVersion(void )
{
 8000d06:	b590      	push	{r4, r7, lr}
 8000d08:	b083      	sub	sp, #12
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
	return( ( ( ReadRegister( REG_LR_FIRMWARE_VERSION_MSB ) ) << 8 ) | ( ReadRegister( REG_LR_FIRMWARE_VERSION_MSB + 1 ) ) );
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	3344      	adds	r3, #68	; 0x44
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f240 1153 	movw	r1, #339	; 0x153
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	4798      	blx	r3
 8000d1e:	4603      	mov	r3, r0
 8000d20:	021b      	lsls	r3, r3, #8
 8000d22:	b21c      	sxth	r4, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	3344      	adds	r3, #68	; 0x44
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	4798      	blx	r3
 8000d34:	4603      	mov	r3, r0
 8000d36:	b21b      	sxth	r3, r3
 8000d38:	4323      	orrs	r3, r4
 8000d3a:	b21b      	sxth	r3, r3
 8000d3c:	b29b      	uxth	r3, r3
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd90      	pop	{r4, r7, pc}

08000d46 <_ZN6SX128x9GetStatusEv>:

SX128x::RadioStatus_t SX128x::GetStatus(void )
{
 8000d46:	b590      	push	{r4, r7, lr}
 8000d48:	b085      	sub	sp, #20
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
	uint8_t stat = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	73fb      	strb	r3, [r7, #15]
	RadioStatus_t status;

	ReadCommand( RADIO_GET_STATUS, ( uint8_t * )&stat, 1 );
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	3334      	adds	r3, #52	; 0x34
 8000d58:	681c      	ldr	r4, [r3, #0]
 8000d5a:	f107 020f 	add.w	r2, r7, #15
 8000d5e:	2301      	movs	r3, #1
 8000d60:	21c0      	movs	r1, #192	; 0xc0
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	47a0      	blx	r4
	status.Value = stat;
 8000d66:	7bfb      	ldrb	r3, [r7, #15]
 8000d68:	733b      	strb	r3, [r7, #12]
	return( status );
 8000d6a:	7b3b      	ldrb	r3, [r7, #12]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3714      	adds	r7, #20
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd90      	pop	{r4, r7, pc}

08000d74 <_ZN6SX128x9GetOpModeEv>:

SX128x::RadioOperatingModes_t SX128x::GetOpMode(void )
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
	return( OperatingMode );
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <_ZN6SX128x10SetStandbyENS_19RadioStandbyModes_tE>:
	OperatingMode = MODE_SLEEP;
	WriteCommand( RADIO_SET_SLEEP, &sleep, 1 );
}

void SX128x::SetStandby(RadioStandbyModes_t standbyConfig )
{
 8000d8e:	b590      	push	{r4, r7, lr}
 8000d90:	b083      	sub	sp, #12
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
 8000d96:	460b      	mov	r3, r1
 8000d98:	70fb      	strb	r3, [r7, #3]
	// std::lock_guard<std::mutex> lg(IOLock2);

	WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	3330      	adds	r3, #48	; 0x30
 8000da0:	681c      	ldr	r4, [r3, #0]
 8000da2:	1cfa      	adds	r2, r7, #3
 8000da4:	2301      	movs	r3, #1
 8000da6:	2180      	movs	r1, #128	; 0x80
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	47a0      	blx	r4
	if (standbyConfig == STDBY_RC )
 8000dac:	78fb      	ldrb	r3, [r7, #3]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d104      	bne.n	8000dbc <_ZN6SX128x10SetStandbyENS_19RadioStandbyModes_tE+0x2e>
	{
		OperatingMode = MODE_STDBY_RC;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2202      	movs	r2, #2
 8000db6:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	}
	else
	{
		OperatingMode = MODE_STDBY_XOSC;
	}
}
 8000dba:	e003      	b.n	8000dc4 <_ZN6SX128x10SetStandbyENS_19RadioStandbyModes_tE+0x36>
		OperatingMode = MODE_STDBY_XOSC;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2203      	movs	r2, #3
 8000dc0:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
}
 8000dc4:	bf00      	nop
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd90      	pop	{r4, r7, pc}

08000dcc <_ZN6SX128x5SetTxENS_10TickTime_sE>:
	WriteCommand( RADIO_SET_FS, 0, 0 );
	OperatingMode = MODE_FS;
}

void SX128x::SetTx(TickTime_t timeout )
{
 8000dcc:	b590      	push	{r4, r7, lr}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
	// std::lock_guard<std::mutex> lg(IOLock2);

	uint8_t buf[3];
	buf[0] = timeout.PeriodBase;
 8000dd6:	783b      	ldrb	r3, [r7, #0]
 8000dd8:	733b      	strb	r3, [r7, #12]
	buf[1] = ( uint8_t )( ( timeout.PeriodBaseCount >> 8 ) & 0x00FF );
 8000dda:	887b      	ldrh	r3, [r7, #2]
 8000ddc:	0a1b      	lsrs	r3, r3, #8
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	737b      	strb	r3, [r7, #13]
	buf[2] = ( uint8_t )( timeout.PeriodBaseCount & 0x00FF );
 8000de4:	887b      	ldrh	r3, [r7, #2]
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	73bb      	strb	r3, [r7, #14]

	ClearIrqStatus( IRQ_RADIO_ALL );
 8000dea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f000 fa31 	bl	8001256 <_ZN6SX128x14ClearIrqStatusEt>
//	if (GetPacketType( true ) == PACKET_TYPE_RANGING )
//	{
////		SetRangingRole( RADIO_RANGING_ROLE_MASTER );
//	}

	HalPostRx();
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	3318      	adds	r3, #24
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	4798      	blx	r3
	HalPreTx();
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	330c      	adds	r3, #12
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	4798      	blx	r3
	WriteCommand( RADIO_SET_TX, buf, 3 );
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	3330      	adds	r3, #48	; 0x30
 8000e12:	681c      	ldr	r4, [r3, #0]
 8000e14:	f107 020c 	add.w	r2, r7, #12
 8000e18:	2303      	movs	r3, #3
 8000e1a:	2183      	movs	r1, #131	; 0x83
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	47a0      	blx	r4
	OperatingMode = MODE_TX;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2206      	movs	r2, #6
 8000e24:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
}
 8000e28:	bf00      	nop
 8000e2a:	3714      	adds	r7, #20
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd90      	pop	{r4, r7, pc}

08000e30 <_ZN6SX128x13SetPacketTypeENS_18RadioPacketTypes_tE>:
	HalPreTx();
	WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
}

void SX128x::SetPacketType(RadioPacketTypes_t packetType )
{
 8000e30:	b590      	push	{r4, r7, lr}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	460b      	mov	r3, r1
 8000e3a:	70fb      	strb	r3, [r7, #3]
	// Save packet type internally to avoid questioning the radio
	this->PacketType = packetType;
 8000e3c:	78fa      	ldrb	r2, [r7, #3]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9

	WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	3330      	adds	r3, #48	; 0x30
 8000e4a:	681c      	ldr	r4, [r3, #0]
 8000e4c:	1cfa      	adds	r2, r7, #3
 8000e4e:	2301      	movs	r3, #1
 8000e50:	218a      	movs	r1, #138	; 0x8a
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	47a0      	blx	r4
}
 8000e56:	bf00      	nop
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd90      	pop	{r4, r7, pc}

08000e5e <_ZN6SX128x14SetRfFrequencyEm>:
	}
	return packetType;
}

void SX128x::SetRfFrequency(uint32_t rfFrequency )
{
 8000e5e:	b590      	push	{r4, r7, lr}
 8000e60:	b085      	sub	sp, #20
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
 8000e66:	6039      	str	r1, [r7, #0]
	uint8_t buf[3];
	uint32_t freq = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60fb      	str	r3, [r7, #12]

	freq = ( uint32_t )( ( double )rfFrequency / ( double )FREQ_STEP );
 8000e6c:	6838      	ldr	r0, [r7, #0]
 8000e6e:	f7ff faed 	bl	800044c <__aeabi_ui2d>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000e78:	f7ff fc8c 	bl	8000794 <__aeabi_ddiv>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	460b      	mov	r3, r1
 8000e80:	4610      	mov	r0, r2
 8000e82:	4619      	mov	r1, r3
 8000e84:	f7ff fd6e 	bl	8000964 <__aeabi_d2uiz>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	60fb      	str	r3, [r7, #12]
	buf[0] = ( uint8_t )( ( freq >> 16 ) & 0xFF );
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	0c1b      	lsrs	r3, r3, #16
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	723b      	strb	r3, [r7, #8]
	buf[1] = ( uint8_t )( ( freq >> 8 ) & 0xFF );
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	0a1b      	lsrs	r3, r3, #8
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	727b      	strb	r3, [r7, #9]
	buf[2] = ( uint8_t )( freq & 0xFF );
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	72bb      	strb	r3, [r7, #10]
	WriteCommand( RADIO_SET_RFFREQUENCY, buf, 3 );
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	3330      	adds	r3, #48	; 0x30
 8000ea8:	681c      	ldr	r4, [r3, #0]
 8000eaa:	f107 0208 	add.w	r2, r7, #8
 8000eae:	2303      	movs	r3, #3
 8000eb0:	2186      	movs	r1, #134	; 0x86
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	47a0      	blx	r4
}
 8000eb6:	bf00      	nop
 8000eb8:	3714      	adds	r7, #20
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd90      	pop	{r4, r7, pc}

08000ebe <_ZN6SX128x11SetTxParamsEaNS_16RadioRampTimes_tE>:

void SX128x::SetTxParams(int8_t power, RadioRampTimes_t rampTime )
{
 8000ebe:	b590      	push	{r4, r7, lr}
 8000ec0:	b085      	sub	sp, #20
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	70fb      	strb	r3, [r7, #3]
 8000eca:	4613      	mov	r3, r2
 8000ecc:	70bb      	strb	r3, [r7, #2]
	uint8_t buf[2];

	// The power value to send on SPI/UART is in the range [0..31] and the
	// physical output power is in the range [-18..13]dBm
	buf[0] = power + 18;
 8000ece:	78fb      	ldrb	r3, [r7, #3]
 8000ed0:	3312      	adds	r3, #18
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	733b      	strb	r3, [r7, #12]
	buf[1] = ( uint8_t )rampTime;
 8000ed6:	78bb      	ldrb	r3, [r7, #2]
 8000ed8:	737b      	strb	r3, [r7, #13]
	WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	3330      	adds	r3, #48	; 0x30
 8000ee0:	681c      	ldr	r4, [r3, #0]
 8000ee2:	f107 020c 	add.w	r2, r7, #12
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	218e      	movs	r1, #142	; 0x8e
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	47a0      	blx	r4
}
 8000eee:	bf00      	nop
 8000ef0:	3714      	adds	r7, #20
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd90      	pop	{r4, r7, pc}

08000ef6 <_ZN6SX128x22SetBufferBaseAddressesEhh>:
	WriteCommand( RADIO_SET_CADPARAMS, ( uint8_t* )&cadSymbolNum, 1 );
	OperatingMode = MODE_CAD;
}

void SX128x::SetBufferBaseAddresses(uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8000ef6:	b590      	push	{r4, r7, lr}
 8000ef8:	b085      	sub	sp, #20
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
 8000efe:	460b      	mov	r3, r1
 8000f00:	70fb      	strb	r3, [r7, #3]
 8000f02:	4613      	mov	r3, r2
 8000f04:	70bb      	strb	r3, [r7, #2]
	uint8_t buf[2];

	buf[0] = txBaseAddress;
 8000f06:	78fb      	ldrb	r3, [r7, #3]
 8000f08:	733b      	strb	r3, [r7, #12]
	buf[1] = rxBaseAddress;
 8000f0a:	78bb      	ldrb	r3, [r7, #2]
 8000f0c:	737b      	strb	r3, [r7, #13]
	WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	3330      	adds	r3, #48	; 0x30
 8000f14:	681c      	ldr	r4, [r3, #0]
 8000f16:	f107 020c 	add.w	r2, r7, #12
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	218f      	movs	r1, #143	; 0x8f
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	47a0      	blx	r4
}
 8000f22:	bf00      	nop
 8000f24:	3714      	adds	r7, #20
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd90      	pop	{r4, r7, pc}
	...

08000f2c <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE>:

void SX128x::SetModulationParams(const ModulationParams_t& modParams )
{
 8000f2c:	b590      	push	{r4, r7, lr}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
	uint8_t buf[3];

	// Check if required configuration corresponds to the stored packet type
	// If not, silently update radio packet type
	if (this->PacketType != modParams.PacketType )
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d005      	beq.n	8000f50 <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE+0x24>
	{
		this->SetPacketType( modParams.PacketType );
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	4619      	mov	r1, r3
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f7ff ff70 	bl	8000e30 <_ZN6SX128x13SetPacketTypeENS_18RadioPacketTypes_tE>
	}

	switch( modParams.PacketType )
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	2b0f      	cmp	r3, #15
 8000f56:	d857      	bhi.n	8001008 <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE+0xdc>
 8000f58:	a201      	add	r2, pc, #4	; (adr r2, 8000f60 <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE+0x34>)
 8000f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f5e:	bf00      	nop
 8000f60:	08000fa1 	.word	0x08000fa1
 8000f64:	08000fb5 	.word	0x08000fb5
 8000f68:	08000fb5 	.word	0x08000fb5
 8000f6c:	08000fd3 	.word	0x08000fd3
 8000f70:	08000fe7 	.word	0x08000fe7
 8000f74:	08001009 	.word	0x08001009
 8000f78:	08001009 	.word	0x08001009
 8000f7c:	08001009 	.word	0x08001009
 8000f80:	08001009 	.word	0x08001009
 8000f84:	08001009 	.word	0x08001009
 8000f88:	08001009 	.word	0x08001009
 8000f8c:	08001009 	.word	0x08001009
 8000f90:	08001009 	.word	0x08001009
 8000f94:	08001009 	.word	0x08001009
 8000f98:	08001009 	.word	0x08001009
 8000f9c:	08000ffb 	.word	0x08000ffb
	{
		case PACKET_TYPE_GFSK:
			buf[0] = modParams.Params.Gfsk.BitrateBandwidth;
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	785b      	ldrb	r3, [r3, #1]
 8000fa4:	733b      	strb	r3, [r7, #12]
			buf[1] = modParams.Params.Gfsk.ModulationIndex;
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	789b      	ldrb	r3, [r3, #2]
 8000faa:	737b      	strb	r3, [r7, #13]
			buf[2] = modParams.Params.Gfsk.ModulationShaping;
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	78db      	ldrb	r3, [r3, #3]
 8000fb0:	73bb      	strb	r3, [r7, #14]
			break;
 8000fb2:	e029      	b.n	8001008 <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE+0xdc>
		case PACKET_TYPE_LORA:
		case PACKET_TYPE_RANGING:
			buf[0] = modParams.Params.LoRa.SpreadingFactor;
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	791b      	ldrb	r3, [r3, #4]
 8000fb8:	733b      	strb	r3, [r7, #12]
			buf[1] = modParams.Params.LoRa.Bandwidth;
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	795b      	ldrb	r3, [r3, #5]
 8000fbe:	737b      	strb	r3, [r7, #13]
			buf[2] = modParams.Params.LoRa.CodingRate;
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	799b      	ldrb	r3, [r3, #6]
 8000fc4:	73bb      	strb	r3, [r7, #14]
			this->LoRaBandwidth = modParams.Params.LoRa.Bandwidth;
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	795a      	ldrb	r2, [r3, #5]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
			break;
 8000fd0:	e01a      	b.n	8001008 <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE+0xdc>
		case PACKET_TYPE_FLRC:
			buf[0] = modParams.Params.Flrc.BitrateBandwidth;
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	79db      	ldrb	r3, [r3, #7]
 8000fd6:	733b      	strb	r3, [r7, #12]
			buf[1] = modParams.Params.Flrc.CodingRate;
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	7a1b      	ldrb	r3, [r3, #8]
 8000fdc:	737b      	strb	r3, [r7, #13]
			buf[2] = modParams.Params.Flrc.ModulationShaping;
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	7a5b      	ldrb	r3, [r3, #9]
 8000fe2:	73bb      	strb	r3, [r7, #14]
			break;
 8000fe4:	e010      	b.n	8001008 <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE+0xdc>
		case PACKET_TYPE_BLE:
			buf[0] = modParams.Params.Ble.BitrateBandwidth;
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	7a9b      	ldrb	r3, [r3, #10]
 8000fea:	733b      	strb	r3, [r7, #12]
			buf[1] = modParams.Params.Ble.ModulationIndex;
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	7adb      	ldrb	r3, [r3, #11]
 8000ff0:	737b      	strb	r3, [r7, #13]
			buf[2] = modParams.Params.Ble.ModulationShaping;
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	7b1b      	ldrb	r3, [r3, #12]
 8000ff6:	73bb      	strb	r3, [r7, #14]
			break;
 8000ff8:	e006      	b.n	8001008 <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE+0xdc>
		case PACKET_TYPE_NONE:
			buf[0] = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	733b      	strb	r3, [r7, #12]
			buf[1] = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	737b      	strb	r3, [r7, #13]
			buf[2] = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	73bb      	strb	r3, [r7, #14]
			break;
 8001006:	bf00      	nop
	}
	WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, 3 );
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	3330      	adds	r3, #48	; 0x30
 800100e:	681c      	ldr	r4, [r3, #0]
 8001010:	f107 020c 	add.w	r2, r7, #12
 8001014:	2303      	movs	r3, #3
 8001016:	218b      	movs	r1, #139	; 0x8b
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	47a0      	blx	r4
	CurrentModParams = modParams;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	683a      	ldr	r2, [r7, #0]
 8001020:	33ab      	adds	r3, #171	; 0xab
 8001022:	6814      	ldr	r4, [r2, #0]
 8001024:	6850      	ldr	r0, [r2, #4]
 8001026:	6891      	ldr	r1, [r2, #8]
 8001028:	601c      	str	r4, [r3, #0]
 800102a:	6058      	str	r0, [r3, #4]
 800102c:	6099      	str	r1, [r3, #8]
 800102e:	7b12      	ldrb	r2, [r2, #12]
 8001030:	731a      	strb	r2, [r3, #12]
}
 8001032:	bf00      	nop
 8001034:	3714      	adds	r7, #20
 8001036:	46bd      	mov	sp, r7
 8001038:	bd90      	pop	{r4, r7, pc}
 800103a:	bf00      	nop

0800103c <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE>:

void SX128x::SetPacketParams(const PacketParams_t& packetParams)
{
 800103c:	b5b0      	push	{r4, r5, r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
	uint8_t buf[7];
	// Check if required configuration corresponds to the stored packet type
	// If not, silently update radio packet type
	if (this->PacketType != packetParams.PacketType )
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	429a      	cmp	r2, r3
 8001052:	d005      	beq.n	8001060 <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE+0x24>
	{
		this->SetPacketType( packetParams.PacketType );
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	4619      	mov	r1, r3
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff fee8 	bl	8000e30 <_ZN6SX128x13SetPacketTypeENS_18RadioPacketTypes_tE>
	}

	switch( packetParams.PacketType )
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2b0f      	cmp	r3, #15
 8001066:	f200 8085 	bhi.w	8001174 <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE+0x138>
 800106a:	a201      	add	r2, pc, #4	; (adr r2, 8001070 <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE+0x34>)
 800106c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001070:	080010b1 	.word	0x080010b1
 8001074:	080010dd 	.word	0x080010dd
 8001078:	080010dd 	.word	0x080010dd
 800107c:	08001105 	.word	0x08001105
 8001080:	08001131 	.word	0x08001131
 8001084:	08001175 	.word	0x08001175
 8001088:	08001175 	.word	0x08001175
 800108c:	08001175 	.word	0x08001175
 8001090:	08001175 	.word	0x08001175
 8001094:	08001175 	.word	0x08001175
 8001098:	08001175 	.word	0x08001175
 800109c:	08001175 	.word	0x08001175
 80010a0:	08001175 	.word	0x08001175
 80010a4:	08001175 	.word	0x08001175
 80010a8:	08001175 	.word	0x08001175
 80010ac:	08001157 	.word	0x08001157
	{
		case PACKET_TYPE_GFSK:
			buf[0] = packetParams.Params.Gfsk.PreambleLength;
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	785b      	ldrb	r3, [r3, #1]
 80010b4:	723b      	strb	r3, [r7, #8]
			buf[1] = packetParams.Params.Gfsk.SyncWordLength;
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	789b      	ldrb	r3, [r3, #2]
 80010ba:	727b      	strb	r3, [r7, #9]
			buf[2] = packetParams.Params.Gfsk.SyncWordMatch;
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	78db      	ldrb	r3, [r3, #3]
 80010c0:	72bb      	strb	r3, [r7, #10]
			buf[3] = packetParams.Params.Gfsk.HeaderType;
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	791b      	ldrb	r3, [r3, #4]
 80010c6:	72fb      	strb	r3, [r7, #11]
			buf[4] = packetParams.Params.Gfsk.PayloadLength;
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	795b      	ldrb	r3, [r3, #5]
 80010cc:	733b      	strb	r3, [r7, #12]
			buf[5] = packetParams.Params.Gfsk.CrcLength;
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	799b      	ldrb	r3, [r3, #6]
 80010d2:	737b      	strb	r3, [r7, #13]
			buf[6] = packetParams.Params.Gfsk.Whitening;
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	79db      	ldrb	r3, [r3, #7]
 80010d8:	73bb      	strb	r3, [r7, #14]
			break;
 80010da:	e04b      	b.n	8001174 <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE+0x138>
		case PACKET_TYPE_LORA:
		case PACKET_TYPE_RANGING:
			buf[0] = packetParams.Params.LoRa.PreambleLength;
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	7a1b      	ldrb	r3, [r3, #8]
 80010e0:	723b      	strb	r3, [r7, #8]
			buf[1] = packetParams.Params.LoRa.HeaderType;
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	7a5b      	ldrb	r3, [r3, #9]
 80010e6:	727b      	strb	r3, [r7, #9]
			buf[2] = packetParams.Params.LoRa.PayloadLength;
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	7a9b      	ldrb	r3, [r3, #10]
 80010ec:	72bb      	strb	r3, [r7, #10]
			buf[3] = packetParams.Params.LoRa.Crc;
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	7adb      	ldrb	r3, [r3, #11]
 80010f2:	72fb      	strb	r3, [r7, #11]
			buf[4] = packetParams.Params.LoRa.InvertIQ;
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	7b1b      	ldrb	r3, [r3, #12]
 80010f8:	733b      	strb	r3, [r7, #12]
			buf[5] = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	737b      	strb	r3, [r7, #13]
			buf[6] = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	73bb      	strb	r3, [r7, #14]
			break;
 8001102:	e037      	b.n	8001174 <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE+0x138>
		case PACKET_TYPE_FLRC:
			buf[0] = packetParams.Params.Flrc.PreambleLength;
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	7b5b      	ldrb	r3, [r3, #13]
 8001108:	723b      	strb	r3, [r7, #8]
			buf[1] = packetParams.Params.Flrc.SyncWordLength;
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	7b9b      	ldrb	r3, [r3, #14]
 800110e:	727b      	strb	r3, [r7, #9]
			buf[2] = packetParams.Params.Flrc.SyncWordMatch;
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	7bdb      	ldrb	r3, [r3, #15]
 8001114:	72bb      	strb	r3, [r7, #10]
			buf[3] = packetParams.Params.Flrc.HeaderType;
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	7c1b      	ldrb	r3, [r3, #16]
 800111a:	72fb      	strb	r3, [r7, #11]
			buf[4] = packetParams.Params.Flrc.PayloadLength;
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	7c5b      	ldrb	r3, [r3, #17]
 8001120:	733b      	strb	r3, [r7, #12]
			buf[5] = packetParams.Params.Flrc.CrcLength;
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	7c9b      	ldrb	r3, [r3, #18]
 8001126:	737b      	strb	r3, [r7, #13]
			buf[6] = packetParams.Params.Flrc.Whitening;
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	7cdb      	ldrb	r3, [r3, #19]
 800112c:	73bb      	strb	r3, [r7, #14]
			break;
 800112e:	e021      	b.n	8001174 <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE+0x138>
		case PACKET_TYPE_BLE:
			buf[0] = packetParams.Params.Ble.ConnectionState;
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	7d1b      	ldrb	r3, [r3, #20]
 8001134:	723b      	strb	r3, [r7, #8]
			buf[1] = packetParams.Params.Ble.CrcLength;
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	7d5b      	ldrb	r3, [r3, #21]
 800113a:	727b      	strb	r3, [r7, #9]
			buf[2] = packetParams.Params.Ble.BleTestPayload;
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	7d9b      	ldrb	r3, [r3, #22]
 8001140:	72bb      	strb	r3, [r7, #10]
			buf[3] = packetParams.Params.Ble.Whitening;
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	7ddb      	ldrb	r3, [r3, #23]
 8001146:	72fb      	strb	r3, [r7, #11]
			buf[4] = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	733b      	strb	r3, [r7, #12]
			buf[5] = 0;
 800114c:	2300      	movs	r3, #0
 800114e:	737b      	strb	r3, [r7, #13]
			buf[6] = 0;
 8001150:	2300      	movs	r3, #0
 8001152:	73bb      	strb	r3, [r7, #14]
			break;
 8001154:	e00e      	b.n	8001174 <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE+0x138>
		case PACKET_TYPE_NONE:
			buf[0] = 0;
 8001156:	2300      	movs	r3, #0
 8001158:	723b      	strb	r3, [r7, #8]
			buf[1] = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	727b      	strb	r3, [r7, #9]
			buf[2] = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	72bb      	strb	r3, [r7, #10]
			buf[3] = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	72fb      	strb	r3, [r7, #11]
			buf[4] = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	733b      	strb	r3, [r7, #12]
			buf[5] = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	737b      	strb	r3, [r7, #13]
			buf[6] = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	73bb      	strb	r3, [r7, #14]
			break;
 8001172:	bf00      	nop
	}
	WriteCommand( RADIO_SET_PACKETPARAMS, buf, 7 );
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	3330      	adds	r3, #48	; 0x30
 800117a:	681c      	ldr	r4, [r3, #0]
 800117c:	f107 0208 	add.w	r2, r7, #8
 8001180:	2307      	movs	r3, #7
 8001182:	218c      	movs	r1, #140	; 0x8c
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	47a0      	blx	r4
	CurrentPacketParams = packetParams;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	683a      	ldr	r2, [r7, #0]
 800118c:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 8001190:	4615      	mov	r5, r2
 8001192:	6828      	ldr	r0, [r5, #0]
 8001194:	6869      	ldr	r1, [r5, #4]
 8001196:	68aa      	ldr	r2, [r5, #8]
 8001198:	68eb      	ldr	r3, [r5, #12]
 800119a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800119c:	6928      	ldr	r0, [r5, #16]
 800119e:	6969      	ldr	r1, [r5, #20]
 80011a0:	c403      	stmia	r4!, {r0, r1}
}
 80011a2:	bf00      	nop
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bdb0      	pop	{r4, r5, r7, pc}
 80011aa:	bf00      	nop

080011ac <_ZN6SX128x15SetDioIrqParamsEtttt>:

	return ( int8_t ) ( -raw / 2 );
}

void SX128x::SetDioIrqParams(uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 80011ac:	b590      	push	{r4, r7, lr}
 80011ae:	b087      	sub	sp, #28
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	4608      	mov	r0, r1
 80011b6:	4611      	mov	r1, r2
 80011b8:	461a      	mov	r2, r3
 80011ba:	4603      	mov	r3, r0
 80011bc:	817b      	strh	r3, [r7, #10]
 80011be:	460b      	mov	r3, r1
 80011c0:	813b      	strh	r3, [r7, #8]
 80011c2:	4613      	mov	r3, r2
 80011c4:	80fb      	strh	r3, [r7, #6]
	uint8_t buf[8];

	buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 80011c6:	897b      	ldrh	r3, [r7, #10]
 80011c8:	0a1b      	lsrs	r3, r3, #8
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	743b      	strb	r3, [r7, #16]
	buf[1] = ( uint8_t )( irqMask & 0x00FF );
 80011d0:	897b      	ldrh	r3, [r7, #10]
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	747b      	strb	r3, [r7, #17]
	buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 80011d6:	893b      	ldrh	r3, [r7, #8]
 80011d8:	0a1b      	lsrs	r3, r3, #8
 80011da:	b29b      	uxth	r3, r3
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	74bb      	strb	r3, [r7, #18]
	buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 80011e0:	893b      	ldrh	r3, [r7, #8]
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	74fb      	strb	r3, [r7, #19]
	buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 80011e6:	88fb      	ldrh	r3, [r7, #6]
 80011e8:	0a1b      	lsrs	r3, r3, #8
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	753b      	strb	r3, [r7, #20]
	buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 80011f0:	88fb      	ldrh	r3, [r7, #6]
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	757b      	strb	r3, [r7, #21]
	buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 80011f6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80011f8:	0a1b      	lsrs	r3, r3, #8
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	75bb      	strb	r3, [r7, #22]
	buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8001200:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001202:	b2db      	uxtb	r3, r3
 8001204:	75fb      	strb	r3, [r7, #23]
	WriteCommand( RADIO_SET_DIOIRQPARAMS, buf, 8 );
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	3330      	adds	r3, #48	; 0x30
 800120c:	681c      	ldr	r4, [r3, #0]
 800120e:	f107 0210 	add.w	r2, r7, #16
 8001212:	2308      	movs	r3, #8
 8001214:	218d      	movs	r1, #141	; 0x8d
 8001216:	68f8      	ldr	r0, [r7, #12]
 8001218:	47a0      	blx	r4
}
 800121a:	bf00      	nop
 800121c:	371c      	adds	r7, #28
 800121e:	46bd      	mov	sp, r7
 8001220:	bd90      	pop	{r4, r7, pc}

08001222 <_ZN6SX128x12GetIrqStatusEv>:

uint16_t SX128x::GetIrqStatus(void )
{
 8001222:	b590      	push	{r4, r7, lr}
 8001224:	b085      	sub	sp, #20
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
	uint8_t irqStatus[2];
	ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	3334      	adds	r3, #52	; 0x34
 8001230:	681c      	ldr	r4, [r3, #0]
 8001232:	f107 020c 	add.w	r2, r7, #12
 8001236:	2302      	movs	r3, #2
 8001238:	2115      	movs	r1, #21
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	47a0      	blx	r4
	return ( irqStatus[0] << 8 ) | irqStatus[1];
 800123e:	7b3b      	ldrb	r3, [r7, #12]
 8001240:	021b      	lsls	r3, r3, #8
 8001242:	b21a      	sxth	r2, r3
 8001244:	7b7b      	ldrb	r3, [r7, #13]
 8001246:	b21b      	sxth	r3, r3
 8001248:	4313      	orrs	r3, r2
 800124a:	b21b      	sxth	r3, r3
 800124c:	b29b      	uxth	r3, r3
}
 800124e:	4618      	mov	r0, r3
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	bd90      	pop	{r4, r7, pc}

08001256 <_ZN6SX128x14ClearIrqStatusEt>:

void SX128x::ClearIrqStatus(uint16_t irqMask )
{
 8001256:	b590      	push	{r4, r7, lr}
 8001258:	b085      	sub	sp, #20
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
 800125e:	460b      	mov	r3, r1
 8001260:	807b      	strh	r3, [r7, #2]
	uint8_t buf[2];

	buf[0] = ( uint8_t )( ( ( uint16_t )irqMask >> 8 ) & 0x00FF );
 8001262:	887b      	ldrh	r3, [r7, #2]
 8001264:	0a1b      	lsrs	r3, r3, #8
 8001266:	b29b      	uxth	r3, r3
 8001268:	b2db      	uxtb	r3, r3
 800126a:	733b      	strb	r3, [r7, #12]
	buf[1] = ( uint8_t )( ( uint16_t )irqMask & 0x00FF );
 800126c:	887b      	ldrh	r3, [r7, #2]
 800126e:	b2db      	uxtb	r3, r3
 8001270:	737b      	strb	r3, [r7, #13]
	WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	3330      	adds	r3, #48	; 0x30
 8001278:	681c      	ldr	r4, [r3, #0]
 800127a:	f107 020c 	add.w	r2, r7, #12
 800127e:	2302      	movs	r3, #2
 8001280:	2197      	movs	r1, #151	; 0x97
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	47a0      	blx	r4
}
 8001286:	bf00      	nop
 8001288:	3714      	adds	r7, #20
 800128a:	46bd      	mov	sp, r7
 800128c:	bd90      	pop	{r4, r7, pc}

0800128e <_ZN6SX128x10SetPayloadEPhhh>:
{
	WriteCommand( RADIO_SET_LONGPREAMBLE, ( uint8_t * )&enable, 1 );
}

void SX128x::SetPayload(uint8_t *buffer, uint8_t size, uint8_t offset )
{
 800128e:	b590      	push	{r4, r7, lr}
 8001290:	b085      	sub	sp, #20
 8001292:	af00      	add	r7, sp, #0
 8001294:	60f8      	str	r0, [r7, #12]
 8001296:	60b9      	str	r1, [r7, #8]
 8001298:	4611      	mov	r1, r2
 800129a:	461a      	mov	r2, r3
 800129c:	460b      	mov	r3, r1
 800129e:	71fb      	strb	r3, [r7, #7]
 80012a0:	4613      	mov	r3, r2
 80012a2:	71bb      	strb	r3, [r7, #6]
	WriteBuffer( offset, buffer, size );
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	3348      	adds	r3, #72	; 0x48
 80012aa:	681c      	ldr	r4, [r3, #0]
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	79b9      	ldrb	r1, [r7, #6]
 80012b0:	68ba      	ldr	r2, [r7, #8]
 80012b2:	68f8      	ldr	r0, [r7, #12]
 80012b4:	47a0      	blx	r4
}
 80012b6:	bf00      	nop
 80012b8:	3714      	adds	r7, #20
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd90      	pop	{r4, r7, pc}

080012be <_ZN6SX128x11SendPayloadEPhhNS_10TickTime_sEh>:
	ReadBuffer( offset, buffer, *size );
	return 0;
}

void SX128x::SendPayload(uint8_t *payload, uint8_t size, TickTime_t timeout, uint8_t offset )
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b084      	sub	sp, #16
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	60f8      	str	r0, [r7, #12]
 80012c6:	60b9      	str	r1, [r7, #8]
 80012c8:	603b      	str	r3, [r7, #0]
 80012ca:	4613      	mov	r3, r2
 80012cc:	71fb      	strb	r3, [r7, #7]
	SetPayload( payload, size, offset );
 80012ce:	7e3b      	ldrb	r3, [r7, #24]
 80012d0:	79fa      	ldrb	r2, [r7, #7]
 80012d2:	68b9      	ldr	r1, [r7, #8]
 80012d4:	68f8      	ldr	r0, [r7, #12]
 80012d6:	f7ff ffda 	bl	800128e <_ZN6SX128x10SetPayloadEPhhh>
	SetTx( timeout );
 80012da:	6839      	ldr	r1, [r7, #0]
 80012dc:	68f8      	ldr	r0, [r7, #12]
 80012de:	f7ff fd75 	bl	8000dcc <_ZN6SX128x5SetTxENS_10TickTime_sE>
}
 80012e2:	bf00      	nop
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <_ZN6SX128x11HalSpiWriteEPKht>:
	uint8_t useless[size];
	memset(useless, 0, size);
	HalSpiTransfer(buffer_in, useless, size);
}

void SX128x::HalSpiWrite(const uint8_t *buffer_out, uint16_t size) {
 80012ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012ee:	b087      	sub	sp, #28
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	4613      	mov	r3, r2
 80012f8:	80fb      	strh	r3, [r7, #6]
	uint8_t useless[size];
	HalSpiTransfer(useless, buffer_out, size);
}
 80012fa:	466b      	mov	r3, sp
 80012fc:	461e      	mov	r6, r3
	uint8_t useless[size];
 80012fe:	88f9      	ldrh	r1, [r7, #6]
 8001300:	460b      	mov	r3, r1
 8001302:	3b01      	subs	r3, #1
 8001304:	617b      	str	r3, [r7, #20]
 8001306:	b28b      	uxth	r3, r1
 8001308:	2200      	movs	r2, #0
 800130a:	4698      	mov	r8, r3
 800130c:	4691      	mov	r9, r2
 800130e:	f04f 0200 	mov.w	r2, #0
 8001312:	f04f 0300 	mov.w	r3, #0
 8001316:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800131a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800131e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001322:	b28b      	uxth	r3, r1
 8001324:	2200      	movs	r2, #0
 8001326:	461c      	mov	r4, r3
 8001328:	4615      	mov	r5, r2
 800132a:	f04f 0200 	mov.w	r2, #0
 800132e:	f04f 0300 	mov.w	r3, #0
 8001332:	00eb      	lsls	r3, r5, #3
 8001334:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001338:	00e2      	lsls	r2, r4, #3
 800133a:	460b      	mov	r3, r1
 800133c:	3307      	adds	r3, #7
 800133e:	08db      	lsrs	r3, r3, #3
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	ebad 0d03 	sub.w	sp, sp, r3
 8001346:	466b      	mov	r3, sp
 8001348:	3300      	adds	r3, #0
 800134a:	613b      	str	r3, [r7, #16]
	HalSpiTransfer(useless, buffer_out, size);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	3308      	adds	r3, #8
 8001352:	681c      	ldr	r4, [r3, #0]
 8001354:	88fb      	ldrh	r3, [r7, #6]
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	6939      	ldr	r1, [r7, #16]
 800135a:	68f8      	ldr	r0, [r7, #12]
 800135c:	47a0      	blx	r4
 800135e:	46b5      	mov	sp, r6
}
 8001360:	bf00      	nop
 8001362:	371c      	adds	r7, #28
 8001364:	46bd      	mov	sp, r7
 8001366:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800136a <_ZN6SX128x10WaitOnBusyEv>:

inline void SX128x::WaitOnBusy() {
 800136a:	b480      	push	{r7}
 800136c:	b085      	sub	sp, #20
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
//	while (HalGpioRead(GPIO_PIN_BUSY));
//	HAL_Delay(1);
	for(int i = 0; i < 100; i++);
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	e002      	b.n	800137e <_ZN6SX128x10WaitOnBusyEv+0x14>
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	3301      	adds	r3, #1
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2b63      	cmp	r3, #99	; 0x63
 8001382:	ddf9      	ble.n	8001378 <_ZN6SX128x10WaitOnBusyEv+0xe>
}
 8001384:	bf00      	nop
 8001386:	bf00      	nop
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <_ZN6SX128x14WaitOnBusyLongEv>:

inline void SX128x::WaitOnBusyLong() {
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
	while (HalGpioRead(GPIO_PIN_BUSY))
 800139a:	e002      	b.n	80013a2 <_ZN6SX128x14WaitOnBusyLongEv+0x10>
		HAL_Delay(10);
 800139c:	200a      	movs	r0, #10
 800139e:	f001 fad5 	bl	800294c <HAL_Delay>
	while (HalGpioRead(GPIO_PIN_BUSY))
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2101      	movs	r1, #1
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	4798      	blx	r3
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	bf14      	ite	ne
 80013b4:	2301      	movne	r3, #1
 80013b6:	2300      	moveq	r3, #0
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1ee      	bne.n	800139c <_ZN6SX128x14WaitOnBusyLongEv+0xa>
}
 80013be:	bf00      	nop
 80013c0:	bf00      	nop
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <_ZN6SX128x5ResetEv>:

void SX128x::Reset(void) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	HalGpioWrite(GPIO_PIN_RESET, 1);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	3304      	adds	r3, #4
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2201      	movs	r2, #1
 80013da:	2100      	movs	r1, #0
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	4798      	blx	r3
	HAL_Delay(10);
 80013e0:	200a      	movs	r0, #10
 80013e2:	f001 fab3 	bl	800294c <HAL_Delay>
	HalGpioWrite(GPIO_PIN_RESET, 0);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	3304      	adds	r3, #4
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2200      	movs	r2, #0
 80013f0:	2100      	movs	r1, #0
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	4798      	blx	r3
	HAL_Delay(10);
 80013f6:	200a      	movs	r0, #10
 80013f8:	f001 faa8 	bl	800294c <HAL_Delay>
	HalGpioWrite(GPIO_PIN_RESET, 1);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	3304      	adds	r3, #4
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2201      	movs	r2, #1
 8001406:	2100      	movs	r1, #0
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	4798      	blx	r3
	HAL_Delay(10);
 800140c:	200a      	movs	r0, #10
 800140e:	f001 fa9d 	bl	800294c <HAL_Delay>
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <_ZN6SX128x6WakeupEv>:

void SX128x::Wakeup(void) {
 800141a:	b580      	push	{r7, lr}
 800141c:	b084      	sub	sp, #16
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
	uint8_t buf[2] = {RADIO_GET_STATUS, 0};
 8001422:	23c0      	movs	r3, #192	; 0xc0
 8001424:	81bb      	strh	r3, [r7, #12]
	HalSpiWrite(buf, 2);
 8001426:	f107 030c 	add.w	r3, r7, #12
 800142a:	2202      	movs	r2, #2
 800142c:	4619      	mov	r1, r3
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff ff5b 	bl	80012ea <_ZN6SX128x11HalSpiWriteEPKht>
	WaitOnBusyLong();
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff ffac 	bl	8001392 <_ZN6SX128x14WaitOnBusyLongEv>
}
 800143a:	bf00      	nop
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <_ZN6SX128x12WriteCommandENS_15RadioCommands_uEPht>:

void SX128x::WriteCommand(SX128x::RadioCommands_t opcode, uint8_t *buffer, uint16_t size) {
 8001442:	b580      	push	{r7, lr}
 8001444:	b086      	sub	sp, #24
 8001446:	af00      	add	r7, sp, #0
 8001448:	60f8      	str	r0, [r7, #12]
 800144a:	607a      	str	r2, [r7, #4]
 800144c:	461a      	mov	r2, r3
 800144e:	460b      	mov	r3, r1
 8001450:	72fb      	strb	r3, [r7, #11]
 8001452:	4613      	mov	r3, r2
 8001454:	813b      	strh	r3, [r7, #8]
	auto *merged_buf = (uint8_t *)alloca(size+1);
 8001456:	893b      	ldrh	r3, [r7, #8]
 8001458:	3301      	adds	r3, #1
 800145a:	3307      	adds	r3, #7
 800145c:	08db      	lsrs	r3, r3, #3
 800145e:	00db      	lsls	r3, r3, #3
 8001460:	ebad 0d03 	sub.w	sp, sp, r3
 8001464:	466b      	mov	r3, sp
 8001466:	3307      	adds	r3, #7
 8001468:	08db      	lsrs	r3, r3, #3
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	617b      	str	r3, [r7, #20]

	merged_buf[0] = opcode;
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	7afa      	ldrb	r2, [r7, #11]
 8001472:	701a      	strb	r2, [r3, #0]
	memcpy(merged_buf+1, buffer, size);
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	3301      	adds	r3, #1
 8001478:	893a      	ldrh	r2, [r7, #8]
 800147a:	6879      	ldr	r1, [r7, #4]
 800147c:	4618      	mov	r0, r3
 800147e:	f004 fee5 	bl	800624c <memcpy>

	WaitOnBusy();
 8001482:	68f8      	ldr	r0, [r7, #12]
 8001484:	f7ff ff71 	bl	800136a <_ZN6SX128x10WaitOnBusyEv>
	HalSpiWrite(merged_buf, size+1);
 8001488:	893b      	ldrh	r3, [r7, #8]
 800148a:	3301      	adds	r3, #1
 800148c:	b29b      	uxth	r3, r3
 800148e:	461a      	mov	r2, r3
 8001490:	6979      	ldr	r1, [r7, #20]
 8001492:	68f8      	ldr	r0, [r7, #12]
 8001494:	f7ff ff29 	bl	80012ea <_ZN6SX128x11HalSpiWriteEPKht>
}
 8001498:	bf00      	nop
 800149a:	3718      	adds	r7, #24
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <_ZN6SX128x11ReadCommandENS_15RadioCommands_uEPht>:

void SX128x::ReadCommand(SX128x::RadioCommands_t opcode, uint8_t *buffer, uint16_t size) {
 80014a0:	b590      	push	{r4, r7, lr}
 80014a2:	b08b      	sub	sp, #44	; 0x2c
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	607a      	str	r2, [r7, #4]
 80014aa:	461a      	mov	r2, r3
 80014ac:	460b      	mov	r3, r1
 80014ae:	72fb      	strb	r3, [r7, #11]
 80014b0:	4613      	mov	r3, r2
 80014b2:	813b      	strh	r3, [r7, #8]

	if (opcode == RADIO_GET_STATUS) {
 80014b4:	7afb      	ldrb	r3, [r7, #11]
 80014b6:	2bc0      	cmp	r3, #192	; 0xc0
 80014b8:	d11a      	bne.n	80014f0 <_ZN6SX128x11ReadCommandENS_15RadioCommands_uEPht+0x50>
		uint8_t buf_out[3] = {static_cast<uint8_t>(opcode), 0, 0};
 80014ba:	f107 0318 	add.w	r3, r7, #24
 80014be:	2100      	movs	r1, #0
 80014c0:	460a      	mov	r2, r1
 80014c2:	801a      	strh	r2, [r3, #0]
 80014c4:	460a      	mov	r2, r1
 80014c6:	709a      	strb	r2, [r3, #2]
 80014c8:	7afb      	ldrb	r3, [r7, #11]
 80014ca:	763b      	strb	r3, [r7, #24]
		uint8_t buf_in[3];

		WaitOnBusy();
 80014cc:	68f8      	ldr	r0, [r7, #12]
 80014ce:	f7ff ff4c 	bl	800136a <_ZN6SX128x10WaitOnBusyEv>
		HalSpiTransfer(buf_in, buf_out, 3);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	3308      	adds	r3, #8
 80014d8:	681c      	ldr	r4, [r3, #0]
 80014da:	f107 0218 	add.w	r2, r7, #24
 80014de:	f107 0114 	add.w	r1, r7, #20
 80014e2:	2303      	movs	r3, #3
 80014e4:	68f8      	ldr	r0, [r7, #12]
 80014e6:	47a0      	blx	r4
		buffer[0] = buf_in[0];
 80014e8:	7d3a      	ldrb	r2, [r7, #20]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	701a      	strb	r2, [r3, #0]

		WaitOnBusy(); // wait until not busy before spi transfer
		HalSpiTransfer(buf_in, buf_out, total_transfer_size);
		memcpy(buffer, buf_in+2, size);
	}
}
 80014ee:	e035      	b.n	800155c <_ZN6SX128x11ReadCommandENS_15RadioCommands_uEPht+0xbc>
		auto total_transfer_size = 2+size;
 80014f0:	893b      	ldrh	r3, [r7, #8]
 80014f2:	3302      	adds	r3, #2
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24
		auto *buf_out = (uint8_t *)alloca(total_transfer_size);
 80014f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f8:	3307      	adds	r3, #7
 80014fa:	08db      	lsrs	r3, r3, #3
 80014fc:	00db      	lsls	r3, r3, #3
 80014fe:	ebad 0d03 	sub.w	sp, sp, r3
 8001502:	466b      	mov	r3, sp
 8001504:	3307      	adds	r3, #7
 8001506:	08db      	lsrs	r3, r3, #3
 8001508:	00db      	lsls	r3, r3, #3
 800150a:	623b      	str	r3, [r7, #32]
		auto *buf_in = (uint8_t *)alloca(total_transfer_size);
 800150c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150e:	3307      	adds	r3, #7
 8001510:	08db      	lsrs	r3, r3, #3
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	ebad 0d03 	sub.w	sp, sp, r3
 8001518:	466b      	mov	r3, sp
 800151a:	3307      	adds	r3, #7
 800151c:	08db      	lsrs	r3, r3, #3
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	61fb      	str	r3, [r7, #28]
		memset(buf_out, 0, total_transfer_size);
 8001522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001524:	461a      	mov	r2, r3
 8001526:	2100      	movs	r1, #0
 8001528:	6a38      	ldr	r0, [r7, #32]
 800152a:	f004 fe61 	bl	80061f0 <memset>
		buf_out[0] = opcode;
 800152e:	6a3b      	ldr	r3, [r7, #32]
 8001530:	7afa      	ldrb	r2, [r7, #11]
 8001532:	701a      	strb	r2, [r3, #0]
		WaitOnBusy(); // wait until not busy before spi transfer
 8001534:	68f8      	ldr	r0, [r7, #12]
 8001536:	f7ff ff18 	bl	800136a <_ZN6SX128x10WaitOnBusyEv>
		HalSpiTransfer(buf_in, buf_out, total_transfer_size);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	3308      	adds	r3, #8
 8001540:	681c      	ldr	r4, [r3, #0]
 8001542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001544:	b29b      	uxth	r3, r3
 8001546:	6a3a      	ldr	r2, [r7, #32]
 8001548:	69f9      	ldr	r1, [r7, #28]
 800154a:	68f8      	ldr	r0, [r7, #12]
 800154c:	47a0      	blx	r4
		memcpy(buffer, buf_in+2, size);
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	3302      	adds	r3, #2
 8001552:	893a      	ldrh	r2, [r7, #8]
 8001554:	4619      	mov	r1, r3
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f004 fe78 	bl	800624c <memcpy>
}
 800155c:	bf00      	nop
 800155e:	372c      	adds	r7, #44	; 0x2c
 8001560:	46bd      	mov	sp, r7
 8001562:	bd90      	pop	{r4, r7, pc}

08001564 <_ZN6SX128x13WriteRegisterEtPht>:

void SX128x::WriteRegister(uint16_t address, uint8_t *buffer, uint16_t size) {
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	607a      	str	r2, [r7, #4]
 800156e:	461a      	mov	r2, r3
 8001570:	460b      	mov	r3, r1
 8001572:	817b      	strh	r3, [r7, #10]
 8001574:	4613      	mov	r3, r2
 8001576:	813b      	strh	r3, [r7, #8]
	auto total_transfer_size = 3+size;
 8001578:	893b      	ldrh	r3, [r7, #8]
 800157a:	3303      	adds	r3, #3
 800157c:	617b      	str	r3, [r7, #20]
	auto *buf_out = (uint8_t *)alloca(total_transfer_size);
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	3307      	adds	r3, #7
 8001582:	08db      	lsrs	r3, r3, #3
 8001584:	00db      	lsls	r3, r3, #3
 8001586:	ebad 0d03 	sub.w	sp, sp, r3
 800158a:	466b      	mov	r3, sp
 800158c:	3307      	adds	r3, #7
 800158e:	08db      	lsrs	r3, r3, #3
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	613b      	str	r3, [r7, #16]

	buf_out[0] = RADIO_WRITE_REGISTER;
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	2218      	movs	r2, #24
 8001598:	701a      	strb	r2, [r3, #0]
	buf_out[1] = ((address & 0xFF00) >> 8);
 800159a:	897b      	ldrh	r3, [r7, #10]
 800159c:	0a1b      	lsrs	r3, r3, #8
 800159e:	b29a      	uxth	r2, r3
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	3301      	adds	r3, #1
 80015a4:	b2d2      	uxtb	r2, r2
 80015a6:	701a      	strb	r2, [r3, #0]
	buf_out[2] = (address & 0x00FF);
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	3302      	adds	r3, #2
 80015ac:	897a      	ldrh	r2, [r7, #10]
 80015ae:	b2d2      	uxtb	r2, r2
 80015b0:	701a      	strb	r2, [r3, #0]
	memcpy(buf_out+3, buffer, size);
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	3303      	adds	r3, #3
 80015b6:	893a      	ldrh	r2, [r7, #8]
 80015b8:	6879      	ldr	r1, [r7, #4]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f004 fe46 	bl	800624c <memcpy>

	WaitOnBusy(); // wait until not busy before spi transfer
 80015c0:	68f8      	ldr	r0, [r7, #12]
 80015c2:	f7ff fed2 	bl	800136a <_ZN6SX128x10WaitOnBusyEv>
	HalSpiWrite(buf_out, total_transfer_size);
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	461a      	mov	r2, r3
 80015cc:	6939      	ldr	r1, [r7, #16]
 80015ce:	68f8      	ldr	r0, [r7, #12]
 80015d0:	f7ff fe8b 	bl	80012ea <_ZN6SX128x11HalSpiWriteEPKht>
}
 80015d4:	bf00      	nop
 80015d6:	3718      	adds	r7, #24
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <_ZN6SX128x13WriteRegisterEth>:

inline void SX128x::WriteRegister(uint16_t address, uint8_t value) {
 80015dc:	b590      	push	{r4, r7, lr}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	460b      	mov	r3, r1
 80015e6:	807b      	strh	r3, [r7, #2]
 80015e8:	4613      	mov	r3, r2
 80015ea:	707b      	strb	r3, [r7, #1]
	WriteRegister(address, &value, 1);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	3338      	adds	r3, #56	; 0x38
 80015f2:	681c      	ldr	r4, [r3, #0]
 80015f4:	1c7a      	adds	r2, r7, #1
 80015f6:	8879      	ldrh	r1, [r7, #2]
 80015f8:	2301      	movs	r3, #1
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	47a0      	blx	r4
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	bd90      	pop	{r4, r7, pc}

08001606 <_ZN6SX128x12ReadRegisterEtPht>:

void SX128x::ReadRegister(uint16_t address, uint8_t *buffer, uint16_t size) {
 8001606:	b590      	push	{r4, r7, lr}
 8001608:	b089      	sub	sp, #36	; 0x24
 800160a:	af00      	add	r7, sp, #0
 800160c:	60f8      	str	r0, [r7, #12]
 800160e:	607a      	str	r2, [r7, #4]
 8001610:	461a      	mov	r2, r3
 8001612:	460b      	mov	r3, r1
 8001614:	817b      	strh	r3, [r7, #10]
 8001616:	4613      	mov	r3, r2
 8001618:	813b      	strh	r3, [r7, #8]
	
	auto total_transfer_size = 4+size;
 800161a:	893b      	ldrh	r3, [r7, #8]
 800161c:	3304      	adds	r3, #4
 800161e:	61fb      	str	r3, [r7, #28]
	auto *buf_out = (uint8_t *)alloca(total_transfer_size);
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	3307      	adds	r3, #7
 8001624:	08db      	lsrs	r3, r3, #3
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	ebad 0d03 	sub.w	sp, sp, r3
 800162c:	466b      	mov	r3, sp
 800162e:	3307      	adds	r3, #7
 8001630:	08db      	lsrs	r3, r3, #3
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	61bb      	str	r3, [r7, #24]
	auto *buf_in = (uint8_t *)alloca(total_transfer_size);
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	3307      	adds	r3, #7
 800163a:	08db      	lsrs	r3, r3, #3
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	ebad 0d03 	sub.w	sp, sp, r3
 8001642:	466b      	mov	r3, sp
 8001644:	3307      	adds	r3, #7
 8001646:	08db      	lsrs	r3, r3, #3
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	617b      	str	r3, [r7, #20]

	memset(buf_out, 0, total_transfer_size);
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	461a      	mov	r2, r3
 8001650:	2100      	movs	r1, #0
 8001652:	69b8      	ldr	r0, [r7, #24]
 8001654:	f004 fdcc 	bl	80061f0 <memset>
	buf_out[0] = RADIO_READ_REGISTER;
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	2219      	movs	r2, #25
 800165c:	701a      	strb	r2, [r3, #0]
	buf_out[1] = ((address & 0xFF00) >> 8);
 800165e:	897b      	ldrh	r3, [r7, #10]
 8001660:	0a1b      	lsrs	r3, r3, #8
 8001662:	b29a      	uxth	r2, r3
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	3301      	adds	r3, #1
 8001668:	b2d2      	uxtb	r2, r2
 800166a:	701a      	strb	r2, [r3, #0]
	buf_out[2] = (address & 0x00FF);
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	3302      	adds	r3, #2
 8001670:	897a      	ldrh	r2, [r7, #10]
 8001672:	b2d2      	uxtb	r2, r2
 8001674:	701a      	strb	r2, [r3, #0]

	WaitOnBusy(); // wait until not busy before spi transfer
 8001676:	68f8      	ldr	r0, [r7, #12]
 8001678:	f7ff fe77 	bl	800136a <_ZN6SX128x10WaitOnBusyEv>
	HalSpiTransfer(buf_in, buf_out, total_transfer_size);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	3308      	adds	r3, #8
 8001682:	681c      	ldr	r4, [r3, #0]
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	b29b      	uxth	r3, r3
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	6979      	ldr	r1, [r7, #20]
 800168c:	68f8      	ldr	r0, [r7, #12]
 800168e:	47a0      	blx	r4

	memcpy(buffer, buf_in+4, size);
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	3304      	adds	r3, #4
 8001694:	893a      	ldrh	r2, [r7, #8]
 8001696:	4619      	mov	r1, r3
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f004 fdd7 	bl	800624c <memcpy>
}
 800169e:	bf00      	nop
 80016a0:	3724      	adds	r7, #36	; 0x24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd90      	pop	{r4, r7, pc}

080016a6 <_ZN6SX128x12ReadRegisterEt>:

inline uint8_t SX128x::ReadRegister(uint16_t address) {
 80016a6:	b590      	push	{r4, r7, lr}
 80016a8:	b085      	sub	sp, #20
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
 80016ae:	460b      	mov	r3, r1
 80016b0:	807b      	strh	r3, [r7, #2]
	uint8_t data;
	ReadRegister( address, &data, 1 );
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	3340      	adds	r3, #64	; 0x40
 80016b8:	681c      	ldr	r4, [r3, #0]
 80016ba:	f107 020f 	add.w	r2, r7, #15
 80016be:	8879      	ldrh	r1, [r7, #2]
 80016c0:	2301      	movs	r3, #1
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	47a0      	blx	r4
	return data;
 80016c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3714      	adds	r7, #20
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd90      	pop	{r4, r7, pc}

080016d0 <_ZN6SX128x11WriteBufferEhPhh>:

void SX128x::WriteBuffer(uint8_t offset, uint8_t *buffer, uint8_t size) {
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	607a      	str	r2, [r7, #4]
 80016da:	461a      	mov	r2, r3
 80016dc:	460b      	mov	r3, r1
 80016de:	72fb      	strb	r3, [r7, #11]
 80016e0:	4613      	mov	r3, r2
 80016e2:	72bb      	strb	r3, [r7, #10]
	auto total_transfer_size = 2+size;
 80016e4:	7abb      	ldrb	r3, [r7, #10]
 80016e6:	3302      	adds	r3, #2
 80016e8:	617b      	str	r3, [r7, #20]
	auto *buf_out = (uint8_t *)alloca(total_transfer_size);
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	3307      	adds	r3, #7
 80016ee:	08db      	lsrs	r3, r3, #3
 80016f0:	00db      	lsls	r3, r3, #3
 80016f2:	ebad 0d03 	sub.w	sp, sp, r3
 80016f6:	466b      	mov	r3, sp
 80016f8:	3307      	adds	r3, #7
 80016fa:	08db      	lsrs	r3, r3, #3
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	613b      	str	r3, [r7, #16]

	buf_out[0] = RADIO_WRITE_BUFFER;
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	221a      	movs	r2, #26
 8001704:	701a      	strb	r2, [r3, #0]
	buf_out[1] = offset;
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	3301      	adds	r3, #1
 800170a:	7afa      	ldrb	r2, [r7, #11]
 800170c:	701a      	strb	r2, [r3, #0]

	memcpy(buf_out+2, buffer, size);
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	3302      	adds	r3, #2
 8001712:	7aba      	ldrb	r2, [r7, #10]
 8001714:	6879      	ldr	r1, [r7, #4]
 8001716:	4618      	mov	r0, r3
 8001718:	f004 fd98 	bl	800624c <memcpy>
	
	WaitOnBusy();
 800171c:	68f8      	ldr	r0, [r7, #12]
 800171e:	f7ff fe24 	bl	800136a <_ZN6SX128x10WaitOnBusyEv>
	HalSpiWrite(buf_out, total_transfer_size);
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	b29b      	uxth	r3, r3
 8001726:	461a      	mov	r2, r3
 8001728:	6939      	ldr	r1, [r7, #16]
 800172a:	68f8      	ldr	r0, [r7, #12]
 800172c:	f7ff fddd 	bl	80012ea <_ZN6SX128x11HalSpiWriteEPKht>
}
 8001730:	bf00      	nop
 8001732:	3718      	adds	r7, #24
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <_ZN6SX128x10ReadBufferEhPhh>:

void SX128x::ReadBuffer(uint8_t offset, uint8_t *buffer, uint8_t size) {
 8001738:	b590      	push	{r4, r7, lr}
 800173a:	b089      	sub	sp, #36	; 0x24
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	607a      	str	r2, [r7, #4]
 8001742:	461a      	mov	r2, r3
 8001744:	460b      	mov	r3, r1
 8001746:	72fb      	strb	r3, [r7, #11]
 8001748:	4613      	mov	r3, r2
 800174a:	72bb      	strb	r3, [r7, #10]
	auto total_transfer_size = 3+size;
 800174c:	7abb      	ldrb	r3, [r7, #10]
 800174e:	3303      	adds	r3, #3
 8001750:	61fb      	str	r3, [r7, #28]
	auto *buf_out = (uint8_t *)alloca(total_transfer_size);
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	3307      	adds	r3, #7
 8001756:	08db      	lsrs	r3, r3, #3
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	ebad 0d03 	sub.w	sp, sp, r3
 800175e:	466b      	mov	r3, sp
 8001760:	3307      	adds	r3, #7
 8001762:	08db      	lsrs	r3, r3, #3
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	61bb      	str	r3, [r7, #24]
	auto *buf_in = (uint8_t *)alloca(total_transfer_size);
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	3307      	adds	r3, #7
 800176c:	08db      	lsrs	r3, r3, #3
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	ebad 0d03 	sub.w	sp, sp, r3
 8001774:	466b      	mov	r3, sp
 8001776:	3307      	adds	r3, #7
 8001778:	08db      	lsrs	r3, r3, #3
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	617b      	str	r3, [r7, #20]

	memset(buf_out, 0, total_transfer_size);
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	461a      	mov	r2, r3
 8001782:	2100      	movs	r1, #0
 8001784:	69b8      	ldr	r0, [r7, #24]
 8001786:	f004 fd33 	bl	80061f0 <memset>

	buf_out[0] = RADIO_READ_BUFFER;
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	221b      	movs	r2, #27
 800178e:	701a      	strb	r2, [r3, #0]
	buf_out[1] = offset;
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	3301      	adds	r3, #1
 8001794:	7afa      	ldrb	r2, [r7, #11]
 8001796:	701a      	strb	r2, [r3, #0]

	WaitOnBusy();
 8001798:	68f8      	ldr	r0, [r7, #12]
 800179a:	f7ff fde6 	bl	800136a <_ZN6SX128x10WaitOnBusyEv>
	HalSpiTransfer(buf_in, buf_out, total_transfer_size);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	3308      	adds	r3, #8
 80017a4:	681c      	ldr	r4, [r3, #0]
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	6979      	ldr	r1, [r7, #20]
 80017ae:	68f8      	ldr	r0, [r7, #12]
 80017b0:	47a0      	blx	r4

	memcpy(buffer, buf_in+3, size);
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	3303      	adds	r3, #3
 80017b6:	7aba      	ldrb	r2, [r7, #10]
 80017b8:	4619      	mov	r1, r3
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f004 fd46 	bl	800624c <memcpy>
}
 80017c0:	bf00      	nop
 80017c2:	3724      	adds	r7, #36	; 0x24
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd90      	pop	{r4, r7, pc}

080017c8 <_ZNSt14_Function_baseD1Ev>:
	  { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d005      	beq.n	80017e4 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	2203      	movs	r2, #3
 80017e2:	4798      	blx	r3
    }
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4618      	mov	r0, r3
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
	...

080017f0 <_ZN19SX128x_formal_board11HalGpioReadEN6SX128x17GpioPinFunction_tE>:
}
#elif defined NUCLEO_L476
extern SPI_HandleTypeDef hspi1;

uint8_t SX128x_formal_board::HalGpioRead(GpioPinFunction_t func)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	460b      	mov	r3, r1
 80017fa:	70fb      	strb	r3, [r7, #3]
	switch (func)
 80017fc:	78fb      	ldrb	r3, [r7, #3]
 80017fe:	2b04      	cmp	r3, #4
 8001800:	d820      	bhi.n	8001844 <_ZN19SX128x_formal_board11HalGpioReadEN6SX128x17GpioPinFunction_tE+0x54>
 8001802:	a201      	add	r2, pc, #4	; (adr r2, 8001808 <_ZN19SX128x_formal_board11HalGpioReadEN6SX128x17GpioPinFunction_tE+0x18>)
 8001804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001808:	0800181d 	.word	0x0800181d
 800180c:	08001829 	.word	0x08001829
 8001810:	08001839 	.word	0x08001839
 8001814:	0800183d 	.word	0x0800183d
 8001818:	08001841 	.word	0x08001841
	{
		case GPIO_PIN_RESET:
			return HAL_GPIO_ReadPin(SX1280_RST_GPIO_Port, SX1280_RST_Pin);
 800181c:	2180      	movs	r1, #128	; 0x80
 800181e:	480c      	ldr	r0, [pc, #48]	; (8001850 <_ZN19SX128x_formal_board11HalGpioReadEN6SX128x17GpioPinFunction_tE+0x60>)
 8001820:	f001 fb74 	bl	8002f0c <HAL_GPIO_ReadPin>
 8001824:	4603      	mov	r3, r0
 8001826:	e00e      	b.n	8001846 <_ZN19SX128x_formal_board11HalGpioReadEN6SX128x17GpioPinFunction_tE+0x56>
		case GPIO_PIN_BUSY:
			return HAL_GPIO_ReadPin(SX1280_BUSY_GPIO_Port, SX1280_BUSY_Pin);
 8001828:	f44f 7100 	mov.w	r1, #512	; 0x200
 800182c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001830:	f001 fb6c 	bl	8002f0c <HAL_GPIO_ReadPin>
 8001834:	4603      	mov	r3, r0
 8001836:	e006      	b.n	8001846 <_ZN19SX128x_formal_board11HalGpioReadEN6SX128x17GpioPinFunction_tE+0x56>
		case GPIO_PIN_DIO1:
			return 0;
 8001838:	2300      	movs	r3, #0
 800183a:	e004      	b.n	8001846 <_ZN19SX128x_formal_board11HalGpioReadEN6SX128x17GpioPinFunction_tE+0x56>
		case GPIO_PIN_DIO2:
			return 0;
 800183c:	2300      	movs	r3, #0
 800183e:	e002      	b.n	8001846 <_ZN19SX128x_formal_board11HalGpioReadEN6SX128x17GpioPinFunction_tE+0x56>
		case GPIO_PIN_DIO3:
			return 0;
 8001840:	2300      	movs	r3, #0
 8001842:	e000      	b.n	8001846 <_ZN19SX128x_formal_board11HalGpioReadEN6SX128x17GpioPinFunction_tE+0x56>
		default:
			return 0;
 8001844:	2300      	movs	r3, #0
	}
}
 8001846:	4618      	mov	r0, r3
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	48000800 	.word	0x48000800

08001854 <_ZN19SX128x_formal_board12HalGpioWriteEN6SX128x17GpioPinFunction_tEh>:


void SX128x_formal_board::HalGpioWrite(GpioPinFunction_t func, register uint8_t value)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	4613      	mov	r3, r2
 800185e:	460a      	mov	r2, r1
 8001860:	70fa      	strb	r2, [r7, #3]
	switch (func)
 8001862:	78fa      	ldrb	r2, [r7, #3]
 8001864:	2a04      	cmp	r2, #4
 8001866:	d81b      	bhi.n	80018a0 <_ZN19SX128x_formal_board12HalGpioWriteEN6SX128x17GpioPinFunction_tEh+0x4c>
 8001868:	a101      	add	r1, pc, #4	; (adr r1, 8001870 <_ZN19SX128x_formal_board12HalGpioWriteEN6SX128x17GpioPinFunction_tEh+0x1c>)
 800186a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800186e:	bf00      	nop
 8001870:	08001885 	.word	0x08001885
 8001874:	08001891 	.word	0x08001891
 8001878:	080018a1 	.word	0x080018a1
 800187c:	080018a1 	.word	0x080018a1
 8001880:	080018a1 	.word	0x080018a1
	{
	case GPIO_PIN_RESET:
		HAL_GPIO_WritePin(SX1280_RST_GPIO_Port, SX1280_RST_Pin, (GPIO_PinState)value);
 8001884:	461a      	mov	r2, r3
 8001886:	2180      	movs	r1, #128	; 0x80
 8001888:	4808      	ldr	r0, [pc, #32]	; (80018ac <_ZN19SX128x_formal_board12HalGpioWriteEN6SX128x17GpioPinFunction_tEh+0x58>)
 800188a:	f001 fb57 	bl	8002f3c <HAL_GPIO_WritePin>
		break;
 800188e:	e008      	b.n	80018a2 <_ZN19SX128x_formal_board12HalGpioWriteEN6SX128x17GpioPinFunction_tEh+0x4e>
	case GPIO_PIN_BUSY:
		HAL_GPIO_WritePin(SX1280_BUSY_GPIO_Port, SX1280_BUSY_Pin, (GPIO_PinState)value);
 8001890:	461a      	mov	r2, r3
 8001892:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001896:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800189a:	f001 fb4f 	bl	8002f3c <HAL_GPIO_WritePin>
		break;
 800189e:	e000      	b.n	80018a2 <_ZN19SX128x_formal_board12HalGpioWriteEN6SX128x17GpioPinFunction_tEh+0x4e>
	case GPIO_PIN_DIO2:
		break;
	case GPIO_PIN_DIO3:
		break;
	default:
		break;
 80018a0:	bf00      	nop
	}
}
 80018a2:	bf00      	nop
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	48000800 	.word	0x48000800

080018b0 <_ZN19SX128x_formal_board14HalSpiTransferEPhPKht>:

void SX128x_formal_board::HalSpiTransfer(uint8_t *buffer_in, const uint8_t *buffer_out, uint16_t size)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af02      	add	r7, sp, #8
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
 80018bc:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(SX1280_NSS_GPIO_Port, SX1280_NSS_Pin, (GPIO_PinState)0);
 80018be:	2200      	movs	r2, #0
 80018c0:	2140      	movs	r1, #64	; 0x40
 80018c2:	480a      	ldr	r0, [pc, #40]	; (80018ec <_ZN19SX128x_formal_board14HalSpiTransferEPhPKht+0x3c>)
 80018c4:	f001 fb3a 	bl	8002f3c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)buffer_out, buffer_in, size, 1);
 80018c8:	887b      	ldrh	r3, [r7, #2]
 80018ca:	2201      	movs	r2, #1
 80018cc:	9200      	str	r2, [sp, #0]
 80018ce:	68ba      	ldr	r2, [r7, #8]
 80018d0:	6879      	ldr	r1, [r7, #4]
 80018d2:	4807      	ldr	r0, [pc, #28]	; (80018f0 <_ZN19SX128x_formal_board14HalSpiTransferEPhPKht+0x40>)
 80018d4:	f002 ff31 	bl	800473a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SX1280_NSS_GPIO_Port, SX1280_NSS_Pin, (GPIO_PinState)1);
 80018d8:	2201      	movs	r2, #1
 80018da:	2140      	movs	r1, #64	; 0x40
 80018dc:	4803      	ldr	r0, [pc, #12]	; (80018ec <_ZN19SX128x_formal_board14HalSpiTransferEPhPKht+0x3c>)
 80018de:	f001 fb2d 	bl	8002f3c <HAL_GPIO_WritePin>
}
 80018e2:	bf00      	nop
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	48000400 	.word	0x48000400
 80018f0:	2000007c 	.word	0x2000007c

080018f4 <_ZN19SX128x_formal_board19HalSpiTransferDelayEPhPKht>:

void SX128x_formal_board::HalSpiTransferDelay(uint8_t *buffer_in, const uint8_t *buffer_out, uint16_t size)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af02      	add	r7, sp, #8
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
 8001900:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(SX1280_NSS_GPIO_Port, SX1280_NSS_Pin, (GPIO_PinState)0);
 8001902:	2200      	movs	r2, #0
 8001904:	2140      	movs	r1, #64	; 0x40
 8001906:	480b      	ldr	r0, [pc, #44]	; (8001934 <_ZN19SX128x_formal_board19HalSpiTransferDelayEPhPKht+0x40>)
 8001908:	f001 fb18 	bl	8002f3c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800190c:	200a      	movs	r0, #10
 800190e:	f001 f81d 	bl	800294c <HAL_Delay>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)buffer_out, buffer_in, size, 1);
 8001912:	887b      	ldrh	r3, [r7, #2]
 8001914:	2201      	movs	r2, #1
 8001916:	9200      	str	r2, [sp, #0]
 8001918:	68ba      	ldr	r2, [r7, #8]
 800191a:	6879      	ldr	r1, [r7, #4]
 800191c:	4806      	ldr	r0, [pc, #24]	; (8001938 <_ZN19SX128x_formal_board19HalSpiTransferDelayEPhPKht+0x44>)
 800191e:	f002 ff0c 	bl	800473a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SX1280_NSS_GPIO_Port, SX1280_NSS_Pin, (GPIO_PinState)1);
 8001922:	2201      	movs	r2, #1
 8001924:	2140      	movs	r1, #64	; 0x40
 8001926:	4803      	ldr	r0, [pc, #12]	; (8001934 <_ZN19SX128x_formal_board19HalSpiTransferDelayEPhPKht+0x40>)
 8001928:	f001 fb08 	bl	8002f3c <HAL_GPIO_WritePin>
}
 800192c:	bf00      	nop
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	48000400 	.word	0x48000400
 8001938:	2000007c 	.word	0x2000007c

0800193c <_ZNSt8functionIFvvEED1Ev>:
   *  @brief Polymorphic function wrapper.
   *  @ingroup functors
   *  @since C++11
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff ff3e 	bl	80017c8 <_ZNSt14_Function_baseD1Ev>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4618      	mov	r0, r3
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <_ZNSt8functionIFvN6SX128x14IrqErrorCode_tEEED1Ev>:
 8001956:	b580      	push	{r7, lr}
 8001958:	b082      	sub	sp, #8
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff ff31 	bl	80017c8 <_ZNSt14_Function_baseD1Ev>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4618      	mov	r0, r3
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <_ZNSt8functionIFvN6SX128x16IrqRangingCode_tEEED1Ev>:
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff ff24 	bl	80017c8 <_ZNSt14_Function_baseD1Ev>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <_ZNSt8functionIFvbEED1Ev>:
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff ff17 	bl	80017c8 <_ZNSt14_Function_baseD1Ev>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4618      	mov	r0, r3
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <_ZN6SX128xUt0_D1Ev>:
	struct {
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3380      	adds	r3, #128	; 0x80
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff ffea 	bl	800198a <_ZNSt8functionIFvbEED1Ev>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	3370      	adds	r3, #112	; 0x70
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff ffd8 	bl	8001970 <_ZNSt8functionIFvN6SX128x16IrqRangingCode_tEEED1Ev>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	3360      	adds	r3, #96	; 0x60
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff ffc6 	bl	8001956 <_ZNSt8functionIFvN6SX128x14IrqErrorCode_tEEED1Ev>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	3350      	adds	r3, #80	; 0x50
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff ffb4 	bl	800193c <_ZNSt8functionIFvvEED1Ev>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3340      	adds	r3, #64	; 0x40
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff ffaf 	bl	800193c <_ZNSt8functionIFvvEED1Ev>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	3330      	adds	r3, #48	; 0x30
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff ffaa 	bl	800193c <_ZNSt8functionIFvvEED1Ev>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3320      	adds	r3, #32
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff ffa5 	bl	800193c <_ZNSt8functionIFvvEED1Ev>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	3310      	adds	r3, #16
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff ffa0 	bl	800193c <_ZNSt8functionIFvvEED1Ev>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff ff9c 	bl	800193c <_ZNSt8functionIFvvEED1Ev>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
	...

08001a10 <_ZN6SX128xD1Ev>:
	virtual ~SX128x() = default;
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	4a06      	ldr	r2, [pc, #24]	; (8001a34 <_ZN6SX128xD1Ev+0x24>)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	3318      	adds	r3, #24
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff ffbe 	bl	80019a4 <_ZN6SX128xUt0_D1Ev>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	08006328 	.word	0x08006328

08001a38 <_ZN6SX128xD0Ev>:
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f7ff ffe5 	bl	8001a10 <_ZN6SX128xD1Ev>
 8001a46:	21d0      	movs	r1, #208	; 0xd0
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f004 fbb8 	bl	80061be <_ZdlPvj>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4618      	mov	r0, r3
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <_ZN19SX128x_formal_boardD1Ev>:

#define PACKET_SIZE 8
#define FIFO_SIZE 8
#define IS_TX

class SX128x_formal_board : public SX128x
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	4a05      	ldr	r2, [pc, #20]	; (8001a78 <_ZN19SX128x_formal_boardD1Ev+0x20>)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff ffd1 	bl	8001a10 <_ZN6SX128xD1Ev>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4618      	mov	r0, r3
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	0800638c 	.word	0x0800638c

08001a7c <_ZN19SX128x_formal_boardD0Ev>:
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7ff ffe7 	bl	8001a58 <_ZN19SX128x_formal_boardD1Ev>
 8001a8a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f004 fb95 	bl	80061be <_ZdlPvj>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4618      	mov	r0, r3
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <_ZN19SX128x_formal_board24CommonTransceiverSettingEv>:

extern TIM_HandleTypeDef htim1;
extern int irq_timeout_times;

void SX128x_formal_board::CommonTransceiverSetting()
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b082      	sub	sp, #8
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
    SetStandby((RadioStandbyModes_t)MODE_STDBY_XOSC);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2103      	movs	r1, #3
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff f96f 	bl	8000d8e <_ZN6SX128x10SetStandbyENS_19RadioStandbyModes_tE>
    SetPacketType(PACKET_TYPE_LORA);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2101      	movs	r1, #1
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff f9bb 	bl	8000e30 <_ZN6SX128x13SetPacketTypeENS_18RadioPacketTypes_tE>
    SetRfFrequency(RfFrequency);
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4610      	mov	r0, r2
 8001ac6:	f7ff f9ca 	bl	8000e5e <_ZN6SX128x14SetRfFrequencyEm>
    SetBufferBaseAddresses(0x80, 0x00);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	2180      	movs	r1, #128	; 0x80
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff fa10 	bl	8000ef6 <_ZN6SX128x22SetBufferBaseAddressesEhh>
    SetModulationParams(mparams);
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	f7ff fa23 	bl	8000f2c <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE>
    SetPacketParams(pparams);
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f203 132d 	addw	r3, r3, #301	; 0x12d
 8001aee:	4619      	mov	r1, r3
 8001af0:	4610      	mov	r0, r2
 8001af2:	f7ff faa3 	bl	800103c <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE>
}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <_ZN19SX128x_formal_board9TxSettingEv>:

void SX128x_formal_board::TxSetting()
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b084      	sub	sp, #16
 8001b02:	af02      	add	r7, sp, #8
 8001b04:	6078      	str	r0, [r7, #4]
	SetTxParams(13, RADIO_RAMP_02_US);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	210d      	movs	r1, #13
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff f9d6 	bl	8000ebe <_ZN6SX128x11SetTxParamsEaNS_16RadioRampTimes_tE>
	InterruptSetting();
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 f80e 	bl	8001b34 <_ZN19SX128x_formal_board16InterruptSettingEv>
	SetDioIrqParams(0xFFFF, 0xFFFF, 0x0000, 0x0000);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	9300      	str	r3, [sp, #0]
 8001b1e:	2300      	movs	r3, #0
 8001b20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b24:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b28:	f7ff fb40 	bl	80011ac <_ZN6SX128x15SetDioIrqParamsEtttt>
}
 8001b2c:	bf00      	nop
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <_ZN19SX128x_formal_board16InterruptSettingEv>:
	ClearIrqStatus(0xFFFF);
	return 0;
}

inline void SX128x_formal_board::InterruptSetting()
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af02      	add	r7, sp, #8
 8001b3a:	6078      	str	r0, [r7, #4]
	SetDioIrqParams(0x0003, 0x0003, 0x0000, 0x0000);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	2300      	movs	r3, #0
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	2300      	movs	r3, #0
 8001b44:	2203      	movs	r2, #3
 8001b46:	2103      	movs	r1, #3
 8001b48:	f7ff fb30 	bl	80011ac <_ZN6SX128x15SetDioIrqParamsEtttt>
}
 8001b4c:	bf00      	nop
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <_ZN19SX128x_formal_board4InitEv>:
{
	ClearIrqStatus(0xFFFF);
}

uint8_t SX128x_formal_board::Init()
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
	Reset();
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	3328      	adds	r3, #40	; 0x28
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4610      	mov	r0, r2
 8001b68:	4798      	blx	r3
	// Wakeup();
	// SetRegistersDefault();

	uint8_t rx[2], tx[2];
	*(uint32_t*)tx = 0x80 | 0x01 << 8;
 8001b6a:	f107 0310 	add.w	r3, r7, #16
 8001b6e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001b72:	601a      	str	r2, [r3, #0]
	HalSpiTransferDelay(rx, tx, 2);
 8001b74:	f107 0210 	add.w	r2, r7, #16
 8001b78:	f107 0114 	add.w	r1, r7, #20
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7ff feb8 	bl	80018f4 <_ZN19SX128x_formal_board19HalSpiTransferDelayEPhPKht>
	RadioStatus_t status;
	status = GetStatus();
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	3358      	adds	r3, #88	; 0x58
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4610      	mov	r0, r2
 8001b90:	4798      	blx	r3
 8001b92:	4603      	mov	r3, r0
 8001b94:	733b      	strb	r3, [r7, #12]
	if(status.Fields.CmdStatus != 0x01)
 8001b96:	7b3b      	ldrb	r3, [r7, #12]
 8001b98:	f003 031c 	and.w	r3, r3, #28
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	d001      	beq.n	8001ba6 <_ZN19SX128x_formal_board4InitEv+0x52>
		return 1;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e00b      	b.n	8001bbe <_ZN19SX128x_formal_board4InitEv+0x6a>
	if(status.Fields.ChipMode != 0x03)
 8001ba6:	7b3b      	ldrb	r3, [r7, #12]
 8001ba8:	f023 031f 	bic.w	r3, r3, #31
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b60      	cmp	r3, #96	; 0x60
 8001bb0:	d001      	beq.n	8001bb6 <_ZN19SX128x_formal_board4InitEv+0x62>
		return 1;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e003      	b.n	8001bbe <_ZN19SX128x_formal_board4InitEv+0x6a>

	CommonTransceiverSetting();
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7ff ff71 	bl	8001a9e <_ZN19SX128x_formal_board24CommonTransceiverSettingEv>
	return 0;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3718      	adds	r7, #24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <_ZN6SX128xUt0_C1Ev>:
	struct {
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b082      	sub	sp, #8
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f000 f982 	bl	8001eda <_ZNSt8functionIFvvEEC1Ev>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	3310      	adds	r3, #16
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f000 f97d 	bl	8001eda <_ZNSt8functionIFvvEEC1Ev>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	3320      	adds	r3, #32
 8001be4:	4618      	mov	r0, r3
 8001be6:	f000 f978 	bl	8001eda <_ZNSt8functionIFvvEEC1Ev>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	3330      	adds	r3, #48	; 0x30
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f000 f973 	bl	8001eda <_ZNSt8functionIFvvEEC1Ev>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3340      	adds	r3, #64	; 0x40
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f000 f96e 	bl	8001eda <_ZNSt8functionIFvvEEC1Ev>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	3350      	adds	r3, #80	; 0x50
 8001c02:	4618      	mov	r0, r3
 8001c04:	f000 f969 	bl	8001eda <_ZNSt8functionIFvvEEC1Ev>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3360      	adds	r3, #96	; 0x60
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f000 f97a 	bl	8001f06 <_ZNSt8functionIFvN6SX128x14IrqErrorCode_tEEEC1Ev>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	3370      	adds	r3, #112	; 0x70
 8001c16:	4618      	mov	r0, r3
 8001c18:	f000 f98b 	bl	8001f32 <_ZNSt8functionIFvN6SX128x16IrqRangingCode_tEEEC1Ev>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3380      	adds	r3, #128	; 0x80
 8001c20:	4618      	mov	r0, r3
 8001c22:	f000 f99c 	bl	8001f5e <_ZNSt8functionIFvbEEC1Ev>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <_ZN6SX128xC1Ev>:
	SX128x() = default;
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	4a1f      	ldr	r2, [pc, #124]	; (8001cb8 <_ZN6SX128xC1Ev+0x88>)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	6879      	ldr	r1, [r7, #4]
 8001c40:	a31b      	add	r3, pc, #108	; (adr r3, 8001cb0 <_ZN6SX128xC1Ev+0x80>)
 8001c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c46:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	741a      	strb	r2, [r3, #16]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c56:	825a      	strh	r2, [r3, #18]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	751a      	strb	r2, [r3, #20]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	82da      	strh	r2, [r3, #22]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3318      	adds	r3, #24
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff ffac 	bl	8001bc6 <_ZN6SX128xUt0_C1Ev>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2202      	movs	r2, #2
 8001c72:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	220f      	movs	r2, #15
 8001c7a:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	220a      	movs	r2, #10
 8001c82:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	33ab      	adds	r3, #171	; 0xab
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	605a      	str	r2, [r3, #4]
 8001c90:	609a      	str	r2, [r3, #8]
 8001c92:	731a      	strb	r2, [r3, #12]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	33b8      	adds	r3, #184	; 0xb8
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
 8001ca2:	611a      	str	r2, [r3, #16]
 8001ca4:	615a      	str	r2, [r3, #20]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	00000000 	.word	0x00000000
 8001cb4:	4068cba8 	.word	0x4068cba8
 8001cb8:	08006328 	.word	0x08006328

08001cbc <_ZN19SX128x_formal_boardC1Ev>:

SX128x_formal_board::SX128x_formal_board()
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff ffb2 	bl	8001c30 <_ZN6SX128xC1Ev>
 8001ccc:	4a27      	ldr	r2, [pc, #156]	; (8001d6c <_ZN19SX128x_formal_boardC1Ev+0xb0>)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	33d0      	adds	r3, #208	; 0xd0
 8001cd6:	2240      	movs	r2, #64	; 0x40
 8001cd8:	2100      	movs	r1, #0
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f004 fa88 	bl	80061f0 <memset>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a19      	ldr	r2, [pc, #100]	; (8001d70 <_ZN19SX128x_formal_boardC1Ev+0xb4>)
 8001d0c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
{
	mparams.PacketType = PACKET_TYPE_LORA;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
    mparams.Params.LoRa.SpreadingFactor = LORA_SF7;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2270      	movs	r2, #112	; 0x70
 8001d1c:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
	mparams.Params.LoRa.Bandwidth = LORA_BW_0800;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2218      	movs	r2, #24
 8001d24:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
	mparams.Params.LoRa.CodingRate = LORA_CR_4_5;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126

	pparams.PacketType = PACKET_TYPE_LORA;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
	pparams.Params.LoRa.HeaderType = LORA_PACKET_FIXED_LENGTH;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2280      	movs	r2, #128	; 0x80
 8001d3c:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
	pparams.Params.LoRa.InvertIQ = LORA_IQ_NORMAL;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2240      	movs	r2, #64	; 0x40
 8001d44:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
	pparams.Params.LoRa.Crc = LORA_CRC_ON;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2220      	movs	r2, #32
 8001d4c:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	pparams.Params.LoRa.PayloadLength = PACKET_SIZE;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2208      	movs	r2, #8
 8001d54:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
	pparams.Params.LoRa.PreambleLength = 12;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	220c      	movs	r2, #12
 8001d5c:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135

//	callbacks.txDone = &tx_recursion();
	
}
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4618      	mov	r0, r3
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	0800638c 	.word	0x0800638c
 8001d70:	8f0d1800 	.word	0x8f0d1800

08001d74 <_ZN19SX128x_formal_board9PutPacketEPh>:

uint8_t SX128x_formal_board::PutPacket(uint8_t* in)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af02      	add	r7, sp, #8
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]

	if(tx_length == 8) {
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f993 3118 	ldrsb.w	r3, [r3, #280]	; 0x118
 8001d84:	2b08      	cmp	r3, #8
 8001d86:	d101      	bne.n	8001d8c <_ZN19SX128x_formal_board9PutPacketEPh+0x18>
		return 1;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e045      	b.n	8001e18 <_ZN19SX128x_formal_board9PutPacketEPh+0xa4>
	} else {
		*(uint32_t*)tx_eprt = *(uint32_t*)in;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	6812      	ldr	r2, [r2, #0]
 8001d96:	601a      	str	r2, [r3, #0]
		*(uint32_t*)(tx_eprt+4) = *(uint32_t*)(in+4);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001d9e:	3304      	adds	r3, #4
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	6852      	ldr	r2, [r2, #4]
 8001da4:	601a      	str	r2, [r3, #0]
		if(tx_eprt == tx_fifo[7])
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d106      	bne.n	8001dc4 <_ZN19SX128x_formal_board9PutPacketEPh+0x50>
		{
			tx_eprt = tx_fifo[0];
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8001dc2:	e007      	b.n	8001dd4 <_ZN19SX128x_formal_board9PutPacketEPh+0x60>
		}
		else
		{
			tx_eprt += 8;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001dca:	f103 0208 	add.w	r2, r3, #8
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		}
		tx_length ++;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f993 3118 	ldrsb.w	r3, [r3, #280]	; 0x118
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	3301      	adds	r3, #1
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	b25a      	sxtb	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
		if(!tx_activated)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d111      	bne.n	8001e16 <_ZN19SX128x_formal_board9PutPacketEPh+0xa2>
		{
			TickTime_t t;
			t.PeriodBase = RADIO_TICK_SIZE_0015_US;
 8001df2:	2300      	movs	r3, #0
 8001df4:	733b      	strb	r3, [r7, #12]
			t.PeriodBaseCount = 0;
 8001df6:	2300      	movs	r3, #0
 8001df8:	81fb      	strh	r3, [r7, #14]
			tx_activated = 1;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
			SendPayload(tx_sprt, 8, t, 0x80);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 8001e0a:	2380      	movs	r3, #128	; 0x80
 8001e0c:	9300      	str	r3, [sp, #0]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2208      	movs	r2, #8
 8001e12:	f7ff fa54 	bl	80012be <_ZN6SX128x11SendPayloadEPhhNS_10TickTime_sEh>
		}
	}
	return 0;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <_ZN19SX128x_formal_board12tx_recursionEv>:
{
	return tx_length;
}

void SX128x_formal_board::tx_recursion()
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af02      	add	r7, sp, #8
 8001e26:	6078      	str	r0, [r7, #4]

	uint16_t irqRegs = GetIrqStatus();
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff f9f9 	bl	8001222 <_ZN6SX128x12GetIrqStatusEv>
 8001e30:	4603      	mov	r3, r0
 8001e32:	81fb      	strh	r3, [r7, #14]
	if(!(irqRegs|IRQ_TX_DONE))
		return;
	ClearIrqStatus(IRQ_TX_DONE);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2101      	movs	r1, #1
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff fa0c 	bl	8001256 <_ZN6SX128x14ClearIrqStatusEt>
	if(tx_sprt == tx_fifo[7])
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d106      	bne.n	8001e5c <_ZN19SX128x_formal_board12tx_recursionEv+0x3c>
	{
		tx_sprt = tx_fifo[0];
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 8001e5a:	e006      	b.n	8001e6a <_ZN19SX128x_formal_board12tx_recursionEv+0x4a>
	}
	else
	{
		tx_sprt += 4;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8001e62:	1d1a      	adds	r2, r3, #4
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	}
	tx_length--;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f993 3118 	ldrsb.w	r3, [r3, #280]	; 0x118
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	3b01      	subs	r3, #1
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	b25a      	sxtb	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
	if(tx_length >= 0)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f993 3118 	ldrsb.w	r3, [r3, #280]	; 0x118
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	db04      	blt.n	8001e92 <_ZN19SX128x_formal_board12tx_recursionEv+0x72>
	{
		tx_activated = 0;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
 8001e90:	e00d      	b.n	8001eae <_ZN19SX128x_formal_board12tx_recursionEv+0x8e>
		return;
	}
	TickTime_t t;
	t.PeriodBase = RADIO_TICK_SIZE_0015_US;
 8001e92:	2300      	movs	r3, #0
 8001e94:	723b      	strb	r3, [r7, #8]
	t.PeriodBaseCount = 0;
 8001e96:	2300      	movs	r3, #0
 8001e98:	817b      	strh	r3, [r7, #10]
	SendPayload(tx_sprt, 8, t, 0x80);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 8001ea2:	2380      	movs	r3, #128	; 0x80
 8001ea4:	9300      	str	r3, [sp, #0]
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	2208      	movs	r2, #8
 8001eaa:	f7ff fa08 	bl	80012be <_ZN6SX128x11SendPayloadEPhhNS_10TickTime_sEh>

}
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <_ZNSt14_Function_baseC1Ev>:
    _Function_base() = default;
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	6013      	str	r3, [r2, #0]
 8001ec4:	6053      	str	r3, [r2, #4]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	609a      	str	r2, [r3, #8]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <_ZNSt8functionIFvvEEC1Ev>:

      /**
       *  @brief Default construct creates an empty function call wrapper.
       *  @post `!(bool)*this`
       */
      function() noexcept
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	6013      	str	r3, [r2, #0]
 8001eea:	6053      	str	r3, [r2, #4]
 8001eec:	6093      	str	r3, [r2, #8]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff ffdf 	bl	8001eb4 <_ZNSt14_Function_baseC1Ev>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	60da      	str	r2, [r3, #12]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <_ZNSt8functionIFvN6SX128x14IrqErrorCode_tEEEC1Ev>:
      function() noexcept
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	461a      	mov	r2, r3
 8001f12:	2300      	movs	r3, #0
 8001f14:	6013      	str	r3, [r2, #0]
 8001f16:	6053      	str	r3, [r2, #4]
 8001f18:	6093      	str	r3, [r2, #8]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff ffc9 	bl	8001eb4 <_ZNSt14_Function_baseC1Ev>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	60da      	str	r2, [r3, #12]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <_ZNSt8functionIFvN6SX128x16IrqRangingCode_tEEEC1Ev>:
      function() noexcept
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b082      	sub	sp, #8
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	2300      	movs	r3, #0
 8001f40:	6013      	str	r3, [r2, #0]
 8001f42:	6053      	str	r3, [r2, #4]
 8001f44:	6093      	str	r3, [r2, #8]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff ffb3 	bl	8001eb4 <_ZNSt14_Function_baseC1Ev>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	60da      	str	r2, [r3, #12]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4618      	mov	r0, r3
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <_ZNSt8functionIFvbEEC1Ev>:
      function() noexcept
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b082      	sub	sp, #8
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	461a      	mov	r2, r3
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	6013      	str	r3, [r2, #0]
 8001f6e:	6053      	str	r3, [r2, #4]
 8001f70:	6093      	str	r3, [r2, #8]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff ff9d 	bl	8001eb4 <_ZNSt14_Function_baseC1Ev>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	60da      	str	r2, [r3, #12]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4618      	mov	r0, r3
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
	...

08001f8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f92:	f000 fc5f 	bl	8002854 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f96:	f000 f87b 	bl	8002090 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f9a:	f000 fa0d 	bl	80023b8 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8001f9e:	f000 f9d7 	bl	8002350 <_ZL19MX_USART2_UART_Initv>
  MX_SPI1_Init();
 8001fa2:	f000 f8d5 	bl	8002150 <_ZL12MX_SPI1_Initv>
  MX_TIM1_Init();
 8001fa6:	f000 f915 	bl	80021d4 <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 8001faa:	f000 f975 	bl	8002298 <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */

  uint8_t test_packet[8] = {1, 2, 3, 4, 5, 6, 7, 8};
 8001fae:	4a34      	ldr	r2, [pc, #208]	; (8002080 <main+0xf4>)
 8001fb0:	1d3b      	adds	r3, r7, #4
 8001fb2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001fb6:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t rx;

  rx = a.Init();
 8001fba:	4832      	ldr	r0, [pc, #200]	; (8002084 <main+0xf8>)
 8001fbc:	f7ff fdca 	bl	8001b54 <_ZN19SX128x_formal_board4InitEv>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	73fb      	strb	r3, [r7, #15]

  HAL_TIM_Base_Start_IT(&htim2);
 8001fc4:	4830      	ldr	r0, [pc, #192]	; (8002088 <main+0xfc>)
 8001fc6:	f002 ff97 	bl	8004ef8 <HAL_TIM_Base_Start_IT>

  a.TxSetting();
 8001fca:	482e      	ldr	r0, [pc, #184]	; (8002084 <main+0xf8>)
 8001fcc:	f7ff fd97 	bl	8001afe <_ZN19SX128x_formal_board9TxSettingEv>
  rx = a.PutPacket(test_packet); //1
 8001fd0:	1d3b      	adds	r3, r7, #4
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	482b      	ldr	r0, [pc, #172]	; (8002084 <main+0xf8>)
 8001fd6:	f7ff fecd 	bl	8001d74 <_ZN19SX128x_formal_board9PutPacketEPh>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	73fb      	strb	r3, [r7, #15]
  rx = a.PutPacket(test_packet); //2
 8001fde:	1d3b      	adds	r3, r7, #4
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4828      	ldr	r0, [pc, #160]	; (8002084 <main+0xf8>)
 8001fe4:	f7ff fec6 	bl	8001d74 <_ZN19SX128x_formal_board9PutPacketEPh>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	73fb      	strb	r3, [r7, #15]
  rx = a.PutPacket(test_packet); //3
 8001fec:	1d3b      	adds	r3, r7, #4
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4824      	ldr	r0, [pc, #144]	; (8002084 <main+0xf8>)
 8001ff2:	f7ff febf 	bl	8001d74 <_ZN19SX128x_formal_board9PutPacketEPh>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	73fb      	strb	r3, [r7, #15]
  rx = a.PutPacket(test_packet); //4
 8001ffa:	1d3b      	adds	r3, r7, #4
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4821      	ldr	r0, [pc, #132]	; (8002084 <main+0xf8>)
 8002000:	f7ff feb8 	bl	8001d74 <_ZN19SX128x_formal_board9PutPacketEPh>
 8002004:	4603      	mov	r3, r0
 8002006:	73fb      	strb	r3, [r7, #15]
  rx = a.PutPacket(test_packet); //5
 8002008:	1d3b      	adds	r3, r7, #4
 800200a:	4619      	mov	r1, r3
 800200c:	481d      	ldr	r0, [pc, #116]	; (8002084 <main+0xf8>)
 800200e:	f7ff feb1 	bl	8001d74 <_ZN19SX128x_formal_board9PutPacketEPh>
 8002012:	4603      	mov	r3, r0
 8002014:	73fb      	strb	r3, [r7, #15]
  rx = a.PutPacket(test_packet); //6
 8002016:	1d3b      	adds	r3, r7, #4
 8002018:	4619      	mov	r1, r3
 800201a:	481a      	ldr	r0, [pc, #104]	; (8002084 <main+0xf8>)
 800201c:	f7ff feaa 	bl	8001d74 <_ZN19SX128x_formal_board9PutPacketEPh>
 8002020:	4603      	mov	r3, r0
 8002022:	73fb      	strb	r3, [r7, #15]
  rx = a.PutPacket(test_packet); //7
 8002024:	1d3b      	adds	r3, r7, #4
 8002026:	4619      	mov	r1, r3
 8002028:	4816      	ldr	r0, [pc, #88]	; (8002084 <main+0xf8>)
 800202a:	f7ff fea3 	bl	8001d74 <_ZN19SX128x_formal_board9PutPacketEPh>
 800202e:	4603      	mov	r3, r0
 8002030:	73fb      	strb	r3, [r7, #15]
  rx = a.PutPacket(test_packet); //8
 8002032:	1d3b      	adds	r3, r7, #4
 8002034:	4619      	mov	r1, r3
 8002036:	4813      	ldr	r0, [pc, #76]	; (8002084 <main+0xf8>)
 8002038:	f7ff fe9c 	bl	8001d74 <_ZN19SX128x_formal_board9PutPacketEPh>
 800203c:	4603      	mov	r3, r0
 800203e:	73fb      	strb	r3, [r7, #15]
  rx = a.PutPacket(test_packet); //9
 8002040:	1d3b      	adds	r3, r7, #4
 8002042:	4619      	mov	r1, r3
 8002044:	480f      	ldr	r0, [pc, #60]	; (8002084 <main+0xf8>)
 8002046:	f7ff fe95 	bl	8001d74 <_ZN19SX128x_formal_board9PutPacketEPh>
 800204a:	4603      	mov	r3, r0
 800204c:	73fb      	strb	r3, [r7, #15]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while(a.PutPacket(test_packet));
 800204e:	bf00      	nop
 8002050:	1d3b      	adds	r3, r7, #4
 8002052:	4619      	mov	r1, r3
 8002054:	480b      	ldr	r0, [pc, #44]	; (8002084 <main+0xf8>)
 8002056:	f7ff fe8d 	bl	8001d74 <_ZN19SX128x_formal_board9PutPacketEPh>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	bf14      	ite	ne
 8002060:	2301      	movne	r3, #1
 8002062:	2300      	moveq	r3, #0
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1f2      	bne.n	8002050 <main+0xc4>
	  times++;
 800206a:	4b08      	ldr	r3, [pc, #32]	; (800208c <main+0x100>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	3301      	adds	r3, #1
 8002070:	4a06      	ldr	r2, [pc, #24]	; (800208c <main+0x100>)
 8002072:	6013      	str	r3, [r2, #0]
	  uint16_t temp;
	  temp = a.GetIrqStatus();
 8002074:	4803      	ldr	r0, [pc, #12]	; (8002084 <main+0xf8>)
 8002076:	f7ff f8d4 	bl	8001222 <_ZN6SX128x12GetIrqStatusEv>
 800207a:	4603      	mov	r3, r0
 800207c:	81bb      	strh	r3, [r7, #12]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 800207e:	e7e6      	b.n	800204e <main+0xc2>
 8002080:	08006318 	.word	0x08006318
 8002084:	20000200 	.word	0x20000200
 8002088:	2000012c 	.word	0x2000012c
 800208c:	20000348 	.word	0x20000348

08002090 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b096      	sub	sp, #88	; 0x58
 8002094:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002096:	f107 0314 	add.w	r3, r7, #20
 800209a:	2244      	movs	r2, #68	; 0x44
 800209c:	2100      	movs	r1, #0
 800209e:	4618      	mov	r0, r3
 80020a0:	f004 f8a6 	bl	80061f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020a4:	463b      	mov	r3, r7
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	605a      	str	r2, [r3, #4]
 80020ac:	609a      	str	r2, [r3, #8]
 80020ae:	60da      	str	r2, [r3, #12]
 80020b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80020b2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80020b6:	f000 ff8b 	bl	8002fd0 <HAL_PWREx_ControlVoltageScaling>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	bf14      	ite	ne
 80020c0:	2301      	movne	r3, #1
 80020c2:	2300      	moveq	r3, #0
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 80020ca:	f000 fa13 	bl	80024f4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80020ce:	2302      	movs	r3, #2
 80020d0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020d8:	2310      	movs	r3, #16
 80020da:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020dc:	2302      	movs	r3, #2
 80020de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80020e0:	2302      	movs	r3, #2
 80020e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80020e4:	2301      	movs	r3, #1
 80020e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80020e8:	230a      	movs	r3, #10
 80020ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80020ec:	2307      	movs	r3, #7
 80020ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80020f0:	2302      	movs	r3, #2
 80020f2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80020f4:	2302      	movs	r3, #2
 80020f6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020f8:	f107 0314 	add.w	r3, r7, #20
 80020fc:	4618      	mov	r0, r3
 80020fe:	f000 ffbd 	bl	800307c <HAL_RCC_OscConfig>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	bf14      	ite	ne
 8002108:	2301      	movne	r3, #1
 800210a:	2300      	moveq	r3, #0
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <_Z18SystemClock_Configv+0x86>
  {
    Error_Handler();
 8002112:	f000 f9ef 	bl	80024f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002116:	230f      	movs	r3, #15
 8002118:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800211a:	2303      	movs	r3, #3
 800211c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800211e:	2300      	movs	r3, #0
 8002120:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002122:	2300      	movs	r3, #0
 8002124:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002126:	2300      	movs	r3, #0
 8002128:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800212a:	463b      	mov	r3, r7
 800212c:	2104      	movs	r1, #4
 800212e:	4618      	mov	r0, r3
 8002130:	f001 fb80 	bl	8003834 <HAL_RCC_ClockConfig>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	bf14      	ite	ne
 800213a:	2301      	movne	r3, #1
 800213c:	2300      	moveq	r3, #0
 800213e:	b2db      	uxtb	r3, r3
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <_Z18SystemClock_Configv+0xb8>
  {
    Error_Handler();
 8002144:	f000 f9d6 	bl	80024f4 <Error_Handler>
  }
}
 8002148:	bf00      	nop
 800214a:	3758      	adds	r7, #88	; 0x58
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002154:	4b1d      	ldr	r3, [pc, #116]	; (80021cc <_ZL12MX_SPI1_Initv+0x7c>)
 8002156:	4a1e      	ldr	r2, [pc, #120]	; (80021d0 <_ZL12MX_SPI1_Initv+0x80>)
 8002158:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800215a:	4b1c      	ldr	r3, [pc, #112]	; (80021cc <_ZL12MX_SPI1_Initv+0x7c>)
 800215c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002160:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002162:	4b1a      	ldr	r3, [pc, #104]	; (80021cc <_ZL12MX_SPI1_Initv+0x7c>)
 8002164:	2200      	movs	r2, #0
 8002166:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002168:	4b18      	ldr	r3, [pc, #96]	; (80021cc <_ZL12MX_SPI1_Initv+0x7c>)
 800216a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800216e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002170:	4b16      	ldr	r3, [pc, #88]	; (80021cc <_ZL12MX_SPI1_Initv+0x7c>)
 8002172:	2200      	movs	r2, #0
 8002174:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002176:	4b15      	ldr	r3, [pc, #84]	; (80021cc <_ZL12MX_SPI1_Initv+0x7c>)
 8002178:	2200      	movs	r2, #0
 800217a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800217c:	4b13      	ldr	r3, [pc, #76]	; (80021cc <_ZL12MX_SPI1_Initv+0x7c>)
 800217e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002182:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002184:	4b11      	ldr	r3, [pc, #68]	; (80021cc <_ZL12MX_SPI1_Initv+0x7c>)
 8002186:	2210      	movs	r2, #16
 8002188:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800218a:	4b10      	ldr	r3, [pc, #64]	; (80021cc <_ZL12MX_SPI1_Initv+0x7c>)
 800218c:	2200      	movs	r2, #0
 800218e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002190:	4b0e      	ldr	r3, [pc, #56]	; (80021cc <_ZL12MX_SPI1_Initv+0x7c>)
 8002192:	2200      	movs	r2, #0
 8002194:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002196:	4b0d      	ldr	r3, [pc, #52]	; (80021cc <_ZL12MX_SPI1_Initv+0x7c>)
 8002198:	2200      	movs	r2, #0
 800219a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800219c:	4b0b      	ldr	r3, [pc, #44]	; (80021cc <_ZL12MX_SPI1_Initv+0x7c>)
 800219e:	2207      	movs	r2, #7
 80021a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80021a2:	4b0a      	ldr	r3, [pc, #40]	; (80021cc <_ZL12MX_SPI1_Initv+0x7c>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80021a8:	4b08      	ldr	r3, [pc, #32]	; (80021cc <_ZL12MX_SPI1_Initv+0x7c>)
 80021aa:	2208      	movs	r2, #8
 80021ac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80021ae:	4807      	ldr	r0, [pc, #28]	; (80021cc <_ZL12MX_SPI1_Initv+0x7c>)
 80021b0:	f002 fa20 	bl	80045f4 <HAL_SPI_Init>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	bf14      	ite	ne
 80021ba:	2301      	movne	r3, #1
 80021bc:	2300      	moveq	r3, #0
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <_ZL12MX_SPI1_Initv+0x78>
  {
    Error_Handler();
 80021c4:	f000 f996 	bl	80024f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80021c8:	bf00      	nop
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	2000007c 	.word	0x2000007c
 80021d0:	40013000 	.word	0x40013000

080021d4 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b088      	sub	sp, #32
 80021d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021da:	f107 0310 	add.w	r3, r7, #16
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	605a      	str	r2, [r3, #4]
 80021e4:	609a      	str	r2, [r3, #8]
 80021e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021e8:	1d3b      	adds	r3, r7, #4
 80021ea:	2200      	movs	r2, #0
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	605a      	str	r2, [r3, #4]
 80021f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80021f2:	4b27      	ldr	r3, [pc, #156]	; (8002290 <_ZL12MX_TIM1_Initv+0xbc>)
 80021f4:	4a27      	ldr	r2, [pc, #156]	; (8002294 <_ZL12MX_TIM1_Initv+0xc0>)
 80021f6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 80021f8:	4b25      	ldr	r3, [pc, #148]	; (8002290 <_ZL12MX_TIM1_Initv+0xbc>)
 80021fa:	224f      	movs	r2, #79	; 0x4f
 80021fc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021fe:	4b24      	ldr	r3, [pc, #144]	; (8002290 <_ZL12MX_TIM1_Initv+0xbc>)
 8002200:	2200      	movs	r2, #0
 8002202:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002204:	4b22      	ldr	r3, [pc, #136]	; (8002290 <_ZL12MX_TIM1_Initv+0xbc>)
 8002206:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800220a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800220c:	4b20      	ldr	r3, [pc, #128]	; (8002290 <_ZL12MX_TIM1_Initv+0xbc>)
 800220e:	2200      	movs	r2, #0
 8002210:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002212:	4b1f      	ldr	r3, [pc, #124]	; (8002290 <_ZL12MX_TIM1_Initv+0xbc>)
 8002214:	2200      	movs	r2, #0
 8002216:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002218:	4b1d      	ldr	r3, [pc, #116]	; (8002290 <_ZL12MX_TIM1_Initv+0xbc>)
 800221a:	2200      	movs	r2, #0
 800221c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800221e:	481c      	ldr	r0, [pc, #112]	; (8002290 <_ZL12MX_TIM1_Initv+0xbc>)
 8002220:	f002 fe12 	bl	8004e48 <HAL_TIM_Base_Init>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	bf14      	ite	ne
 800222a:	2301      	movne	r3, #1
 800222c:	2300      	moveq	r3, #0
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <_ZL12MX_TIM1_Initv+0x64>
  {
    Error_Handler();
 8002234:	f000 f95e 	bl	80024f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002238:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800223c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800223e:	f107 0310 	add.w	r3, r7, #16
 8002242:	4619      	mov	r1, r3
 8002244:	4812      	ldr	r0, [pc, #72]	; (8002290 <_ZL12MX_TIM1_Initv+0xbc>)
 8002246:	f002 ffc9 	bl	80051dc <HAL_TIM_ConfigClockSource>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	bf14      	ite	ne
 8002250:	2301      	movne	r3, #1
 8002252:	2300      	moveq	r3, #0
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <_ZL12MX_TIM1_Initv+0x8a>
  {
    Error_Handler();
 800225a:	f000 f94b 	bl	80024f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800225e:	2300      	movs	r3, #0
 8002260:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002262:	2300      	movs	r3, #0
 8002264:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002266:	2300      	movs	r3, #0
 8002268:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800226a:	1d3b      	adds	r3, r7, #4
 800226c:	4619      	mov	r1, r3
 800226e:	4808      	ldr	r0, [pc, #32]	; (8002290 <_ZL12MX_TIM1_Initv+0xbc>)
 8002270:	f003 f9e4 	bl	800563c <HAL_TIMEx_MasterConfigSynchronization>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	bf14      	ite	ne
 800227a:	2301      	movne	r3, #1
 800227c:	2300      	moveq	r3, #0
 800227e:	b2db      	uxtb	r3, r3
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <_ZL12MX_TIM1_Initv+0xb4>
  {
    Error_Handler();
 8002284:	f000 f936 	bl	80024f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002288:	bf00      	nop
 800228a:	3720      	adds	r7, #32
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	200000e0 	.word	0x200000e0
 8002294:	40012c00 	.word	0x40012c00

08002298 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b088      	sub	sp, #32
 800229c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800229e:	f107 0310 	add.w	r3, r7, #16
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	605a      	str	r2, [r3, #4]
 80022a8:	609a      	str	r2, [r3, #8]
 80022aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022ac:	1d3b      	adds	r3, r7, #4
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	605a      	str	r2, [r3, #4]
 80022b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022b6:	4b25      	ldr	r3, [pc, #148]	; (800234c <_ZL12MX_TIM2_Initv+0xb4>)
 80022b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 80022be:	4b23      	ldr	r3, [pc, #140]	; (800234c <_ZL12MX_TIM2_Initv+0xb4>)
 80022c0:	224f      	movs	r2, #79	; 0x4f
 80022c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c4:	4b21      	ldr	r3, [pc, #132]	; (800234c <_ZL12MX_TIM2_Initv+0xb4>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80022ca:	4b20      	ldr	r3, [pc, #128]	; (800234c <_ZL12MX_TIM2_Initv+0xb4>)
 80022cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022d2:	4b1e      	ldr	r3, [pc, #120]	; (800234c <_ZL12MX_TIM2_Initv+0xb4>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022d8:	4b1c      	ldr	r3, [pc, #112]	; (800234c <_ZL12MX_TIM2_Initv+0xb4>)
 80022da:	2200      	movs	r2, #0
 80022dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80022de:	481b      	ldr	r0, [pc, #108]	; (800234c <_ZL12MX_TIM2_Initv+0xb4>)
 80022e0:	f002 fdb2 	bl	8004e48 <HAL_TIM_Base_Init>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	bf14      	ite	ne
 80022ea:	2301      	movne	r3, #1
 80022ec:	2300      	moveq	r3, #0
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <_ZL12MX_TIM2_Initv+0x60>
  {
    Error_Handler();
 80022f4:	f000 f8fe 	bl	80024f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80022fe:	f107 0310 	add.w	r3, r7, #16
 8002302:	4619      	mov	r1, r3
 8002304:	4811      	ldr	r0, [pc, #68]	; (800234c <_ZL12MX_TIM2_Initv+0xb4>)
 8002306:	f002 ff69 	bl	80051dc <HAL_TIM_ConfigClockSource>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	bf14      	ite	ne
 8002310:	2301      	movne	r3, #1
 8002312:	2300      	moveq	r3, #0
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <_ZL12MX_TIM2_Initv+0x86>
  {
    Error_Handler();
 800231a:	f000 f8eb 	bl	80024f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800231e:	2300      	movs	r3, #0
 8002320:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002322:	2300      	movs	r3, #0
 8002324:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002326:	1d3b      	adds	r3, r7, #4
 8002328:	4619      	mov	r1, r3
 800232a:	4808      	ldr	r0, [pc, #32]	; (800234c <_ZL12MX_TIM2_Initv+0xb4>)
 800232c:	f003 f986 	bl	800563c <HAL_TIMEx_MasterConfigSynchronization>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	bf14      	ite	ne
 8002336:	2301      	movne	r3, #1
 8002338:	2300      	moveq	r3, #0
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <_ZL12MX_TIM2_Initv+0xac>
  {
    Error_Handler();
 8002340:	f000 f8d8 	bl	80024f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002344:	bf00      	nop
 8002346:	3720      	adds	r7, #32
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	2000012c 	.word	0x2000012c

08002350 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002354:	4b16      	ldr	r3, [pc, #88]	; (80023b0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002356:	4a17      	ldr	r2, [pc, #92]	; (80023b4 <_ZL19MX_USART2_UART_Initv+0x64>)
 8002358:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800235a:	4b15      	ldr	r3, [pc, #84]	; (80023b0 <_ZL19MX_USART2_UART_Initv+0x60>)
 800235c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002360:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002362:	4b13      	ldr	r3, [pc, #76]	; (80023b0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002364:	2200      	movs	r2, #0
 8002366:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002368:	4b11      	ldr	r3, [pc, #68]	; (80023b0 <_ZL19MX_USART2_UART_Initv+0x60>)
 800236a:	2200      	movs	r2, #0
 800236c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800236e:	4b10      	ldr	r3, [pc, #64]	; (80023b0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002370:	2200      	movs	r2, #0
 8002372:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002374:	4b0e      	ldr	r3, [pc, #56]	; (80023b0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002376:	220c      	movs	r2, #12
 8002378:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800237a:	4b0d      	ldr	r3, [pc, #52]	; (80023b0 <_ZL19MX_USART2_UART_Initv+0x60>)
 800237c:	2200      	movs	r2, #0
 800237e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002380:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002382:	2200      	movs	r2, #0
 8002384:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002386:	4b0a      	ldr	r3, [pc, #40]	; (80023b0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002388:	2200      	movs	r2, #0
 800238a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800238c:	4b08      	ldr	r3, [pc, #32]	; (80023b0 <_ZL19MX_USART2_UART_Initv+0x60>)
 800238e:	2200      	movs	r2, #0
 8002390:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002392:	4807      	ldr	r0, [pc, #28]	; (80023b0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002394:	f003 f9f8 	bl	8005788 <HAL_UART_Init>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	bf14      	ite	ne
 800239e:	2301      	movne	r3, #1
 80023a0:	2300      	moveq	r3, #0
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 80023a8:	f000 f8a4 	bl	80024f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023ac:	bf00      	nop
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	20000178 	.word	0x20000178
 80023b4:	40004400 	.word	0x40004400

080023b8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b08a      	sub	sp, #40	; 0x28
 80023bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023be:	f107 0314 	add.w	r3, r7, #20
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	605a      	str	r2, [r3, #4]
 80023c8:	609a      	str	r2, [r3, #8]
 80023ca:	60da      	str	r2, [r3, #12]
 80023cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ce:	4b46      	ldr	r3, [pc, #280]	; (80024e8 <_ZL12MX_GPIO_Initv+0x130>)
 80023d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023d2:	4a45      	ldr	r2, [pc, #276]	; (80024e8 <_ZL12MX_GPIO_Initv+0x130>)
 80023d4:	f043 0304 	orr.w	r3, r3, #4
 80023d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023da:	4b43      	ldr	r3, [pc, #268]	; (80024e8 <_ZL12MX_GPIO_Initv+0x130>)
 80023dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023de:	f003 0304 	and.w	r3, r3, #4
 80023e2:	613b      	str	r3, [r7, #16]
 80023e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023e6:	4b40      	ldr	r3, [pc, #256]	; (80024e8 <_ZL12MX_GPIO_Initv+0x130>)
 80023e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ea:	4a3f      	ldr	r2, [pc, #252]	; (80024e8 <_ZL12MX_GPIO_Initv+0x130>)
 80023ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023f2:	4b3d      	ldr	r3, [pc, #244]	; (80024e8 <_ZL12MX_GPIO_Initv+0x130>)
 80023f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023fe:	4b3a      	ldr	r3, [pc, #232]	; (80024e8 <_ZL12MX_GPIO_Initv+0x130>)
 8002400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002402:	4a39      	ldr	r2, [pc, #228]	; (80024e8 <_ZL12MX_GPIO_Initv+0x130>)
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	64d3      	str	r3, [r2, #76]	; 0x4c
 800240a:	4b37      	ldr	r3, [pc, #220]	; (80024e8 <_ZL12MX_GPIO_Initv+0x130>)
 800240c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	60bb      	str	r3, [r7, #8]
 8002414:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002416:	4b34      	ldr	r3, [pc, #208]	; (80024e8 <_ZL12MX_GPIO_Initv+0x130>)
 8002418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800241a:	4a33      	ldr	r2, [pc, #204]	; (80024e8 <_ZL12MX_GPIO_Initv+0x130>)
 800241c:	f043 0302 	orr.w	r3, r3, #2
 8002420:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002422:	4b31      	ldr	r3, [pc, #196]	; (80024e8 <_ZL12MX_GPIO_Initv+0x130>)
 8002424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	607b      	str	r3, [r7, #4]
 800242c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SX1280_RST_GPIO_Port, SX1280_RST_Pin, GPIO_PIN_SET);
 800242e:	2201      	movs	r2, #1
 8002430:	2180      	movs	r1, #128	; 0x80
 8002432:	482e      	ldr	r0, [pc, #184]	; (80024ec <_ZL12MX_GPIO_Initv+0x134>)
 8002434:	f000 fd82 	bl	8002f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SX1280_NSS_GPIO_Port, SX1280_NSS_Pin, GPIO_PIN_SET);
 8002438:	2201      	movs	r2, #1
 800243a:	2140      	movs	r1, #64	; 0x40
 800243c:	482c      	ldr	r0, [pc, #176]	; (80024f0 <_ZL12MX_GPIO_Initv+0x138>)
 800243e:	f000 fd7d 	bl	8002f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002442:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002446:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002448:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800244c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244e:	2300      	movs	r3, #0
 8002450:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002452:	f107 0314 	add.w	r3, r7, #20
 8002456:	4619      	mov	r1, r3
 8002458:	4824      	ldr	r0, [pc, #144]	; (80024ec <_ZL12MX_GPIO_Initv+0x134>)
 800245a:	f000 fbad 	bl	8002bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX1280_RST_Pin */
  GPIO_InitStruct.Pin = SX1280_RST_Pin;
 800245e:	2380      	movs	r3, #128	; 0x80
 8002460:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002462:	2301      	movs	r3, #1
 8002464:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002466:	2301      	movs	r3, #1
 8002468:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800246a:	2303      	movs	r3, #3
 800246c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SX1280_RST_GPIO_Port, &GPIO_InitStruct);
 800246e:	f107 0314 	add.w	r3, r7, #20
 8002472:	4619      	mov	r1, r3
 8002474:	481d      	ldr	r0, [pc, #116]	; (80024ec <_ZL12MX_GPIO_Initv+0x134>)
 8002476:	f000 fb9f 	bl	8002bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800247a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800247e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002480:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002484:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002486:	2302      	movs	r3, #2
 8002488:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800248a:	f107 0314 	add.w	r3, r7, #20
 800248e:	4619      	mov	r1, r3
 8002490:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002494:	f000 fb90 	bl	8002bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX1280_BUSY_Pin */
  GPIO_InitStruct.Pin = SX1280_BUSY_Pin;
 8002498:	f44f 7300 	mov.w	r3, #512	; 0x200
 800249c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800249e:	2300      	movs	r3, #0
 80024a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80024a2:	2302      	movs	r3, #2
 80024a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SX1280_BUSY_GPIO_Port, &GPIO_InitStruct);
 80024a6:	f107 0314 	add.w	r3, r7, #20
 80024aa:	4619      	mov	r1, r3
 80024ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024b0:	f000 fb82 	bl	8002bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX1280_NSS_Pin */
  GPIO_InitStruct.Pin = SX1280_NSS_Pin;
 80024b4:	2340      	movs	r3, #64	; 0x40
 80024b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024b8:	2301      	movs	r3, #1
 80024ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024bc:	2301      	movs	r3, #1
 80024be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024c0:	2303      	movs	r3, #3
 80024c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SX1280_NSS_GPIO_Port, &GPIO_InitStruct);
 80024c4:	f107 0314 	add.w	r3, r7, #20
 80024c8:	4619      	mov	r1, r3
 80024ca:	4809      	ldr	r0, [pc, #36]	; (80024f0 <_ZL12MX_GPIO_Initv+0x138>)
 80024cc:	f000 fb74 	bl	8002bb8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80024d0:	2200      	movs	r2, #0
 80024d2:	2100      	movs	r1, #0
 80024d4:	2017      	movs	r0, #23
 80024d6:	f000 fb38 	bl	8002b4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80024da:	2017      	movs	r0, #23
 80024dc:	f000 fb51 	bl	8002b82 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80024e0:	bf00      	nop
 80024e2:	3728      	adds	r7, #40	; 0x28
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40021000 	.word	0x40021000
 80024ec:	48000800 	.word	0x48000800
 80024f0:	48000400 	.word	0x48000400

080024f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024f8:	b672      	cpsid	i
}
 80024fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024fc:	e7fe      	b.n	80024fc <Error_Handler+0x8>
	...

08002500 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d107      	bne.n	8002520 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002516:	4293      	cmp	r3, r2
 8002518:	d102      	bne.n	8002520 <_Z41__static_initialization_and_destruction_0ii+0x20>
SX128x_formal_board a;
 800251a:	4809      	ldr	r0, [pc, #36]	; (8002540 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800251c:	f7ff fbce 	bl	8001cbc <_ZN19SX128x_formal_boardC1Ev>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d107      	bne.n	8002536 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800252c:	4293      	cmp	r3, r2
 800252e:	d102      	bne.n	8002536 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002530:	4803      	ldr	r0, [pc, #12]	; (8002540 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002532:	f7ff fa91 	bl	8001a58 <_ZN19SX128x_formal_boardD1Ev>
}
 8002536:	bf00      	nop
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	20000200 	.word	0x20000200

08002544 <_GLOBAL__sub_I_hspi1>:
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
 8002548:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800254c:	2001      	movs	r0, #1
 800254e:	f7ff ffd7 	bl	8002500 <_Z41__static_initialization_and_destruction_0ii>
 8002552:	bd80      	pop	{r7, pc}

08002554 <_GLOBAL__sub_D_hspi1>:
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
 8002558:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800255c:	2000      	movs	r0, #0
 800255e:	f7ff ffcf 	bl	8002500 <_Z41__static_initialization_and_destruction_0ii>
 8002562:	bd80      	pop	{r7, pc}

08002564 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800256a:	4b0f      	ldr	r3, [pc, #60]	; (80025a8 <HAL_MspInit+0x44>)
 800256c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800256e:	4a0e      	ldr	r2, [pc, #56]	; (80025a8 <HAL_MspInit+0x44>)
 8002570:	f043 0301 	orr.w	r3, r3, #1
 8002574:	6613      	str	r3, [r2, #96]	; 0x60
 8002576:	4b0c      	ldr	r3, [pc, #48]	; (80025a8 <HAL_MspInit+0x44>)
 8002578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	607b      	str	r3, [r7, #4]
 8002580:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002582:	4b09      	ldr	r3, [pc, #36]	; (80025a8 <HAL_MspInit+0x44>)
 8002584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002586:	4a08      	ldr	r2, [pc, #32]	; (80025a8 <HAL_MspInit+0x44>)
 8002588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800258c:	6593      	str	r3, [r2, #88]	; 0x58
 800258e:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <HAL_MspInit+0x44>)
 8002590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002596:	603b      	str	r3, [r7, #0]
 8002598:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800259a:	bf00      	nop
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	40021000 	.word	0x40021000

080025ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b08a      	sub	sp, #40	; 0x28
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b4:	f107 0314 	add.w	r3, r7, #20
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	605a      	str	r2, [r3, #4]
 80025be:	609a      	str	r2, [r3, #8]
 80025c0:	60da      	str	r2, [r3, #12]
 80025c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a17      	ldr	r2, [pc, #92]	; (8002628 <HAL_SPI_MspInit+0x7c>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d128      	bne.n	8002620 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025ce:	4b17      	ldr	r3, [pc, #92]	; (800262c <HAL_SPI_MspInit+0x80>)
 80025d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025d2:	4a16      	ldr	r2, [pc, #88]	; (800262c <HAL_SPI_MspInit+0x80>)
 80025d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025d8:	6613      	str	r3, [r2, #96]	; 0x60
 80025da:	4b14      	ldr	r3, [pc, #80]	; (800262c <HAL_SPI_MspInit+0x80>)
 80025dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025e2:	613b      	str	r3, [r7, #16]
 80025e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025e6:	4b11      	ldr	r3, [pc, #68]	; (800262c <HAL_SPI_MspInit+0x80>)
 80025e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ea:	4a10      	ldr	r2, [pc, #64]	; (800262c <HAL_SPI_MspInit+0x80>)
 80025ec:	f043 0301 	orr.w	r3, r3, #1
 80025f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025f2:	4b0e      	ldr	r3, [pc, #56]	; (800262c <HAL_SPI_MspInit+0x80>)
 80025f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80025fe:	23e0      	movs	r3, #224	; 0xe0
 8002600:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002602:	2302      	movs	r3, #2
 8002604:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002606:	2302      	movs	r3, #2
 8002608:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800260a:	2303      	movs	r3, #3
 800260c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800260e:	2305      	movs	r3, #5
 8002610:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002612:	f107 0314 	add.w	r3, r7, #20
 8002616:	4619      	mov	r1, r3
 8002618:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800261c:	f000 facc 	bl	8002bb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002620:	bf00      	nop
 8002622:	3728      	adds	r7, #40	; 0x28
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40013000 	.word	0x40013000
 800262c:	40021000 	.word	0x40021000

08002630 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a16      	ldr	r2, [pc, #88]	; (8002698 <HAL_TIM_Base_MspInit+0x68>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d10c      	bne.n	800265c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002642:	4b16      	ldr	r3, [pc, #88]	; (800269c <HAL_TIM_Base_MspInit+0x6c>)
 8002644:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002646:	4a15      	ldr	r2, [pc, #84]	; (800269c <HAL_TIM_Base_MspInit+0x6c>)
 8002648:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800264c:	6613      	str	r3, [r2, #96]	; 0x60
 800264e:	4b13      	ldr	r3, [pc, #76]	; (800269c <HAL_TIM_Base_MspInit+0x6c>)
 8002650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002652:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002656:	60fb      	str	r3, [r7, #12]
 8002658:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800265a:	e018      	b.n	800268e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002664:	d113      	bne.n	800268e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002666:	4b0d      	ldr	r3, [pc, #52]	; (800269c <HAL_TIM_Base_MspInit+0x6c>)
 8002668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800266a:	4a0c      	ldr	r2, [pc, #48]	; (800269c <HAL_TIM_Base_MspInit+0x6c>)
 800266c:	f043 0301 	orr.w	r3, r3, #1
 8002670:	6593      	str	r3, [r2, #88]	; 0x58
 8002672:	4b0a      	ldr	r3, [pc, #40]	; (800269c <HAL_TIM_Base_MspInit+0x6c>)
 8002674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	60bb      	str	r3, [r7, #8]
 800267c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800267e:	2200      	movs	r2, #0
 8002680:	2100      	movs	r1, #0
 8002682:	201c      	movs	r0, #28
 8002684:	f000 fa61 	bl	8002b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002688:	201c      	movs	r0, #28
 800268a:	f000 fa7a 	bl	8002b82 <HAL_NVIC_EnableIRQ>
}
 800268e:	bf00      	nop
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	40012c00 	.word	0x40012c00
 800269c:	40021000 	.word	0x40021000

080026a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b0ac      	sub	sp, #176	; 0xb0
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	605a      	str	r2, [r3, #4]
 80026b2:	609a      	str	r2, [r3, #8]
 80026b4:	60da      	str	r2, [r3, #12]
 80026b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026b8:	f107 0314 	add.w	r3, r7, #20
 80026bc:	2288      	movs	r2, #136	; 0x88
 80026be:	2100      	movs	r1, #0
 80026c0:	4618      	mov	r0, r3
 80026c2:	f003 fd95 	bl	80061f0 <memset>
  if(huart->Instance==USART2)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a21      	ldr	r2, [pc, #132]	; (8002750 <HAL_UART_MspInit+0xb0>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d13b      	bne.n	8002748 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80026d0:	2302      	movs	r3, #2
 80026d2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80026d4:	2300      	movs	r3, #0
 80026d6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026d8:	f107 0314 	add.w	r3, r7, #20
 80026dc:	4618      	mov	r0, r3
 80026de:	f001 facd 	bl	8003c7c <HAL_RCCEx_PeriphCLKConfig>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80026e8:	f7ff ff04 	bl	80024f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80026ec:	4b19      	ldr	r3, [pc, #100]	; (8002754 <HAL_UART_MspInit+0xb4>)
 80026ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f0:	4a18      	ldr	r2, [pc, #96]	; (8002754 <HAL_UART_MspInit+0xb4>)
 80026f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026f6:	6593      	str	r3, [r2, #88]	; 0x58
 80026f8:	4b16      	ldr	r3, [pc, #88]	; (8002754 <HAL_UART_MspInit+0xb4>)
 80026fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002700:	613b      	str	r3, [r7, #16]
 8002702:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002704:	4b13      	ldr	r3, [pc, #76]	; (8002754 <HAL_UART_MspInit+0xb4>)
 8002706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002708:	4a12      	ldr	r2, [pc, #72]	; (8002754 <HAL_UART_MspInit+0xb4>)
 800270a:	f043 0301 	orr.w	r3, r3, #1
 800270e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002710:	4b10      	ldr	r3, [pc, #64]	; (8002754 <HAL_UART_MspInit+0xb4>)
 8002712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	60fb      	str	r3, [r7, #12]
 800271a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800271c:	230c      	movs	r3, #12
 800271e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002722:	2302      	movs	r3, #2
 8002724:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002728:	2300      	movs	r3, #0
 800272a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800272e:	2303      	movs	r3, #3
 8002730:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002734:	2307      	movs	r3, #7
 8002736:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800273a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800273e:	4619      	mov	r1, r3
 8002740:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002744:	f000 fa38 	bl	8002bb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002748:	bf00      	nop
 800274a:	37b0      	adds	r7, #176	; 0xb0
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	40004400 	.word	0x40004400
 8002754:	40021000 	.word	0x40021000

08002758 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800275c:	e7fe      	b.n	800275c <NMI_Handler+0x4>

0800275e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800275e:	b480      	push	{r7}
 8002760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002762:	e7fe      	b.n	8002762 <HardFault_Handler+0x4>

08002764 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002768:	e7fe      	b.n	8002768 <MemManage_Handler+0x4>

0800276a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800276a:	b480      	push	{r7}
 800276c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800276e:	e7fe      	b.n	800276e <BusFault_Handler+0x4>

08002770 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002774:	e7fe      	b.n	8002774 <UsageFault_Handler+0x4>

08002776 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002776:	b480      	push	{r7}
 8002778:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800277a:	bf00      	nop
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002788:	bf00      	nop
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr

08002792 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002792:	b480      	push	{r7}
 8002794:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002796:	bf00      	nop
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027a4:	f000 f8b2 	bl	800290c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027a8:	bf00      	nop
 80027aa:	bd80      	pop	{r7, pc}

080027ac <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	a.tx_recursion();
 80027b0:	4804      	ldr	r0, [pc, #16]	; (80027c4 <EXTI9_5_IRQHandler+0x18>)
 80027b2:	f7ff fb35 	bl	8001e20 <_ZN19SX128x_formal_board12tx_recursionEv>
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80027b6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80027ba:	f000 fbd7 	bl	8002f6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80027be:	bf00      	nop
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	20000200 	.word	0x20000200

080027c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80027cc:	4802      	ldr	r0, [pc, #8]	; (80027d8 <TIM2_IRQHandler+0x10>)
 80027ce:	f002 fc03 	bl	8004fd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80027d2:	bf00      	nop
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	2000012c 	.word	0x2000012c

080027dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80027e0:	4b06      	ldr	r3, [pc, #24]	; (80027fc <SystemInit+0x20>)
 80027e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e6:	4a05      	ldr	r2, [pc, #20]	; (80027fc <SystemInit+0x20>)
 80027e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80027f0:	bf00      	nop
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	e000ed00 	.word	0xe000ed00

08002800 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002800:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002838 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002804:	f7ff ffea 	bl	80027dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002808:	480c      	ldr	r0, [pc, #48]	; (800283c <LoopForever+0x6>)
  ldr r1, =_edata
 800280a:	490d      	ldr	r1, [pc, #52]	; (8002840 <LoopForever+0xa>)
  ldr r2, =_sidata
 800280c:	4a0d      	ldr	r2, [pc, #52]	; (8002844 <LoopForever+0xe>)
  movs r3, #0
 800280e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002810:	e002      	b.n	8002818 <LoopCopyDataInit>

08002812 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002812:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002814:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002816:	3304      	adds	r3, #4

08002818 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002818:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800281a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800281c:	d3f9      	bcc.n	8002812 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800281e:	4a0a      	ldr	r2, [pc, #40]	; (8002848 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002820:	4c0a      	ldr	r4, [pc, #40]	; (800284c <LoopForever+0x16>)
  movs r3, #0
 8002822:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002824:	e001      	b.n	800282a <LoopFillZerobss>

08002826 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002826:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002828:	3204      	adds	r2, #4

0800282a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800282a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800282c:	d3fb      	bcc.n	8002826 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800282e:	f003 fce7 	bl	8006200 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002832:	f7ff fbab 	bl	8001f8c <main>

08002836 <LoopForever>:

LoopForever:
    b LoopForever
 8002836:	e7fe      	b.n	8002836 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002838:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800283c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002840:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002844:	08006448 	.word	0x08006448
  ldr r2, =_sbss
 8002848:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800284c:	20000490 	.word	0x20000490

08002850 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002850:	e7fe      	b.n	8002850 <ADC1_2_IRQHandler>
	...

08002854 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800285a:	2300      	movs	r3, #0
 800285c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800285e:	4b0c      	ldr	r3, [pc, #48]	; (8002890 <HAL_Init+0x3c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a0b      	ldr	r2, [pc, #44]	; (8002890 <HAL_Init+0x3c>)
 8002864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002868:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800286a:	2003      	movs	r0, #3
 800286c:	f000 f962 	bl	8002b34 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002870:	2000      	movs	r0, #0
 8002872:	f000 f80f 	bl	8002894 <HAL_InitTick>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d002      	beq.n	8002882 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	71fb      	strb	r3, [r7, #7]
 8002880:	e001      	b.n	8002886 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002882:	f7ff fe6f 	bl	8002564 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002886:	79fb      	ldrb	r3, [r7, #7]
}
 8002888:	4618      	mov	r0, r3
 800288a:	3708      	adds	r7, #8
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40022000 	.word	0x40022000

08002894 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800289c:	2300      	movs	r3, #0
 800289e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80028a0:	4b17      	ldr	r3, [pc, #92]	; (8002900 <HAL_InitTick+0x6c>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d023      	beq.n	80028f0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80028a8:	4b16      	ldr	r3, [pc, #88]	; (8002904 <HAL_InitTick+0x70>)
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	4b14      	ldr	r3, [pc, #80]	; (8002900 <HAL_InitTick+0x6c>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	4619      	mov	r1, r3
 80028b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80028ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80028be:	4618      	mov	r0, r3
 80028c0:	f000 f96d 	bl	8002b9e <HAL_SYSTICK_Config>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10f      	bne.n	80028ea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2b0f      	cmp	r3, #15
 80028ce:	d809      	bhi.n	80028e4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028d0:	2200      	movs	r2, #0
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	f04f 30ff 	mov.w	r0, #4294967295
 80028d8:	f000 f937 	bl	8002b4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80028dc:	4a0a      	ldr	r2, [pc, #40]	; (8002908 <HAL_InitTick+0x74>)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6013      	str	r3, [r2, #0]
 80028e2:	e007      	b.n	80028f4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	73fb      	strb	r3, [r7, #15]
 80028e8:	e004      	b.n	80028f4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	73fb      	strb	r3, [r7, #15]
 80028ee:	e001      	b.n	80028f4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80028f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	20000008 	.word	0x20000008
 8002904:	20000000 	.word	0x20000000
 8002908:	20000004 	.word	0x20000004

0800290c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002910:	4b06      	ldr	r3, [pc, #24]	; (800292c <HAL_IncTick+0x20>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	461a      	mov	r2, r3
 8002916:	4b06      	ldr	r3, [pc, #24]	; (8002930 <HAL_IncTick+0x24>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4413      	add	r3, r2
 800291c:	4a04      	ldr	r2, [pc, #16]	; (8002930 <HAL_IncTick+0x24>)
 800291e:	6013      	str	r3, [r2, #0]
}
 8002920:	bf00      	nop
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	20000008 	.word	0x20000008
 8002930:	2000034c 	.word	0x2000034c

08002934 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  return uwTick;
 8002938:	4b03      	ldr	r3, [pc, #12]	; (8002948 <HAL_GetTick+0x14>)
 800293a:	681b      	ldr	r3, [r3, #0]
}
 800293c:	4618      	mov	r0, r3
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	2000034c 	.word	0x2000034c

0800294c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002954:	f7ff ffee 	bl	8002934 <HAL_GetTick>
 8002958:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002964:	d005      	beq.n	8002972 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002966:	4b0a      	ldr	r3, [pc, #40]	; (8002990 <HAL_Delay+0x44>)
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	461a      	mov	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	4413      	add	r3, r2
 8002970:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002972:	bf00      	nop
 8002974:	f7ff ffde 	bl	8002934 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	429a      	cmp	r2, r3
 8002982:	d8f7      	bhi.n	8002974 <HAL_Delay+0x28>
  {
  }
}
 8002984:	bf00      	nop
 8002986:	bf00      	nop
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	20000008 	.word	0x20000008

08002994 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f003 0307 	and.w	r3, r3, #7
 80029a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029a4:	4b0c      	ldr	r3, [pc, #48]	; (80029d8 <__NVIC_SetPriorityGrouping+0x44>)
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029aa:	68ba      	ldr	r2, [r7, #8]
 80029ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029b0:	4013      	ands	r3, r2
 80029b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029c6:	4a04      	ldr	r2, [pc, #16]	; (80029d8 <__NVIC_SetPriorityGrouping+0x44>)
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	60d3      	str	r3, [r2, #12]
}
 80029cc:	bf00      	nop
 80029ce:	3714      	adds	r7, #20
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	e000ed00 	.word	0xe000ed00

080029dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029e0:	4b04      	ldr	r3, [pc, #16]	; (80029f4 <__NVIC_GetPriorityGrouping+0x18>)
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	0a1b      	lsrs	r3, r3, #8
 80029e6:	f003 0307 	and.w	r3, r3, #7
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	e000ed00 	.word	0xe000ed00

080029f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	4603      	mov	r3, r0
 8002a00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	db0b      	blt.n	8002a22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a0a:	79fb      	ldrb	r3, [r7, #7]
 8002a0c:	f003 021f 	and.w	r2, r3, #31
 8002a10:	4907      	ldr	r1, [pc, #28]	; (8002a30 <__NVIC_EnableIRQ+0x38>)
 8002a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a16:	095b      	lsrs	r3, r3, #5
 8002a18:	2001      	movs	r0, #1
 8002a1a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	e000e100 	.word	0xe000e100

08002a34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	6039      	str	r1, [r7, #0]
 8002a3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	db0a      	blt.n	8002a5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	b2da      	uxtb	r2, r3
 8002a4c:	490c      	ldr	r1, [pc, #48]	; (8002a80 <__NVIC_SetPriority+0x4c>)
 8002a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a52:	0112      	lsls	r2, r2, #4
 8002a54:	b2d2      	uxtb	r2, r2
 8002a56:	440b      	add	r3, r1
 8002a58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a5c:	e00a      	b.n	8002a74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	b2da      	uxtb	r2, r3
 8002a62:	4908      	ldr	r1, [pc, #32]	; (8002a84 <__NVIC_SetPriority+0x50>)
 8002a64:	79fb      	ldrb	r3, [r7, #7]
 8002a66:	f003 030f 	and.w	r3, r3, #15
 8002a6a:	3b04      	subs	r3, #4
 8002a6c:	0112      	lsls	r2, r2, #4
 8002a6e:	b2d2      	uxtb	r2, r2
 8002a70:	440b      	add	r3, r1
 8002a72:	761a      	strb	r2, [r3, #24]
}
 8002a74:	bf00      	nop
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr
 8002a80:	e000e100 	.word	0xe000e100
 8002a84:	e000ed00 	.word	0xe000ed00

08002a88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b089      	sub	sp, #36	; 0x24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f003 0307 	and.w	r3, r3, #7
 8002a9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	f1c3 0307 	rsb	r3, r3, #7
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	bf28      	it	cs
 8002aa6:	2304      	movcs	r3, #4
 8002aa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	3304      	adds	r3, #4
 8002aae:	2b06      	cmp	r3, #6
 8002ab0:	d902      	bls.n	8002ab8 <NVIC_EncodePriority+0x30>
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	3b03      	subs	r3, #3
 8002ab6:	e000      	b.n	8002aba <NVIC_EncodePriority+0x32>
 8002ab8:	2300      	movs	r3, #0
 8002aba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002abc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	43da      	mvns	r2, r3
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	401a      	ands	r2, r3
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ad0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8002ada:	43d9      	mvns	r1, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ae0:	4313      	orrs	r3, r2
         );
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3724      	adds	r7, #36	; 0x24
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
	...

08002af0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	3b01      	subs	r3, #1
 8002afc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b00:	d301      	bcc.n	8002b06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b02:	2301      	movs	r3, #1
 8002b04:	e00f      	b.n	8002b26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b06:	4a0a      	ldr	r2, [pc, #40]	; (8002b30 <SysTick_Config+0x40>)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b0e:	210f      	movs	r1, #15
 8002b10:	f04f 30ff 	mov.w	r0, #4294967295
 8002b14:	f7ff ff8e 	bl	8002a34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b18:	4b05      	ldr	r3, [pc, #20]	; (8002b30 <SysTick_Config+0x40>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b1e:	4b04      	ldr	r3, [pc, #16]	; (8002b30 <SysTick_Config+0x40>)
 8002b20:	2207      	movs	r2, #7
 8002b22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	e000e010 	.word	0xe000e010

08002b34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f7ff ff29 	bl	8002994 <__NVIC_SetPriorityGrouping>
}
 8002b42:	bf00      	nop
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b086      	sub	sp, #24
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	4603      	mov	r3, r0
 8002b52:	60b9      	str	r1, [r7, #8]
 8002b54:	607a      	str	r2, [r7, #4]
 8002b56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b5c:	f7ff ff3e 	bl	80029dc <__NVIC_GetPriorityGrouping>
 8002b60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	68b9      	ldr	r1, [r7, #8]
 8002b66:	6978      	ldr	r0, [r7, #20]
 8002b68:	f7ff ff8e 	bl	8002a88 <NVIC_EncodePriority>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b72:	4611      	mov	r1, r2
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff ff5d 	bl	8002a34 <__NVIC_SetPriority>
}
 8002b7a:	bf00      	nop
 8002b7c:	3718      	adds	r7, #24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b082      	sub	sp, #8
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	4603      	mov	r3, r0
 8002b8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7ff ff31 	bl	80029f8 <__NVIC_EnableIRQ>
}
 8002b96:	bf00      	nop
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b082      	sub	sp, #8
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f7ff ffa2 	bl	8002af0 <SysTick_Config>
 8002bac:	4603      	mov	r3, r0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
	...

08002bb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b087      	sub	sp, #28
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bc6:	e17f      	b.n	8002ec8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	2101      	movs	r1, #1
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f000 8171 	beq.w	8002ec2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f003 0303 	and.w	r3, r3, #3
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d005      	beq.n	8002bf8 <HAL_GPIO_Init+0x40>
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f003 0303 	and.w	r3, r3, #3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d130      	bne.n	8002c5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	2203      	movs	r2, #3
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	68da      	ldr	r2, [r3, #12]
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c2e:	2201      	movs	r2, #1
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	43db      	mvns	r3, r3
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	091b      	lsrs	r3, r3, #4
 8002c44:	f003 0201 	and.w	r2, r3, #1
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f003 0303 	and.w	r3, r3, #3
 8002c62:	2b03      	cmp	r3, #3
 8002c64:	d118      	bne.n	8002c98 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	43db      	mvns	r3, r3
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	08db      	lsrs	r3, r3, #3
 8002c82:	f003 0201 	and.w	r2, r3, #1
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f003 0303 	and.w	r3, r3, #3
 8002ca0:	2b03      	cmp	r3, #3
 8002ca2:	d017      	beq.n	8002cd4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	2203      	movs	r2, #3
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	693a      	ldr	r2, [r7, #16]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f003 0303 	and.w	r3, r3, #3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d123      	bne.n	8002d28 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	08da      	lsrs	r2, r3, #3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	3208      	adds	r2, #8
 8002ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cec:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	220f      	movs	r2, #15
 8002cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfc:	43db      	mvns	r3, r3
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	4013      	ands	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	691a      	ldr	r2, [r3, #16]
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	f003 0307 	and.w	r3, r3, #7
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	08da      	lsrs	r2, r3, #3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	3208      	adds	r2, #8
 8002d22:	6939      	ldr	r1, [r7, #16]
 8002d24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	2203      	movs	r2, #3
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f003 0203 	and.w	r2, r3, #3
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f000 80ac 	beq.w	8002ec2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d6a:	4b5f      	ldr	r3, [pc, #380]	; (8002ee8 <HAL_GPIO_Init+0x330>)
 8002d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d6e:	4a5e      	ldr	r2, [pc, #376]	; (8002ee8 <HAL_GPIO_Init+0x330>)
 8002d70:	f043 0301 	orr.w	r3, r3, #1
 8002d74:	6613      	str	r3, [r2, #96]	; 0x60
 8002d76:	4b5c      	ldr	r3, [pc, #368]	; (8002ee8 <HAL_GPIO_Init+0x330>)
 8002d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	60bb      	str	r3, [r7, #8]
 8002d80:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d82:	4a5a      	ldr	r2, [pc, #360]	; (8002eec <HAL_GPIO_Init+0x334>)
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	089b      	lsrs	r3, r3, #2
 8002d88:	3302      	adds	r3, #2
 8002d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	f003 0303 	and.w	r3, r3, #3
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	220f      	movs	r2, #15
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	4013      	ands	r3, r2
 8002da4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002dac:	d025      	beq.n	8002dfa <HAL_GPIO_Init+0x242>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a4f      	ldr	r2, [pc, #316]	; (8002ef0 <HAL_GPIO_Init+0x338>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d01f      	beq.n	8002df6 <HAL_GPIO_Init+0x23e>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a4e      	ldr	r2, [pc, #312]	; (8002ef4 <HAL_GPIO_Init+0x33c>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d019      	beq.n	8002df2 <HAL_GPIO_Init+0x23a>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a4d      	ldr	r2, [pc, #308]	; (8002ef8 <HAL_GPIO_Init+0x340>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d013      	beq.n	8002dee <HAL_GPIO_Init+0x236>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a4c      	ldr	r2, [pc, #304]	; (8002efc <HAL_GPIO_Init+0x344>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d00d      	beq.n	8002dea <HAL_GPIO_Init+0x232>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a4b      	ldr	r2, [pc, #300]	; (8002f00 <HAL_GPIO_Init+0x348>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d007      	beq.n	8002de6 <HAL_GPIO_Init+0x22e>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a4a      	ldr	r2, [pc, #296]	; (8002f04 <HAL_GPIO_Init+0x34c>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d101      	bne.n	8002de2 <HAL_GPIO_Init+0x22a>
 8002dde:	2306      	movs	r3, #6
 8002de0:	e00c      	b.n	8002dfc <HAL_GPIO_Init+0x244>
 8002de2:	2307      	movs	r3, #7
 8002de4:	e00a      	b.n	8002dfc <HAL_GPIO_Init+0x244>
 8002de6:	2305      	movs	r3, #5
 8002de8:	e008      	b.n	8002dfc <HAL_GPIO_Init+0x244>
 8002dea:	2304      	movs	r3, #4
 8002dec:	e006      	b.n	8002dfc <HAL_GPIO_Init+0x244>
 8002dee:	2303      	movs	r3, #3
 8002df0:	e004      	b.n	8002dfc <HAL_GPIO_Init+0x244>
 8002df2:	2302      	movs	r3, #2
 8002df4:	e002      	b.n	8002dfc <HAL_GPIO_Init+0x244>
 8002df6:	2301      	movs	r3, #1
 8002df8:	e000      	b.n	8002dfc <HAL_GPIO_Init+0x244>
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	697a      	ldr	r2, [r7, #20]
 8002dfe:	f002 0203 	and.w	r2, r2, #3
 8002e02:	0092      	lsls	r2, r2, #2
 8002e04:	4093      	lsls	r3, r2
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e0c:	4937      	ldr	r1, [pc, #220]	; (8002eec <HAL_GPIO_Init+0x334>)
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	089b      	lsrs	r3, r3, #2
 8002e12:	3302      	adds	r3, #2
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e1a:	4b3b      	ldr	r3, [pc, #236]	; (8002f08 <HAL_GPIO_Init+0x350>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	43db      	mvns	r3, r3
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	4013      	ands	r3, r2
 8002e28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d003      	beq.n	8002e3e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e3e:	4a32      	ldr	r2, [pc, #200]	; (8002f08 <HAL_GPIO_Init+0x350>)
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e44:	4b30      	ldr	r3, [pc, #192]	; (8002f08 <HAL_GPIO_Init+0x350>)
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	43db      	mvns	r3, r3
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	4013      	ands	r3, r2
 8002e52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d003      	beq.n	8002e68 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e68:	4a27      	ldr	r2, [pc, #156]	; (8002f08 <HAL_GPIO_Init+0x350>)
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002e6e:	4b26      	ldr	r3, [pc, #152]	; (8002f08 <HAL_GPIO_Init+0x350>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	43db      	mvns	r3, r3
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d003      	beq.n	8002e92 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e92:	4a1d      	ldr	r2, [pc, #116]	; (8002f08 <HAL_GPIO_Init+0x350>)
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002e98:	4b1b      	ldr	r3, [pc, #108]	; (8002f08 <HAL_GPIO_Init+0x350>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	43db      	mvns	r3, r3
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d003      	beq.n	8002ebc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ebc:	4a12      	ldr	r2, [pc, #72]	; (8002f08 <HAL_GPIO_Init+0x350>)
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	fa22 f303 	lsr.w	r3, r2, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f47f ae78 	bne.w	8002bc8 <HAL_GPIO_Init+0x10>
  }
}
 8002ed8:	bf00      	nop
 8002eda:	bf00      	nop
 8002edc:	371c      	adds	r7, #28
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	40010000 	.word	0x40010000
 8002ef0:	48000400 	.word	0x48000400
 8002ef4:	48000800 	.word	0x48000800
 8002ef8:	48000c00 	.word	0x48000c00
 8002efc:	48001000 	.word	0x48001000
 8002f00:	48001400 	.word	0x48001400
 8002f04:	48001800 	.word	0x48001800
 8002f08:	40010400 	.word	0x40010400

08002f0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	460b      	mov	r3, r1
 8002f16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	691a      	ldr	r2, [r3, #16]
 8002f1c:	887b      	ldrh	r3, [r7, #2]
 8002f1e:	4013      	ands	r3, r2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d002      	beq.n	8002f2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f24:	2301      	movs	r3, #1
 8002f26:	73fb      	strb	r3, [r7, #15]
 8002f28:	e001      	b.n	8002f2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3714      	adds	r7, #20
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	460b      	mov	r3, r1
 8002f46:	807b      	strh	r3, [r7, #2]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f4c:	787b      	ldrb	r3, [r7, #1]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f52:	887a      	ldrh	r2, [r7, #2]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f58:	e002      	b.n	8002f60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f5a:	887a      	ldrh	r2, [r7, #2]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	4603      	mov	r3, r0
 8002f74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f76:	4b08      	ldr	r3, [pc, #32]	; (8002f98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f78:	695a      	ldr	r2, [r3, #20]
 8002f7a:	88fb      	ldrh	r3, [r7, #6]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d006      	beq.n	8002f90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f82:	4a05      	ldr	r2, [pc, #20]	; (8002f98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f84:	88fb      	ldrh	r3, [r7, #6]
 8002f86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f88:	88fb      	ldrh	r3, [r7, #6]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 f806 	bl	8002f9c <HAL_GPIO_EXTI_Callback>
  }
}
 8002f90:	bf00      	nop
 8002f92:	3708      	adds	r7, #8
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	40010400 	.word	0x40010400

08002f9c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002fa6:	bf00      	nop
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
	...

08002fb4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002fb8:	4b04      	ldr	r3, [pc, #16]	; (8002fcc <HAL_PWREx_GetVoltageRange+0x18>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	40007000 	.word	0x40007000

08002fd0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fde:	d130      	bne.n	8003042 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fe0:	4b23      	ldr	r3, [pc, #140]	; (8003070 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002fe8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fec:	d038      	beq.n	8003060 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fee:	4b20      	ldr	r3, [pc, #128]	; (8003070 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ff6:	4a1e      	ldr	r2, [pc, #120]	; (8003070 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ff8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ffc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ffe:	4b1d      	ldr	r3, [pc, #116]	; (8003074 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2232      	movs	r2, #50	; 0x32
 8003004:	fb02 f303 	mul.w	r3, r2, r3
 8003008:	4a1b      	ldr	r2, [pc, #108]	; (8003078 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800300a:	fba2 2303 	umull	r2, r3, r2, r3
 800300e:	0c9b      	lsrs	r3, r3, #18
 8003010:	3301      	adds	r3, #1
 8003012:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003014:	e002      	b.n	800301c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	3b01      	subs	r3, #1
 800301a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800301c:	4b14      	ldr	r3, [pc, #80]	; (8003070 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800301e:	695b      	ldr	r3, [r3, #20]
 8003020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003024:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003028:	d102      	bne.n	8003030 <HAL_PWREx_ControlVoltageScaling+0x60>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1f2      	bne.n	8003016 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003030:	4b0f      	ldr	r3, [pc, #60]	; (8003070 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003032:	695b      	ldr	r3, [r3, #20]
 8003034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003038:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800303c:	d110      	bne.n	8003060 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e00f      	b.n	8003062 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003042:	4b0b      	ldr	r3, [pc, #44]	; (8003070 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800304a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800304e:	d007      	beq.n	8003060 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003050:	4b07      	ldr	r3, [pc, #28]	; (8003070 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003058:	4a05      	ldr	r2, [pc, #20]	; (8003070 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800305a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800305e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3714      	adds	r7, #20
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	40007000 	.word	0x40007000
 8003074:	20000000 	.word	0x20000000
 8003078:	431bde83 	.word	0x431bde83

0800307c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b088      	sub	sp, #32
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e3ca      	b.n	8003824 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800308e:	4b97      	ldr	r3, [pc, #604]	; (80032ec <HAL_RCC_OscConfig+0x270>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 030c 	and.w	r3, r3, #12
 8003096:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003098:	4b94      	ldr	r3, [pc, #592]	; (80032ec <HAL_RCC_OscConfig+0x270>)
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	f003 0303 	and.w	r3, r3, #3
 80030a0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0310 	and.w	r3, r3, #16
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f000 80e4 	beq.w	8003278 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d007      	beq.n	80030c6 <HAL_RCC_OscConfig+0x4a>
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	2b0c      	cmp	r3, #12
 80030ba:	f040 808b 	bne.w	80031d4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	f040 8087 	bne.w	80031d4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80030c6:	4b89      	ldr	r3, [pc, #548]	; (80032ec <HAL_RCC_OscConfig+0x270>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d005      	beq.n	80030de <HAL_RCC_OscConfig+0x62>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e3a2      	b.n	8003824 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a1a      	ldr	r2, [r3, #32]
 80030e2:	4b82      	ldr	r3, [pc, #520]	; (80032ec <HAL_RCC_OscConfig+0x270>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0308 	and.w	r3, r3, #8
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d004      	beq.n	80030f8 <HAL_RCC_OscConfig+0x7c>
 80030ee:	4b7f      	ldr	r3, [pc, #508]	; (80032ec <HAL_RCC_OscConfig+0x270>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030f6:	e005      	b.n	8003104 <HAL_RCC_OscConfig+0x88>
 80030f8:	4b7c      	ldr	r3, [pc, #496]	; (80032ec <HAL_RCC_OscConfig+0x270>)
 80030fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030fe:	091b      	lsrs	r3, r3, #4
 8003100:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003104:	4293      	cmp	r3, r2
 8003106:	d223      	bcs.n	8003150 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a1b      	ldr	r3, [r3, #32]
 800310c:	4618      	mov	r0, r3
 800310e:	f000 fd55 	bl	8003bbc <RCC_SetFlashLatencyFromMSIRange>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d001      	beq.n	800311c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e383      	b.n	8003824 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800311c:	4b73      	ldr	r3, [pc, #460]	; (80032ec <HAL_RCC_OscConfig+0x270>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a72      	ldr	r2, [pc, #456]	; (80032ec <HAL_RCC_OscConfig+0x270>)
 8003122:	f043 0308 	orr.w	r3, r3, #8
 8003126:	6013      	str	r3, [r2, #0]
 8003128:	4b70      	ldr	r3, [pc, #448]	; (80032ec <HAL_RCC_OscConfig+0x270>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a1b      	ldr	r3, [r3, #32]
 8003134:	496d      	ldr	r1, [pc, #436]	; (80032ec <HAL_RCC_OscConfig+0x270>)
 8003136:	4313      	orrs	r3, r2
 8003138:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800313a:	4b6c      	ldr	r3, [pc, #432]	; (80032ec <HAL_RCC_OscConfig+0x270>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	021b      	lsls	r3, r3, #8
 8003148:	4968      	ldr	r1, [pc, #416]	; (80032ec <HAL_RCC_OscConfig+0x270>)
 800314a:	4313      	orrs	r3, r2
 800314c:	604b      	str	r3, [r1, #4]
 800314e:	e025      	b.n	800319c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003150:	4b66      	ldr	r3, [pc, #408]	; (80032ec <HAL_RCC_OscConfig+0x270>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a65      	ldr	r2, [pc, #404]	; (80032ec <HAL_RCC_OscConfig+0x270>)
 8003156:	f043 0308 	orr.w	r3, r3, #8
 800315a:	6013      	str	r3, [r2, #0]
 800315c:	4b63      	ldr	r3, [pc, #396]	; (80032ec <HAL_RCC_OscConfig+0x270>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	4960      	ldr	r1, [pc, #384]	; (80032ec <HAL_RCC_OscConfig+0x270>)
 800316a:	4313      	orrs	r3, r2
 800316c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800316e:	4b5f      	ldr	r3, [pc, #380]	; (80032ec <HAL_RCC_OscConfig+0x270>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	021b      	lsls	r3, r3, #8
 800317c:	495b      	ldr	r1, [pc, #364]	; (80032ec <HAL_RCC_OscConfig+0x270>)
 800317e:	4313      	orrs	r3, r2
 8003180:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d109      	bne.n	800319c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	4618      	mov	r0, r3
 800318e:	f000 fd15 	bl	8003bbc <RCC_SetFlashLatencyFromMSIRange>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d001      	beq.n	800319c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e343      	b.n	8003824 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800319c:	f000 fc4a 	bl	8003a34 <HAL_RCC_GetSysClockFreq>
 80031a0:	4602      	mov	r2, r0
 80031a2:	4b52      	ldr	r3, [pc, #328]	; (80032ec <HAL_RCC_OscConfig+0x270>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	091b      	lsrs	r3, r3, #4
 80031a8:	f003 030f 	and.w	r3, r3, #15
 80031ac:	4950      	ldr	r1, [pc, #320]	; (80032f0 <HAL_RCC_OscConfig+0x274>)
 80031ae:	5ccb      	ldrb	r3, [r1, r3]
 80031b0:	f003 031f 	and.w	r3, r3, #31
 80031b4:	fa22 f303 	lsr.w	r3, r2, r3
 80031b8:	4a4e      	ldr	r2, [pc, #312]	; (80032f4 <HAL_RCC_OscConfig+0x278>)
 80031ba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80031bc:	4b4e      	ldr	r3, [pc, #312]	; (80032f8 <HAL_RCC_OscConfig+0x27c>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff fb67 	bl	8002894 <HAL_InitTick>
 80031c6:	4603      	mov	r3, r0
 80031c8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80031ca:	7bfb      	ldrb	r3, [r7, #15]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d052      	beq.n	8003276 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80031d0:	7bfb      	ldrb	r3, [r7, #15]
 80031d2:	e327      	b.n	8003824 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d032      	beq.n	8003242 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80031dc:	4b43      	ldr	r3, [pc, #268]	; (80032ec <HAL_RCC_OscConfig+0x270>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a42      	ldr	r2, [pc, #264]	; (80032ec <HAL_RCC_OscConfig+0x270>)
 80031e2:	f043 0301 	orr.w	r3, r3, #1
 80031e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031e8:	f7ff fba4 	bl	8002934 <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031f0:	f7ff fba0 	bl	8002934 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e310      	b.n	8003824 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003202:	4b3a      	ldr	r3, [pc, #232]	; (80032ec <HAL_RCC_OscConfig+0x270>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d0f0      	beq.n	80031f0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800320e:	4b37      	ldr	r3, [pc, #220]	; (80032ec <HAL_RCC_OscConfig+0x270>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a36      	ldr	r2, [pc, #216]	; (80032ec <HAL_RCC_OscConfig+0x270>)
 8003214:	f043 0308 	orr.w	r3, r3, #8
 8003218:	6013      	str	r3, [r2, #0]
 800321a:	4b34      	ldr	r3, [pc, #208]	; (80032ec <HAL_RCC_OscConfig+0x270>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	4931      	ldr	r1, [pc, #196]	; (80032ec <HAL_RCC_OscConfig+0x270>)
 8003228:	4313      	orrs	r3, r2
 800322a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800322c:	4b2f      	ldr	r3, [pc, #188]	; (80032ec <HAL_RCC_OscConfig+0x270>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	69db      	ldr	r3, [r3, #28]
 8003238:	021b      	lsls	r3, r3, #8
 800323a:	492c      	ldr	r1, [pc, #176]	; (80032ec <HAL_RCC_OscConfig+0x270>)
 800323c:	4313      	orrs	r3, r2
 800323e:	604b      	str	r3, [r1, #4]
 8003240:	e01a      	b.n	8003278 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003242:	4b2a      	ldr	r3, [pc, #168]	; (80032ec <HAL_RCC_OscConfig+0x270>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a29      	ldr	r2, [pc, #164]	; (80032ec <HAL_RCC_OscConfig+0x270>)
 8003248:	f023 0301 	bic.w	r3, r3, #1
 800324c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800324e:	f7ff fb71 	bl	8002934 <HAL_GetTick>
 8003252:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003254:	e008      	b.n	8003268 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003256:	f7ff fb6d 	bl	8002934 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d901      	bls.n	8003268 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e2dd      	b.n	8003824 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003268:	4b20      	ldr	r3, [pc, #128]	; (80032ec <HAL_RCC_OscConfig+0x270>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1f0      	bne.n	8003256 <HAL_RCC_OscConfig+0x1da>
 8003274:	e000      	b.n	8003278 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003276:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0301 	and.w	r3, r3, #1
 8003280:	2b00      	cmp	r3, #0
 8003282:	d074      	beq.n	800336e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	2b08      	cmp	r3, #8
 8003288:	d005      	beq.n	8003296 <HAL_RCC_OscConfig+0x21a>
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	2b0c      	cmp	r3, #12
 800328e:	d10e      	bne.n	80032ae <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	2b03      	cmp	r3, #3
 8003294:	d10b      	bne.n	80032ae <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003296:	4b15      	ldr	r3, [pc, #84]	; (80032ec <HAL_RCC_OscConfig+0x270>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d064      	beq.n	800336c <HAL_RCC_OscConfig+0x2f0>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d160      	bne.n	800336c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e2ba      	b.n	8003824 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032b6:	d106      	bne.n	80032c6 <HAL_RCC_OscConfig+0x24a>
 80032b8:	4b0c      	ldr	r3, [pc, #48]	; (80032ec <HAL_RCC_OscConfig+0x270>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a0b      	ldr	r2, [pc, #44]	; (80032ec <HAL_RCC_OscConfig+0x270>)
 80032be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c2:	6013      	str	r3, [r2, #0]
 80032c4:	e026      	b.n	8003314 <HAL_RCC_OscConfig+0x298>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032ce:	d115      	bne.n	80032fc <HAL_RCC_OscConfig+0x280>
 80032d0:	4b06      	ldr	r3, [pc, #24]	; (80032ec <HAL_RCC_OscConfig+0x270>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a05      	ldr	r2, [pc, #20]	; (80032ec <HAL_RCC_OscConfig+0x270>)
 80032d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032da:	6013      	str	r3, [r2, #0]
 80032dc:	4b03      	ldr	r3, [pc, #12]	; (80032ec <HAL_RCC_OscConfig+0x270>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a02      	ldr	r2, [pc, #8]	; (80032ec <HAL_RCC_OscConfig+0x270>)
 80032e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032e6:	6013      	str	r3, [r2, #0]
 80032e8:	e014      	b.n	8003314 <HAL_RCC_OscConfig+0x298>
 80032ea:	bf00      	nop
 80032ec:	40021000 	.word	0x40021000
 80032f0:	080063e8 	.word	0x080063e8
 80032f4:	20000000 	.word	0x20000000
 80032f8:	20000004 	.word	0x20000004
 80032fc:	4ba0      	ldr	r3, [pc, #640]	; (8003580 <HAL_RCC_OscConfig+0x504>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a9f      	ldr	r2, [pc, #636]	; (8003580 <HAL_RCC_OscConfig+0x504>)
 8003302:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003306:	6013      	str	r3, [r2, #0]
 8003308:	4b9d      	ldr	r3, [pc, #628]	; (8003580 <HAL_RCC_OscConfig+0x504>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a9c      	ldr	r2, [pc, #624]	; (8003580 <HAL_RCC_OscConfig+0x504>)
 800330e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003312:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d013      	beq.n	8003344 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331c:	f7ff fb0a 	bl	8002934 <HAL_GetTick>
 8003320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003324:	f7ff fb06 	bl	8002934 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b64      	cmp	r3, #100	; 0x64
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e276      	b.n	8003824 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003336:	4b92      	ldr	r3, [pc, #584]	; (8003580 <HAL_RCC_OscConfig+0x504>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d0f0      	beq.n	8003324 <HAL_RCC_OscConfig+0x2a8>
 8003342:	e014      	b.n	800336e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003344:	f7ff faf6 	bl	8002934 <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800334c:	f7ff faf2 	bl	8002934 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b64      	cmp	r3, #100	; 0x64
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e262      	b.n	8003824 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800335e:	4b88      	ldr	r3, [pc, #544]	; (8003580 <HAL_RCC_OscConfig+0x504>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1f0      	bne.n	800334c <HAL_RCC_OscConfig+0x2d0>
 800336a:	e000      	b.n	800336e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800336c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d060      	beq.n	800343c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	2b04      	cmp	r3, #4
 800337e:	d005      	beq.n	800338c <HAL_RCC_OscConfig+0x310>
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	2b0c      	cmp	r3, #12
 8003384:	d119      	bne.n	80033ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	2b02      	cmp	r3, #2
 800338a:	d116      	bne.n	80033ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800338c:	4b7c      	ldr	r3, [pc, #496]	; (8003580 <HAL_RCC_OscConfig+0x504>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003394:	2b00      	cmp	r3, #0
 8003396:	d005      	beq.n	80033a4 <HAL_RCC_OscConfig+0x328>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d101      	bne.n	80033a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e23f      	b.n	8003824 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a4:	4b76      	ldr	r3, [pc, #472]	; (8003580 <HAL_RCC_OscConfig+0x504>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	061b      	lsls	r3, r3, #24
 80033b2:	4973      	ldr	r1, [pc, #460]	; (8003580 <HAL_RCC_OscConfig+0x504>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033b8:	e040      	b.n	800343c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d023      	beq.n	800340a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033c2:	4b6f      	ldr	r3, [pc, #444]	; (8003580 <HAL_RCC_OscConfig+0x504>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a6e      	ldr	r2, [pc, #440]	; (8003580 <HAL_RCC_OscConfig+0x504>)
 80033c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ce:	f7ff fab1 	bl	8002934 <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033d4:	e008      	b.n	80033e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033d6:	f7ff faad 	bl	8002934 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e21d      	b.n	8003824 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033e8:	4b65      	ldr	r3, [pc, #404]	; (8003580 <HAL_RCC_OscConfig+0x504>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d0f0      	beq.n	80033d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f4:	4b62      	ldr	r3, [pc, #392]	; (8003580 <HAL_RCC_OscConfig+0x504>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	061b      	lsls	r3, r3, #24
 8003402:	495f      	ldr	r1, [pc, #380]	; (8003580 <HAL_RCC_OscConfig+0x504>)
 8003404:	4313      	orrs	r3, r2
 8003406:	604b      	str	r3, [r1, #4]
 8003408:	e018      	b.n	800343c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800340a:	4b5d      	ldr	r3, [pc, #372]	; (8003580 <HAL_RCC_OscConfig+0x504>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a5c      	ldr	r2, [pc, #368]	; (8003580 <HAL_RCC_OscConfig+0x504>)
 8003410:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003414:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003416:	f7ff fa8d 	bl	8002934 <HAL_GetTick>
 800341a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800341c:	e008      	b.n	8003430 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800341e:	f7ff fa89 	bl	8002934 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e1f9      	b.n	8003824 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003430:	4b53      	ldr	r3, [pc, #332]	; (8003580 <HAL_RCC_OscConfig+0x504>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1f0      	bne.n	800341e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0308 	and.w	r3, r3, #8
 8003444:	2b00      	cmp	r3, #0
 8003446:	d03c      	beq.n	80034c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	695b      	ldr	r3, [r3, #20]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d01c      	beq.n	800348a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003450:	4b4b      	ldr	r3, [pc, #300]	; (8003580 <HAL_RCC_OscConfig+0x504>)
 8003452:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003456:	4a4a      	ldr	r2, [pc, #296]	; (8003580 <HAL_RCC_OscConfig+0x504>)
 8003458:	f043 0301 	orr.w	r3, r3, #1
 800345c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003460:	f7ff fa68 	bl	8002934 <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003468:	f7ff fa64 	bl	8002934 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e1d4      	b.n	8003824 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800347a:	4b41      	ldr	r3, [pc, #260]	; (8003580 <HAL_RCC_OscConfig+0x504>)
 800347c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d0ef      	beq.n	8003468 <HAL_RCC_OscConfig+0x3ec>
 8003488:	e01b      	b.n	80034c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800348a:	4b3d      	ldr	r3, [pc, #244]	; (8003580 <HAL_RCC_OscConfig+0x504>)
 800348c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003490:	4a3b      	ldr	r2, [pc, #236]	; (8003580 <HAL_RCC_OscConfig+0x504>)
 8003492:	f023 0301 	bic.w	r3, r3, #1
 8003496:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800349a:	f7ff fa4b 	bl	8002934 <HAL_GetTick>
 800349e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034a0:	e008      	b.n	80034b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034a2:	f7ff fa47 	bl	8002934 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d901      	bls.n	80034b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e1b7      	b.n	8003824 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034b4:	4b32      	ldr	r3, [pc, #200]	; (8003580 <HAL_RCC_OscConfig+0x504>)
 80034b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1ef      	bne.n	80034a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0304 	and.w	r3, r3, #4
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f000 80a6 	beq.w	800361c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034d0:	2300      	movs	r3, #0
 80034d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80034d4:	4b2a      	ldr	r3, [pc, #168]	; (8003580 <HAL_RCC_OscConfig+0x504>)
 80034d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d10d      	bne.n	80034fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034e0:	4b27      	ldr	r3, [pc, #156]	; (8003580 <HAL_RCC_OscConfig+0x504>)
 80034e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e4:	4a26      	ldr	r2, [pc, #152]	; (8003580 <HAL_RCC_OscConfig+0x504>)
 80034e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ea:	6593      	str	r3, [r2, #88]	; 0x58
 80034ec:	4b24      	ldr	r3, [pc, #144]	; (8003580 <HAL_RCC_OscConfig+0x504>)
 80034ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034f4:	60bb      	str	r3, [r7, #8]
 80034f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034f8:	2301      	movs	r3, #1
 80034fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034fc:	4b21      	ldr	r3, [pc, #132]	; (8003584 <HAL_RCC_OscConfig+0x508>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003504:	2b00      	cmp	r3, #0
 8003506:	d118      	bne.n	800353a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003508:	4b1e      	ldr	r3, [pc, #120]	; (8003584 <HAL_RCC_OscConfig+0x508>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a1d      	ldr	r2, [pc, #116]	; (8003584 <HAL_RCC_OscConfig+0x508>)
 800350e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003512:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003514:	f7ff fa0e 	bl	8002934 <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800351c:	f7ff fa0a 	bl	8002934 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e17a      	b.n	8003824 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800352e:	4b15      	ldr	r3, [pc, #84]	; (8003584 <HAL_RCC_OscConfig+0x508>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003536:	2b00      	cmp	r3, #0
 8003538:	d0f0      	beq.n	800351c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d108      	bne.n	8003554 <HAL_RCC_OscConfig+0x4d8>
 8003542:	4b0f      	ldr	r3, [pc, #60]	; (8003580 <HAL_RCC_OscConfig+0x504>)
 8003544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003548:	4a0d      	ldr	r2, [pc, #52]	; (8003580 <HAL_RCC_OscConfig+0x504>)
 800354a:	f043 0301 	orr.w	r3, r3, #1
 800354e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003552:	e029      	b.n	80035a8 <HAL_RCC_OscConfig+0x52c>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	2b05      	cmp	r3, #5
 800355a:	d115      	bne.n	8003588 <HAL_RCC_OscConfig+0x50c>
 800355c:	4b08      	ldr	r3, [pc, #32]	; (8003580 <HAL_RCC_OscConfig+0x504>)
 800355e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003562:	4a07      	ldr	r2, [pc, #28]	; (8003580 <HAL_RCC_OscConfig+0x504>)
 8003564:	f043 0304 	orr.w	r3, r3, #4
 8003568:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800356c:	4b04      	ldr	r3, [pc, #16]	; (8003580 <HAL_RCC_OscConfig+0x504>)
 800356e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003572:	4a03      	ldr	r2, [pc, #12]	; (8003580 <HAL_RCC_OscConfig+0x504>)
 8003574:	f043 0301 	orr.w	r3, r3, #1
 8003578:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800357c:	e014      	b.n	80035a8 <HAL_RCC_OscConfig+0x52c>
 800357e:	bf00      	nop
 8003580:	40021000 	.word	0x40021000
 8003584:	40007000 	.word	0x40007000
 8003588:	4b9c      	ldr	r3, [pc, #624]	; (80037fc <HAL_RCC_OscConfig+0x780>)
 800358a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800358e:	4a9b      	ldr	r2, [pc, #620]	; (80037fc <HAL_RCC_OscConfig+0x780>)
 8003590:	f023 0301 	bic.w	r3, r3, #1
 8003594:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003598:	4b98      	ldr	r3, [pc, #608]	; (80037fc <HAL_RCC_OscConfig+0x780>)
 800359a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800359e:	4a97      	ldr	r2, [pc, #604]	; (80037fc <HAL_RCC_OscConfig+0x780>)
 80035a0:	f023 0304 	bic.w	r3, r3, #4
 80035a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d016      	beq.n	80035de <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b0:	f7ff f9c0 	bl	8002934 <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035b6:	e00a      	b.n	80035ce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035b8:	f7ff f9bc 	bl	8002934 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e12a      	b.n	8003824 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035ce:	4b8b      	ldr	r3, [pc, #556]	; (80037fc <HAL_RCC_OscConfig+0x780>)
 80035d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d0ed      	beq.n	80035b8 <HAL_RCC_OscConfig+0x53c>
 80035dc:	e015      	b.n	800360a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035de:	f7ff f9a9 	bl	8002934 <HAL_GetTick>
 80035e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035e4:	e00a      	b.n	80035fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035e6:	f7ff f9a5 	bl	8002934 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d901      	bls.n	80035fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e113      	b.n	8003824 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035fc:	4b7f      	ldr	r3, [pc, #508]	; (80037fc <HAL_RCC_OscConfig+0x780>)
 80035fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1ed      	bne.n	80035e6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800360a:	7ffb      	ldrb	r3, [r7, #31]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d105      	bne.n	800361c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003610:	4b7a      	ldr	r3, [pc, #488]	; (80037fc <HAL_RCC_OscConfig+0x780>)
 8003612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003614:	4a79      	ldr	r2, [pc, #484]	; (80037fc <HAL_RCC_OscConfig+0x780>)
 8003616:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800361a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 80fe 	beq.w	8003822 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362a:	2b02      	cmp	r3, #2
 800362c:	f040 80d0 	bne.w	80037d0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003630:	4b72      	ldr	r3, [pc, #456]	; (80037fc <HAL_RCC_OscConfig+0x780>)
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	f003 0203 	and.w	r2, r3, #3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003640:	429a      	cmp	r2, r3
 8003642:	d130      	bne.n	80036a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364e:	3b01      	subs	r3, #1
 8003650:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003652:	429a      	cmp	r2, r3
 8003654:	d127      	bne.n	80036a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003660:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003662:	429a      	cmp	r2, r3
 8003664:	d11f      	bne.n	80036a6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003670:	2a07      	cmp	r2, #7
 8003672:	bf14      	ite	ne
 8003674:	2201      	movne	r2, #1
 8003676:	2200      	moveq	r2, #0
 8003678:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800367a:	4293      	cmp	r3, r2
 800367c:	d113      	bne.n	80036a6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003688:	085b      	lsrs	r3, r3, #1
 800368a:	3b01      	subs	r3, #1
 800368c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800368e:	429a      	cmp	r2, r3
 8003690:	d109      	bne.n	80036a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369c:	085b      	lsrs	r3, r3, #1
 800369e:	3b01      	subs	r3, #1
 80036a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d06e      	beq.n	8003784 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	2b0c      	cmp	r3, #12
 80036aa:	d069      	beq.n	8003780 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80036ac:	4b53      	ldr	r3, [pc, #332]	; (80037fc <HAL_RCC_OscConfig+0x780>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d105      	bne.n	80036c4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80036b8:	4b50      	ldr	r3, [pc, #320]	; (80037fc <HAL_RCC_OscConfig+0x780>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e0ad      	b.n	8003824 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80036c8:	4b4c      	ldr	r3, [pc, #304]	; (80037fc <HAL_RCC_OscConfig+0x780>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a4b      	ldr	r2, [pc, #300]	; (80037fc <HAL_RCC_OscConfig+0x780>)
 80036ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036d2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036d4:	f7ff f92e 	bl	8002934 <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036da:	e008      	b.n	80036ee <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036dc:	f7ff f92a 	bl	8002934 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e09a      	b.n	8003824 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036ee:	4b43      	ldr	r3, [pc, #268]	; (80037fc <HAL_RCC_OscConfig+0x780>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1f0      	bne.n	80036dc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036fa:	4b40      	ldr	r3, [pc, #256]	; (80037fc <HAL_RCC_OscConfig+0x780>)
 80036fc:	68da      	ldr	r2, [r3, #12]
 80036fe:	4b40      	ldr	r3, [pc, #256]	; (8003800 <HAL_RCC_OscConfig+0x784>)
 8003700:	4013      	ands	r3, r2
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800370a:	3a01      	subs	r2, #1
 800370c:	0112      	lsls	r2, r2, #4
 800370e:	4311      	orrs	r1, r2
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003714:	0212      	lsls	r2, r2, #8
 8003716:	4311      	orrs	r1, r2
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800371c:	0852      	lsrs	r2, r2, #1
 800371e:	3a01      	subs	r2, #1
 8003720:	0552      	lsls	r2, r2, #21
 8003722:	4311      	orrs	r1, r2
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003728:	0852      	lsrs	r2, r2, #1
 800372a:	3a01      	subs	r2, #1
 800372c:	0652      	lsls	r2, r2, #25
 800372e:	4311      	orrs	r1, r2
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003734:	0912      	lsrs	r2, r2, #4
 8003736:	0452      	lsls	r2, r2, #17
 8003738:	430a      	orrs	r2, r1
 800373a:	4930      	ldr	r1, [pc, #192]	; (80037fc <HAL_RCC_OscConfig+0x780>)
 800373c:	4313      	orrs	r3, r2
 800373e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003740:	4b2e      	ldr	r3, [pc, #184]	; (80037fc <HAL_RCC_OscConfig+0x780>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a2d      	ldr	r2, [pc, #180]	; (80037fc <HAL_RCC_OscConfig+0x780>)
 8003746:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800374a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800374c:	4b2b      	ldr	r3, [pc, #172]	; (80037fc <HAL_RCC_OscConfig+0x780>)
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	4a2a      	ldr	r2, [pc, #168]	; (80037fc <HAL_RCC_OscConfig+0x780>)
 8003752:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003756:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003758:	f7ff f8ec 	bl	8002934 <HAL_GetTick>
 800375c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800375e:	e008      	b.n	8003772 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003760:	f7ff f8e8 	bl	8002934 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b02      	cmp	r3, #2
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e058      	b.n	8003824 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003772:	4b22      	ldr	r3, [pc, #136]	; (80037fc <HAL_RCC_OscConfig+0x780>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d0f0      	beq.n	8003760 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800377e:	e050      	b.n	8003822 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e04f      	b.n	8003824 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003784:	4b1d      	ldr	r3, [pc, #116]	; (80037fc <HAL_RCC_OscConfig+0x780>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d148      	bne.n	8003822 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003790:	4b1a      	ldr	r3, [pc, #104]	; (80037fc <HAL_RCC_OscConfig+0x780>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a19      	ldr	r2, [pc, #100]	; (80037fc <HAL_RCC_OscConfig+0x780>)
 8003796:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800379a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800379c:	4b17      	ldr	r3, [pc, #92]	; (80037fc <HAL_RCC_OscConfig+0x780>)
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	4a16      	ldr	r2, [pc, #88]	; (80037fc <HAL_RCC_OscConfig+0x780>)
 80037a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80037a8:	f7ff f8c4 	bl	8002934 <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037b0:	f7ff f8c0 	bl	8002934 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e030      	b.n	8003824 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037c2:	4b0e      	ldr	r3, [pc, #56]	; (80037fc <HAL_RCC_OscConfig+0x780>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d0f0      	beq.n	80037b0 <HAL_RCC_OscConfig+0x734>
 80037ce:	e028      	b.n	8003822 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	2b0c      	cmp	r3, #12
 80037d4:	d023      	beq.n	800381e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037d6:	4b09      	ldr	r3, [pc, #36]	; (80037fc <HAL_RCC_OscConfig+0x780>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a08      	ldr	r2, [pc, #32]	; (80037fc <HAL_RCC_OscConfig+0x780>)
 80037dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e2:	f7ff f8a7 	bl	8002934 <HAL_GetTick>
 80037e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037e8:	e00c      	b.n	8003804 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ea:	f7ff f8a3 	bl	8002934 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d905      	bls.n	8003804 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e013      	b.n	8003824 <HAL_RCC_OscConfig+0x7a8>
 80037fc:	40021000 	.word	0x40021000
 8003800:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003804:	4b09      	ldr	r3, [pc, #36]	; (800382c <HAL_RCC_OscConfig+0x7b0>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1ec      	bne.n	80037ea <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003810:	4b06      	ldr	r3, [pc, #24]	; (800382c <HAL_RCC_OscConfig+0x7b0>)
 8003812:	68da      	ldr	r2, [r3, #12]
 8003814:	4905      	ldr	r1, [pc, #20]	; (800382c <HAL_RCC_OscConfig+0x7b0>)
 8003816:	4b06      	ldr	r3, [pc, #24]	; (8003830 <HAL_RCC_OscConfig+0x7b4>)
 8003818:	4013      	ands	r3, r2
 800381a:	60cb      	str	r3, [r1, #12]
 800381c:	e001      	b.n	8003822 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e000      	b.n	8003824 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3720      	adds	r7, #32
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	40021000 	.word	0x40021000
 8003830:	feeefffc 	.word	0xfeeefffc

08003834 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d101      	bne.n	8003848 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e0e7      	b.n	8003a18 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003848:	4b75      	ldr	r3, [pc, #468]	; (8003a20 <HAL_RCC_ClockConfig+0x1ec>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0307 	and.w	r3, r3, #7
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	429a      	cmp	r2, r3
 8003854:	d910      	bls.n	8003878 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003856:	4b72      	ldr	r3, [pc, #456]	; (8003a20 <HAL_RCC_ClockConfig+0x1ec>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f023 0207 	bic.w	r2, r3, #7
 800385e:	4970      	ldr	r1, [pc, #448]	; (8003a20 <HAL_RCC_ClockConfig+0x1ec>)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	4313      	orrs	r3, r2
 8003864:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003866:	4b6e      	ldr	r3, [pc, #440]	; (8003a20 <HAL_RCC_ClockConfig+0x1ec>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0307 	and.w	r3, r3, #7
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	429a      	cmp	r2, r3
 8003872:	d001      	beq.n	8003878 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e0cf      	b.n	8003a18 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d010      	beq.n	80038a6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689a      	ldr	r2, [r3, #8]
 8003888:	4b66      	ldr	r3, [pc, #408]	; (8003a24 <HAL_RCC_ClockConfig+0x1f0>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003890:	429a      	cmp	r2, r3
 8003892:	d908      	bls.n	80038a6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003894:	4b63      	ldr	r3, [pc, #396]	; (8003a24 <HAL_RCC_ClockConfig+0x1f0>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	4960      	ldr	r1, [pc, #384]	; (8003a24 <HAL_RCC_ClockConfig+0x1f0>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d04c      	beq.n	800394c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	2b03      	cmp	r3, #3
 80038b8:	d107      	bne.n	80038ca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ba:	4b5a      	ldr	r3, [pc, #360]	; (8003a24 <HAL_RCC_ClockConfig+0x1f0>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d121      	bne.n	800390a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e0a6      	b.n	8003a18 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d107      	bne.n	80038e2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038d2:	4b54      	ldr	r3, [pc, #336]	; (8003a24 <HAL_RCC_ClockConfig+0x1f0>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d115      	bne.n	800390a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e09a      	b.n	8003a18 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d107      	bne.n	80038fa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038ea:	4b4e      	ldr	r3, [pc, #312]	; (8003a24 <HAL_RCC_ClockConfig+0x1f0>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d109      	bne.n	800390a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e08e      	b.n	8003a18 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038fa:	4b4a      	ldr	r3, [pc, #296]	; (8003a24 <HAL_RCC_ClockConfig+0x1f0>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003902:	2b00      	cmp	r3, #0
 8003904:	d101      	bne.n	800390a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e086      	b.n	8003a18 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800390a:	4b46      	ldr	r3, [pc, #280]	; (8003a24 <HAL_RCC_ClockConfig+0x1f0>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f023 0203 	bic.w	r2, r3, #3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	4943      	ldr	r1, [pc, #268]	; (8003a24 <HAL_RCC_ClockConfig+0x1f0>)
 8003918:	4313      	orrs	r3, r2
 800391a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800391c:	f7ff f80a 	bl	8002934 <HAL_GetTick>
 8003920:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003922:	e00a      	b.n	800393a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003924:	f7ff f806 	bl	8002934 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003932:	4293      	cmp	r3, r2
 8003934:	d901      	bls.n	800393a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e06e      	b.n	8003a18 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800393a:	4b3a      	ldr	r3, [pc, #232]	; (8003a24 <HAL_RCC_ClockConfig+0x1f0>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f003 020c 	and.w	r2, r3, #12
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	429a      	cmp	r2, r3
 800394a:	d1eb      	bne.n	8003924 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d010      	beq.n	800397a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689a      	ldr	r2, [r3, #8]
 800395c:	4b31      	ldr	r3, [pc, #196]	; (8003a24 <HAL_RCC_ClockConfig+0x1f0>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003964:	429a      	cmp	r2, r3
 8003966:	d208      	bcs.n	800397a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003968:	4b2e      	ldr	r3, [pc, #184]	; (8003a24 <HAL_RCC_ClockConfig+0x1f0>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	492b      	ldr	r1, [pc, #172]	; (8003a24 <HAL_RCC_ClockConfig+0x1f0>)
 8003976:	4313      	orrs	r3, r2
 8003978:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800397a:	4b29      	ldr	r3, [pc, #164]	; (8003a20 <HAL_RCC_ClockConfig+0x1ec>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0307 	and.w	r3, r3, #7
 8003982:	683a      	ldr	r2, [r7, #0]
 8003984:	429a      	cmp	r2, r3
 8003986:	d210      	bcs.n	80039aa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003988:	4b25      	ldr	r3, [pc, #148]	; (8003a20 <HAL_RCC_ClockConfig+0x1ec>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f023 0207 	bic.w	r2, r3, #7
 8003990:	4923      	ldr	r1, [pc, #140]	; (8003a20 <HAL_RCC_ClockConfig+0x1ec>)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	4313      	orrs	r3, r2
 8003996:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003998:	4b21      	ldr	r3, [pc, #132]	; (8003a20 <HAL_RCC_ClockConfig+0x1ec>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0307 	and.w	r3, r3, #7
 80039a0:	683a      	ldr	r2, [r7, #0]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d001      	beq.n	80039aa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e036      	b.n	8003a18 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0304 	and.w	r3, r3, #4
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d008      	beq.n	80039c8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039b6:	4b1b      	ldr	r3, [pc, #108]	; (8003a24 <HAL_RCC_ClockConfig+0x1f0>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	4918      	ldr	r1, [pc, #96]	; (8003a24 <HAL_RCC_ClockConfig+0x1f0>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0308 	and.w	r3, r3, #8
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d009      	beq.n	80039e8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039d4:	4b13      	ldr	r3, [pc, #76]	; (8003a24 <HAL_RCC_ClockConfig+0x1f0>)
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	00db      	lsls	r3, r3, #3
 80039e2:	4910      	ldr	r1, [pc, #64]	; (8003a24 <HAL_RCC_ClockConfig+0x1f0>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039e8:	f000 f824 	bl	8003a34 <HAL_RCC_GetSysClockFreq>
 80039ec:	4602      	mov	r2, r0
 80039ee:	4b0d      	ldr	r3, [pc, #52]	; (8003a24 <HAL_RCC_ClockConfig+0x1f0>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	091b      	lsrs	r3, r3, #4
 80039f4:	f003 030f 	and.w	r3, r3, #15
 80039f8:	490b      	ldr	r1, [pc, #44]	; (8003a28 <HAL_RCC_ClockConfig+0x1f4>)
 80039fa:	5ccb      	ldrb	r3, [r1, r3]
 80039fc:	f003 031f 	and.w	r3, r3, #31
 8003a00:	fa22 f303 	lsr.w	r3, r2, r3
 8003a04:	4a09      	ldr	r2, [pc, #36]	; (8003a2c <HAL_RCC_ClockConfig+0x1f8>)
 8003a06:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003a08:	4b09      	ldr	r3, [pc, #36]	; (8003a30 <HAL_RCC_ClockConfig+0x1fc>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7fe ff41 	bl	8002894 <HAL_InitTick>
 8003a12:	4603      	mov	r3, r0
 8003a14:	72fb      	strb	r3, [r7, #11]

  return status;
 8003a16:	7afb      	ldrb	r3, [r7, #11]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3710      	adds	r7, #16
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	40022000 	.word	0x40022000
 8003a24:	40021000 	.word	0x40021000
 8003a28:	080063e8 	.word	0x080063e8
 8003a2c:	20000000 	.word	0x20000000
 8003a30:	20000004 	.word	0x20000004

08003a34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b089      	sub	sp, #36	; 0x24
 8003a38:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	61fb      	str	r3, [r7, #28]
 8003a3e:	2300      	movs	r3, #0
 8003a40:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a42:	4b3e      	ldr	r3, [pc, #248]	; (8003b3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f003 030c 	and.w	r3, r3, #12
 8003a4a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a4c:	4b3b      	ldr	r3, [pc, #236]	; (8003b3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	f003 0303 	and.w	r3, r3, #3
 8003a54:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d005      	beq.n	8003a68 <HAL_RCC_GetSysClockFreq+0x34>
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	2b0c      	cmp	r3, #12
 8003a60:	d121      	bne.n	8003aa6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d11e      	bne.n	8003aa6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a68:	4b34      	ldr	r3, [pc, #208]	; (8003b3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0308 	and.w	r3, r3, #8
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d107      	bne.n	8003a84 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a74:	4b31      	ldr	r3, [pc, #196]	; (8003b3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003a76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a7a:	0a1b      	lsrs	r3, r3, #8
 8003a7c:	f003 030f 	and.w	r3, r3, #15
 8003a80:	61fb      	str	r3, [r7, #28]
 8003a82:	e005      	b.n	8003a90 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a84:	4b2d      	ldr	r3, [pc, #180]	; (8003b3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	091b      	lsrs	r3, r3, #4
 8003a8a:	f003 030f 	and.w	r3, r3, #15
 8003a8e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a90:	4a2b      	ldr	r2, [pc, #172]	; (8003b40 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a98:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d10d      	bne.n	8003abc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003aa4:	e00a      	b.n	8003abc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	2b04      	cmp	r3, #4
 8003aaa:	d102      	bne.n	8003ab2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003aac:	4b25      	ldr	r3, [pc, #148]	; (8003b44 <HAL_RCC_GetSysClockFreq+0x110>)
 8003aae:	61bb      	str	r3, [r7, #24]
 8003ab0:	e004      	b.n	8003abc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	2b08      	cmp	r3, #8
 8003ab6:	d101      	bne.n	8003abc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ab8:	4b23      	ldr	r3, [pc, #140]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x114>)
 8003aba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	2b0c      	cmp	r3, #12
 8003ac0:	d134      	bne.n	8003b2c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ac2:	4b1e      	ldr	r3, [pc, #120]	; (8003b3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	f003 0303 	and.w	r3, r3, #3
 8003aca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d003      	beq.n	8003ada <HAL_RCC_GetSysClockFreq+0xa6>
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	2b03      	cmp	r3, #3
 8003ad6:	d003      	beq.n	8003ae0 <HAL_RCC_GetSysClockFreq+0xac>
 8003ad8:	e005      	b.n	8003ae6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003ada:	4b1a      	ldr	r3, [pc, #104]	; (8003b44 <HAL_RCC_GetSysClockFreq+0x110>)
 8003adc:	617b      	str	r3, [r7, #20]
      break;
 8003ade:	e005      	b.n	8003aec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003ae0:	4b19      	ldr	r3, [pc, #100]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x114>)
 8003ae2:	617b      	str	r3, [r7, #20]
      break;
 8003ae4:	e002      	b.n	8003aec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	617b      	str	r3, [r7, #20]
      break;
 8003aea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003aec:	4b13      	ldr	r3, [pc, #76]	; (8003b3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	091b      	lsrs	r3, r3, #4
 8003af2:	f003 0307 	and.w	r3, r3, #7
 8003af6:	3301      	adds	r3, #1
 8003af8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003afa:	4b10      	ldr	r3, [pc, #64]	; (8003b3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	0a1b      	lsrs	r3, r3, #8
 8003b00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b04:	697a      	ldr	r2, [r7, #20]
 8003b06:	fb03 f202 	mul.w	r2, r3, r2
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b10:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b12:	4b0a      	ldr	r3, [pc, #40]	; (8003b3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	0e5b      	lsrs	r3, r3, #25
 8003b18:	f003 0303 	and.w	r3, r3, #3
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	005b      	lsls	r3, r3, #1
 8003b20:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b2a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003b2c:	69bb      	ldr	r3, [r7, #24]
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3724      	adds	r7, #36	; 0x24
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	40021000 	.word	0x40021000
 8003b40:	08006400 	.word	0x08006400
 8003b44:	00f42400 	.word	0x00f42400
 8003b48:	007a1200 	.word	0x007a1200

08003b4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b50:	4b03      	ldr	r3, [pc, #12]	; (8003b60 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b52:	681b      	ldr	r3, [r3, #0]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	20000000 	.word	0x20000000

08003b64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b68:	f7ff fff0 	bl	8003b4c <HAL_RCC_GetHCLKFreq>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	4b06      	ldr	r3, [pc, #24]	; (8003b88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	0a1b      	lsrs	r3, r3, #8
 8003b74:	f003 0307 	and.w	r3, r3, #7
 8003b78:	4904      	ldr	r1, [pc, #16]	; (8003b8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b7a:	5ccb      	ldrb	r3, [r1, r3]
 8003b7c:	f003 031f 	and.w	r3, r3, #31
 8003b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	40021000 	.word	0x40021000
 8003b8c:	080063f8 	.word	0x080063f8

08003b90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b94:	f7ff ffda 	bl	8003b4c <HAL_RCC_GetHCLKFreq>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	4b06      	ldr	r3, [pc, #24]	; (8003bb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	0adb      	lsrs	r3, r3, #11
 8003ba0:	f003 0307 	and.w	r3, r3, #7
 8003ba4:	4904      	ldr	r1, [pc, #16]	; (8003bb8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ba6:	5ccb      	ldrb	r3, [r1, r3]
 8003ba8:	f003 031f 	and.w	r3, r3, #31
 8003bac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	40021000 	.word	0x40021000
 8003bb8:	080063f8 	.word	0x080063f8

08003bbc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b086      	sub	sp, #24
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003bc8:	4b2a      	ldr	r3, [pc, #168]	; (8003c74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d003      	beq.n	8003bdc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003bd4:	f7ff f9ee 	bl	8002fb4 <HAL_PWREx_GetVoltageRange>
 8003bd8:	6178      	str	r0, [r7, #20]
 8003bda:	e014      	b.n	8003c06 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bdc:	4b25      	ldr	r3, [pc, #148]	; (8003c74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be0:	4a24      	ldr	r2, [pc, #144]	; (8003c74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003be2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003be6:	6593      	str	r3, [r2, #88]	; 0x58
 8003be8:	4b22      	ldr	r3, [pc, #136]	; (8003c74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf0:	60fb      	str	r3, [r7, #12]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003bf4:	f7ff f9de 	bl	8002fb4 <HAL_PWREx_GetVoltageRange>
 8003bf8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003bfa:	4b1e      	ldr	r3, [pc, #120]	; (8003c74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bfe:	4a1d      	ldr	r2, [pc, #116]	; (8003c74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c04:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c0c:	d10b      	bne.n	8003c26 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2b80      	cmp	r3, #128	; 0x80
 8003c12:	d919      	bls.n	8003c48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2ba0      	cmp	r3, #160	; 0xa0
 8003c18:	d902      	bls.n	8003c20 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	613b      	str	r3, [r7, #16]
 8003c1e:	e013      	b.n	8003c48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c20:	2301      	movs	r3, #1
 8003c22:	613b      	str	r3, [r7, #16]
 8003c24:	e010      	b.n	8003c48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b80      	cmp	r3, #128	; 0x80
 8003c2a:	d902      	bls.n	8003c32 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	613b      	str	r3, [r7, #16]
 8003c30:	e00a      	b.n	8003c48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b80      	cmp	r3, #128	; 0x80
 8003c36:	d102      	bne.n	8003c3e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c38:	2302      	movs	r3, #2
 8003c3a:	613b      	str	r3, [r7, #16]
 8003c3c:	e004      	b.n	8003c48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2b70      	cmp	r3, #112	; 0x70
 8003c42:	d101      	bne.n	8003c48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c44:	2301      	movs	r3, #1
 8003c46:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c48:	4b0b      	ldr	r3, [pc, #44]	; (8003c78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f023 0207 	bic.w	r2, r3, #7
 8003c50:	4909      	ldr	r1, [pc, #36]	; (8003c78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c58:	4b07      	ldr	r3, [pc, #28]	; (8003c78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0307 	and.w	r3, r3, #7
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d001      	beq.n	8003c6a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e000      	b.n	8003c6c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3718      	adds	r7, #24
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	40021000 	.word	0x40021000
 8003c78:	40022000 	.word	0x40022000

08003c7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b086      	sub	sp, #24
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c84:	2300      	movs	r3, #0
 8003c86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c88:	2300      	movs	r3, #0
 8003c8a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d041      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c9c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ca0:	d02a      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003ca2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ca6:	d824      	bhi.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ca8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003cac:	d008      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003cae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003cb2:	d81e      	bhi.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00a      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003cb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cbc:	d010      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003cbe:	e018      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003cc0:	4b86      	ldr	r3, [pc, #536]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	4a85      	ldr	r2, [pc, #532]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cca:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ccc:	e015      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	3304      	adds	r3, #4
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f000 fabb 	bl	8004250 <RCCEx_PLLSAI1_Config>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cde:	e00c      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	3320      	adds	r3, #32
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f000 fba6 	bl	8004438 <RCCEx_PLLSAI2_Config>
 8003cec:	4603      	mov	r3, r0
 8003cee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cf0:	e003      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	74fb      	strb	r3, [r7, #19]
      break;
 8003cf6:	e000      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003cf8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cfa:	7cfb      	ldrb	r3, [r7, #19]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d10b      	bne.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d00:	4b76      	ldr	r3, [pc, #472]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d06:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d0e:	4973      	ldr	r1, [pc, #460]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003d16:	e001      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d18:	7cfb      	ldrb	r3, [r7, #19]
 8003d1a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d041      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d2c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003d30:	d02a      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003d32:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003d36:	d824      	bhi.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003d38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d3c:	d008      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003d3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d42:	d81e      	bhi.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00a      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003d48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d4c:	d010      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003d4e:	e018      	b.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d50:	4b62      	ldr	r3, [pc, #392]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	4a61      	ldr	r2, [pc, #388]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d5a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d5c:	e015      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	3304      	adds	r3, #4
 8003d62:	2100      	movs	r1, #0
 8003d64:	4618      	mov	r0, r3
 8003d66:	f000 fa73 	bl	8004250 <RCCEx_PLLSAI1_Config>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d6e:	e00c      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	3320      	adds	r3, #32
 8003d74:	2100      	movs	r1, #0
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 fb5e 	bl	8004438 <RCCEx_PLLSAI2_Config>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d80:	e003      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	74fb      	strb	r3, [r7, #19]
      break;
 8003d86:	e000      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003d88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d8a:	7cfb      	ldrb	r3, [r7, #19]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10b      	bne.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d90:	4b52      	ldr	r3, [pc, #328]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d96:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d9e:	494f      	ldr	r1, [pc, #316]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003da6:	e001      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003da8:	7cfb      	ldrb	r3, [r7, #19]
 8003daa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f000 80a0 	beq.w	8003efa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003dbe:	4b47      	ldr	r3, [pc, #284]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e000      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003dce:	2300      	movs	r3, #0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d00d      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dd4:	4b41      	ldr	r3, [pc, #260]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd8:	4a40      	ldr	r2, [pc, #256]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dde:	6593      	str	r3, [r2, #88]	; 0x58
 8003de0:	4b3e      	ldr	r3, [pc, #248]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de8:	60bb      	str	r3, [r7, #8]
 8003dea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dec:	2301      	movs	r3, #1
 8003dee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003df0:	4b3b      	ldr	r3, [pc, #236]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a3a      	ldr	r2, [pc, #232]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003df6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dfa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dfc:	f7fe fd9a 	bl	8002934 <HAL_GetTick>
 8003e00:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e02:	e009      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e04:	f7fe fd96 	bl	8002934 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d902      	bls.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	74fb      	strb	r3, [r7, #19]
        break;
 8003e16:	e005      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e18:	4b31      	ldr	r3, [pc, #196]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d0ef      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003e24:	7cfb      	ldrb	r3, [r7, #19]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d15c      	bne.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e2a:	4b2c      	ldr	r3, [pc, #176]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e34:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d01f      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d019      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e48:	4b24      	ldr	r3, [pc, #144]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e52:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e54:	4b21      	ldr	r3, [pc, #132]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e5a:	4a20      	ldr	r2, [pc, #128]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e64:	4b1d      	ldr	r3, [pc, #116]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e6a:	4a1c      	ldr	r2, [pc, #112]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e74:	4a19      	ldr	r2, [pc, #100]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	f003 0301 	and.w	r3, r3, #1
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d016      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e86:	f7fe fd55 	bl	8002934 <HAL_GetTick>
 8003e8a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e8c:	e00b      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e8e:	f7fe fd51 	bl	8002934 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d902      	bls.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	74fb      	strb	r3, [r7, #19]
            break;
 8003ea4:	e006      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ea6:	4b0d      	ldr	r3, [pc, #52]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d0ec      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003eb4:	7cfb      	ldrb	r3, [r7, #19]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10c      	bne.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003eba:	4b08      	ldr	r3, [pc, #32]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003eca:	4904      	ldr	r1, [pc, #16]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ed2:	e009      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ed4:	7cfb      	ldrb	r3, [r7, #19]
 8003ed6:	74bb      	strb	r3, [r7, #18]
 8003ed8:	e006      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003eda:	bf00      	nop
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ee4:	7cfb      	ldrb	r3, [r7, #19]
 8003ee6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ee8:	7c7b      	ldrb	r3, [r7, #17]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d105      	bne.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eee:	4b9e      	ldr	r3, [pc, #632]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef2:	4a9d      	ldr	r2, [pc, #628]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ef4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ef8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00a      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f06:	4b98      	ldr	r3, [pc, #608]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f0c:	f023 0203 	bic.w	r2, r3, #3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f14:	4994      	ldr	r1, [pc, #592]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00a      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f28:	4b8f      	ldr	r3, [pc, #572]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f2e:	f023 020c 	bic.w	r2, r3, #12
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f36:	498c      	ldr	r1, [pc, #560]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0304 	and.w	r3, r3, #4
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00a      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f4a:	4b87      	ldr	r3, [pc, #540]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f50:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f58:	4983      	ldr	r1, [pc, #524]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0308 	and.w	r3, r3, #8
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00a      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f6c:	4b7e      	ldr	r3, [pc, #504]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f72:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f7a:	497b      	ldr	r1, [pc, #492]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0310 	and.w	r3, r3, #16
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00a      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f8e:	4b76      	ldr	r3, [pc, #472]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f9c:	4972      	ldr	r1, [pc, #456]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0320 	and.w	r3, r3, #32
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00a      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fb0:	4b6d      	ldr	r3, [pc, #436]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fbe:	496a      	ldr	r1, [pc, #424]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00a      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fd2:	4b65      	ldr	r3, [pc, #404]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fe0:	4961      	ldr	r1, [pc, #388]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00a      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ff4:	4b5c      	ldr	r3, [pc, #368]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004002:	4959      	ldr	r1, [pc, #356]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004004:	4313      	orrs	r3, r2
 8004006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00a      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004016:	4b54      	ldr	r3, [pc, #336]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800401c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004024:	4950      	ldr	r1, [pc, #320]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004026:	4313      	orrs	r3, r2
 8004028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00a      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004038:	4b4b      	ldr	r3, [pc, #300]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800403a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800403e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004046:	4948      	ldr	r1, [pc, #288]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004048:	4313      	orrs	r3, r2
 800404a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00a      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800405a:	4b43      	ldr	r3, [pc, #268]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800405c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004060:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004068:	493f      	ldr	r1, [pc, #252]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800406a:	4313      	orrs	r3, r2
 800406c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d028      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800407c:	4b3a      	ldr	r3, [pc, #232]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800407e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004082:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800408a:	4937      	ldr	r1, [pc, #220]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800408c:	4313      	orrs	r3, r2
 800408e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004096:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800409a:	d106      	bne.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800409c:	4b32      	ldr	r3, [pc, #200]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	4a31      	ldr	r2, [pc, #196]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040a6:	60d3      	str	r3, [r2, #12]
 80040a8:	e011      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040b2:	d10c      	bne.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	3304      	adds	r3, #4
 80040b8:	2101      	movs	r1, #1
 80040ba:	4618      	mov	r0, r3
 80040bc:	f000 f8c8 	bl	8004250 <RCCEx_PLLSAI1_Config>
 80040c0:	4603      	mov	r3, r0
 80040c2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80040c4:	7cfb      	ldrb	r3, [r7, #19]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d001      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80040ca:	7cfb      	ldrb	r3, [r7, #19]
 80040cc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d028      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80040da:	4b23      	ldr	r3, [pc, #140]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e8:	491f      	ldr	r1, [pc, #124]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040f8:	d106      	bne.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040fa:	4b1b      	ldr	r3, [pc, #108]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	4a1a      	ldr	r2, [pc, #104]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004100:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004104:	60d3      	str	r3, [r2, #12]
 8004106:	e011      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800410c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004110:	d10c      	bne.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	3304      	adds	r3, #4
 8004116:	2101      	movs	r1, #1
 8004118:	4618      	mov	r0, r3
 800411a:	f000 f899 	bl	8004250 <RCCEx_PLLSAI1_Config>
 800411e:	4603      	mov	r3, r0
 8004120:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004122:	7cfb      	ldrb	r3, [r7, #19]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d001      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004128:	7cfb      	ldrb	r3, [r7, #19]
 800412a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d02b      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004138:	4b0b      	ldr	r3, [pc, #44]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800413a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800413e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004146:	4908      	ldr	r1, [pc, #32]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004148:	4313      	orrs	r3, r2
 800414a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004152:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004156:	d109      	bne.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004158:	4b03      	ldr	r3, [pc, #12]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	4a02      	ldr	r2, [pc, #8]	; (8004168 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800415e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004162:	60d3      	str	r3, [r2, #12]
 8004164:	e014      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004166:	bf00      	nop
 8004168:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004170:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004174:	d10c      	bne.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	3304      	adds	r3, #4
 800417a:	2101      	movs	r1, #1
 800417c:	4618      	mov	r0, r3
 800417e:	f000 f867 	bl	8004250 <RCCEx_PLLSAI1_Config>
 8004182:	4603      	mov	r3, r0
 8004184:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004186:	7cfb      	ldrb	r3, [r7, #19]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d001      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800418c:	7cfb      	ldrb	r3, [r7, #19]
 800418e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d02f      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800419c:	4b2b      	ldr	r3, [pc, #172]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800419e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041aa:	4928      	ldr	r1, [pc, #160]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041ba:	d10d      	bne.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	3304      	adds	r3, #4
 80041c0:	2102      	movs	r1, #2
 80041c2:	4618      	mov	r0, r3
 80041c4:	f000 f844 	bl	8004250 <RCCEx_PLLSAI1_Config>
 80041c8:	4603      	mov	r3, r0
 80041ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041cc:	7cfb      	ldrb	r3, [r7, #19]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d014      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80041d2:	7cfb      	ldrb	r3, [r7, #19]
 80041d4:	74bb      	strb	r3, [r7, #18]
 80041d6:	e011      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041e0:	d10c      	bne.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	3320      	adds	r3, #32
 80041e6:	2102      	movs	r1, #2
 80041e8:	4618      	mov	r0, r3
 80041ea:	f000 f925 	bl	8004438 <RCCEx_PLLSAI2_Config>
 80041ee:	4603      	mov	r3, r0
 80041f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041f2:	7cfb      	ldrb	r3, [r7, #19]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d001      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80041f8:	7cfb      	ldrb	r3, [r7, #19]
 80041fa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00a      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004208:	4b10      	ldr	r3, [pc, #64]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800420a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800420e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004216:	490d      	ldr	r1, [pc, #52]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004218:	4313      	orrs	r3, r2
 800421a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00b      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800422a:	4b08      	ldr	r3, [pc, #32]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800422c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004230:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800423a:	4904      	ldr	r1, [pc, #16]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800423c:	4313      	orrs	r3, r2
 800423e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004242:	7cbb      	ldrb	r3, [r7, #18]
}
 8004244:	4618      	mov	r0, r3
 8004246:	3718      	adds	r7, #24
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	40021000 	.word	0x40021000

08004250 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800425a:	2300      	movs	r3, #0
 800425c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800425e:	4b75      	ldr	r3, [pc, #468]	; (8004434 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	f003 0303 	and.w	r3, r3, #3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d018      	beq.n	800429c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800426a:	4b72      	ldr	r3, [pc, #456]	; (8004434 <RCCEx_PLLSAI1_Config+0x1e4>)
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	f003 0203 	and.w	r2, r3, #3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	429a      	cmp	r2, r3
 8004278:	d10d      	bne.n	8004296 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
       ||
 800427e:	2b00      	cmp	r3, #0
 8004280:	d009      	beq.n	8004296 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004282:	4b6c      	ldr	r3, [pc, #432]	; (8004434 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	091b      	lsrs	r3, r3, #4
 8004288:	f003 0307 	and.w	r3, r3, #7
 800428c:	1c5a      	adds	r2, r3, #1
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
       ||
 8004292:	429a      	cmp	r2, r3
 8004294:	d047      	beq.n	8004326 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	73fb      	strb	r3, [r7, #15]
 800429a:	e044      	b.n	8004326 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2b03      	cmp	r3, #3
 80042a2:	d018      	beq.n	80042d6 <RCCEx_PLLSAI1_Config+0x86>
 80042a4:	2b03      	cmp	r3, #3
 80042a6:	d825      	bhi.n	80042f4 <RCCEx_PLLSAI1_Config+0xa4>
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d002      	beq.n	80042b2 <RCCEx_PLLSAI1_Config+0x62>
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d009      	beq.n	80042c4 <RCCEx_PLLSAI1_Config+0x74>
 80042b0:	e020      	b.n	80042f4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80042b2:	4b60      	ldr	r3, [pc, #384]	; (8004434 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d11d      	bne.n	80042fa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042c2:	e01a      	b.n	80042fa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80042c4:	4b5b      	ldr	r3, [pc, #364]	; (8004434 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d116      	bne.n	80042fe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042d4:	e013      	b.n	80042fe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80042d6:	4b57      	ldr	r3, [pc, #348]	; (8004434 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10f      	bne.n	8004302 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80042e2:	4b54      	ldr	r3, [pc, #336]	; (8004434 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d109      	bne.n	8004302 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80042f2:	e006      	b.n	8004302 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	73fb      	strb	r3, [r7, #15]
      break;
 80042f8:	e004      	b.n	8004304 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042fa:	bf00      	nop
 80042fc:	e002      	b.n	8004304 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042fe:	bf00      	nop
 8004300:	e000      	b.n	8004304 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004302:	bf00      	nop
    }

    if(status == HAL_OK)
 8004304:	7bfb      	ldrb	r3, [r7, #15]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d10d      	bne.n	8004326 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800430a:	4b4a      	ldr	r3, [pc, #296]	; (8004434 <RCCEx_PLLSAI1_Config+0x1e4>)
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6819      	ldr	r1, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	3b01      	subs	r3, #1
 800431c:	011b      	lsls	r3, r3, #4
 800431e:	430b      	orrs	r3, r1
 8004320:	4944      	ldr	r1, [pc, #272]	; (8004434 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004322:	4313      	orrs	r3, r2
 8004324:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004326:	7bfb      	ldrb	r3, [r7, #15]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d17d      	bne.n	8004428 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800432c:	4b41      	ldr	r3, [pc, #260]	; (8004434 <RCCEx_PLLSAI1_Config+0x1e4>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a40      	ldr	r2, [pc, #256]	; (8004434 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004332:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004336:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004338:	f7fe fafc 	bl	8002934 <HAL_GetTick>
 800433c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800433e:	e009      	b.n	8004354 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004340:	f7fe faf8 	bl	8002934 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b02      	cmp	r3, #2
 800434c:	d902      	bls.n	8004354 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	73fb      	strb	r3, [r7, #15]
        break;
 8004352:	e005      	b.n	8004360 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004354:	4b37      	ldr	r3, [pc, #220]	; (8004434 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1ef      	bne.n	8004340 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004360:	7bfb      	ldrb	r3, [r7, #15]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d160      	bne.n	8004428 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d111      	bne.n	8004390 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800436c:	4b31      	ldr	r3, [pc, #196]	; (8004434 <RCCEx_PLLSAI1_Config+0x1e4>)
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004374:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	6892      	ldr	r2, [r2, #8]
 800437c:	0211      	lsls	r1, r2, #8
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	68d2      	ldr	r2, [r2, #12]
 8004382:	0912      	lsrs	r2, r2, #4
 8004384:	0452      	lsls	r2, r2, #17
 8004386:	430a      	orrs	r2, r1
 8004388:	492a      	ldr	r1, [pc, #168]	; (8004434 <RCCEx_PLLSAI1_Config+0x1e4>)
 800438a:	4313      	orrs	r3, r2
 800438c:	610b      	str	r3, [r1, #16]
 800438e:	e027      	b.n	80043e0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d112      	bne.n	80043bc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004396:	4b27      	ldr	r3, [pc, #156]	; (8004434 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800439e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	6892      	ldr	r2, [r2, #8]
 80043a6:	0211      	lsls	r1, r2, #8
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	6912      	ldr	r2, [r2, #16]
 80043ac:	0852      	lsrs	r2, r2, #1
 80043ae:	3a01      	subs	r2, #1
 80043b0:	0552      	lsls	r2, r2, #21
 80043b2:	430a      	orrs	r2, r1
 80043b4:	491f      	ldr	r1, [pc, #124]	; (8004434 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	610b      	str	r3, [r1, #16]
 80043ba:	e011      	b.n	80043e0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043bc:	4b1d      	ldr	r3, [pc, #116]	; (8004434 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80043c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	6892      	ldr	r2, [r2, #8]
 80043cc:	0211      	lsls	r1, r2, #8
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	6952      	ldr	r2, [r2, #20]
 80043d2:	0852      	lsrs	r2, r2, #1
 80043d4:	3a01      	subs	r2, #1
 80043d6:	0652      	lsls	r2, r2, #25
 80043d8:	430a      	orrs	r2, r1
 80043da:	4916      	ldr	r1, [pc, #88]	; (8004434 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80043e0:	4b14      	ldr	r3, [pc, #80]	; (8004434 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a13      	ldr	r2, [pc, #76]	; (8004434 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ec:	f7fe faa2 	bl	8002934 <HAL_GetTick>
 80043f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043f2:	e009      	b.n	8004408 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043f4:	f7fe fa9e 	bl	8002934 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d902      	bls.n	8004408 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	73fb      	strb	r3, [r7, #15]
          break;
 8004406:	e005      	b.n	8004414 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004408:	4b0a      	ldr	r3, [pc, #40]	; (8004434 <RCCEx_PLLSAI1_Config+0x1e4>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d0ef      	beq.n	80043f4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004414:	7bfb      	ldrb	r3, [r7, #15]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d106      	bne.n	8004428 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800441a:	4b06      	ldr	r3, [pc, #24]	; (8004434 <RCCEx_PLLSAI1_Config+0x1e4>)
 800441c:	691a      	ldr	r2, [r3, #16]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	4904      	ldr	r1, [pc, #16]	; (8004434 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004424:	4313      	orrs	r3, r2
 8004426:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004428:	7bfb      	ldrb	r3, [r7, #15]
}
 800442a:	4618      	mov	r0, r3
 800442c:	3710      	adds	r7, #16
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	40021000 	.word	0x40021000

08004438 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004442:	2300      	movs	r3, #0
 8004444:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004446:	4b6a      	ldr	r3, [pc, #424]	; (80045f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	f003 0303 	and.w	r3, r3, #3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d018      	beq.n	8004484 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004452:	4b67      	ldr	r3, [pc, #412]	; (80045f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	f003 0203 	and.w	r2, r3, #3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	429a      	cmp	r2, r3
 8004460:	d10d      	bne.n	800447e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
       ||
 8004466:	2b00      	cmp	r3, #0
 8004468:	d009      	beq.n	800447e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800446a:	4b61      	ldr	r3, [pc, #388]	; (80045f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	091b      	lsrs	r3, r3, #4
 8004470:	f003 0307 	and.w	r3, r3, #7
 8004474:	1c5a      	adds	r2, r3, #1
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
       ||
 800447a:	429a      	cmp	r2, r3
 800447c:	d047      	beq.n	800450e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	73fb      	strb	r3, [r7, #15]
 8004482:	e044      	b.n	800450e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2b03      	cmp	r3, #3
 800448a:	d018      	beq.n	80044be <RCCEx_PLLSAI2_Config+0x86>
 800448c:	2b03      	cmp	r3, #3
 800448e:	d825      	bhi.n	80044dc <RCCEx_PLLSAI2_Config+0xa4>
 8004490:	2b01      	cmp	r3, #1
 8004492:	d002      	beq.n	800449a <RCCEx_PLLSAI2_Config+0x62>
 8004494:	2b02      	cmp	r3, #2
 8004496:	d009      	beq.n	80044ac <RCCEx_PLLSAI2_Config+0x74>
 8004498:	e020      	b.n	80044dc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800449a:	4b55      	ldr	r3, [pc, #340]	; (80045f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d11d      	bne.n	80044e2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044aa:	e01a      	b.n	80044e2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044ac:	4b50      	ldr	r3, [pc, #320]	; (80045f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d116      	bne.n	80044e6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044bc:	e013      	b.n	80044e6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80044be:	4b4c      	ldr	r3, [pc, #304]	; (80045f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10f      	bne.n	80044ea <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80044ca:	4b49      	ldr	r3, [pc, #292]	; (80045f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d109      	bne.n	80044ea <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80044da:	e006      	b.n	80044ea <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	73fb      	strb	r3, [r7, #15]
      break;
 80044e0:	e004      	b.n	80044ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80044e2:	bf00      	nop
 80044e4:	e002      	b.n	80044ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80044e6:	bf00      	nop
 80044e8:	e000      	b.n	80044ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80044ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80044ec:	7bfb      	ldrb	r3, [r7, #15]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10d      	bne.n	800450e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80044f2:	4b3f      	ldr	r3, [pc, #252]	; (80045f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6819      	ldr	r1, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	3b01      	subs	r3, #1
 8004504:	011b      	lsls	r3, r3, #4
 8004506:	430b      	orrs	r3, r1
 8004508:	4939      	ldr	r1, [pc, #228]	; (80045f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800450a:	4313      	orrs	r3, r2
 800450c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800450e:	7bfb      	ldrb	r3, [r7, #15]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d167      	bne.n	80045e4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004514:	4b36      	ldr	r3, [pc, #216]	; (80045f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a35      	ldr	r2, [pc, #212]	; (80045f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800451a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800451e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004520:	f7fe fa08 	bl	8002934 <HAL_GetTick>
 8004524:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004526:	e009      	b.n	800453c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004528:	f7fe fa04 	bl	8002934 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b02      	cmp	r3, #2
 8004534:	d902      	bls.n	800453c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	73fb      	strb	r3, [r7, #15]
        break;
 800453a:	e005      	b.n	8004548 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800453c:	4b2c      	ldr	r3, [pc, #176]	; (80045f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1ef      	bne.n	8004528 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004548:	7bfb      	ldrb	r3, [r7, #15]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d14a      	bne.n	80045e4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d111      	bne.n	8004578 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004554:	4b26      	ldr	r3, [pc, #152]	; (80045f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004556:	695b      	ldr	r3, [r3, #20]
 8004558:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800455c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	6892      	ldr	r2, [r2, #8]
 8004564:	0211      	lsls	r1, r2, #8
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	68d2      	ldr	r2, [r2, #12]
 800456a:	0912      	lsrs	r2, r2, #4
 800456c:	0452      	lsls	r2, r2, #17
 800456e:	430a      	orrs	r2, r1
 8004570:	491f      	ldr	r1, [pc, #124]	; (80045f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004572:	4313      	orrs	r3, r2
 8004574:	614b      	str	r3, [r1, #20]
 8004576:	e011      	b.n	800459c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004578:	4b1d      	ldr	r3, [pc, #116]	; (80045f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800457a:	695b      	ldr	r3, [r3, #20]
 800457c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004580:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	6892      	ldr	r2, [r2, #8]
 8004588:	0211      	lsls	r1, r2, #8
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	6912      	ldr	r2, [r2, #16]
 800458e:	0852      	lsrs	r2, r2, #1
 8004590:	3a01      	subs	r2, #1
 8004592:	0652      	lsls	r2, r2, #25
 8004594:	430a      	orrs	r2, r1
 8004596:	4916      	ldr	r1, [pc, #88]	; (80045f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004598:	4313      	orrs	r3, r2
 800459a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800459c:	4b14      	ldr	r3, [pc, #80]	; (80045f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a13      	ldr	r2, [pc, #76]	; (80045f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a8:	f7fe f9c4 	bl	8002934 <HAL_GetTick>
 80045ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80045ae:	e009      	b.n	80045c4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80045b0:	f7fe f9c0 	bl	8002934 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d902      	bls.n	80045c4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	73fb      	strb	r3, [r7, #15]
          break;
 80045c2:	e005      	b.n	80045d0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80045c4:	4b0a      	ldr	r3, [pc, #40]	; (80045f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d0ef      	beq.n	80045b0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80045d0:	7bfb      	ldrb	r3, [r7, #15]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d106      	bne.n	80045e4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80045d6:	4b06      	ldr	r3, [pc, #24]	; (80045f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045d8:	695a      	ldr	r2, [r3, #20]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	4904      	ldr	r1, [pc, #16]	; (80045f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80045e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	40021000 	.word	0x40021000

080045f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e095      	b.n	8004732 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460a:	2b00      	cmp	r3, #0
 800460c:	d108      	bne.n	8004620 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004616:	d009      	beq.n	800462c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	61da      	str	r2, [r3, #28]
 800461e:	e005      	b.n	800462c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b00      	cmp	r3, #0
 800463c:	d106      	bne.n	800464c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f7fd ffb0 	bl	80025ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2202      	movs	r2, #2
 8004650:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004662:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800466c:	d902      	bls.n	8004674 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800466e:	2300      	movs	r3, #0
 8004670:	60fb      	str	r3, [r7, #12]
 8004672:	e002      	b.n	800467a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004674:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004678:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004682:	d007      	beq.n	8004694 <HAL_SPI_Init+0xa0>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800468c:	d002      	beq.n	8004694 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80046a4:	431a      	orrs	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	431a      	orrs	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	695b      	ldr	r3, [r3, #20]
 80046b4:	f003 0301 	and.w	r3, r3, #1
 80046b8:	431a      	orrs	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046c2:	431a      	orrs	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	69db      	ldr	r3, [r3, #28]
 80046c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046cc:	431a      	orrs	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d6:	ea42 0103 	orr.w	r1, r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046de:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	430a      	orrs	r2, r1
 80046e8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	0c1b      	lsrs	r3, r3, #16
 80046f0:	f003 0204 	and.w	r2, r3, #4
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f8:	f003 0310 	and.w	r3, r3, #16
 80046fc:	431a      	orrs	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004702:	f003 0308 	and.w	r3, r3, #8
 8004706:	431a      	orrs	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004710:	ea42 0103 	orr.w	r1, r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	430a      	orrs	r2, r1
 8004720:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3710      	adds	r7, #16
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}

0800473a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800473a:	b580      	push	{r7, lr}
 800473c:	b08a      	sub	sp, #40	; 0x28
 800473e:	af00      	add	r7, sp, #0
 8004740:	60f8      	str	r0, [r7, #12]
 8004742:	60b9      	str	r1, [r7, #8]
 8004744:	607a      	str	r2, [r7, #4]
 8004746:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004748:	2301      	movs	r3, #1
 800474a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800474c:	2300      	movs	r3, #0
 800474e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004758:	2b01      	cmp	r3, #1
 800475a:	d101      	bne.n	8004760 <HAL_SPI_TransmitReceive+0x26>
 800475c:	2302      	movs	r3, #2
 800475e:	e20a      	b.n	8004b76 <HAL_SPI_TransmitReceive+0x43c>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004768:	f7fe f8e4 	bl	8002934 <HAL_GetTick>
 800476c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004774:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800477c:	887b      	ldrh	r3, [r7, #2]
 800477e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004780:	887b      	ldrh	r3, [r7, #2]
 8004782:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004784:	7efb      	ldrb	r3, [r7, #27]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d00e      	beq.n	80047a8 <HAL_SPI_TransmitReceive+0x6e>
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004790:	d106      	bne.n	80047a0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d102      	bne.n	80047a0 <HAL_SPI_TransmitReceive+0x66>
 800479a:	7efb      	ldrb	r3, [r7, #27]
 800479c:	2b04      	cmp	r3, #4
 800479e:	d003      	beq.n	80047a8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80047a0:	2302      	movs	r3, #2
 80047a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80047a6:	e1e0      	b.n	8004b6a <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d005      	beq.n	80047ba <HAL_SPI_TransmitReceive+0x80>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d002      	beq.n	80047ba <HAL_SPI_TransmitReceive+0x80>
 80047b4:	887b      	ldrh	r3, [r7, #2]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d103      	bne.n	80047c2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80047c0:	e1d3      	b.n	8004b6a <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b04      	cmp	r3, #4
 80047cc:	d003      	beq.n	80047d6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2205      	movs	r2, #5
 80047d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	887a      	ldrh	r2, [r7, #2]
 80047e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	887a      	ldrh	r2, [r7, #2]
 80047ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	68ba      	ldr	r2, [r7, #8]
 80047f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	887a      	ldrh	r2, [r7, #2]
 80047fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	887a      	ldrh	r2, [r7, #2]
 8004802:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2200      	movs	r2, #0
 8004808:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004818:	d802      	bhi.n	8004820 <HAL_SPI_TransmitReceive+0xe6>
 800481a:	8a3b      	ldrh	r3, [r7, #16]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d908      	bls.n	8004832 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	685a      	ldr	r2, [r3, #4]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800482e:	605a      	str	r2, [r3, #4]
 8004830:	e007      	b.n	8004842 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	685a      	ldr	r2, [r3, #4]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004840:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800484c:	2b40      	cmp	r3, #64	; 0x40
 800484e:	d007      	beq.n	8004860 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800485e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004868:	f240 8081 	bls.w	800496e <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d002      	beq.n	800487a <HAL_SPI_TransmitReceive+0x140>
 8004874:	8a7b      	ldrh	r3, [r7, #18]
 8004876:	2b01      	cmp	r3, #1
 8004878:	d16d      	bne.n	8004956 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487e:	881a      	ldrh	r2, [r3, #0]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800488a:	1c9a      	adds	r2, r3, #2
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004894:	b29b      	uxth	r3, r3
 8004896:	3b01      	subs	r3, #1
 8004898:	b29a      	uxth	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800489e:	e05a      	b.n	8004956 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d11b      	bne.n	80048e6 <HAL_SPI_TransmitReceive+0x1ac>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d016      	beq.n	80048e6 <HAL_SPI_TransmitReceive+0x1ac>
 80048b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d113      	bne.n	80048e6 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c2:	881a      	ldrh	r2, [r3, #0]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ce:	1c9a      	adds	r2, r3, #2
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048d8:	b29b      	uxth	r3, r3
 80048da:	3b01      	subs	r3, #1
 80048dc:	b29a      	uxth	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80048e2:	2300      	movs	r3, #0
 80048e4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f003 0301 	and.w	r3, r3, #1
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d11c      	bne.n	800492e <HAL_SPI_TransmitReceive+0x1f4>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d016      	beq.n	800492e <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68da      	ldr	r2, [r3, #12]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490a:	b292      	uxth	r2, r2
 800490c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004912:	1c9a      	adds	r2, r3, #2
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800491e:	b29b      	uxth	r3, r3
 8004920:	3b01      	subs	r3, #1
 8004922:	b29a      	uxth	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800492a:	2301      	movs	r3, #1
 800492c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800492e:	f7fe f801 	bl	8002934 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800493a:	429a      	cmp	r2, r3
 800493c:	d80b      	bhi.n	8004956 <HAL_SPI_TransmitReceive+0x21c>
 800493e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004944:	d007      	beq.n	8004956 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004954:	e109      	b.n	8004b6a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800495a:	b29b      	uxth	r3, r3
 800495c:	2b00      	cmp	r3, #0
 800495e:	d19f      	bne.n	80048a0 <HAL_SPI_TransmitReceive+0x166>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004966:	b29b      	uxth	r3, r3
 8004968:	2b00      	cmp	r3, #0
 800496a:	d199      	bne.n	80048a0 <HAL_SPI_TransmitReceive+0x166>
 800496c:	e0e3      	b.n	8004b36 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <HAL_SPI_TransmitReceive+0x244>
 8004976:	8a7b      	ldrh	r3, [r7, #18]
 8004978:	2b01      	cmp	r3, #1
 800497a:	f040 80cf 	bne.w	8004b1c <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004982:	b29b      	uxth	r3, r3
 8004984:	2b01      	cmp	r3, #1
 8004986:	d912      	bls.n	80049ae <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498c:	881a      	ldrh	r2, [r3, #0]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004998:	1c9a      	adds	r2, r3, #2
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	3b02      	subs	r3, #2
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049ac:	e0b6      	b.n	8004b1c <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	330c      	adds	r3, #12
 80049b8:	7812      	ldrb	r2, [r2, #0]
 80049ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c0:	1c5a      	adds	r2, r3, #1
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	3b01      	subs	r3, #1
 80049ce:	b29a      	uxth	r2, r3
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049d4:	e0a2      	b.n	8004b1c <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f003 0302 	and.w	r3, r3, #2
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d134      	bne.n	8004a4e <HAL_SPI_TransmitReceive+0x314>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d02f      	beq.n	8004a4e <HAL_SPI_TransmitReceive+0x314>
 80049ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d12c      	bne.n	8004a4e <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d912      	bls.n	8004a24 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a02:	881a      	ldrh	r2, [r3, #0]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0e:	1c9a      	adds	r2, r3, #2
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	3b02      	subs	r3, #2
 8004a1c:	b29a      	uxth	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a22:	e012      	b.n	8004a4a <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	330c      	adds	r3, #12
 8004a2e:	7812      	ldrb	r2, [r2, #0]
 8004a30:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a36:	1c5a      	adds	r2, r3, #1
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	3b01      	subs	r3, #1
 8004a44:	b29a      	uxth	r2, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f003 0301 	and.w	r3, r3, #1
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d148      	bne.n	8004aee <HAL_SPI_TransmitReceive+0x3b4>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d042      	beq.n	8004aee <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d923      	bls.n	8004abc <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68da      	ldr	r2, [r3, #12]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7e:	b292      	uxth	r2, r2
 8004a80:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a86:	1c9a      	adds	r2, r3, #2
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	3b02      	subs	r3, #2
 8004a96:	b29a      	uxth	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d81f      	bhi.n	8004aea <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	685a      	ldr	r2, [r3, #4]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ab8:	605a      	str	r2, [r3, #4]
 8004aba:	e016      	b.n	8004aea <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f103 020c 	add.w	r2, r3, #12
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac8:	7812      	ldrb	r2, [r2, #0]
 8004aca:	b2d2      	uxtb	r2, r2
 8004acc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad2:	1c5a      	adds	r2, r3, #1
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004aea:	2301      	movs	r3, #1
 8004aec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004aee:	f7fd ff21 	bl	8002934 <HAL_GetTick>
 8004af2:	4602      	mov	r2, r0
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d803      	bhi.n	8004b06 <HAL_SPI_TransmitReceive+0x3cc>
 8004afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b04:	d102      	bne.n	8004b0c <HAL_SPI_TransmitReceive+0x3d2>
 8004b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d107      	bne.n	8004b1c <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2201      	movs	r2, #1
 8004b16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004b1a:	e026      	b.n	8004b6a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f47f af57 	bne.w	80049d6 <HAL_SPI_TransmitReceive+0x29c>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f47f af50 	bne.w	80049d6 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b36:	69fa      	ldr	r2, [r7, #28]
 8004b38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	f000 f93e 	bl	8004dbc <SPI_EndRxTxTransaction>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d005      	beq.n	8004b52 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2220      	movs	r2, #32
 8004b50:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d003      	beq.n	8004b62 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b60:	e003      	b.n	8004b6a <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004b72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3728      	adds	r7, #40	; 0x28
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
	...

08004b80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b088      	sub	sp, #32
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	603b      	str	r3, [r7, #0]
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b90:	f7fd fed0 	bl	8002934 <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b98:	1a9b      	subs	r3, r3, r2
 8004b9a:	683a      	ldr	r2, [r7, #0]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ba0:	f7fd fec8 	bl	8002934 <HAL_GetTick>
 8004ba4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004ba6:	4b39      	ldr	r3, [pc, #228]	; (8004c8c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	015b      	lsls	r3, r3, #5
 8004bac:	0d1b      	lsrs	r3, r3, #20
 8004bae:	69fa      	ldr	r2, [r7, #28]
 8004bb0:	fb02 f303 	mul.w	r3, r2, r3
 8004bb4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bb6:	e054      	b.n	8004c62 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bbe:	d050      	beq.n	8004c62 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004bc0:	f7fd feb8 	bl	8002934 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	69fa      	ldr	r2, [r7, #28]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d902      	bls.n	8004bd6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d13d      	bne.n	8004c52 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004be4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bee:	d111      	bne.n	8004c14 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bf8:	d004      	beq.n	8004c04 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c02:	d107      	bne.n	8004c14 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c1c:	d10f      	bne.n	8004c3e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c2c:	601a      	str	r2, [r3, #0]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e017      	b.n	8004c82 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d101      	bne.n	8004c5c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	689a      	ldr	r2, [r3, #8]
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	68ba      	ldr	r2, [r7, #8]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	bf0c      	ite	eq
 8004c72:	2301      	moveq	r3, #1
 8004c74:	2300      	movne	r3, #0
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	461a      	mov	r2, r3
 8004c7a:	79fb      	ldrb	r3, [r7, #7]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d19b      	bne.n	8004bb8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3720      	adds	r7, #32
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	20000000 	.word	0x20000000

08004c90 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b08a      	sub	sp, #40	; 0x28
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
 8004c9c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004ca2:	f7fd fe47 	bl	8002934 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004caa:	1a9b      	subs	r3, r3, r2
 8004cac:	683a      	ldr	r2, [r7, #0]
 8004cae:	4413      	add	r3, r2
 8004cb0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004cb2:	f7fd fe3f 	bl	8002934 <HAL_GetTick>
 8004cb6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	330c      	adds	r3, #12
 8004cbe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004cc0:	4b3d      	ldr	r3, [pc, #244]	; (8004db8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	4413      	add	r3, r2
 8004cca:	00da      	lsls	r2, r3, #3
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	0d1b      	lsrs	r3, r3, #20
 8004cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cd2:	fb02 f303 	mul.w	r3, r2, r3
 8004cd6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004cd8:	e060      	b.n	8004d9c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004ce0:	d107      	bne.n	8004cf2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d104      	bne.n	8004cf2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004cf0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf8:	d050      	beq.n	8004d9c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004cfa:	f7fd fe1b 	bl	8002934 <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	6a3b      	ldr	r3, [r7, #32]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d902      	bls.n	8004d10 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d13d      	bne.n	8004d8c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	685a      	ldr	r2, [r3, #4]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d1e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d28:	d111      	bne.n	8004d4e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d32:	d004      	beq.n	8004d3e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d3c:	d107      	bne.n	8004d4e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d4c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d56:	d10f      	bne.n	8004d78 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d66:	601a      	str	r2, [r3, #0]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d76:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e010      	b.n	8004dae <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004d92:	2300      	movs	r3, #0
 8004d94:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	689a      	ldr	r2, [r3, #8]
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	4013      	ands	r3, r2
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d196      	bne.n	8004cda <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3728      	adds	r7, #40	; 0x28
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	20000000 	.word	0x20000000

08004dbc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b086      	sub	sp, #24
 8004dc0:	af02      	add	r7, sp, #8
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	9300      	str	r3, [sp, #0]
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004dd4:	68f8      	ldr	r0, [r7, #12]
 8004dd6:	f7ff ff5b 	bl	8004c90 <SPI_WaitFifoStateUntilTimeout>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d007      	beq.n	8004df0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004de4:	f043 0220 	orr.w	r2, r3, #32
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e027      	b.n	8004e40 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	9300      	str	r3, [sp, #0]
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	2200      	movs	r2, #0
 8004df8:	2180      	movs	r1, #128	; 0x80
 8004dfa:	68f8      	ldr	r0, [r7, #12]
 8004dfc:	f7ff fec0 	bl	8004b80 <SPI_WaitFlagStateUntilTimeout>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d007      	beq.n	8004e16 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e0a:	f043 0220 	orr.w	r2, r3, #32
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e014      	b.n	8004e40 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	9300      	str	r3, [sp, #0]
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004e22:	68f8      	ldr	r0, [r7, #12]
 8004e24:	f7ff ff34 	bl	8004c90 <SPI_WaitFifoStateUntilTimeout>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d007      	beq.n	8004e3e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e32:	f043 0220 	orr.w	r2, r3, #32
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e000      	b.n	8004e40 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3710      	adds	r7, #16
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e049      	b.n	8004eee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d106      	bne.n	8004e74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f7fd fbde 	bl	8002630 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2202      	movs	r2, #2
 8004e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	3304      	adds	r3, #4
 8004e84:	4619      	mov	r1, r3
 8004e86:	4610      	mov	r0, r2
 8004e88:	f000 faa4 	bl	80053d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3708      	adds	r7, #8
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
	...

08004ef8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d001      	beq.n	8004f10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e04f      	b.n	8004fb0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2202      	movs	r2, #2
 8004f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68da      	ldr	r2, [r3, #12]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f042 0201 	orr.w	r2, r2, #1
 8004f26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a23      	ldr	r2, [pc, #140]	; (8004fbc <HAL_TIM_Base_Start_IT+0xc4>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d01d      	beq.n	8004f6e <HAL_TIM_Base_Start_IT+0x76>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f3a:	d018      	beq.n	8004f6e <HAL_TIM_Base_Start_IT+0x76>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a1f      	ldr	r2, [pc, #124]	; (8004fc0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d013      	beq.n	8004f6e <HAL_TIM_Base_Start_IT+0x76>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a1e      	ldr	r2, [pc, #120]	; (8004fc4 <HAL_TIM_Base_Start_IT+0xcc>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d00e      	beq.n	8004f6e <HAL_TIM_Base_Start_IT+0x76>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a1c      	ldr	r2, [pc, #112]	; (8004fc8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d009      	beq.n	8004f6e <HAL_TIM_Base_Start_IT+0x76>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a1b      	ldr	r2, [pc, #108]	; (8004fcc <HAL_TIM_Base_Start_IT+0xd4>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d004      	beq.n	8004f6e <HAL_TIM_Base_Start_IT+0x76>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a19      	ldr	r2, [pc, #100]	; (8004fd0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d115      	bne.n	8004f9a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	689a      	ldr	r2, [r3, #8]
 8004f74:	4b17      	ldr	r3, [pc, #92]	; (8004fd4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004f76:	4013      	ands	r3, r2
 8004f78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2b06      	cmp	r3, #6
 8004f7e:	d015      	beq.n	8004fac <HAL_TIM_Base_Start_IT+0xb4>
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f86:	d011      	beq.n	8004fac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f042 0201 	orr.w	r2, r2, #1
 8004f96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f98:	e008      	b.n	8004fac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f042 0201 	orr.w	r2, r2, #1
 8004fa8:	601a      	str	r2, [r3, #0]
 8004faa:	e000      	b.n	8004fae <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3714      	adds	r7, #20
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr
 8004fbc:	40012c00 	.word	0x40012c00
 8004fc0:	40000400 	.word	0x40000400
 8004fc4:	40000800 	.word	0x40000800
 8004fc8:	40000c00 	.word	0x40000c00
 8004fcc:	40013400 	.word	0x40013400
 8004fd0:	40014000 	.word	0x40014000
 8004fd4:	00010007 	.word	0x00010007

08004fd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	f003 0302 	and.w	r3, r3, #2
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d020      	beq.n	800503c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f003 0302 	and.w	r3, r3, #2
 8005000:	2b00      	cmp	r3, #0
 8005002:	d01b      	beq.n	800503c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f06f 0202 	mvn.w	r2, #2
 800500c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2201      	movs	r2, #1
 8005012:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	f003 0303 	and.w	r3, r3, #3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d003      	beq.n	800502a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 f9b7 	bl	8005396 <HAL_TIM_IC_CaptureCallback>
 8005028:	e005      	b.n	8005036 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 f9a9 	bl	8005382 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f000 f9ba 	bl	80053aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	f003 0304 	and.w	r3, r3, #4
 8005042:	2b00      	cmp	r3, #0
 8005044:	d020      	beq.n	8005088 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f003 0304 	and.w	r3, r3, #4
 800504c:	2b00      	cmp	r3, #0
 800504e:	d01b      	beq.n	8005088 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f06f 0204 	mvn.w	r2, #4
 8005058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2202      	movs	r2, #2
 800505e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800506a:	2b00      	cmp	r3, #0
 800506c:	d003      	beq.n	8005076 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 f991 	bl	8005396 <HAL_TIM_IC_CaptureCallback>
 8005074:	e005      	b.n	8005082 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 f983 	bl	8005382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 f994 	bl	80053aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	f003 0308 	and.w	r3, r3, #8
 800508e:	2b00      	cmp	r3, #0
 8005090:	d020      	beq.n	80050d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f003 0308 	and.w	r3, r3, #8
 8005098:	2b00      	cmp	r3, #0
 800509a:	d01b      	beq.n	80050d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f06f 0208 	mvn.w	r2, #8
 80050a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2204      	movs	r2, #4
 80050aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	69db      	ldr	r3, [r3, #28]
 80050b2:	f003 0303 	and.w	r3, r3, #3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d003      	beq.n	80050c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 f96b 	bl	8005396 <HAL_TIM_IC_CaptureCallback>
 80050c0:	e005      	b.n	80050ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 f95d 	bl	8005382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 f96e 	bl	80053aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	f003 0310 	and.w	r3, r3, #16
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d020      	beq.n	8005120 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f003 0310 	and.w	r3, r3, #16
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d01b      	beq.n	8005120 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f06f 0210 	mvn.w	r2, #16
 80050f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2208      	movs	r2, #8
 80050f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	69db      	ldr	r3, [r3, #28]
 80050fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005102:	2b00      	cmp	r3, #0
 8005104:	d003      	beq.n	800510e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 f945 	bl	8005396 <HAL_TIM_IC_CaptureCallback>
 800510c:	e005      	b.n	800511a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f937 	bl	8005382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 f948 	bl	80053aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	f003 0301 	and.w	r3, r3, #1
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00c      	beq.n	8005144 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f003 0301 	and.w	r3, r3, #1
 8005130:	2b00      	cmp	r3, #0
 8005132:	d007      	beq.n	8005144 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f06f 0201 	mvn.w	r2, #1
 800513c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 f915 	bl	800536e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00c      	beq.n	8005168 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005154:	2b00      	cmp	r3, #0
 8005156:	d007      	beq.n	8005168 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 fafc 	bl	8005760 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00c      	beq.n	800518c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005178:	2b00      	cmp	r3, #0
 800517a:	d007      	beq.n	800518c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 faf4 	bl	8005774 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00c      	beq.n	80051b0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800519c:	2b00      	cmp	r3, #0
 800519e:	d007      	beq.n	80051b0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f907 	bl	80053be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	f003 0320 	and.w	r3, r3, #32
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00c      	beq.n	80051d4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f003 0320 	and.w	r3, r3, #32
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d007      	beq.n	80051d4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f06f 0220 	mvn.w	r2, #32
 80051cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 fabc 	bl	800574c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051d4:	bf00      	nop
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051e6:	2300      	movs	r3, #0
 80051e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d101      	bne.n	80051f8 <HAL_TIM_ConfigClockSource+0x1c>
 80051f4:	2302      	movs	r3, #2
 80051f6:	e0b6      	b.n	8005366 <HAL_TIM_ConfigClockSource+0x18a>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2202      	movs	r2, #2
 8005204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005216:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800521a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005222:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68ba      	ldr	r2, [r7, #8]
 800522a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005234:	d03e      	beq.n	80052b4 <HAL_TIM_ConfigClockSource+0xd8>
 8005236:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800523a:	f200 8087 	bhi.w	800534c <HAL_TIM_ConfigClockSource+0x170>
 800523e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005242:	f000 8086 	beq.w	8005352 <HAL_TIM_ConfigClockSource+0x176>
 8005246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800524a:	d87f      	bhi.n	800534c <HAL_TIM_ConfigClockSource+0x170>
 800524c:	2b70      	cmp	r3, #112	; 0x70
 800524e:	d01a      	beq.n	8005286 <HAL_TIM_ConfigClockSource+0xaa>
 8005250:	2b70      	cmp	r3, #112	; 0x70
 8005252:	d87b      	bhi.n	800534c <HAL_TIM_ConfigClockSource+0x170>
 8005254:	2b60      	cmp	r3, #96	; 0x60
 8005256:	d050      	beq.n	80052fa <HAL_TIM_ConfigClockSource+0x11e>
 8005258:	2b60      	cmp	r3, #96	; 0x60
 800525a:	d877      	bhi.n	800534c <HAL_TIM_ConfigClockSource+0x170>
 800525c:	2b50      	cmp	r3, #80	; 0x50
 800525e:	d03c      	beq.n	80052da <HAL_TIM_ConfigClockSource+0xfe>
 8005260:	2b50      	cmp	r3, #80	; 0x50
 8005262:	d873      	bhi.n	800534c <HAL_TIM_ConfigClockSource+0x170>
 8005264:	2b40      	cmp	r3, #64	; 0x40
 8005266:	d058      	beq.n	800531a <HAL_TIM_ConfigClockSource+0x13e>
 8005268:	2b40      	cmp	r3, #64	; 0x40
 800526a:	d86f      	bhi.n	800534c <HAL_TIM_ConfigClockSource+0x170>
 800526c:	2b30      	cmp	r3, #48	; 0x30
 800526e:	d064      	beq.n	800533a <HAL_TIM_ConfigClockSource+0x15e>
 8005270:	2b30      	cmp	r3, #48	; 0x30
 8005272:	d86b      	bhi.n	800534c <HAL_TIM_ConfigClockSource+0x170>
 8005274:	2b20      	cmp	r3, #32
 8005276:	d060      	beq.n	800533a <HAL_TIM_ConfigClockSource+0x15e>
 8005278:	2b20      	cmp	r3, #32
 800527a:	d867      	bhi.n	800534c <HAL_TIM_ConfigClockSource+0x170>
 800527c:	2b00      	cmp	r3, #0
 800527e:	d05c      	beq.n	800533a <HAL_TIM_ConfigClockSource+0x15e>
 8005280:	2b10      	cmp	r3, #16
 8005282:	d05a      	beq.n	800533a <HAL_TIM_ConfigClockSource+0x15e>
 8005284:	e062      	b.n	800534c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005296:	f000 f9b1 	bl	80055fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68ba      	ldr	r2, [r7, #8]
 80052b0:	609a      	str	r2, [r3, #8]
      break;
 80052b2:	e04f      	b.n	8005354 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052c4:	f000 f99a 	bl	80055fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	689a      	ldr	r2, [r3, #8]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052d6:	609a      	str	r2, [r3, #8]
      break;
 80052d8:	e03c      	b.n	8005354 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052e6:	461a      	mov	r2, r3
 80052e8:	f000 f90e 	bl	8005508 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2150      	movs	r1, #80	; 0x50
 80052f2:	4618      	mov	r0, r3
 80052f4:	f000 f967 	bl	80055c6 <TIM_ITRx_SetConfig>
      break;
 80052f8:	e02c      	b.n	8005354 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005306:	461a      	mov	r2, r3
 8005308:	f000 f92d 	bl	8005566 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2160      	movs	r1, #96	; 0x60
 8005312:	4618      	mov	r0, r3
 8005314:	f000 f957 	bl	80055c6 <TIM_ITRx_SetConfig>
      break;
 8005318:	e01c      	b.n	8005354 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005326:	461a      	mov	r2, r3
 8005328:	f000 f8ee 	bl	8005508 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2140      	movs	r1, #64	; 0x40
 8005332:	4618      	mov	r0, r3
 8005334:	f000 f947 	bl	80055c6 <TIM_ITRx_SetConfig>
      break;
 8005338:	e00c      	b.n	8005354 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4619      	mov	r1, r3
 8005344:	4610      	mov	r0, r2
 8005346:	f000 f93e 	bl	80055c6 <TIM_ITRx_SetConfig>
      break;
 800534a:	e003      	b.n	8005354 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	73fb      	strb	r3, [r7, #15]
      break;
 8005350:	e000      	b.n	8005354 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005352:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005364:	7bfb      	ldrb	r3, [r7, #15]
}
 8005366:	4618      	mov	r0, r3
 8005368:	3710      	adds	r7, #16
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}

0800536e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800536e:	b480      	push	{r7}
 8005370:	b083      	sub	sp, #12
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005376:	bf00      	nop
 8005378:	370c      	adds	r7, #12
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr

08005382 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005382:	b480      	push	{r7}
 8005384:	b083      	sub	sp, #12
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800538a:	bf00      	nop
 800538c:	370c      	adds	r7, #12
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr

08005396 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005396:	b480      	push	{r7}
 8005398:	b083      	sub	sp, #12
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800539e:	bf00      	nop
 80053a0:	370c      	adds	r7, #12
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr

080053aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053aa:	b480      	push	{r7}
 80053ac:	b083      	sub	sp, #12
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053b2:	bf00      	nop
 80053b4:	370c      	adds	r7, #12
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr

080053be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053be:	b480      	push	{r7}
 80053c0:	b083      	sub	sp, #12
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053c6:	bf00      	nop
 80053c8:	370c      	adds	r7, #12
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
	...

080053d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a40      	ldr	r2, [pc, #256]	; (80054e8 <TIM_Base_SetConfig+0x114>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d013      	beq.n	8005414 <TIM_Base_SetConfig+0x40>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053f2:	d00f      	beq.n	8005414 <TIM_Base_SetConfig+0x40>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a3d      	ldr	r2, [pc, #244]	; (80054ec <TIM_Base_SetConfig+0x118>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d00b      	beq.n	8005414 <TIM_Base_SetConfig+0x40>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a3c      	ldr	r2, [pc, #240]	; (80054f0 <TIM_Base_SetConfig+0x11c>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d007      	beq.n	8005414 <TIM_Base_SetConfig+0x40>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a3b      	ldr	r2, [pc, #236]	; (80054f4 <TIM_Base_SetConfig+0x120>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d003      	beq.n	8005414 <TIM_Base_SetConfig+0x40>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a3a      	ldr	r2, [pc, #232]	; (80054f8 <TIM_Base_SetConfig+0x124>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d108      	bne.n	8005426 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800541a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	4313      	orrs	r3, r2
 8005424:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a2f      	ldr	r2, [pc, #188]	; (80054e8 <TIM_Base_SetConfig+0x114>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d01f      	beq.n	800546e <TIM_Base_SetConfig+0x9a>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005434:	d01b      	beq.n	800546e <TIM_Base_SetConfig+0x9a>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a2c      	ldr	r2, [pc, #176]	; (80054ec <TIM_Base_SetConfig+0x118>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d017      	beq.n	800546e <TIM_Base_SetConfig+0x9a>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a2b      	ldr	r2, [pc, #172]	; (80054f0 <TIM_Base_SetConfig+0x11c>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d013      	beq.n	800546e <TIM_Base_SetConfig+0x9a>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a2a      	ldr	r2, [pc, #168]	; (80054f4 <TIM_Base_SetConfig+0x120>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d00f      	beq.n	800546e <TIM_Base_SetConfig+0x9a>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a29      	ldr	r2, [pc, #164]	; (80054f8 <TIM_Base_SetConfig+0x124>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d00b      	beq.n	800546e <TIM_Base_SetConfig+0x9a>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a28      	ldr	r2, [pc, #160]	; (80054fc <TIM_Base_SetConfig+0x128>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d007      	beq.n	800546e <TIM_Base_SetConfig+0x9a>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a27      	ldr	r2, [pc, #156]	; (8005500 <TIM_Base_SetConfig+0x12c>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d003      	beq.n	800546e <TIM_Base_SetConfig+0x9a>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a26      	ldr	r2, [pc, #152]	; (8005504 <TIM_Base_SetConfig+0x130>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d108      	bne.n	8005480 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005474:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	4313      	orrs	r3, r2
 800547e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	4313      	orrs	r3, r2
 800548c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	689a      	ldr	r2, [r3, #8]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a10      	ldr	r2, [pc, #64]	; (80054e8 <TIM_Base_SetConfig+0x114>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d00f      	beq.n	80054cc <TIM_Base_SetConfig+0xf8>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a12      	ldr	r2, [pc, #72]	; (80054f8 <TIM_Base_SetConfig+0x124>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d00b      	beq.n	80054cc <TIM_Base_SetConfig+0xf8>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a11      	ldr	r2, [pc, #68]	; (80054fc <TIM_Base_SetConfig+0x128>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d007      	beq.n	80054cc <TIM_Base_SetConfig+0xf8>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a10      	ldr	r2, [pc, #64]	; (8005500 <TIM_Base_SetConfig+0x12c>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d003      	beq.n	80054cc <TIM_Base_SetConfig+0xf8>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a0f      	ldr	r2, [pc, #60]	; (8005504 <TIM_Base_SetConfig+0x130>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d103      	bne.n	80054d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	691a      	ldr	r2, [r3, #16]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	615a      	str	r2, [r3, #20]
}
 80054da:	bf00      	nop
 80054dc:	3714      	adds	r7, #20
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	40012c00 	.word	0x40012c00
 80054ec:	40000400 	.word	0x40000400
 80054f0:	40000800 	.word	0x40000800
 80054f4:	40000c00 	.word	0x40000c00
 80054f8:	40013400 	.word	0x40013400
 80054fc:	40014000 	.word	0x40014000
 8005500:	40014400 	.word	0x40014400
 8005504:	40014800 	.word	0x40014800

08005508 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005508:	b480      	push	{r7}
 800550a:	b087      	sub	sp, #28
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6a1b      	ldr	r3, [r3, #32]
 8005518:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6a1b      	ldr	r3, [r3, #32]
 800551e:	f023 0201 	bic.w	r2, r3, #1
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	699b      	ldr	r3, [r3, #24]
 800552a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005532:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	011b      	lsls	r3, r3, #4
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	4313      	orrs	r3, r2
 800553c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	f023 030a 	bic.w	r3, r3, #10
 8005544:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005546:	697a      	ldr	r2, [r7, #20]
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	4313      	orrs	r3, r2
 800554c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	693a      	ldr	r2, [r7, #16]
 8005552:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	621a      	str	r2, [r3, #32]
}
 800555a:	bf00      	nop
 800555c:	371c      	adds	r7, #28
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr

08005566 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005566:	b480      	push	{r7}
 8005568:	b087      	sub	sp, #28
 800556a:	af00      	add	r7, sp, #0
 800556c:	60f8      	str	r0, [r7, #12]
 800556e:	60b9      	str	r1, [r7, #8]
 8005570:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6a1b      	ldr	r3, [r3, #32]
 800557c:	f023 0210 	bic.w	r2, r3, #16
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	699b      	ldr	r3, [r3, #24]
 8005588:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005590:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	031b      	lsls	r3, r3, #12
 8005596:	693a      	ldr	r2, [r7, #16]
 8005598:	4313      	orrs	r3, r2
 800559a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	011b      	lsls	r3, r3, #4
 80055a8:	697a      	ldr	r2, [r7, #20]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	693a      	ldr	r2, [r7, #16]
 80055b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	621a      	str	r2, [r3, #32]
}
 80055ba:	bf00      	nop
 80055bc:	371c      	adds	r7, #28
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr

080055c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055c6:	b480      	push	{r7}
 80055c8:	b085      	sub	sp, #20
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
 80055ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055de:	683a      	ldr	r2, [r7, #0]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	f043 0307 	orr.w	r3, r3, #7
 80055e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	609a      	str	r2, [r3, #8]
}
 80055f0:	bf00      	nop
 80055f2:	3714      	adds	r7, #20
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b087      	sub	sp, #28
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	607a      	str	r2, [r7, #4]
 8005608:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005616:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	021a      	lsls	r2, r3, #8
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	431a      	orrs	r2, r3
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	4313      	orrs	r3, r2
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	4313      	orrs	r3, r2
 8005628:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	697a      	ldr	r2, [r7, #20]
 800562e:	609a      	str	r2, [r3, #8]
}
 8005630:	bf00      	nop
 8005632:	371c      	adds	r7, #28
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800563c:	b480      	push	{r7}
 800563e:	b085      	sub	sp, #20
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800564c:	2b01      	cmp	r3, #1
 800564e:	d101      	bne.n	8005654 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005650:	2302      	movs	r3, #2
 8005652:	e068      	b.n	8005726 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2202      	movs	r2, #2
 8005660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a2e      	ldr	r2, [pc, #184]	; (8005734 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d004      	beq.n	8005688 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a2d      	ldr	r2, [pc, #180]	; (8005738 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d108      	bne.n	800569a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800568e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	4313      	orrs	r3, r2
 8005698:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a1e      	ldr	r2, [pc, #120]	; (8005734 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d01d      	beq.n	80056fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056c6:	d018      	beq.n	80056fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a1b      	ldr	r2, [pc, #108]	; (800573c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d013      	beq.n	80056fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a1a      	ldr	r2, [pc, #104]	; (8005740 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d00e      	beq.n	80056fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a18      	ldr	r2, [pc, #96]	; (8005744 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d009      	beq.n	80056fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a13      	ldr	r2, [pc, #76]	; (8005738 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d004      	beq.n	80056fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a14      	ldr	r2, [pc, #80]	; (8005748 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d10c      	bne.n	8005714 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005700:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	68ba      	ldr	r2, [r7, #8]
 8005708:	4313      	orrs	r3, r2
 800570a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68ba      	ldr	r2, [r7, #8]
 8005712:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3714      	adds	r7, #20
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop
 8005734:	40012c00 	.word	0x40012c00
 8005738:	40013400 	.word	0x40013400
 800573c:	40000400 	.word	0x40000400
 8005740:	40000800 	.word	0x40000800
 8005744:	40000c00 	.word	0x40000c00
 8005748:	40014000 	.word	0x40014000

0800574c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005754:	bf00      	nop
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005768:	bf00      	nop
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800577c:	bf00      	nop
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d101      	bne.n	800579a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e040      	b.n	800581c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d106      	bne.n	80057b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f7fc ff78 	bl	80026a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2224      	movs	r2, #36	; 0x24
 80057b4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f022 0201 	bic.w	r2, r2, #1
 80057c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d002      	beq.n	80057d4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 fae0 	bl	8005d94 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 f825 	bl	8005824 <UART_SetConfig>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d101      	bne.n	80057e4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e01b      	b.n	800581c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	685a      	ldr	r2, [r3, #4]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	689a      	ldr	r2, [r3, #8]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005802:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f042 0201 	orr.w	r2, r2, #1
 8005812:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 fb5f 	bl	8005ed8 <UART_CheckIdleState>
 800581a:	4603      	mov	r3, r0
}
 800581c:	4618      	mov	r0, r3
 800581e:	3708      	adds	r7, #8
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005824:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005828:	b08a      	sub	sp, #40	; 0x28
 800582a:	af00      	add	r7, sp, #0
 800582c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800582e:	2300      	movs	r3, #0
 8005830:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	689a      	ldr	r2, [r3, #8]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	431a      	orrs	r2, r3
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	431a      	orrs	r2, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	69db      	ldr	r3, [r3, #28]
 8005848:	4313      	orrs	r3, r2
 800584a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	4ba4      	ldr	r3, [pc, #656]	; (8005ae4 <UART_SetConfig+0x2c0>)
 8005854:	4013      	ands	r3, r2
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	6812      	ldr	r2, [r2, #0]
 800585a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800585c:	430b      	orrs	r3, r1
 800585e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	68da      	ldr	r2, [r3, #12]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	430a      	orrs	r2, r1
 8005874:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a99      	ldr	r2, [pc, #612]	; (8005ae8 <UART_SetConfig+0x2c4>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d004      	beq.n	8005890 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6a1b      	ldr	r3, [r3, #32]
 800588a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800588c:	4313      	orrs	r3, r2
 800588e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058a0:	430a      	orrs	r2, r1
 80058a2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a90      	ldr	r2, [pc, #576]	; (8005aec <UART_SetConfig+0x2c8>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d126      	bne.n	80058fc <UART_SetConfig+0xd8>
 80058ae:	4b90      	ldr	r3, [pc, #576]	; (8005af0 <UART_SetConfig+0x2cc>)
 80058b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058b4:	f003 0303 	and.w	r3, r3, #3
 80058b8:	2b03      	cmp	r3, #3
 80058ba:	d81b      	bhi.n	80058f4 <UART_SetConfig+0xd0>
 80058bc:	a201      	add	r2, pc, #4	; (adr r2, 80058c4 <UART_SetConfig+0xa0>)
 80058be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c2:	bf00      	nop
 80058c4:	080058d5 	.word	0x080058d5
 80058c8:	080058e5 	.word	0x080058e5
 80058cc:	080058dd 	.word	0x080058dd
 80058d0:	080058ed 	.word	0x080058ed
 80058d4:	2301      	movs	r3, #1
 80058d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058da:	e116      	b.n	8005b0a <UART_SetConfig+0x2e6>
 80058dc:	2302      	movs	r3, #2
 80058de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058e2:	e112      	b.n	8005b0a <UART_SetConfig+0x2e6>
 80058e4:	2304      	movs	r3, #4
 80058e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058ea:	e10e      	b.n	8005b0a <UART_SetConfig+0x2e6>
 80058ec:	2308      	movs	r3, #8
 80058ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058f2:	e10a      	b.n	8005b0a <UART_SetConfig+0x2e6>
 80058f4:	2310      	movs	r3, #16
 80058f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80058fa:	e106      	b.n	8005b0a <UART_SetConfig+0x2e6>
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a7c      	ldr	r2, [pc, #496]	; (8005af4 <UART_SetConfig+0x2d0>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d138      	bne.n	8005978 <UART_SetConfig+0x154>
 8005906:	4b7a      	ldr	r3, [pc, #488]	; (8005af0 <UART_SetConfig+0x2cc>)
 8005908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800590c:	f003 030c 	and.w	r3, r3, #12
 8005910:	2b0c      	cmp	r3, #12
 8005912:	d82d      	bhi.n	8005970 <UART_SetConfig+0x14c>
 8005914:	a201      	add	r2, pc, #4	; (adr r2, 800591c <UART_SetConfig+0xf8>)
 8005916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800591a:	bf00      	nop
 800591c:	08005951 	.word	0x08005951
 8005920:	08005971 	.word	0x08005971
 8005924:	08005971 	.word	0x08005971
 8005928:	08005971 	.word	0x08005971
 800592c:	08005961 	.word	0x08005961
 8005930:	08005971 	.word	0x08005971
 8005934:	08005971 	.word	0x08005971
 8005938:	08005971 	.word	0x08005971
 800593c:	08005959 	.word	0x08005959
 8005940:	08005971 	.word	0x08005971
 8005944:	08005971 	.word	0x08005971
 8005948:	08005971 	.word	0x08005971
 800594c:	08005969 	.word	0x08005969
 8005950:	2300      	movs	r3, #0
 8005952:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005956:	e0d8      	b.n	8005b0a <UART_SetConfig+0x2e6>
 8005958:	2302      	movs	r3, #2
 800595a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800595e:	e0d4      	b.n	8005b0a <UART_SetConfig+0x2e6>
 8005960:	2304      	movs	r3, #4
 8005962:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005966:	e0d0      	b.n	8005b0a <UART_SetConfig+0x2e6>
 8005968:	2308      	movs	r3, #8
 800596a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800596e:	e0cc      	b.n	8005b0a <UART_SetConfig+0x2e6>
 8005970:	2310      	movs	r3, #16
 8005972:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005976:	e0c8      	b.n	8005b0a <UART_SetConfig+0x2e6>
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a5e      	ldr	r2, [pc, #376]	; (8005af8 <UART_SetConfig+0x2d4>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d125      	bne.n	80059ce <UART_SetConfig+0x1aa>
 8005982:	4b5b      	ldr	r3, [pc, #364]	; (8005af0 <UART_SetConfig+0x2cc>)
 8005984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005988:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800598c:	2b30      	cmp	r3, #48	; 0x30
 800598e:	d016      	beq.n	80059be <UART_SetConfig+0x19a>
 8005990:	2b30      	cmp	r3, #48	; 0x30
 8005992:	d818      	bhi.n	80059c6 <UART_SetConfig+0x1a2>
 8005994:	2b20      	cmp	r3, #32
 8005996:	d00a      	beq.n	80059ae <UART_SetConfig+0x18a>
 8005998:	2b20      	cmp	r3, #32
 800599a:	d814      	bhi.n	80059c6 <UART_SetConfig+0x1a2>
 800599c:	2b00      	cmp	r3, #0
 800599e:	d002      	beq.n	80059a6 <UART_SetConfig+0x182>
 80059a0:	2b10      	cmp	r3, #16
 80059a2:	d008      	beq.n	80059b6 <UART_SetConfig+0x192>
 80059a4:	e00f      	b.n	80059c6 <UART_SetConfig+0x1a2>
 80059a6:	2300      	movs	r3, #0
 80059a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059ac:	e0ad      	b.n	8005b0a <UART_SetConfig+0x2e6>
 80059ae:	2302      	movs	r3, #2
 80059b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059b4:	e0a9      	b.n	8005b0a <UART_SetConfig+0x2e6>
 80059b6:	2304      	movs	r3, #4
 80059b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059bc:	e0a5      	b.n	8005b0a <UART_SetConfig+0x2e6>
 80059be:	2308      	movs	r3, #8
 80059c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059c4:	e0a1      	b.n	8005b0a <UART_SetConfig+0x2e6>
 80059c6:	2310      	movs	r3, #16
 80059c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059cc:	e09d      	b.n	8005b0a <UART_SetConfig+0x2e6>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a4a      	ldr	r2, [pc, #296]	; (8005afc <UART_SetConfig+0x2d8>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d125      	bne.n	8005a24 <UART_SetConfig+0x200>
 80059d8:	4b45      	ldr	r3, [pc, #276]	; (8005af0 <UART_SetConfig+0x2cc>)
 80059da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80059e2:	2bc0      	cmp	r3, #192	; 0xc0
 80059e4:	d016      	beq.n	8005a14 <UART_SetConfig+0x1f0>
 80059e6:	2bc0      	cmp	r3, #192	; 0xc0
 80059e8:	d818      	bhi.n	8005a1c <UART_SetConfig+0x1f8>
 80059ea:	2b80      	cmp	r3, #128	; 0x80
 80059ec:	d00a      	beq.n	8005a04 <UART_SetConfig+0x1e0>
 80059ee:	2b80      	cmp	r3, #128	; 0x80
 80059f0:	d814      	bhi.n	8005a1c <UART_SetConfig+0x1f8>
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d002      	beq.n	80059fc <UART_SetConfig+0x1d8>
 80059f6:	2b40      	cmp	r3, #64	; 0x40
 80059f8:	d008      	beq.n	8005a0c <UART_SetConfig+0x1e8>
 80059fa:	e00f      	b.n	8005a1c <UART_SetConfig+0x1f8>
 80059fc:	2300      	movs	r3, #0
 80059fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a02:	e082      	b.n	8005b0a <UART_SetConfig+0x2e6>
 8005a04:	2302      	movs	r3, #2
 8005a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a0a:	e07e      	b.n	8005b0a <UART_SetConfig+0x2e6>
 8005a0c:	2304      	movs	r3, #4
 8005a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a12:	e07a      	b.n	8005b0a <UART_SetConfig+0x2e6>
 8005a14:	2308      	movs	r3, #8
 8005a16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a1a:	e076      	b.n	8005b0a <UART_SetConfig+0x2e6>
 8005a1c:	2310      	movs	r3, #16
 8005a1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a22:	e072      	b.n	8005b0a <UART_SetConfig+0x2e6>
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a35      	ldr	r2, [pc, #212]	; (8005b00 <UART_SetConfig+0x2dc>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d12a      	bne.n	8005a84 <UART_SetConfig+0x260>
 8005a2e:	4b30      	ldr	r3, [pc, #192]	; (8005af0 <UART_SetConfig+0x2cc>)
 8005a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a3c:	d01a      	beq.n	8005a74 <UART_SetConfig+0x250>
 8005a3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a42:	d81b      	bhi.n	8005a7c <UART_SetConfig+0x258>
 8005a44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a48:	d00c      	beq.n	8005a64 <UART_SetConfig+0x240>
 8005a4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a4e:	d815      	bhi.n	8005a7c <UART_SetConfig+0x258>
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d003      	beq.n	8005a5c <UART_SetConfig+0x238>
 8005a54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a58:	d008      	beq.n	8005a6c <UART_SetConfig+0x248>
 8005a5a:	e00f      	b.n	8005a7c <UART_SetConfig+0x258>
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a62:	e052      	b.n	8005b0a <UART_SetConfig+0x2e6>
 8005a64:	2302      	movs	r3, #2
 8005a66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a6a:	e04e      	b.n	8005b0a <UART_SetConfig+0x2e6>
 8005a6c:	2304      	movs	r3, #4
 8005a6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a72:	e04a      	b.n	8005b0a <UART_SetConfig+0x2e6>
 8005a74:	2308      	movs	r3, #8
 8005a76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a7a:	e046      	b.n	8005b0a <UART_SetConfig+0x2e6>
 8005a7c:	2310      	movs	r3, #16
 8005a7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a82:	e042      	b.n	8005b0a <UART_SetConfig+0x2e6>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a17      	ldr	r2, [pc, #92]	; (8005ae8 <UART_SetConfig+0x2c4>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d13a      	bne.n	8005b04 <UART_SetConfig+0x2e0>
 8005a8e:	4b18      	ldr	r3, [pc, #96]	; (8005af0 <UART_SetConfig+0x2cc>)
 8005a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005a98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a9c:	d01a      	beq.n	8005ad4 <UART_SetConfig+0x2b0>
 8005a9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005aa2:	d81b      	bhi.n	8005adc <UART_SetConfig+0x2b8>
 8005aa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005aa8:	d00c      	beq.n	8005ac4 <UART_SetConfig+0x2a0>
 8005aaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005aae:	d815      	bhi.n	8005adc <UART_SetConfig+0x2b8>
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d003      	beq.n	8005abc <UART_SetConfig+0x298>
 8005ab4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ab8:	d008      	beq.n	8005acc <UART_SetConfig+0x2a8>
 8005aba:	e00f      	b.n	8005adc <UART_SetConfig+0x2b8>
 8005abc:	2300      	movs	r3, #0
 8005abe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ac2:	e022      	b.n	8005b0a <UART_SetConfig+0x2e6>
 8005ac4:	2302      	movs	r3, #2
 8005ac6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005aca:	e01e      	b.n	8005b0a <UART_SetConfig+0x2e6>
 8005acc:	2304      	movs	r3, #4
 8005ace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ad2:	e01a      	b.n	8005b0a <UART_SetConfig+0x2e6>
 8005ad4:	2308      	movs	r3, #8
 8005ad6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ada:	e016      	b.n	8005b0a <UART_SetConfig+0x2e6>
 8005adc:	2310      	movs	r3, #16
 8005ade:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ae2:	e012      	b.n	8005b0a <UART_SetConfig+0x2e6>
 8005ae4:	efff69f3 	.word	0xefff69f3
 8005ae8:	40008000 	.word	0x40008000
 8005aec:	40013800 	.word	0x40013800
 8005af0:	40021000 	.word	0x40021000
 8005af4:	40004400 	.word	0x40004400
 8005af8:	40004800 	.word	0x40004800
 8005afc:	40004c00 	.word	0x40004c00
 8005b00:	40005000 	.word	0x40005000
 8005b04:	2310      	movs	r3, #16
 8005b06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a9f      	ldr	r2, [pc, #636]	; (8005d8c <UART_SetConfig+0x568>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d17a      	bne.n	8005c0a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b18:	2b08      	cmp	r3, #8
 8005b1a:	d824      	bhi.n	8005b66 <UART_SetConfig+0x342>
 8005b1c:	a201      	add	r2, pc, #4	; (adr r2, 8005b24 <UART_SetConfig+0x300>)
 8005b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b22:	bf00      	nop
 8005b24:	08005b49 	.word	0x08005b49
 8005b28:	08005b67 	.word	0x08005b67
 8005b2c:	08005b51 	.word	0x08005b51
 8005b30:	08005b67 	.word	0x08005b67
 8005b34:	08005b57 	.word	0x08005b57
 8005b38:	08005b67 	.word	0x08005b67
 8005b3c:	08005b67 	.word	0x08005b67
 8005b40:	08005b67 	.word	0x08005b67
 8005b44:	08005b5f 	.word	0x08005b5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b48:	f7fe f80c 	bl	8003b64 <HAL_RCC_GetPCLK1Freq>
 8005b4c:	61f8      	str	r0, [r7, #28]
        break;
 8005b4e:	e010      	b.n	8005b72 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b50:	4b8f      	ldr	r3, [pc, #572]	; (8005d90 <UART_SetConfig+0x56c>)
 8005b52:	61fb      	str	r3, [r7, #28]
        break;
 8005b54:	e00d      	b.n	8005b72 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b56:	f7fd ff6d 	bl	8003a34 <HAL_RCC_GetSysClockFreq>
 8005b5a:	61f8      	str	r0, [r7, #28]
        break;
 8005b5c:	e009      	b.n	8005b72 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b62:	61fb      	str	r3, [r7, #28]
        break;
 8005b64:	e005      	b.n	8005b72 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005b66:	2300      	movs	r3, #0
 8005b68:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005b70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f000 80fb 	beq.w	8005d70 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	685a      	ldr	r2, [r3, #4]
 8005b7e:	4613      	mov	r3, r2
 8005b80:	005b      	lsls	r3, r3, #1
 8005b82:	4413      	add	r3, r2
 8005b84:	69fa      	ldr	r2, [r7, #28]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d305      	bcc.n	8005b96 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005b90:	69fa      	ldr	r2, [r7, #28]
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d903      	bls.n	8005b9e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005b9c:	e0e8      	b.n	8005d70 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	461c      	mov	r4, r3
 8005ba4:	4615      	mov	r5, r2
 8005ba6:	f04f 0200 	mov.w	r2, #0
 8005baa:	f04f 0300 	mov.w	r3, #0
 8005bae:	022b      	lsls	r3, r5, #8
 8005bb0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005bb4:	0222      	lsls	r2, r4, #8
 8005bb6:	68f9      	ldr	r1, [r7, #12]
 8005bb8:	6849      	ldr	r1, [r1, #4]
 8005bba:	0849      	lsrs	r1, r1, #1
 8005bbc:	2000      	movs	r0, #0
 8005bbe:	4688      	mov	r8, r1
 8005bc0:	4681      	mov	r9, r0
 8005bc2:	eb12 0a08 	adds.w	sl, r2, r8
 8005bc6:	eb43 0b09 	adc.w	fp, r3, r9
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	603b      	str	r3, [r7, #0]
 8005bd2:	607a      	str	r2, [r7, #4]
 8005bd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bd8:	4650      	mov	r0, sl
 8005bda:	4659      	mov	r1, fp
 8005bdc:	f7fa fee2 	bl	80009a4 <__aeabi_uldivmod>
 8005be0:	4602      	mov	r2, r0
 8005be2:	460b      	mov	r3, r1
 8005be4:	4613      	mov	r3, r2
 8005be6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bee:	d308      	bcc.n	8005c02 <UART_SetConfig+0x3de>
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bf6:	d204      	bcs.n	8005c02 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	69ba      	ldr	r2, [r7, #24]
 8005bfe:	60da      	str	r2, [r3, #12]
 8005c00:	e0b6      	b.n	8005d70 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005c08:	e0b2      	b.n	8005d70 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	69db      	ldr	r3, [r3, #28]
 8005c0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c12:	d15e      	bne.n	8005cd2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005c14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c18:	2b08      	cmp	r3, #8
 8005c1a:	d828      	bhi.n	8005c6e <UART_SetConfig+0x44a>
 8005c1c:	a201      	add	r2, pc, #4	; (adr r2, 8005c24 <UART_SetConfig+0x400>)
 8005c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c22:	bf00      	nop
 8005c24:	08005c49 	.word	0x08005c49
 8005c28:	08005c51 	.word	0x08005c51
 8005c2c:	08005c59 	.word	0x08005c59
 8005c30:	08005c6f 	.word	0x08005c6f
 8005c34:	08005c5f 	.word	0x08005c5f
 8005c38:	08005c6f 	.word	0x08005c6f
 8005c3c:	08005c6f 	.word	0x08005c6f
 8005c40:	08005c6f 	.word	0x08005c6f
 8005c44:	08005c67 	.word	0x08005c67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c48:	f7fd ff8c 	bl	8003b64 <HAL_RCC_GetPCLK1Freq>
 8005c4c:	61f8      	str	r0, [r7, #28]
        break;
 8005c4e:	e014      	b.n	8005c7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c50:	f7fd ff9e 	bl	8003b90 <HAL_RCC_GetPCLK2Freq>
 8005c54:	61f8      	str	r0, [r7, #28]
        break;
 8005c56:	e010      	b.n	8005c7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c58:	4b4d      	ldr	r3, [pc, #308]	; (8005d90 <UART_SetConfig+0x56c>)
 8005c5a:	61fb      	str	r3, [r7, #28]
        break;
 8005c5c:	e00d      	b.n	8005c7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c5e:	f7fd fee9 	bl	8003a34 <HAL_RCC_GetSysClockFreq>
 8005c62:	61f8      	str	r0, [r7, #28]
        break;
 8005c64:	e009      	b.n	8005c7a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c6a:	61fb      	str	r3, [r7, #28]
        break;
 8005c6c:	e005      	b.n	8005c7a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005c78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d077      	beq.n	8005d70 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	005a      	lsls	r2, r3, #1
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	085b      	lsrs	r3, r3, #1
 8005c8a:	441a      	add	r2, r3
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c94:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	2b0f      	cmp	r3, #15
 8005c9a:	d916      	bls.n	8005cca <UART_SetConfig+0x4a6>
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ca2:	d212      	bcs.n	8005cca <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	f023 030f 	bic.w	r3, r3, #15
 8005cac:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	085b      	lsrs	r3, r3, #1
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	f003 0307 	and.w	r3, r3, #7
 8005cb8:	b29a      	uxth	r2, r3
 8005cba:	8afb      	ldrh	r3, [r7, #22]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	8afa      	ldrh	r2, [r7, #22]
 8005cc6:	60da      	str	r2, [r3, #12]
 8005cc8:	e052      	b.n	8005d70 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005cd0:	e04e      	b.n	8005d70 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005cd2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005cd6:	2b08      	cmp	r3, #8
 8005cd8:	d827      	bhi.n	8005d2a <UART_SetConfig+0x506>
 8005cda:	a201      	add	r2, pc, #4	; (adr r2, 8005ce0 <UART_SetConfig+0x4bc>)
 8005cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce0:	08005d05 	.word	0x08005d05
 8005ce4:	08005d0d 	.word	0x08005d0d
 8005ce8:	08005d15 	.word	0x08005d15
 8005cec:	08005d2b 	.word	0x08005d2b
 8005cf0:	08005d1b 	.word	0x08005d1b
 8005cf4:	08005d2b 	.word	0x08005d2b
 8005cf8:	08005d2b 	.word	0x08005d2b
 8005cfc:	08005d2b 	.word	0x08005d2b
 8005d00:	08005d23 	.word	0x08005d23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d04:	f7fd ff2e 	bl	8003b64 <HAL_RCC_GetPCLK1Freq>
 8005d08:	61f8      	str	r0, [r7, #28]
        break;
 8005d0a:	e014      	b.n	8005d36 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d0c:	f7fd ff40 	bl	8003b90 <HAL_RCC_GetPCLK2Freq>
 8005d10:	61f8      	str	r0, [r7, #28]
        break;
 8005d12:	e010      	b.n	8005d36 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d14:	4b1e      	ldr	r3, [pc, #120]	; (8005d90 <UART_SetConfig+0x56c>)
 8005d16:	61fb      	str	r3, [r7, #28]
        break;
 8005d18:	e00d      	b.n	8005d36 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d1a:	f7fd fe8b 	bl	8003a34 <HAL_RCC_GetSysClockFreq>
 8005d1e:	61f8      	str	r0, [r7, #28]
        break;
 8005d20:	e009      	b.n	8005d36 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d26:	61fb      	str	r3, [r7, #28]
        break;
 8005d28:	e005      	b.n	8005d36 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005d34:	bf00      	nop
    }

    if (pclk != 0U)
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d019      	beq.n	8005d70 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	085a      	lsrs	r2, r3, #1
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	441a      	add	r2, r3
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d4e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	2b0f      	cmp	r3, #15
 8005d54:	d909      	bls.n	8005d6a <UART_SetConfig+0x546>
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d5c:	d205      	bcs.n	8005d6a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	b29a      	uxth	r2, r3
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	60da      	str	r2, [r3, #12]
 8005d68:	e002      	b.n	8005d70 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2200      	movs	r2, #0
 8005d74:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005d7c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3728      	adds	r7, #40	; 0x28
 8005d84:	46bd      	mov	sp, r7
 8005d86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d8a:	bf00      	nop
 8005d8c:	40008000 	.word	0x40008000
 8005d90:	00f42400 	.word	0x00f42400

08005d94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da0:	f003 0308 	and.w	r3, r3, #8
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d00a      	beq.n	8005dbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	430a      	orrs	r2, r1
 8005dbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc2:	f003 0301 	and.w	r3, r3, #1
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00a      	beq.n	8005de0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	430a      	orrs	r2, r1
 8005dde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de4:	f003 0302 	and.w	r3, r3, #2
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d00a      	beq.n	8005e02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	430a      	orrs	r2, r1
 8005e00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e06:	f003 0304 	and.w	r3, r3, #4
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d00a      	beq.n	8005e24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	430a      	orrs	r2, r1
 8005e22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e28:	f003 0310 	and.w	r3, r3, #16
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d00a      	beq.n	8005e46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	430a      	orrs	r2, r1
 8005e44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4a:	f003 0320 	and.w	r3, r3, #32
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00a      	beq.n	8005e68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	430a      	orrs	r2, r1
 8005e66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d01a      	beq.n	8005eaa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	430a      	orrs	r2, r1
 8005e88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e92:	d10a      	bne.n	8005eaa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	430a      	orrs	r2, r1
 8005ea8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00a      	beq.n	8005ecc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	430a      	orrs	r2, r1
 8005eca:	605a      	str	r2, [r3, #4]
  }
}
 8005ecc:	bf00      	nop
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b098      	sub	sp, #96	; 0x60
 8005edc:	af02      	add	r7, sp, #8
 8005ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ee8:	f7fc fd24 	bl	8002934 <HAL_GetTick>
 8005eec:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 0308 	and.w	r3, r3, #8
 8005ef8:	2b08      	cmp	r3, #8
 8005efa:	d12e      	bne.n	8005f5a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005efc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f00:	9300      	str	r3, [sp, #0]
 8005f02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f04:	2200      	movs	r2, #0
 8005f06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 f88c 	bl	8006028 <UART_WaitOnFlagUntilTimeout>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d021      	beq.n	8005f5a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f1e:	e853 3f00 	ldrex	r3, [r3]
 8005f22:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f2a:	653b      	str	r3, [r7, #80]	; 0x50
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	461a      	mov	r2, r3
 8005f32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f34:	647b      	str	r3, [r7, #68]	; 0x44
 8005f36:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f38:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f3c:	e841 2300 	strex	r3, r2, [r1]
 8005f40:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d1e6      	bne.n	8005f16 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2220      	movs	r2, #32
 8005f4c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f56:	2303      	movs	r3, #3
 8005f58:	e062      	b.n	8006020 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 0304 	and.w	r3, r3, #4
 8005f64:	2b04      	cmp	r3, #4
 8005f66:	d149      	bne.n	8005ffc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f6c:	9300      	str	r3, [sp, #0]
 8005f6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f70:	2200      	movs	r2, #0
 8005f72:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 f856 	bl	8006028 <UART_WaitOnFlagUntilTimeout>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d03c      	beq.n	8005ffc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8a:	e853 3f00 	ldrex	r3, [r3]
 8005f8e:	623b      	str	r3, [r7, #32]
   return(result);
 8005f90:	6a3b      	ldr	r3, [r7, #32]
 8005f92:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fa0:	633b      	str	r3, [r7, #48]	; 0x30
 8005fa2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fa8:	e841 2300 	strex	r3, r2, [r1]
 8005fac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d1e6      	bne.n	8005f82 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	3308      	adds	r3, #8
 8005fba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	e853 3f00 	ldrex	r3, [r3]
 8005fc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f023 0301 	bic.w	r3, r3, #1
 8005fca:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	3308      	adds	r3, #8
 8005fd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fd4:	61fa      	str	r2, [r7, #28]
 8005fd6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd8:	69b9      	ldr	r1, [r7, #24]
 8005fda:	69fa      	ldr	r2, [r7, #28]
 8005fdc:	e841 2300 	strex	r3, r2, [r1]
 8005fe0:	617b      	str	r3, [r7, #20]
   return(result);
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d1e5      	bne.n	8005fb4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2220      	movs	r2, #32
 8005fec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	e011      	b.n	8006020 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2220      	movs	r2, #32
 8006000:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2220      	movs	r2, #32
 8006006:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800601e:	2300      	movs	r3, #0
}
 8006020:	4618      	mov	r0, r3
 8006022:	3758      	adds	r7, #88	; 0x58
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	603b      	str	r3, [r7, #0]
 8006034:	4613      	mov	r3, r2
 8006036:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006038:	e049      	b.n	80060ce <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006040:	d045      	beq.n	80060ce <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006042:	f7fc fc77 	bl	8002934 <HAL_GetTick>
 8006046:	4602      	mov	r2, r0
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	1ad3      	subs	r3, r2, r3
 800604c:	69ba      	ldr	r2, [r7, #24]
 800604e:	429a      	cmp	r2, r3
 8006050:	d302      	bcc.n	8006058 <UART_WaitOnFlagUntilTimeout+0x30>
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d101      	bne.n	800605c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006058:	2303      	movs	r3, #3
 800605a:	e048      	b.n	80060ee <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 0304 	and.w	r3, r3, #4
 8006066:	2b00      	cmp	r3, #0
 8006068:	d031      	beq.n	80060ce <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	69db      	ldr	r3, [r3, #28]
 8006070:	f003 0308 	and.w	r3, r3, #8
 8006074:	2b08      	cmp	r3, #8
 8006076:	d110      	bne.n	800609a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2208      	movs	r2, #8
 800607e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006080:	68f8      	ldr	r0, [r7, #12]
 8006082:	f000 f838 	bl	80060f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2208      	movs	r2, #8
 800608a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e029      	b.n	80060ee <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	69db      	ldr	r3, [r3, #28]
 80060a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060a8:	d111      	bne.n	80060ce <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80060b4:	68f8      	ldr	r0, [r7, #12]
 80060b6:	f000 f81e 	bl	80060f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2220      	movs	r2, #32
 80060be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80060ca:	2303      	movs	r3, #3
 80060cc:	e00f      	b.n	80060ee <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	69da      	ldr	r2, [r3, #28]
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	4013      	ands	r3, r2
 80060d8:	68ba      	ldr	r2, [r7, #8]
 80060da:	429a      	cmp	r2, r3
 80060dc:	bf0c      	ite	eq
 80060de:	2301      	moveq	r3, #1
 80060e0:	2300      	movne	r3, #0
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	461a      	mov	r2, r3
 80060e6:	79fb      	ldrb	r3, [r7, #7]
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d0a6      	beq.n	800603a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3710      	adds	r7, #16
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060f6:	b480      	push	{r7}
 80060f8:	b095      	sub	sp, #84	; 0x54
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006106:	e853 3f00 	ldrex	r3, [r3]
 800610a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800610c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006112:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	461a      	mov	r2, r3
 800611a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800611c:	643b      	str	r3, [r7, #64]	; 0x40
 800611e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006120:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006122:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006124:	e841 2300 	strex	r3, r2, [r1]
 8006128:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800612a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800612c:	2b00      	cmp	r3, #0
 800612e:	d1e6      	bne.n	80060fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	3308      	adds	r3, #8
 8006136:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006138:	6a3b      	ldr	r3, [r7, #32]
 800613a:	e853 3f00 	ldrex	r3, [r3]
 800613e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	f023 0301 	bic.w	r3, r3, #1
 8006146:	64bb      	str	r3, [r7, #72]	; 0x48
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	3308      	adds	r3, #8
 800614e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006150:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006152:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006154:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006156:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006158:	e841 2300 	strex	r3, r2, [r1]
 800615c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800615e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006160:	2b00      	cmp	r3, #0
 8006162:	d1e5      	bne.n	8006130 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006168:	2b01      	cmp	r3, #1
 800616a:	d118      	bne.n	800619e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	e853 3f00 	ldrex	r3, [r3]
 8006178:	60bb      	str	r3, [r7, #8]
   return(result);
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	f023 0310 	bic.w	r3, r3, #16
 8006180:	647b      	str	r3, [r7, #68]	; 0x44
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	461a      	mov	r2, r3
 8006188:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800618a:	61bb      	str	r3, [r7, #24]
 800618c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800618e:	6979      	ldr	r1, [r7, #20]
 8006190:	69ba      	ldr	r2, [r7, #24]
 8006192:	e841 2300 	strex	r3, r2, [r1]
 8006196:	613b      	str	r3, [r7, #16]
   return(result);
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d1e6      	bne.n	800616c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2220      	movs	r2, #32
 80061a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80061b2:	bf00      	nop
 80061b4:	3754      	adds	r7, #84	; 0x54
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr

080061be <_ZdlPvj>:
 80061be:	f000 b800 	b.w	80061c2 <_ZdlPv>

080061c2 <_ZdlPv>:
 80061c2:	f000 b801 	b.w	80061c8 <free>
	...

080061c8 <free>:
 80061c8:	4b02      	ldr	r3, [pc, #8]	; (80061d4 <free+0xc>)
 80061ca:	4601      	mov	r1, r0
 80061cc:	6818      	ldr	r0, [r3, #0]
 80061ce:	f000 b84b 	b.w	8006268 <_free_r>
 80061d2:	bf00      	nop
 80061d4:	20000058 	.word	0x20000058

080061d8 <__malloc_lock>:
 80061d8:	4801      	ldr	r0, [pc, #4]	; (80061e0 <__malloc_lock+0x8>)
 80061da:	f000 b835 	b.w	8006248 <__retarget_lock_acquire_recursive>
 80061de:	bf00      	nop
 80061e0:	2000048c 	.word	0x2000048c

080061e4 <__malloc_unlock>:
 80061e4:	4801      	ldr	r0, [pc, #4]	; (80061ec <__malloc_unlock+0x8>)
 80061e6:	f000 b830 	b.w	800624a <__retarget_lock_release_recursive>
 80061ea:	bf00      	nop
 80061ec:	2000048c 	.word	0x2000048c

080061f0 <memset>:
 80061f0:	4402      	add	r2, r0
 80061f2:	4603      	mov	r3, r0
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d100      	bne.n	80061fa <memset+0xa>
 80061f8:	4770      	bx	lr
 80061fa:	f803 1b01 	strb.w	r1, [r3], #1
 80061fe:	e7f9      	b.n	80061f4 <memset+0x4>

08006200 <__libc_init_array>:
 8006200:	b570      	push	{r4, r5, r6, lr}
 8006202:	4d0d      	ldr	r5, [pc, #52]	; (8006238 <__libc_init_array+0x38>)
 8006204:	4c0d      	ldr	r4, [pc, #52]	; (800623c <__libc_init_array+0x3c>)
 8006206:	1b64      	subs	r4, r4, r5
 8006208:	10a4      	asrs	r4, r4, #2
 800620a:	2600      	movs	r6, #0
 800620c:	42a6      	cmp	r6, r4
 800620e:	d109      	bne.n	8006224 <__libc_init_array+0x24>
 8006210:	4d0b      	ldr	r5, [pc, #44]	; (8006240 <__libc_init_array+0x40>)
 8006212:	4c0c      	ldr	r4, [pc, #48]	; (8006244 <__libc_init_array+0x44>)
 8006214:	f000 f874 	bl	8006300 <_init>
 8006218:	1b64      	subs	r4, r4, r5
 800621a:	10a4      	asrs	r4, r4, #2
 800621c:	2600      	movs	r6, #0
 800621e:	42a6      	cmp	r6, r4
 8006220:	d105      	bne.n	800622e <__libc_init_array+0x2e>
 8006222:	bd70      	pop	{r4, r5, r6, pc}
 8006224:	f855 3b04 	ldr.w	r3, [r5], #4
 8006228:	4798      	blx	r3
 800622a:	3601      	adds	r6, #1
 800622c:	e7ee      	b.n	800620c <__libc_init_array+0xc>
 800622e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006232:	4798      	blx	r3
 8006234:	3601      	adds	r6, #1
 8006236:	e7f2      	b.n	800621e <__libc_init_array+0x1e>
 8006238:	08006438 	.word	0x08006438
 800623c:	08006438 	.word	0x08006438
 8006240:	08006438 	.word	0x08006438
 8006244:	08006440 	.word	0x08006440

08006248 <__retarget_lock_acquire_recursive>:
 8006248:	4770      	bx	lr

0800624a <__retarget_lock_release_recursive>:
 800624a:	4770      	bx	lr

0800624c <memcpy>:
 800624c:	440a      	add	r2, r1
 800624e:	4291      	cmp	r1, r2
 8006250:	f100 33ff 	add.w	r3, r0, #4294967295
 8006254:	d100      	bne.n	8006258 <memcpy+0xc>
 8006256:	4770      	bx	lr
 8006258:	b510      	push	{r4, lr}
 800625a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800625e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006262:	4291      	cmp	r1, r2
 8006264:	d1f9      	bne.n	800625a <memcpy+0xe>
 8006266:	bd10      	pop	{r4, pc}

08006268 <_free_r>:
 8006268:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800626a:	2900      	cmp	r1, #0
 800626c:	d044      	beq.n	80062f8 <_free_r+0x90>
 800626e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006272:	9001      	str	r0, [sp, #4]
 8006274:	2b00      	cmp	r3, #0
 8006276:	f1a1 0404 	sub.w	r4, r1, #4
 800627a:	bfb8      	it	lt
 800627c:	18e4      	addlt	r4, r4, r3
 800627e:	f7ff ffab 	bl	80061d8 <__malloc_lock>
 8006282:	4a1e      	ldr	r2, [pc, #120]	; (80062fc <_free_r+0x94>)
 8006284:	9801      	ldr	r0, [sp, #4]
 8006286:	6813      	ldr	r3, [r2, #0]
 8006288:	b933      	cbnz	r3, 8006298 <_free_r+0x30>
 800628a:	6063      	str	r3, [r4, #4]
 800628c:	6014      	str	r4, [r2, #0]
 800628e:	b003      	add	sp, #12
 8006290:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006294:	f7ff bfa6 	b.w	80061e4 <__malloc_unlock>
 8006298:	42a3      	cmp	r3, r4
 800629a:	d908      	bls.n	80062ae <_free_r+0x46>
 800629c:	6825      	ldr	r5, [r4, #0]
 800629e:	1961      	adds	r1, r4, r5
 80062a0:	428b      	cmp	r3, r1
 80062a2:	bf01      	itttt	eq
 80062a4:	6819      	ldreq	r1, [r3, #0]
 80062a6:	685b      	ldreq	r3, [r3, #4]
 80062a8:	1949      	addeq	r1, r1, r5
 80062aa:	6021      	streq	r1, [r4, #0]
 80062ac:	e7ed      	b.n	800628a <_free_r+0x22>
 80062ae:	461a      	mov	r2, r3
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	b10b      	cbz	r3, 80062b8 <_free_r+0x50>
 80062b4:	42a3      	cmp	r3, r4
 80062b6:	d9fa      	bls.n	80062ae <_free_r+0x46>
 80062b8:	6811      	ldr	r1, [r2, #0]
 80062ba:	1855      	adds	r5, r2, r1
 80062bc:	42a5      	cmp	r5, r4
 80062be:	d10b      	bne.n	80062d8 <_free_r+0x70>
 80062c0:	6824      	ldr	r4, [r4, #0]
 80062c2:	4421      	add	r1, r4
 80062c4:	1854      	adds	r4, r2, r1
 80062c6:	42a3      	cmp	r3, r4
 80062c8:	6011      	str	r1, [r2, #0]
 80062ca:	d1e0      	bne.n	800628e <_free_r+0x26>
 80062cc:	681c      	ldr	r4, [r3, #0]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	6053      	str	r3, [r2, #4]
 80062d2:	440c      	add	r4, r1
 80062d4:	6014      	str	r4, [r2, #0]
 80062d6:	e7da      	b.n	800628e <_free_r+0x26>
 80062d8:	d902      	bls.n	80062e0 <_free_r+0x78>
 80062da:	230c      	movs	r3, #12
 80062dc:	6003      	str	r3, [r0, #0]
 80062de:	e7d6      	b.n	800628e <_free_r+0x26>
 80062e0:	6825      	ldr	r5, [r4, #0]
 80062e2:	1961      	adds	r1, r4, r5
 80062e4:	428b      	cmp	r3, r1
 80062e6:	bf04      	itt	eq
 80062e8:	6819      	ldreq	r1, [r3, #0]
 80062ea:	685b      	ldreq	r3, [r3, #4]
 80062ec:	6063      	str	r3, [r4, #4]
 80062ee:	bf04      	itt	eq
 80062f0:	1949      	addeq	r1, r1, r5
 80062f2:	6021      	streq	r1, [r4, #0]
 80062f4:	6054      	str	r4, [r2, #4]
 80062f6:	e7ca      	b.n	800628e <_free_r+0x26>
 80062f8:	b003      	add	sp, #12
 80062fa:	bd30      	pop	{r4, r5, pc}
 80062fc:	20000350 	.word	0x20000350

08006300 <_init>:
 8006300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006302:	bf00      	nop
 8006304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006306:	bc08      	pop	{r3}
 8006308:	469e      	mov	lr, r3
 800630a:	4770      	bx	lr

0800630c <_fini>:
 800630c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800630e:	bf00      	nop
 8006310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006312:	bc08      	pop	{r3}
 8006314:	469e      	mov	lr, r3
 8006316:	4770      	bx	lr
