
SX1280_DEV_L476.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004fc  08009850  08009850  00019850  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d4c  08009d4c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009d4c  08009d4c  00019d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d54  08009d54  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009d54  08009d54  00019d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08009d5c  08009d5c  00019d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08009d64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000043c  200001d8  08009f38  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000614  08009f38  00020614  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002623c  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004715  00000000  00000000  00046483  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001560  00000000  00000000  0004ab98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000109b  00000000  00000000  0004c0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002da60  00000000  00000000  0004d193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b2f8  00000000  00000000  0007abf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001014bf  00000000  00000000  00095eeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006d74  00000000  00000000  001973ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0019e120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009838 	.word	0x08009838

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08009838 	.word	0x08009838

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b970 	b.w	8000f80 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	460d      	mov	r5, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4694      	mov	ip, r2
 8000ccc:	d965      	bls.n	8000d9a <__udivmoddi4+0xe2>
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	b143      	cbz	r3, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd8:	f1c3 0220 	rsb	r2, r3, #32
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce2:	4317      	orrs	r7, r2
 8000ce4:	409c      	lsls	r4, r3
 8000ce6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cea:	fa1f f58c 	uxth.w	r5, ip
 8000cee:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cfc:	fb01 f005 	mul.w	r0, r1, r5
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d0c:	f080 811c 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f240 8119 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4462      	add	r2, ip
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	b2a4      	uxth	r4, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2a:	fb00 f505 	mul.w	r5, r0, r5
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x90>
 8000d32:	eb1c 0404 	adds.w	r4, ip, r4
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3a:	f080 8107 	bcs.w	8000f4c <__udivmoddi4+0x294>
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	f240 8104 	bls.w	8000f4c <__udivmoddi4+0x294>
 8000d44:	4464      	add	r4, ip
 8000d46:	3802      	subs	r0, #2
 8000d48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11e      	cbz	r6, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40dc      	lsrs	r4, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0xbc>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80ed 	beq.w	8000f42 <__udivmoddi4+0x28a>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d149      	bne.n	8000e10 <__udivmoddi4+0x158>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d302      	bcc.n	8000d86 <__udivmoddi4+0xce>
 8000d80:	4282      	cmp	r2, r0
 8000d82:	f200 80f8 	bhi.w	8000f76 <__udivmoddi4+0x2be>
 8000d86:	1a84      	subs	r4, r0, r2
 8000d88:	eb65 0203 	sbc.w	r2, r5, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	4617      	mov	r7, r2
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d0e2      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	e9c6 4700 	strd	r4, r7, [r6]
 8000d98:	e7df      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xe6>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f382 	clz	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000da8:	1a8a      	subs	r2, r1, r2
 8000daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	2101      	movs	r1, #1
 8000db4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dbc:	0c22      	lsrs	r2, r4, #16
 8000dbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc2:	fb0e f005 	mul.w	r0, lr, r5
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dca:	eb1c 0202 	adds.w	r2, ip, r2
 8000dce:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f200 80cb 	bhi.w	8000f70 <__udivmoddi4+0x2b8>
 8000dda:	4645      	mov	r5, r8
 8000ddc:	1a12      	subs	r2, r2, r0
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de4:	fb07 2210 	mls	r2, r7, r0, r2
 8000de8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dec:	fb0e fe00 	mul.w	lr, lr, r0
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x14e>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x14c>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f200 80bb 	bhi.w	8000f7a <__udivmoddi4+0x2c2>
 8000e04:	4610      	mov	r0, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e0e:	e79f      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e10:	f1c1 0720 	rsb	r7, r1, #32
 8000e14:	408b      	lsls	r3, r1
 8000e16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e22:	fa20 f307 	lsr.w	r3, r0, r7
 8000e26:	40fd      	lsrs	r5, r7
 8000e28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e40:	fb08 f50e 	mul.w	r5, r8, lr
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e58:	f080 8088 	bcs.w	8000f6c <__udivmoddi4+0x2b4>
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	f240 8085 	bls.w	8000f6c <__udivmoddi4+0x2b4>
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	4464      	add	r4, ip
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	b29d      	uxth	r5, r3
 8000e6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e70:	fb09 4413 	mls	r4, r9, r3, r4
 8000e74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e88:	d26c      	bcs.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	d96a      	bls.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e96:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	42ac      	cmp	r4, r5
 8000ea0:	46c8      	mov	r8, r9
 8000ea2:	46ae      	mov	lr, r5
 8000ea4:	d356      	bcc.n	8000f54 <__udivmoddi4+0x29c>
 8000ea6:	d053      	beq.n	8000f50 <__udivmoddi4+0x298>
 8000ea8:	b156      	cbz	r6, 8000ec0 <__udivmoddi4+0x208>
 8000eaa:	ebb0 0208 	subs.w	r2, r0, r8
 8000eae:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000eb6:	40ca      	lsrs	r2, r1
 8000eb8:	40cc      	lsrs	r4, r1
 8000eba:	4317      	orrs	r7, r2
 8000ebc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	f1c3 0120 	rsb	r1, r3, #32
 8000ecc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed8:	409d      	lsls	r5, r3
 8000eda:	432a      	orrs	r2, r5
 8000edc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ef6:	428d      	cmp	r5, r1
 8000ef8:	fa04 f403 	lsl.w	r4, r4, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x258>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f06:	d22f      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f08:	428d      	cmp	r5, r1
 8000f0a:	d92d      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1b49      	subs	r1, r1, r5
 8000f12:	b292      	uxth	r2, r2
 8000f14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f18:	fb07 1115 	mls	r1, r7, r5, r1
 8000f1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f20:	fb05 f10e 	mul.w	r1, r5, lr
 8000f24:	4291      	cmp	r1, r2
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x282>
 8000f28:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f30:	d216      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d914      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000f36:	3d02      	subs	r5, #2
 8000f38:	4462      	add	r2, ip
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f40:	e738      	b.n	8000db4 <__udivmoddi4+0xfc>
 8000f42:	4631      	mov	r1, r6
 8000f44:	4630      	mov	r0, r6
 8000f46:	e708      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000f48:	4639      	mov	r1, r7
 8000f4a:	e6e6      	b.n	8000d1a <__udivmoddi4+0x62>
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	e6fb      	b.n	8000d48 <__udivmoddi4+0x90>
 8000f50:	4548      	cmp	r0, r9
 8000f52:	d2a9      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f54:	ebb9 0802 	subs.w	r8, r9, r2
 8000f58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	e7a3      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f60:	4645      	mov	r5, r8
 8000f62:	e7ea      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f64:	462b      	mov	r3, r5
 8000f66:	e794      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	e7d1      	b.n	8000f10 <__udivmoddi4+0x258>
 8000f6c:	46d0      	mov	r8, sl
 8000f6e:	e77b      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f70:	3d02      	subs	r5, #2
 8000f72:	4462      	add	r2, ip
 8000f74:	e732      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e70a      	b.n	8000d90 <__udivmoddi4+0xd8>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e742      	b.n	8000e06 <__udivmoddi4+0x14e>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <_ZN6SX128x8HalPreTxEv>:
	virtual void HalGpioWrite(GpioPinFunction_t func, uint8_t value) = 0;
	virtual void HalSpiTransfer(uint8_t *buffer_in, const uint8_t *buffer_out, uint16_t size) = 0;
	void HalSpiRead(uint8_t *buffer_in, uint16_t size);
	void HalSpiWrite(const uint8_t *buffer_out, uint16_t size);

	virtual void HalPreTx() {}
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <_ZN6SX128x8HalPreRxEv>:
	virtual void HalPreRx() {}
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <_ZN6SX128x9HalPostTxEv>:
	virtual void HalPostTx() {}
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <_ZN6SX128x9HalPostRxEv>:
	virtual void HalPostRx() {}
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <_ZN6SX128x12GetDioStatusEv>:
	virtual void WriteRegister(uint16_t address, uint8_t value);
	virtual void ReadRegister(uint16_t address, uint8_t *buffer, uint16_t size);
	virtual uint8_t ReadRegister(uint16_t address);
	virtual void WriteBuffer(uint8_t offset, uint8_t *buffer, uint8_t size);
	virtual void ReadBuffer(uint8_t offset, uint8_t *buffer, uint8_t size);
	virtual uint8_t GetDioStatus(void) {
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
		return 0;
 8000fdc:	2300      	movs	r3, #0
	}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <_ZN6SX128x18GetFirmwareVersionEv>:
//		WriteRegister( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
//	}
//}

uint16_t SX128x::GetFirmwareVersion(void )
{
 8000fea:	b590      	push	{r4, r7, lr}
 8000fec:	b083      	sub	sp, #12
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
	return( ( ( ReadRegister( REG_LR_FIRMWARE_VERSION_MSB ) ) << 8 ) | ( ReadRegister( REG_LR_FIRMWARE_VERSION_MSB + 1 ) ) );
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	3344      	adds	r3, #68	; 0x44
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f240 1153 	movw	r1, #339	; 0x153
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	4798      	blx	r3
 8001002:	4603      	mov	r3, r0
 8001004:	021b      	lsls	r3, r3, #8
 8001006:	b21c      	sxth	r4, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	3344      	adds	r3, #68	; 0x44
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	4798      	blx	r3
 8001018:	4603      	mov	r3, r0
 800101a:	b21b      	sxth	r3, r3
 800101c:	4323      	orrs	r3, r4
 800101e:	b21b      	sxth	r3, r3
 8001020:	b29b      	uxth	r3, r3
}
 8001022:	4618      	mov	r0, r3
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	bd90      	pop	{r4, r7, pc}

0800102a <_ZN6SX128x9GetStatusEv>:

SX128x::RadioStatus_t SX128x::GetStatus(void )
{
 800102a:	b590      	push	{r4, r7, lr}
 800102c:	b085      	sub	sp, #20
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
	uint8_t stat = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	73fb      	strb	r3, [r7, #15]
	RadioStatus_t status;

	ReadCommand( RADIO_GET_STATUS, ( uint8_t * )&stat, 1 );
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	3334      	adds	r3, #52	; 0x34
 800103c:	681c      	ldr	r4, [r3, #0]
 800103e:	f107 020f 	add.w	r2, r7, #15
 8001042:	2301      	movs	r3, #1
 8001044:	21c0      	movs	r1, #192	; 0xc0
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	47a0      	blx	r4
	status.Value = stat;
 800104a:	7bfb      	ldrb	r3, [r7, #15]
 800104c:	733b      	strb	r3, [r7, #12]
	return( status );
 800104e:	7b3b      	ldrb	r3, [r7, #12]
}
 8001050:	4618      	mov	r0, r3
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	bd90      	pop	{r4, r7, pc}

08001058 <_ZN6SX128x9GetOpModeEv>:

SX128x::RadioOperatingModes_t SX128x::GetOpMode(void )
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
	return( OperatingMode );
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
}
 8001066:	4618      	mov	r0, r3
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <_ZN6SX128x10SetStandbyENS_19RadioStandbyModes_tE>:
	OperatingMode = MODE_SLEEP;
	WriteCommand( RADIO_SET_SLEEP, &sleep, 1 );
}

void SX128x::SetStandby(RadioStandbyModes_t standbyConfig )
{
 8001072:	b590      	push	{r4, r7, lr}
 8001074:	b083      	sub	sp, #12
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
 800107a:	460b      	mov	r3, r1
 800107c:	70fb      	strb	r3, [r7, #3]
	// std::lock_guard<std::mutex> lg(IOLock2);

	WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	3330      	adds	r3, #48	; 0x30
 8001084:	681c      	ldr	r4, [r3, #0]
 8001086:	1cfa      	adds	r2, r7, #3
 8001088:	2301      	movs	r3, #1
 800108a:	2180      	movs	r1, #128	; 0x80
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	47a0      	blx	r4
	if (standbyConfig == STDBY_RC )
 8001090:	78fb      	ldrb	r3, [r7, #3]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d104      	bne.n	80010a0 <_ZN6SX128x10SetStandbyENS_19RadioStandbyModes_tE+0x2e>
	{
		OperatingMode = MODE_STDBY_RC;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2202      	movs	r2, #2
 800109a:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	}
	else
	{
		OperatingMode = MODE_STDBY_XOSC;
	}
}
 800109e:	e003      	b.n	80010a8 <_ZN6SX128x10SetStandbyENS_19RadioStandbyModes_tE+0x36>
		OperatingMode = MODE_STDBY_XOSC;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2203      	movs	r2, #3
 80010a4:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd90      	pop	{r4, r7, pc}

080010b0 <_ZN6SX128x5SetTxENS_10TickTime_sE>:
	WriteCommand( RADIO_SET_FS, 0, 0 );
	OperatingMode = MODE_FS;
}

void SX128x::SetTx(TickTime_t timeout )
{
 80010b0:	b590      	push	{r4, r7, lr}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
	// std::lock_guard<std::mutex> lg(IOLock2);

	uint8_t buf[3];
	buf[0] = timeout.PeriodBase;
 80010ba:	783b      	ldrb	r3, [r7, #0]
 80010bc:	733b      	strb	r3, [r7, #12]
	buf[1] = ( uint8_t )( ( timeout.PeriodBaseCount >> 8 ) & 0x00FF );
 80010be:	887b      	ldrh	r3, [r7, #2]
 80010c0:	0a1b      	lsrs	r3, r3, #8
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	737b      	strb	r3, [r7, #13]
	buf[2] = ( uint8_t )( timeout.PeriodBaseCount & 0x00FF );
 80010c8:	887b      	ldrh	r3, [r7, #2]
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	73bb      	strb	r3, [r7, #14]

	ClearIrqStatus( IRQ_RADIO_ALL );
 80010ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f000 fa31 	bl	800153a <_ZN6SX128x14ClearIrqStatusEt>
//	if (GetPacketType( true ) == PACKET_TYPE_RANGING )
//	{
////		SetRangingRole( RADIO_RANGING_ROLE_MASTER );
//	}

	HalPostRx();
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	3318      	adds	r3, #24
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	4798      	blx	r3
	HalPreTx();
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	330c      	adds	r3, #12
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	4798      	blx	r3
	WriteCommand( RADIO_SET_TX, buf, 3 );
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	3330      	adds	r3, #48	; 0x30
 80010f6:	681c      	ldr	r4, [r3, #0]
 80010f8:	f107 020c 	add.w	r2, r7, #12
 80010fc:	2303      	movs	r3, #3
 80010fe:	2183      	movs	r1, #131	; 0x83
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	47a0      	blx	r4
	OperatingMode = MODE_TX;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2206      	movs	r2, #6
 8001108:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
}
 800110c:	bf00      	nop
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	bd90      	pop	{r4, r7, pc}

08001114 <_ZN6SX128x13SetPacketTypeENS_18RadioPacketTypes_tE>:
	HalPreTx();
	WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
}

void SX128x::SetPacketType(RadioPacketTypes_t packetType )
{
 8001114:	b590      	push	{r4, r7, lr}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	460b      	mov	r3, r1
 800111e:	70fb      	strb	r3, [r7, #3]
	// Save packet type internally to avoid questioning the radio
	this->PacketType = packetType;
 8001120:	78fa      	ldrb	r2, [r7, #3]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9

	WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	3330      	adds	r3, #48	; 0x30
 800112e:	681c      	ldr	r4, [r3, #0]
 8001130:	1cfa      	adds	r2, r7, #3
 8001132:	2301      	movs	r3, #1
 8001134:	218a      	movs	r1, #138	; 0x8a
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	47a0      	blx	r4
}
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	bd90      	pop	{r4, r7, pc}

08001142 <_ZN6SX128x14SetRfFrequencyEm>:
	}
	return packetType;
}

void SX128x::SetRfFrequency(uint32_t rfFrequency )
{
 8001142:	b590      	push	{r4, r7, lr}
 8001144:	b085      	sub	sp, #20
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
 800114a:	6039      	str	r1, [r7, #0]
	uint8_t buf[3];
	uint32_t freq = 0;
 800114c:	2300      	movs	r3, #0
 800114e:	60fb      	str	r3, [r7, #12]

	freq = ( uint32_t )( ( double )rfFrequency / ( double )FREQ_STEP );
 8001150:	6838      	ldr	r0, [r7, #0]
 8001152:	f7ff f9d7 	bl	8000504 <__aeabi_ui2d>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800115c:	f7ff fb76 	bl	800084c <__aeabi_ddiv>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4610      	mov	r0, r2
 8001166:	4619      	mov	r1, r3
 8001168:	f7ff fd1e 	bl	8000ba8 <__aeabi_d2uiz>
 800116c:	4603      	mov	r3, r0
 800116e:	60fb      	str	r3, [r7, #12]
	buf[0] = ( uint8_t )( ( freq >> 16 ) & 0xFF );
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	0c1b      	lsrs	r3, r3, #16
 8001174:	b2db      	uxtb	r3, r3
 8001176:	723b      	strb	r3, [r7, #8]
	buf[1] = ( uint8_t )( ( freq >> 8 ) & 0xFF );
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	0a1b      	lsrs	r3, r3, #8
 800117c:	b2db      	uxtb	r3, r3
 800117e:	727b      	strb	r3, [r7, #9]
	buf[2] = ( uint8_t )( freq & 0xFF );
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	b2db      	uxtb	r3, r3
 8001184:	72bb      	strb	r3, [r7, #10]
	WriteCommand( RADIO_SET_RFFREQUENCY, buf, 3 );
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	3330      	adds	r3, #48	; 0x30
 800118c:	681c      	ldr	r4, [r3, #0]
 800118e:	f107 0208 	add.w	r2, r7, #8
 8001192:	2303      	movs	r3, #3
 8001194:	2186      	movs	r1, #134	; 0x86
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	47a0      	blx	r4
}
 800119a:	bf00      	nop
 800119c:	3714      	adds	r7, #20
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd90      	pop	{r4, r7, pc}

080011a2 <_ZN6SX128x11SetTxParamsEaNS_16RadioRampTimes_tE>:

void SX128x::SetTxParams(int8_t power, RadioRampTimes_t rampTime )
{
 80011a2:	b590      	push	{r4, r7, lr}
 80011a4:	b085      	sub	sp, #20
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
 80011aa:	460b      	mov	r3, r1
 80011ac:	70fb      	strb	r3, [r7, #3]
 80011ae:	4613      	mov	r3, r2
 80011b0:	70bb      	strb	r3, [r7, #2]
	uint8_t buf[2];

	// The power value to send on SPI/UART is in the range [0..31] and the
	// physical output power is in the range [-18..13]dBm
	buf[0] = power + 18;
 80011b2:	78fb      	ldrb	r3, [r7, #3]
 80011b4:	3312      	adds	r3, #18
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	733b      	strb	r3, [r7, #12]
	buf[1] = ( uint8_t )rampTime;
 80011ba:	78bb      	ldrb	r3, [r7, #2]
 80011bc:	737b      	strb	r3, [r7, #13]
	WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	3330      	adds	r3, #48	; 0x30
 80011c4:	681c      	ldr	r4, [r3, #0]
 80011c6:	f107 020c 	add.w	r2, r7, #12
 80011ca:	2302      	movs	r3, #2
 80011cc:	218e      	movs	r1, #142	; 0x8e
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	47a0      	blx	r4
}
 80011d2:	bf00      	nop
 80011d4:	3714      	adds	r7, #20
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd90      	pop	{r4, r7, pc}

080011da <_ZN6SX128x22SetBufferBaseAddressesEhh>:
	WriteCommand( RADIO_SET_CADPARAMS, ( uint8_t* )&cadSymbolNum, 1 );
	OperatingMode = MODE_CAD;
}

void SX128x::SetBufferBaseAddresses(uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 80011da:	b590      	push	{r4, r7, lr}
 80011dc:	b085      	sub	sp, #20
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
 80011e2:	460b      	mov	r3, r1
 80011e4:	70fb      	strb	r3, [r7, #3]
 80011e6:	4613      	mov	r3, r2
 80011e8:	70bb      	strb	r3, [r7, #2]
	uint8_t buf[2];

	buf[0] = txBaseAddress;
 80011ea:	78fb      	ldrb	r3, [r7, #3]
 80011ec:	733b      	strb	r3, [r7, #12]
	buf[1] = rxBaseAddress;
 80011ee:	78bb      	ldrb	r3, [r7, #2]
 80011f0:	737b      	strb	r3, [r7, #13]
	WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	3330      	adds	r3, #48	; 0x30
 80011f8:	681c      	ldr	r4, [r3, #0]
 80011fa:	f107 020c 	add.w	r2, r7, #12
 80011fe:	2302      	movs	r3, #2
 8001200:	218f      	movs	r1, #143	; 0x8f
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	47a0      	blx	r4
}
 8001206:	bf00      	nop
 8001208:	3714      	adds	r7, #20
 800120a:	46bd      	mov	sp, r7
 800120c:	bd90      	pop	{r4, r7, pc}
	...

08001210 <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE>:

void SX128x::SetModulationParams(const ModulationParams_t& modParams )
{
 8001210:	b590      	push	{r4, r7, lr}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
	uint8_t buf[3];

	// Check if required configuration corresponds to the stored packet type
	// If not, silently update radio packet type
	if (this->PacketType != modParams.PacketType )
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	429a      	cmp	r2, r3
 8001226:	d005      	beq.n	8001234 <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE+0x24>
	{
		this->SetPacketType( modParams.PacketType );
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	4619      	mov	r1, r3
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f7ff ff70 	bl	8001114 <_ZN6SX128x13SetPacketTypeENS_18RadioPacketTypes_tE>
	}

	switch( modParams.PacketType )
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b0f      	cmp	r3, #15
 800123a:	d857      	bhi.n	80012ec <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE+0xdc>
 800123c:	a201      	add	r2, pc, #4	; (adr r2, 8001244 <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE+0x34>)
 800123e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001242:	bf00      	nop
 8001244:	08001285 	.word	0x08001285
 8001248:	08001299 	.word	0x08001299
 800124c:	08001299 	.word	0x08001299
 8001250:	080012b7 	.word	0x080012b7
 8001254:	080012cb 	.word	0x080012cb
 8001258:	080012ed 	.word	0x080012ed
 800125c:	080012ed 	.word	0x080012ed
 8001260:	080012ed 	.word	0x080012ed
 8001264:	080012ed 	.word	0x080012ed
 8001268:	080012ed 	.word	0x080012ed
 800126c:	080012ed 	.word	0x080012ed
 8001270:	080012ed 	.word	0x080012ed
 8001274:	080012ed 	.word	0x080012ed
 8001278:	080012ed 	.word	0x080012ed
 800127c:	080012ed 	.word	0x080012ed
 8001280:	080012df 	.word	0x080012df
	{
		case PACKET_TYPE_GFSK:
			buf[0] = modParams.Params.Gfsk.BitrateBandwidth;
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	785b      	ldrb	r3, [r3, #1]
 8001288:	733b      	strb	r3, [r7, #12]
			buf[1] = modParams.Params.Gfsk.ModulationIndex;
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	789b      	ldrb	r3, [r3, #2]
 800128e:	737b      	strb	r3, [r7, #13]
			buf[2] = modParams.Params.Gfsk.ModulationShaping;
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	78db      	ldrb	r3, [r3, #3]
 8001294:	73bb      	strb	r3, [r7, #14]
			break;
 8001296:	e029      	b.n	80012ec <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE+0xdc>
		case PACKET_TYPE_LORA:
		case PACKET_TYPE_RANGING:
			buf[0] = modParams.Params.LoRa.SpreadingFactor;
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	791b      	ldrb	r3, [r3, #4]
 800129c:	733b      	strb	r3, [r7, #12]
			buf[1] = modParams.Params.LoRa.Bandwidth;
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	795b      	ldrb	r3, [r3, #5]
 80012a2:	737b      	strb	r3, [r7, #13]
			buf[2] = modParams.Params.LoRa.CodingRate;
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	799b      	ldrb	r3, [r3, #6]
 80012a8:	73bb      	strb	r3, [r7, #14]
			this->LoRaBandwidth = modParams.Params.LoRa.Bandwidth;
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	795a      	ldrb	r2, [r3, #5]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
			break;
 80012b4:	e01a      	b.n	80012ec <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE+0xdc>
		case PACKET_TYPE_FLRC:
			buf[0] = modParams.Params.Flrc.BitrateBandwidth;
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	79db      	ldrb	r3, [r3, #7]
 80012ba:	733b      	strb	r3, [r7, #12]
			buf[1] = modParams.Params.Flrc.CodingRate;
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	7a1b      	ldrb	r3, [r3, #8]
 80012c0:	737b      	strb	r3, [r7, #13]
			buf[2] = modParams.Params.Flrc.ModulationShaping;
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	7a5b      	ldrb	r3, [r3, #9]
 80012c6:	73bb      	strb	r3, [r7, #14]
			break;
 80012c8:	e010      	b.n	80012ec <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE+0xdc>
		case PACKET_TYPE_BLE:
			buf[0] = modParams.Params.Ble.BitrateBandwidth;
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	7a9b      	ldrb	r3, [r3, #10]
 80012ce:	733b      	strb	r3, [r7, #12]
			buf[1] = modParams.Params.Ble.ModulationIndex;
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	7adb      	ldrb	r3, [r3, #11]
 80012d4:	737b      	strb	r3, [r7, #13]
			buf[2] = modParams.Params.Ble.ModulationShaping;
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	7b1b      	ldrb	r3, [r3, #12]
 80012da:	73bb      	strb	r3, [r7, #14]
			break;
 80012dc:	e006      	b.n	80012ec <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE+0xdc>
		case PACKET_TYPE_NONE:
			buf[0] = 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	733b      	strb	r3, [r7, #12]
			buf[1] = 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	737b      	strb	r3, [r7, #13]
			buf[2] = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	73bb      	strb	r3, [r7, #14]
			break;
 80012ea:	bf00      	nop
	}
	WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, 3 );
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	3330      	adds	r3, #48	; 0x30
 80012f2:	681c      	ldr	r4, [r3, #0]
 80012f4:	f107 020c 	add.w	r2, r7, #12
 80012f8:	2303      	movs	r3, #3
 80012fa:	218b      	movs	r1, #139	; 0x8b
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	47a0      	blx	r4
	CurrentModParams = modParams;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	683a      	ldr	r2, [r7, #0]
 8001304:	33ab      	adds	r3, #171	; 0xab
 8001306:	6814      	ldr	r4, [r2, #0]
 8001308:	6850      	ldr	r0, [r2, #4]
 800130a:	6891      	ldr	r1, [r2, #8]
 800130c:	601c      	str	r4, [r3, #0]
 800130e:	6058      	str	r0, [r3, #4]
 8001310:	6099      	str	r1, [r3, #8]
 8001312:	7b12      	ldrb	r2, [r2, #12]
 8001314:	731a      	strb	r2, [r3, #12]
}
 8001316:	bf00      	nop
 8001318:	3714      	adds	r7, #20
 800131a:	46bd      	mov	sp, r7
 800131c:	bd90      	pop	{r4, r7, pc}
 800131e:	bf00      	nop

08001320 <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE>:

void SX128x::SetPacketParams(const PacketParams_t& packetParams)
{
 8001320:	b5b0      	push	{r4, r5, r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
	uint8_t buf[7];
	// Check if required configuration corresponds to the stored packet type
	// If not, silently update radio packet type
	if (this->PacketType != packetParams.PacketType )
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	429a      	cmp	r2, r3
 8001336:	d005      	beq.n	8001344 <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE+0x24>
	{
		this->SetPacketType( packetParams.PacketType );
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	4619      	mov	r1, r3
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff fee8 	bl	8001114 <_ZN6SX128x13SetPacketTypeENS_18RadioPacketTypes_tE>
	}

	switch( packetParams.PacketType )
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b0f      	cmp	r3, #15
 800134a:	f200 8085 	bhi.w	8001458 <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE+0x138>
 800134e:	a201      	add	r2, pc, #4	; (adr r2, 8001354 <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE+0x34>)
 8001350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001354:	08001395 	.word	0x08001395
 8001358:	080013c1 	.word	0x080013c1
 800135c:	080013c1 	.word	0x080013c1
 8001360:	080013e9 	.word	0x080013e9
 8001364:	08001415 	.word	0x08001415
 8001368:	08001459 	.word	0x08001459
 800136c:	08001459 	.word	0x08001459
 8001370:	08001459 	.word	0x08001459
 8001374:	08001459 	.word	0x08001459
 8001378:	08001459 	.word	0x08001459
 800137c:	08001459 	.word	0x08001459
 8001380:	08001459 	.word	0x08001459
 8001384:	08001459 	.word	0x08001459
 8001388:	08001459 	.word	0x08001459
 800138c:	08001459 	.word	0x08001459
 8001390:	0800143b 	.word	0x0800143b
	{
		case PACKET_TYPE_GFSK:
			buf[0] = packetParams.Params.Gfsk.PreambleLength;
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	785b      	ldrb	r3, [r3, #1]
 8001398:	723b      	strb	r3, [r7, #8]
			buf[1] = packetParams.Params.Gfsk.SyncWordLength;
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	789b      	ldrb	r3, [r3, #2]
 800139e:	727b      	strb	r3, [r7, #9]
			buf[2] = packetParams.Params.Gfsk.SyncWordMatch;
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	78db      	ldrb	r3, [r3, #3]
 80013a4:	72bb      	strb	r3, [r7, #10]
			buf[3] = packetParams.Params.Gfsk.HeaderType;
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	791b      	ldrb	r3, [r3, #4]
 80013aa:	72fb      	strb	r3, [r7, #11]
			buf[4] = packetParams.Params.Gfsk.PayloadLength;
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	795b      	ldrb	r3, [r3, #5]
 80013b0:	733b      	strb	r3, [r7, #12]
			buf[5] = packetParams.Params.Gfsk.CrcLength;
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	799b      	ldrb	r3, [r3, #6]
 80013b6:	737b      	strb	r3, [r7, #13]
			buf[6] = packetParams.Params.Gfsk.Whitening;
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	79db      	ldrb	r3, [r3, #7]
 80013bc:	73bb      	strb	r3, [r7, #14]
			break;
 80013be:	e04b      	b.n	8001458 <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE+0x138>
		case PACKET_TYPE_LORA:
		case PACKET_TYPE_RANGING:
			buf[0] = packetParams.Params.LoRa.PreambleLength;
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	7a1b      	ldrb	r3, [r3, #8]
 80013c4:	723b      	strb	r3, [r7, #8]
			buf[1] = packetParams.Params.LoRa.HeaderType;
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	7a5b      	ldrb	r3, [r3, #9]
 80013ca:	727b      	strb	r3, [r7, #9]
			buf[2] = packetParams.Params.LoRa.PayloadLength;
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	7a9b      	ldrb	r3, [r3, #10]
 80013d0:	72bb      	strb	r3, [r7, #10]
			buf[3] = packetParams.Params.LoRa.Crc;
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	7adb      	ldrb	r3, [r3, #11]
 80013d6:	72fb      	strb	r3, [r7, #11]
			buf[4] = packetParams.Params.LoRa.InvertIQ;
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	7b1b      	ldrb	r3, [r3, #12]
 80013dc:	733b      	strb	r3, [r7, #12]
			buf[5] = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	737b      	strb	r3, [r7, #13]
			buf[6] = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	73bb      	strb	r3, [r7, #14]
			break;
 80013e6:	e037      	b.n	8001458 <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE+0x138>
		case PACKET_TYPE_FLRC:
			buf[0] = packetParams.Params.Flrc.PreambleLength;
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	7b5b      	ldrb	r3, [r3, #13]
 80013ec:	723b      	strb	r3, [r7, #8]
			buf[1] = packetParams.Params.Flrc.SyncWordLength;
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	7b9b      	ldrb	r3, [r3, #14]
 80013f2:	727b      	strb	r3, [r7, #9]
			buf[2] = packetParams.Params.Flrc.SyncWordMatch;
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	7bdb      	ldrb	r3, [r3, #15]
 80013f8:	72bb      	strb	r3, [r7, #10]
			buf[3] = packetParams.Params.Flrc.HeaderType;
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	7c1b      	ldrb	r3, [r3, #16]
 80013fe:	72fb      	strb	r3, [r7, #11]
			buf[4] = packetParams.Params.Flrc.PayloadLength;
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	7c5b      	ldrb	r3, [r3, #17]
 8001404:	733b      	strb	r3, [r7, #12]
			buf[5] = packetParams.Params.Flrc.CrcLength;
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	7c9b      	ldrb	r3, [r3, #18]
 800140a:	737b      	strb	r3, [r7, #13]
			buf[6] = packetParams.Params.Flrc.Whitening;
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	7cdb      	ldrb	r3, [r3, #19]
 8001410:	73bb      	strb	r3, [r7, #14]
			break;
 8001412:	e021      	b.n	8001458 <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE+0x138>
		case PACKET_TYPE_BLE:
			buf[0] = packetParams.Params.Ble.ConnectionState;
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	7d1b      	ldrb	r3, [r3, #20]
 8001418:	723b      	strb	r3, [r7, #8]
			buf[1] = packetParams.Params.Ble.CrcLength;
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	7d5b      	ldrb	r3, [r3, #21]
 800141e:	727b      	strb	r3, [r7, #9]
			buf[2] = packetParams.Params.Ble.BleTestPayload;
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	7d9b      	ldrb	r3, [r3, #22]
 8001424:	72bb      	strb	r3, [r7, #10]
			buf[3] = packetParams.Params.Ble.Whitening;
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	7ddb      	ldrb	r3, [r3, #23]
 800142a:	72fb      	strb	r3, [r7, #11]
			buf[4] = 0;
 800142c:	2300      	movs	r3, #0
 800142e:	733b      	strb	r3, [r7, #12]
			buf[5] = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	737b      	strb	r3, [r7, #13]
			buf[6] = 0;
 8001434:	2300      	movs	r3, #0
 8001436:	73bb      	strb	r3, [r7, #14]
			break;
 8001438:	e00e      	b.n	8001458 <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE+0x138>
		case PACKET_TYPE_NONE:
			buf[0] = 0;
 800143a:	2300      	movs	r3, #0
 800143c:	723b      	strb	r3, [r7, #8]
			buf[1] = 0;
 800143e:	2300      	movs	r3, #0
 8001440:	727b      	strb	r3, [r7, #9]
			buf[2] = 0;
 8001442:	2300      	movs	r3, #0
 8001444:	72bb      	strb	r3, [r7, #10]
			buf[3] = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	72fb      	strb	r3, [r7, #11]
			buf[4] = 0;
 800144a:	2300      	movs	r3, #0
 800144c:	733b      	strb	r3, [r7, #12]
			buf[5] = 0;
 800144e:	2300      	movs	r3, #0
 8001450:	737b      	strb	r3, [r7, #13]
			buf[6] = 0;
 8001452:	2300      	movs	r3, #0
 8001454:	73bb      	strb	r3, [r7, #14]
			break;
 8001456:	bf00      	nop
	}
	WriteCommand( RADIO_SET_PACKETPARAMS, buf, 7 );
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	3330      	adds	r3, #48	; 0x30
 800145e:	681c      	ldr	r4, [r3, #0]
 8001460:	f107 0208 	add.w	r2, r7, #8
 8001464:	2307      	movs	r3, #7
 8001466:	218c      	movs	r1, #140	; 0x8c
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	47a0      	blx	r4
	CurrentPacketParams = packetParams;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	683a      	ldr	r2, [r7, #0]
 8001470:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 8001474:	4615      	mov	r5, r2
 8001476:	6828      	ldr	r0, [r5, #0]
 8001478:	6869      	ldr	r1, [r5, #4]
 800147a:	68aa      	ldr	r2, [r5, #8]
 800147c:	68eb      	ldr	r3, [r5, #12]
 800147e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001480:	6928      	ldr	r0, [r5, #16]
 8001482:	6969      	ldr	r1, [r5, #20]
 8001484:	c403      	stmia	r4!, {r0, r1}
}
 8001486:	bf00      	nop
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bdb0      	pop	{r4, r5, r7, pc}
 800148e:	bf00      	nop

08001490 <_ZN6SX128x15SetDioIrqParamsEtttt>:

	return ( int8_t ) ( -raw / 2 );
}

void SX128x::SetDioIrqParams(uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8001490:	b590      	push	{r4, r7, lr}
 8001492:	b087      	sub	sp, #28
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	4608      	mov	r0, r1
 800149a:	4611      	mov	r1, r2
 800149c:	461a      	mov	r2, r3
 800149e:	4603      	mov	r3, r0
 80014a0:	817b      	strh	r3, [r7, #10]
 80014a2:	460b      	mov	r3, r1
 80014a4:	813b      	strh	r3, [r7, #8]
 80014a6:	4613      	mov	r3, r2
 80014a8:	80fb      	strh	r3, [r7, #6]
	uint8_t buf[8];

	buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 80014aa:	897b      	ldrh	r3, [r7, #10]
 80014ac:	0a1b      	lsrs	r3, r3, #8
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	743b      	strb	r3, [r7, #16]
	buf[1] = ( uint8_t )( irqMask & 0x00FF );
 80014b4:	897b      	ldrh	r3, [r7, #10]
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	747b      	strb	r3, [r7, #17]
	buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 80014ba:	893b      	ldrh	r3, [r7, #8]
 80014bc:	0a1b      	lsrs	r3, r3, #8
 80014be:	b29b      	uxth	r3, r3
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	74bb      	strb	r3, [r7, #18]
	buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 80014c4:	893b      	ldrh	r3, [r7, #8]
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	74fb      	strb	r3, [r7, #19]
	buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 80014ca:	88fb      	ldrh	r3, [r7, #6]
 80014cc:	0a1b      	lsrs	r3, r3, #8
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	753b      	strb	r3, [r7, #20]
	buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 80014d4:	88fb      	ldrh	r3, [r7, #6]
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	757b      	strb	r3, [r7, #21]
	buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 80014da:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80014dc:	0a1b      	lsrs	r3, r3, #8
 80014de:	b29b      	uxth	r3, r3
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	75bb      	strb	r3, [r7, #22]
	buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 80014e4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	75fb      	strb	r3, [r7, #23]
	WriteCommand( RADIO_SET_DIOIRQPARAMS, buf, 8 );
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	3330      	adds	r3, #48	; 0x30
 80014f0:	681c      	ldr	r4, [r3, #0]
 80014f2:	f107 0210 	add.w	r2, r7, #16
 80014f6:	2308      	movs	r3, #8
 80014f8:	218d      	movs	r1, #141	; 0x8d
 80014fa:	68f8      	ldr	r0, [r7, #12]
 80014fc:	47a0      	blx	r4
}
 80014fe:	bf00      	nop
 8001500:	371c      	adds	r7, #28
 8001502:	46bd      	mov	sp, r7
 8001504:	bd90      	pop	{r4, r7, pc}

08001506 <_ZN6SX128x12GetIrqStatusEv>:

uint16_t SX128x::GetIrqStatus(void )
{
 8001506:	b590      	push	{r4, r7, lr}
 8001508:	b085      	sub	sp, #20
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
	uint8_t irqStatus[2];
	ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	3334      	adds	r3, #52	; 0x34
 8001514:	681c      	ldr	r4, [r3, #0]
 8001516:	f107 020c 	add.w	r2, r7, #12
 800151a:	2302      	movs	r3, #2
 800151c:	2115      	movs	r1, #21
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	47a0      	blx	r4
	return ( irqStatus[0] << 8 ) | irqStatus[1];
 8001522:	7b3b      	ldrb	r3, [r7, #12]
 8001524:	021b      	lsls	r3, r3, #8
 8001526:	b21a      	sxth	r2, r3
 8001528:	7b7b      	ldrb	r3, [r7, #13]
 800152a:	b21b      	sxth	r3, r3
 800152c:	4313      	orrs	r3, r2
 800152e:	b21b      	sxth	r3, r3
 8001530:	b29b      	uxth	r3, r3
}
 8001532:	4618      	mov	r0, r3
 8001534:	3714      	adds	r7, #20
 8001536:	46bd      	mov	sp, r7
 8001538:	bd90      	pop	{r4, r7, pc}

0800153a <_ZN6SX128x14ClearIrqStatusEt>:

void SX128x::ClearIrqStatus(uint16_t irqMask )
{
 800153a:	b590      	push	{r4, r7, lr}
 800153c:	b085      	sub	sp, #20
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
 8001542:	460b      	mov	r3, r1
 8001544:	807b      	strh	r3, [r7, #2]
	uint8_t buf[2];

	buf[0] = ( uint8_t )( ( ( uint16_t )irqMask >> 8 ) & 0x00FF );
 8001546:	887b      	ldrh	r3, [r7, #2]
 8001548:	0a1b      	lsrs	r3, r3, #8
 800154a:	b29b      	uxth	r3, r3
 800154c:	b2db      	uxtb	r3, r3
 800154e:	733b      	strb	r3, [r7, #12]
	buf[1] = ( uint8_t )( ( uint16_t )irqMask & 0x00FF );
 8001550:	887b      	ldrh	r3, [r7, #2]
 8001552:	b2db      	uxtb	r3, r3
 8001554:	737b      	strb	r3, [r7, #13]
	WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	3330      	adds	r3, #48	; 0x30
 800155c:	681c      	ldr	r4, [r3, #0]
 800155e:	f107 020c 	add.w	r2, r7, #12
 8001562:	2302      	movs	r3, #2
 8001564:	2197      	movs	r1, #151	; 0x97
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	47a0      	blx	r4
}
 800156a:	bf00      	nop
 800156c:	3714      	adds	r7, #20
 800156e:	46bd      	mov	sp, r7
 8001570:	bd90      	pop	{r4, r7, pc}

08001572 <_ZN6SX128x10SetPayloadEPhhh>:
{
	WriteCommand( RADIO_SET_LONGPREAMBLE, ( uint8_t * )&enable, 1 );
}

void SX128x::SetPayload(uint8_t *buffer, uint8_t size, uint8_t offset )
{
 8001572:	b590      	push	{r4, r7, lr}
 8001574:	b085      	sub	sp, #20
 8001576:	af00      	add	r7, sp, #0
 8001578:	60f8      	str	r0, [r7, #12]
 800157a:	60b9      	str	r1, [r7, #8]
 800157c:	4611      	mov	r1, r2
 800157e:	461a      	mov	r2, r3
 8001580:	460b      	mov	r3, r1
 8001582:	71fb      	strb	r3, [r7, #7]
 8001584:	4613      	mov	r3, r2
 8001586:	71bb      	strb	r3, [r7, #6]
	WriteBuffer( offset, buffer, size );
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	3348      	adds	r3, #72	; 0x48
 800158e:	681c      	ldr	r4, [r3, #0]
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	79b9      	ldrb	r1, [r7, #6]
 8001594:	68ba      	ldr	r2, [r7, #8]
 8001596:	68f8      	ldr	r0, [r7, #12]
 8001598:	47a0      	blx	r4
}
 800159a:	bf00      	nop
 800159c:	3714      	adds	r7, #20
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd90      	pop	{r4, r7, pc}

080015a2 <_ZN6SX128x11SendPayloadEPhhNS_10TickTime_sEh>:
	ReadBuffer( offset, buffer, *size );
	return 0;
}

void SX128x::SendPayload(uint8_t *payload, uint8_t size, TickTime_t timeout, uint8_t offset )
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b084      	sub	sp, #16
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	60f8      	str	r0, [r7, #12]
 80015aa:	60b9      	str	r1, [r7, #8]
 80015ac:	603b      	str	r3, [r7, #0]
 80015ae:	4613      	mov	r3, r2
 80015b0:	71fb      	strb	r3, [r7, #7]
	SetPayload( payload, size, offset );
 80015b2:	7e3b      	ldrb	r3, [r7, #24]
 80015b4:	79fa      	ldrb	r2, [r7, #7]
 80015b6:	68b9      	ldr	r1, [r7, #8]
 80015b8:	68f8      	ldr	r0, [r7, #12]
 80015ba:	f7ff ffda 	bl	8001572 <_ZN6SX128x10SetPayloadEPhhh>
	SetTx( timeout );
 80015be:	6839      	ldr	r1, [r7, #0]
 80015c0:	68f8      	ldr	r0, [r7, #12]
 80015c2:	f7ff fd75 	bl	80010b0 <_ZN6SX128x5SetTxENS_10TickTime_sE>
}
 80015c6:	bf00      	nop
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <_ZN6SX128x11HalSpiWriteEPKht>:
	uint8_t useless[size];
	memset(useless, 0, size);
	HalSpiTransfer(buffer_in, useless, size);
}

void SX128x::HalSpiWrite(const uint8_t *buffer_out, uint16_t size) {
 80015ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80015d2:	b087      	sub	sp, #28
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	4613      	mov	r3, r2
 80015dc:	80fb      	strh	r3, [r7, #6]
	uint8_t useless[size];
	HalSpiTransfer(useless, buffer_out, size);
}
 80015de:	466b      	mov	r3, sp
 80015e0:	461e      	mov	r6, r3
	uint8_t useless[size];
 80015e2:	88f9      	ldrh	r1, [r7, #6]
 80015e4:	460b      	mov	r3, r1
 80015e6:	3b01      	subs	r3, #1
 80015e8:	617b      	str	r3, [r7, #20]
 80015ea:	b28b      	uxth	r3, r1
 80015ec:	2200      	movs	r2, #0
 80015ee:	4698      	mov	r8, r3
 80015f0:	4691      	mov	r9, r2
 80015f2:	f04f 0200 	mov.w	r2, #0
 80015f6:	f04f 0300 	mov.w	r3, #0
 80015fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80015fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001602:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001606:	b28b      	uxth	r3, r1
 8001608:	2200      	movs	r2, #0
 800160a:	461c      	mov	r4, r3
 800160c:	4615      	mov	r5, r2
 800160e:	f04f 0200 	mov.w	r2, #0
 8001612:	f04f 0300 	mov.w	r3, #0
 8001616:	00eb      	lsls	r3, r5, #3
 8001618:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800161c:	00e2      	lsls	r2, r4, #3
 800161e:	460b      	mov	r3, r1
 8001620:	3307      	adds	r3, #7
 8001622:	08db      	lsrs	r3, r3, #3
 8001624:	00db      	lsls	r3, r3, #3
 8001626:	ebad 0d03 	sub.w	sp, sp, r3
 800162a:	466b      	mov	r3, sp
 800162c:	3300      	adds	r3, #0
 800162e:	613b      	str	r3, [r7, #16]
	HalSpiTransfer(useless, buffer_out, size);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	3308      	adds	r3, #8
 8001636:	681c      	ldr	r4, [r3, #0]
 8001638:	88fb      	ldrh	r3, [r7, #6]
 800163a:	68ba      	ldr	r2, [r7, #8]
 800163c:	6939      	ldr	r1, [r7, #16]
 800163e:	68f8      	ldr	r0, [r7, #12]
 8001640:	47a0      	blx	r4
 8001642:	46b5      	mov	sp, r6
}
 8001644:	bf00      	nop
 8001646:	371c      	adds	r7, #28
 8001648:	46bd      	mov	sp, r7
 800164a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800164e <_ZN6SX128x10WaitOnBusyEv>:

inline void SX128x::WaitOnBusy() {
 800164e:	b480      	push	{r7}
 8001650:	b085      	sub	sp, #20
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
//	while (HalGpioRead(GPIO_PIN_BUSY));
//	HAL_Delay(1);
	for(int i = 0; i < 100; i++);
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	e002      	b.n	8001662 <_ZN6SX128x10WaitOnBusyEv+0x14>
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	3301      	adds	r3, #1
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2b63      	cmp	r3, #99	; 0x63
 8001666:	ddf9      	ble.n	800165c <_ZN6SX128x10WaitOnBusyEv+0xe>
}
 8001668:	bf00      	nop
 800166a:	bf00      	nop
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <_ZN6SX128x14WaitOnBusyLongEv>:

inline void SX128x::WaitOnBusyLong() {
 8001676:	b580      	push	{r7, lr}
 8001678:	b082      	sub	sp, #8
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
	while (HalGpioRead(GPIO_PIN_BUSY))
 800167e:	e002      	b.n	8001686 <_ZN6SX128x14WaitOnBusyLongEv+0x10>
		HAL_Delay(10);
 8001680:	200a      	movs	r0, #10
 8001682:	f001 fc63 	bl	8002f4c <HAL_Delay>
	while (HalGpioRead(GPIO_PIN_BUSY))
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2101      	movs	r1, #1
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	4798      	blx	r3
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	bf14      	ite	ne
 8001698:	2301      	movne	r3, #1
 800169a:	2300      	moveq	r3, #0
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1ee      	bne.n	8001680 <_ZN6SX128x14WaitOnBusyLongEv+0xa>
}
 80016a2:	bf00      	nop
 80016a4:	bf00      	nop
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <_ZN6SX128x5ResetEv>:

void SX128x::Reset(void) {
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
	HalGpioWrite(GPIO_PIN_RESET, 1);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	3304      	adds	r3, #4
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2201      	movs	r2, #1
 80016be:	2100      	movs	r1, #0
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	4798      	blx	r3
	HAL_Delay(100);
 80016c4:	2064      	movs	r0, #100	; 0x64
 80016c6:	f001 fc41 	bl	8002f4c <HAL_Delay>
	HalGpioWrite(GPIO_PIN_RESET, 0);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	3304      	adds	r3, #4
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2200      	movs	r2, #0
 80016d4:	2100      	movs	r1, #0
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	4798      	blx	r3
	HAL_Delay(100);
 80016da:	2064      	movs	r0, #100	; 0x64
 80016dc:	f001 fc36 	bl	8002f4c <HAL_Delay>
	HalGpioWrite(GPIO_PIN_RESET, 1);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	3304      	adds	r3, #4
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2201      	movs	r2, #1
 80016ea:	2100      	movs	r1, #0
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	4798      	blx	r3
	HAL_Delay(100);
 80016f0:	2064      	movs	r0, #100	; 0x64
 80016f2:	f001 fc2b 	bl	8002f4c <HAL_Delay>
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <_ZN6SX128x6WakeupEv>:

void SX128x::Wakeup(void) {
 80016fe:	b580      	push	{r7, lr}
 8001700:	b084      	sub	sp, #16
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
	uint8_t buf[2] = {RADIO_GET_STATUS, 0};
 8001706:	23c0      	movs	r3, #192	; 0xc0
 8001708:	81bb      	strh	r3, [r7, #12]
	HalSpiWrite(buf, 2);
 800170a:	f107 030c 	add.w	r3, r7, #12
 800170e:	2202      	movs	r2, #2
 8001710:	4619      	mov	r1, r3
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f7ff ff5b 	bl	80015ce <_ZN6SX128x11HalSpiWriteEPKht>
	WaitOnBusyLong();
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7ff ffac 	bl	8001676 <_ZN6SX128x14WaitOnBusyLongEv>
}
 800171e:	bf00      	nop
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <_ZN6SX128x12WriteCommandENS_15RadioCommands_uEPht>:

void SX128x::WriteCommand(SX128x::RadioCommands_t opcode, uint8_t *buffer, uint16_t size) {
 8001726:	b580      	push	{r7, lr}
 8001728:	b086      	sub	sp, #24
 800172a:	af00      	add	r7, sp, #0
 800172c:	60f8      	str	r0, [r7, #12]
 800172e:	607a      	str	r2, [r7, #4]
 8001730:	461a      	mov	r2, r3
 8001732:	460b      	mov	r3, r1
 8001734:	72fb      	strb	r3, [r7, #11]
 8001736:	4613      	mov	r3, r2
 8001738:	813b      	strh	r3, [r7, #8]
	auto *merged_buf = (uint8_t *)alloca(size+1);
 800173a:	893b      	ldrh	r3, [r7, #8]
 800173c:	3301      	adds	r3, #1
 800173e:	3307      	adds	r3, #7
 8001740:	08db      	lsrs	r3, r3, #3
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	ebad 0d03 	sub.w	sp, sp, r3
 8001748:	466b      	mov	r3, sp
 800174a:	3307      	adds	r3, #7
 800174c:	08db      	lsrs	r3, r3, #3
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	617b      	str	r3, [r7, #20]

	merged_buf[0] = opcode;
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	7afa      	ldrb	r2, [r7, #11]
 8001756:	701a      	strb	r2, [r3, #0]
	memcpy(merged_buf+1, buffer, size);
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	3301      	adds	r3, #1
 800175c:	893a      	ldrh	r2, [r7, #8]
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	4618      	mov	r0, r3
 8001762:	f006 f8ff 	bl	8007964 <memcpy>

	WaitOnBusy();
 8001766:	68f8      	ldr	r0, [r7, #12]
 8001768:	f7ff ff71 	bl	800164e <_ZN6SX128x10WaitOnBusyEv>
	HalSpiWrite(merged_buf, size+1);
 800176c:	893b      	ldrh	r3, [r7, #8]
 800176e:	3301      	adds	r3, #1
 8001770:	b29b      	uxth	r3, r3
 8001772:	461a      	mov	r2, r3
 8001774:	6979      	ldr	r1, [r7, #20]
 8001776:	68f8      	ldr	r0, [r7, #12]
 8001778:	f7ff ff29 	bl	80015ce <_ZN6SX128x11HalSpiWriteEPKht>
}
 800177c:	bf00      	nop
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <_ZN6SX128x11ReadCommandENS_15RadioCommands_uEPht>:

void SX128x::ReadCommand(SX128x::RadioCommands_t opcode, uint8_t *buffer, uint16_t size) {
 8001784:	b590      	push	{r4, r7, lr}
 8001786:	b08b      	sub	sp, #44	; 0x2c
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	607a      	str	r2, [r7, #4]
 800178e:	461a      	mov	r2, r3
 8001790:	460b      	mov	r3, r1
 8001792:	72fb      	strb	r3, [r7, #11]
 8001794:	4613      	mov	r3, r2
 8001796:	813b      	strh	r3, [r7, #8]

	if (opcode == RADIO_GET_STATUS) {
 8001798:	7afb      	ldrb	r3, [r7, #11]
 800179a:	2bc0      	cmp	r3, #192	; 0xc0
 800179c:	d11a      	bne.n	80017d4 <_ZN6SX128x11ReadCommandENS_15RadioCommands_uEPht+0x50>
		uint8_t buf_out[3] = {static_cast<uint8_t>(opcode), 0, 0};
 800179e:	f107 0318 	add.w	r3, r7, #24
 80017a2:	2100      	movs	r1, #0
 80017a4:	460a      	mov	r2, r1
 80017a6:	801a      	strh	r2, [r3, #0]
 80017a8:	460a      	mov	r2, r1
 80017aa:	709a      	strb	r2, [r3, #2]
 80017ac:	7afb      	ldrb	r3, [r7, #11]
 80017ae:	763b      	strb	r3, [r7, #24]
		uint8_t buf_in[3];

		WaitOnBusy();
 80017b0:	68f8      	ldr	r0, [r7, #12]
 80017b2:	f7ff ff4c 	bl	800164e <_ZN6SX128x10WaitOnBusyEv>
		HalSpiTransfer(buf_in, buf_out, 3);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	3308      	adds	r3, #8
 80017bc:	681c      	ldr	r4, [r3, #0]
 80017be:	f107 0218 	add.w	r2, r7, #24
 80017c2:	f107 0114 	add.w	r1, r7, #20
 80017c6:	2303      	movs	r3, #3
 80017c8:	68f8      	ldr	r0, [r7, #12]
 80017ca:	47a0      	blx	r4
		buffer[0] = buf_in[0];
 80017cc:	7d3a      	ldrb	r2, [r7, #20]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	701a      	strb	r2, [r3, #0]

		WaitOnBusy(); // wait until not busy before spi transfer
		HalSpiTransfer(buf_in, buf_out, total_transfer_size);
		memcpy(buffer, buf_in+2, size);
	}
}
 80017d2:	e035      	b.n	8001840 <_ZN6SX128x11ReadCommandENS_15RadioCommands_uEPht+0xbc>
		auto total_transfer_size = 2+size;
 80017d4:	893b      	ldrh	r3, [r7, #8]
 80017d6:	3302      	adds	r3, #2
 80017d8:	627b      	str	r3, [r7, #36]	; 0x24
		auto *buf_out = (uint8_t *)alloca(total_transfer_size);
 80017da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017dc:	3307      	adds	r3, #7
 80017de:	08db      	lsrs	r3, r3, #3
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	ebad 0d03 	sub.w	sp, sp, r3
 80017e6:	466b      	mov	r3, sp
 80017e8:	3307      	adds	r3, #7
 80017ea:	08db      	lsrs	r3, r3, #3
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	623b      	str	r3, [r7, #32]
		auto *buf_in = (uint8_t *)alloca(total_transfer_size);
 80017f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f2:	3307      	adds	r3, #7
 80017f4:	08db      	lsrs	r3, r3, #3
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	ebad 0d03 	sub.w	sp, sp, r3
 80017fc:	466b      	mov	r3, sp
 80017fe:	3307      	adds	r3, #7
 8001800:	08db      	lsrs	r3, r3, #3
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	61fb      	str	r3, [r7, #28]
		memset(buf_out, 0, total_transfer_size);
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001808:	461a      	mov	r2, r3
 800180a:	2100      	movs	r1, #0
 800180c:	6a38      	ldr	r0, [r7, #32]
 800180e:	f005 ffd6 	bl	80077be <memset>
		buf_out[0] = opcode;
 8001812:	6a3b      	ldr	r3, [r7, #32]
 8001814:	7afa      	ldrb	r2, [r7, #11]
 8001816:	701a      	strb	r2, [r3, #0]
		WaitOnBusy(); // wait until not busy before spi transfer
 8001818:	68f8      	ldr	r0, [r7, #12]
 800181a:	f7ff ff18 	bl	800164e <_ZN6SX128x10WaitOnBusyEv>
		HalSpiTransfer(buf_in, buf_out, total_transfer_size);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	3308      	adds	r3, #8
 8001824:	681c      	ldr	r4, [r3, #0]
 8001826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001828:	b29b      	uxth	r3, r3
 800182a:	6a3a      	ldr	r2, [r7, #32]
 800182c:	69f9      	ldr	r1, [r7, #28]
 800182e:	68f8      	ldr	r0, [r7, #12]
 8001830:	47a0      	blx	r4
		memcpy(buffer, buf_in+2, size);
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	3302      	adds	r3, #2
 8001836:	893a      	ldrh	r2, [r7, #8]
 8001838:	4619      	mov	r1, r3
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f006 f892 	bl	8007964 <memcpy>
}
 8001840:	bf00      	nop
 8001842:	372c      	adds	r7, #44	; 0x2c
 8001844:	46bd      	mov	sp, r7
 8001846:	bd90      	pop	{r4, r7, pc}

08001848 <_ZN6SX128x13WriteRegisterEtPht>:

void SX128x::WriteRegister(uint16_t address, uint8_t *buffer, uint16_t size) {
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	607a      	str	r2, [r7, #4]
 8001852:	461a      	mov	r2, r3
 8001854:	460b      	mov	r3, r1
 8001856:	817b      	strh	r3, [r7, #10]
 8001858:	4613      	mov	r3, r2
 800185a:	813b      	strh	r3, [r7, #8]
	auto total_transfer_size = 3+size;
 800185c:	893b      	ldrh	r3, [r7, #8]
 800185e:	3303      	adds	r3, #3
 8001860:	617b      	str	r3, [r7, #20]
	auto *buf_out = (uint8_t *)alloca(total_transfer_size);
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	3307      	adds	r3, #7
 8001866:	08db      	lsrs	r3, r3, #3
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	ebad 0d03 	sub.w	sp, sp, r3
 800186e:	466b      	mov	r3, sp
 8001870:	3307      	adds	r3, #7
 8001872:	08db      	lsrs	r3, r3, #3
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	613b      	str	r3, [r7, #16]

	buf_out[0] = RADIO_WRITE_REGISTER;
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	2218      	movs	r2, #24
 800187c:	701a      	strb	r2, [r3, #0]
	buf_out[1] = ((address & 0xFF00) >> 8);
 800187e:	897b      	ldrh	r3, [r7, #10]
 8001880:	0a1b      	lsrs	r3, r3, #8
 8001882:	b29a      	uxth	r2, r3
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	3301      	adds	r3, #1
 8001888:	b2d2      	uxtb	r2, r2
 800188a:	701a      	strb	r2, [r3, #0]
	buf_out[2] = (address & 0x00FF);
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	3302      	adds	r3, #2
 8001890:	897a      	ldrh	r2, [r7, #10]
 8001892:	b2d2      	uxtb	r2, r2
 8001894:	701a      	strb	r2, [r3, #0]
	memcpy(buf_out+3, buffer, size);
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	3303      	adds	r3, #3
 800189a:	893a      	ldrh	r2, [r7, #8]
 800189c:	6879      	ldr	r1, [r7, #4]
 800189e:	4618      	mov	r0, r3
 80018a0:	f006 f860 	bl	8007964 <memcpy>

	WaitOnBusy(); // wait until not busy before spi transfer
 80018a4:	68f8      	ldr	r0, [r7, #12]
 80018a6:	f7ff fed2 	bl	800164e <_ZN6SX128x10WaitOnBusyEv>
	HalSpiWrite(buf_out, total_transfer_size);
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	461a      	mov	r2, r3
 80018b0:	6939      	ldr	r1, [r7, #16]
 80018b2:	68f8      	ldr	r0, [r7, #12]
 80018b4:	f7ff fe8b 	bl	80015ce <_ZN6SX128x11HalSpiWriteEPKht>
}
 80018b8:	bf00      	nop
 80018ba:	3718      	adds	r7, #24
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <_ZN6SX128x13WriteRegisterEth>:

inline void SX128x::WriteRegister(uint16_t address, uint8_t value) {
 80018c0:	b590      	push	{r4, r7, lr}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	460b      	mov	r3, r1
 80018ca:	807b      	strh	r3, [r7, #2]
 80018cc:	4613      	mov	r3, r2
 80018ce:	707b      	strb	r3, [r7, #1]
	WriteRegister(address, &value, 1);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	3338      	adds	r3, #56	; 0x38
 80018d6:	681c      	ldr	r4, [r3, #0]
 80018d8:	1c7a      	adds	r2, r7, #1
 80018da:	8879      	ldrh	r1, [r7, #2]
 80018dc:	2301      	movs	r3, #1
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	47a0      	blx	r4
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd90      	pop	{r4, r7, pc}

080018ea <_ZN6SX128x12ReadRegisterEtPht>:

void SX128x::ReadRegister(uint16_t address, uint8_t *buffer, uint16_t size) {
 80018ea:	b590      	push	{r4, r7, lr}
 80018ec:	b089      	sub	sp, #36	; 0x24
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	60f8      	str	r0, [r7, #12]
 80018f2:	607a      	str	r2, [r7, #4]
 80018f4:	461a      	mov	r2, r3
 80018f6:	460b      	mov	r3, r1
 80018f8:	817b      	strh	r3, [r7, #10]
 80018fa:	4613      	mov	r3, r2
 80018fc:	813b      	strh	r3, [r7, #8]
	
	auto total_transfer_size = 4+size;
 80018fe:	893b      	ldrh	r3, [r7, #8]
 8001900:	3304      	adds	r3, #4
 8001902:	61fb      	str	r3, [r7, #28]
	auto *buf_out = (uint8_t *)alloca(total_transfer_size);
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	3307      	adds	r3, #7
 8001908:	08db      	lsrs	r3, r3, #3
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	ebad 0d03 	sub.w	sp, sp, r3
 8001910:	466b      	mov	r3, sp
 8001912:	3307      	adds	r3, #7
 8001914:	08db      	lsrs	r3, r3, #3
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	61bb      	str	r3, [r7, #24]
	auto *buf_in = (uint8_t *)alloca(total_transfer_size);
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	3307      	adds	r3, #7
 800191e:	08db      	lsrs	r3, r3, #3
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	ebad 0d03 	sub.w	sp, sp, r3
 8001926:	466b      	mov	r3, sp
 8001928:	3307      	adds	r3, #7
 800192a:	08db      	lsrs	r3, r3, #3
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	617b      	str	r3, [r7, #20]

	memset(buf_out, 0, total_transfer_size);
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	461a      	mov	r2, r3
 8001934:	2100      	movs	r1, #0
 8001936:	69b8      	ldr	r0, [r7, #24]
 8001938:	f005 ff41 	bl	80077be <memset>
	buf_out[0] = RADIO_READ_REGISTER;
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	2219      	movs	r2, #25
 8001940:	701a      	strb	r2, [r3, #0]
	buf_out[1] = ((address & 0xFF00) >> 8);
 8001942:	897b      	ldrh	r3, [r7, #10]
 8001944:	0a1b      	lsrs	r3, r3, #8
 8001946:	b29a      	uxth	r2, r3
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	3301      	adds	r3, #1
 800194c:	b2d2      	uxtb	r2, r2
 800194e:	701a      	strb	r2, [r3, #0]
	buf_out[2] = (address & 0x00FF);
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	3302      	adds	r3, #2
 8001954:	897a      	ldrh	r2, [r7, #10]
 8001956:	b2d2      	uxtb	r2, r2
 8001958:	701a      	strb	r2, [r3, #0]

	WaitOnBusy(); // wait until not busy before spi transfer
 800195a:	68f8      	ldr	r0, [r7, #12]
 800195c:	f7ff fe77 	bl	800164e <_ZN6SX128x10WaitOnBusyEv>
	HalSpiTransfer(buf_in, buf_out, total_transfer_size);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	3308      	adds	r3, #8
 8001966:	681c      	ldr	r4, [r3, #0]
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	b29b      	uxth	r3, r3
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	6979      	ldr	r1, [r7, #20]
 8001970:	68f8      	ldr	r0, [r7, #12]
 8001972:	47a0      	blx	r4

	memcpy(buffer, buf_in+4, size);
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	3304      	adds	r3, #4
 8001978:	893a      	ldrh	r2, [r7, #8]
 800197a:	4619      	mov	r1, r3
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f005 fff1 	bl	8007964 <memcpy>
}
 8001982:	bf00      	nop
 8001984:	3724      	adds	r7, #36	; 0x24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd90      	pop	{r4, r7, pc}

0800198a <_ZN6SX128x12ReadRegisterEt>:

inline uint8_t SX128x::ReadRegister(uint16_t address) {
 800198a:	b590      	push	{r4, r7, lr}
 800198c:	b085      	sub	sp, #20
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
 8001992:	460b      	mov	r3, r1
 8001994:	807b      	strh	r3, [r7, #2]
	uint8_t data;
	ReadRegister( address, &data, 1 );
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	3340      	adds	r3, #64	; 0x40
 800199c:	681c      	ldr	r4, [r3, #0]
 800199e:	f107 020f 	add.w	r2, r7, #15
 80019a2:	8879      	ldrh	r1, [r7, #2]
 80019a4:	2301      	movs	r3, #1
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	47a0      	blx	r4
	return data;
 80019aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd90      	pop	{r4, r7, pc}

080019b4 <_ZN6SX128x11WriteBufferEhPhh>:

void SX128x::WriteBuffer(uint8_t offset, uint8_t *buffer, uint8_t size) {
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	607a      	str	r2, [r7, #4]
 80019be:	461a      	mov	r2, r3
 80019c0:	460b      	mov	r3, r1
 80019c2:	72fb      	strb	r3, [r7, #11]
 80019c4:	4613      	mov	r3, r2
 80019c6:	72bb      	strb	r3, [r7, #10]
	auto total_transfer_size = 2+size;
 80019c8:	7abb      	ldrb	r3, [r7, #10]
 80019ca:	3302      	adds	r3, #2
 80019cc:	617b      	str	r3, [r7, #20]
	auto *buf_out = (uint8_t *)alloca(total_transfer_size);
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	3307      	adds	r3, #7
 80019d2:	08db      	lsrs	r3, r3, #3
 80019d4:	00db      	lsls	r3, r3, #3
 80019d6:	ebad 0d03 	sub.w	sp, sp, r3
 80019da:	466b      	mov	r3, sp
 80019dc:	3307      	adds	r3, #7
 80019de:	08db      	lsrs	r3, r3, #3
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	613b      	str	r3, [r7, #16]

	buf_out[0] = RADIO_WRITE_BUFFER;
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	221a      	movs	r2, #26
 80019e8:	701a      	strb	r2, [r3, #0]
	buf_out[1] = offset;
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	3301      	adds	r3, #1
 80019ee:	7afa      	ldrb	r2, [r7, #11]
 80019f0:	701a      	strb	r2, [r3, #0]

	memcpy(buf_out+2, buffer, size);
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	3302      	adds	r3, #2
 80019f6:	7aba      	ldrb	r2, [r7, #10]
 80019f8:	6879      	ldr	r1, [r7, #4]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f005 ffb2 	bl	8007964 <memcpy>
	
	WaitOnBusy();
 8001a00:	68f8      	ldr	r0, [r7, #12]
 8001a02:	f7ff fe24 	bl	800164e <_ZN6SX128x10WaitOnBusyEv>
	HalSpiWrite(buf_out, total_transfer_size);
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	6939      	ldr	r1, [r7, #16]
 8001a0e:	68f8      	ldr	r0, [r7, #12]
 8001a10:	f7ff fddd 	bl	80015ce <_ZN6SX128x11HalSpiWriteEPKht>
}
 8001a14:	bf00      	nop
 8001a16:	3718      	adds	r7, #24
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <_ZN6SX128x10ReadBufferEhPhh>:

void SX128x::ReadBuffer(uint8_t offset, uint8_t *buffer, uint8_t size) {
 8001a1c:	b590      	push	{r4, r7, lr}
 8001a1e:	b089      	sub	sp, #36	; 0x24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	607a      	str	r2, [r7, #4]
 8001a26:	461a      	mov	r2, r3
 8001a28:	460b      	mov	r3, r1
 8001a2a:	72fb      	strb	r3, [r7, #11]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	72bb      	strb	r3, [r7, #10]
	auto total_transfer_size = 3+size;
 8001a30:	7abb      	ldrb	r3, [r7, #10]
 8001a32:	3303      	adds	r3, #3
 8001a34:	61fb      	str	r3, [r7, #28]
	auto *buf_out = (uint8_t *)alloca(total_transfer_size);
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	3307      	adds	r3, #7
 8001a3a:	08db      	lsrs	r3, r3, #3
 8001a3c:	00db      	lsls	r3, r3, #3
 8001a3e:	ebad 0d03 	sub.w	sp, sp, r3
 8001a42:	466b      	mov	r3, sp
 8001a44:	3307      	adds	r3, #7
 8001a46:	08db      	lsrs	r3, r3, #3
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	61bb      	str	r3, [r7, #24]
	auto *buf_in = (uint8_t *)alloca(total_transfer_size);
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	3307      	adds	r3, #7
 8001a50:	08db      	lsrs	r3, r3, #3
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	ebad 0d03 	sub.w	sp, sp, r3
 8001a58:	466b      	mov	r3, sp
 8001a5a:	3307      	adds	r3, #7
 8001a5c:	08db      	lsrs	r3, r3, #3
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	617b      	str	r3, [r7, #20]

	memset(buf_out, 0, total_transfer_size);
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	461a      	mov	r2, r3
 8001a66:	2100      	movs	r1, #0
 8001a68:	69b8      	ldr	r0, [r7, #24]
 8001a6a:	f005 fea8 	bl	80077be <memset>

	buf_out[0] = RADIO_READ_BUFFER;
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	221b      	movs	r2, #27
 8001a72:	701a      	strb	r2, [r3, #0]
	buf_out[1] = offset;
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	3301      	adds	r3, #1
 8001a78:	7afa      	ldrb	r2, [r7, #11]
 8001a7a:	701a      	strb	r2, [r3, #0]

	WaitOnBusy();
 8001a7c:	68f8      	ldr	r0, [r7, #12]
 8001a7e:	f7ff fde6 	bl	800164e <_ZN6SX128x10WaitOnBusyEv>
	HalSpiTransfer(buf_in, buf_out, total_transfer_size);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	3308      	adds	r3, #8
 8001a88:	681c      	ldr	r4, [r3, #0]
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	6979      	ldr	r1, [r7, #20]
 8001a92:	68f8      	ldr	r0, [r7, #12]
 8001a94:	47a0      	blx	r4

	memcpy(buffer, buf_in+3, size);
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	3303      	adds	r3, #3
 8001a9a:	7aba      	ldrb	r2, [r7, #10]
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f005 ff60 	bl	8007964 <memcpy>
}
 8001aa4:	bf00      	nop
 8001aa6:	3724      	adds	r7, #36	; 0x24
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd90      	pop	{r4, r7, pc}

08001aac <_ZN10SX128x_OBJ24CommonTransceiverSettingEv>:

extern TIM_HandleTypeDef htim1;
extern int irq_timeout_times;

void SX128x_OBJ::CommonTransceiverSetting()
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
    SetStandby((RadioStandbyModes_t)MODE_STDBY_XOSC);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2103      	movs	r1, #3
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff fada 	bl	8001072 <_ZN6SX128x10SetStandbyENS_19RadioStandbyModes_tE>
    SetPacketType(PACKET_TYPE_LORA);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff fb26 	bl	8001114 <_ZN6SX128x13SetPacketTypeENS_18RadioPacketTypes_tE>
    SetRfFrequency(RfFrequency);
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4610      	mov	r0, r2
 8001ad4:	f7ff fb35 	bl	8001142 <_ZN6SX128x14SetRfFrequencyEm>
    SetBufferBaseAddresses(0x80, 0x00);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	2180      	movs	r1, #128	; 0x80
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff fb7b 	bl	80011da <_ZN6SX128x22SetBufferBaseAddressesEhh>
    SetModulationParams(mparams);
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8001aec:	4619      	mov	r1, r3
 8001aee:	4610      	mov	r0, r2
 8001af0:	f7ff fb8e 	bl	8001210 <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE>
    SetPacketParams(pparams);
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f203 132d 	addw	r3, r3, #301	; 0x12d
 8001afc:	4619      	mov	r1, r3
 8001afe:	4610      	mov	r0, r2
 8001b00:	f7ff fc0e 	bl	8001320 <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE>
}
 8001b04:	bf00      	nop
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <_ZN10SX128x_OBJ9TxSettingEv>:

void SX128x_OBJ::TxSetting()
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af02      	add	r7, sp, #8
 8001b12:	6078      	str	r0, [r7, #4]
	SetTxParams(13, RADIO_RAMP_02_US);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	210d      	movs	r1, #13
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff fb41 	bl	80011a2 <_ZN6SX128x11SetTxParamsEaNS_16RadioRampTimes_tE>
	InterruptSetting();
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f000 f80e 	bl	8001b42 <_ZN10SX128x_OBJ16InterruptSettingEv>
	SetDioIrqParams(0xFFFF, 0xFFFF, 0x0000, 0x0000);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	2300      	movs	r3, #0
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b32:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b36:	f7ff fcab 	bl	8001490 <_ZN6SX128x15SetDioIrqParamsEtttt>
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <_ZN10SX128x_OBJ16InterruptSettingEv>:
	ClearIrqStatus(0xFFFF);
	return 0;
}

inline void SX128x_OBJ::InterruptSetting()
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b084      	sub	sp, #16
 8001b46:	af02      	add	r7, sp, #8
 8001b48:	6078      	str	r0, [r7, #4]
	SetDioIrqParams(0x0003, 0x0003, 0x0000, 0x0000);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	2300      	movs	r3, #0
 8001b52:	2203      	movs	r2, #3
 8001b54:	2103      	movs	r1, #3
 8001b56:	f7ff fc9b 	bl	8001490 <_ZN6SX128x15SetDioIrqParamsEtttt>
}
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <_ZN10SX128x_OBJ4InitEv>:
{
	ClearIrqStatus(0xFFFF);
}

uint8_t SX128x_OBJ::Init()
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b086      	sub	sp, #24
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
	Reset();
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	3328      	adds	r3, #40	; 0x28
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4610      	mov	r0, r2
 8001b76:	4798      	blx	r3
	// Wakeup();
	// SetRegistersDefault();

	uint8_t rx[2], tx[2];
	*(uint32_t*)tx = 0x80 | 0x01 << 8;
 8001b78:	f107 0310 	add.w	r3, r7, #16
 8001b7c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001b80:	601a      	str	r2, [r3, #0]
	HalSpiTransferDelay(rx, tx, 2);
 8001b82:	f107 0210 	add.w	r2, r7, #16
 8001b86:	f107 0114 	add.w	r1, r7, #20
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 fa95 	bl	80020bc <_ZN10SX128x_OBJ19HalSpiTransferDelayEPhPKht>
	HAL_Delay(10);
 8001b92:	200a      	movs	r0, #10
 8001b94:	f001 f9da 	bl	8002f4c <HAL_Delay>
	RadioStatus_t status;
	status = GetStatus();
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	3358      	adds	r3, #88	; 0x58
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4610      	mov	r0, r2
 8001ba4:	4798      	blx	r3
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	733b      	strb	r3, [r7, #12]
	if(status.Fields.CmdStatus != 0x01)
 8001baa:	7b3b      	ldrb	r3, [r7, #12]
 8001bac:	f003 031c 	and.w	r3, r3, #28
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b04      	cmp	r3, #4
 8001bb4:	d001      	beq.n	8001bba <_ZN10SX128x_OBJ4InitEv+0x58>
		return 1;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e00b      	b.n	8001bd2 <_ZN10SX128x_OBJ4InitEv+0x70>
	if(status.Fields.ChipMode != 0x03)
 8001bba:	7b3b      	ldrb	r3, [r7, #12]
 8001bbc:	f023 031f 	bic.w	r3, r3, #31
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b60      	cmp	r3, #96	; 0x60
 8001bc4:	d001      	beq.n	8001bca <_ZN10SX128x_OBJ4InitEv+0x68>
		return 1;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e003      	b.n	8001bd2 <_ZN10SX128x_OBJ4InitEv+0x70>

	CommonTransceiverSetting();
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7ff ff6e 	bl	8001aac <_ZN10SX128x_OBJ24CommonTransceiverSettingEv>
	return 0;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3718      	adds	r7, #24
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <_ZN6SX128xUt0_C1Ev>:
	struct {
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b082      	sub	sp, #8
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f000 f984 	bl	8001ef2 <_ZNSt8functionIFvvEEC1Ev>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	3310      	adds	r3, #16
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f000 f97f 	bl	8001ef2 <_ZNSt8functionIFvvEEC1Ev>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3320      	adds	r3, #32
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f000 f97a 	bl	8001ef2 <_ZNSt8functionIFvvEEC1Ev>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	3330      	adds	r3, #48	; 0x30
 8001c02:	4618      	mov	r0, r3
 8001c04:	f000 f975 	bl	8001ef2 <_ZNSt8functionIFvvEEC1Ev>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3340      	adds	r3, #64	; 0x40
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f000 f970 	bl	8001ef2 <_ZNSt8functionIFvvEEC1Ev>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	3350      	adds	r3, #80	; 0x50
 8001c16:	4618      	mov	r0, r3
 8001c18:	f000 f96b 	bl	8001ef2 <_ZNSt8functionIFvvEEC1Ev>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3360      	adds	r3, #96	; 0x60
 8001c20:	4618      	mov	r0, r3
 8001c22:	f000 f97c 	bl	8001f1e <_ZNSt8functionIFvN6SX128x14IrqErrorCode_tEEEC1Ev>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	3370      	adds	r3, #112	; 0x70
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f000 f98d 	bl	8001f4a <_ZNSt8functionIFvN6SX128x16IrqRangingCode_tEEEC1Ev>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	3380      	adds	r3, #128	; 0x80
 8001c34:	4618      	mov	r0, r3
 8001c36:	f000 f99e 	bl	8001f76 <_ZNSt8functionIFvbEEC1Ev>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	0000      	movs	r0, r0
	...

08001c48 <_ZN6SX128xC1Ev>:
	SX128x() = default;
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	4a1f      	ldr	r2, [pc, #124]	; (8001cd0 <_ZN6SX128xC1Ev+0x88>)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	6879      	ldr	r1, [r7, #4]
 8001c58:	a31b      	add	r3, pc, #108	; (adr r3, 8001cc8 <_ZN6SX128xC1Ev+0x80>)
 8001c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	741a      	strb	r2, [r3, #16]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c6e:	825a      	strh	r2, [r3, #18]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	751a      	strb	r2, [r3, #20]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	82da      	strh	r2, [r3, #22]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3318      	adds	r3, #24
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff ffaa 	bl	8001bda <_ZN6SX128xUt0_C1Ev>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2202      	movs	r2, #2
 8001c8a:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	220f      	movs	r2, #15
 8001c92:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	220a      	movs	r2, #10
 8001c9a:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	33ab      	adds	r3, #171	; 0xab
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	605a      	str	r2, [r3, #4]
 8001ca8:	609a      	str	r2, [r3, #8]
 8001caa:	731a      	strb	r2, [r3, #12]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	33b8      	adds	r3, #184	; 0xb8
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	60da      	str	r2, [r3, #12]
 8001cba:	611a      	str	r2, [r3, #16]
 8001cbc:	615a      	str	r2, [r3, #20]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	00000000 	.word	0x00000000
 8001ccc:	4068cba8 	.word	0x4068cba8
 8001cd0:	080098d4 	.word	0x080098d4

08001cd4 <_ZN10SX128x_OBJC1Ev>:

SX128x_OBJ::SX128x_OBJ()
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff ffb2 	bl	8001c48 <_ZN6SX128xC1Ev>
 8001ce4:	4a27      	ldr	r2, [pc, #156]	; (8001d84 <_ZN10SX128x_OBJC1Ev+0xb0>)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	33d0      	adds	r3, #208	; 0xd0
 8001cee:	2240      	movs	r2, #64	; 0x40
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f005 fd63 	bl	80077be <memset>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4a19      	ldr	r2, [pc, #100]	; (8001d88 <_ZN10SX128x_OBJC1Ev+0xb4>)
 8001d24:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
{
	mparams.PacketType = PACKET_TYPE_LORA;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
    mparams.Params.LoRa.SpreadingFactor = LORA_SF5;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2250      	movs	r2, #80	; 0x50
 8001d34:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
	mparams.Params.LoRa.Bandwidth = LORA_BW_0800;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2218      	movs	r2, #24
 8001d3c:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
	mparams.Params.LoRa.CodingRate = LORA_CR_4_5;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126

	pparams.PacketType = PACKET_TYPE_LORA;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
	pparams.Params.LoRa.HeaderType = LORA_PACKET_FIXED_LENGTH;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2280      	movs	r2, #128	; 0x80
 8001d54:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
	pparams.Params.LoRa.InvertIQ = LORA_IQ_NORMAL;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2240      	movs	r2, #64	; 0x40
 8001d5c:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
	pparams.Params.LoRa.Crc = LORA_CRC_ON;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2220      	movs	r2, #32
 8001d64:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	pparams.Params.LoRa.PayloadLength = PACKET_SIZE;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2208      	movs	r2, #8
 8001d6c:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
	pparams.Params.LoRa.PreambleLength = 12;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	220c      	movs	r2, #12
 8001d74:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135

//	callbacks.txDone = &tx_recursion();
	
}
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	08009938 	.word	0x08009938
 8001d88:	8f0d1800 	.word	0x8f0d1800

08001d8c <_ZN10SX128x_OBJ9PutPacketEPh>:

uint8_t SX128x_OBJ::PutPacket(uint8_t* in)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af02      	add	r7, sp, #8
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]

	if(tx_length == 8) {
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f993 3118 	ldrsb.w	r3, [r3, #280]	; 0x118
 8001d9c:	2b08      	cmp	r3, #8
 8001d9e:	d101      	bne.n	8001da4 <_ZN10SX128x_OBJ9PutPacketEPh+0x18>
		return 1;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e045      	b.n	8001e30 <_ZN10SX128x_OBJ9PutPacketEPh+0xa4>
	} else {
		*(uint32_t*)tx_eprt = *(uint32_t*)in;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	6812      	ldr	r2, [r2, #0]
 8001dae:	601a      	str	r2, [r3, #0]
		*(uint32_t*)(tx_eprt+4) = *(uint32_t*)(in+4);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001db6:	3304      	adds	r3, #4
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	6852      	ldr	r2, [r2, #4]
 8001dbc:	601a      	str	r2, [r3, #0]
		if(tx_eprt == tx_fifo[7])
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d106      	bne.n	8001ddc <_ZN10SX128x_OBJ9PutPacketEPh+0x50>
		{
			tx_eprt = tx_fifo[0];
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8001dda:	e007      	b.n	8001dec <_ZN10SX128x_OBJ9PutPacketEPh+0x60>
		}
		else
		{
			tx_eprt += 8;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001de2:	f103 0208 	add.w	r2, r3, #8
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		}
		tx_length ++;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f993 3118 	ldrsb.w	r3, [r3, #280]	; 0x118
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	3301      	adds	r3, #1
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	b25a      	sxtb	r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
		if(!tx_activated)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d111      	bne.n	8001e2e <_ZN10SX128x_OBJ9PutPacketEPh+0xa2>
		{
			TickTime_t t;
			t.PeriodBase = RADIO_TICK_SIZE_0015_US;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	733b      	strb	r3, [r7, #12]
			t.PeriodBaseCount = 0;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	81fb      	strh	r3, [r7, #14]
			tx_activated = 1;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2201      	movs	r2, #1
 8001e16:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
			SendPayload(tx_sprt, 8, t, 0x80);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 8001e22:	2380      	movs	r3, #128	; 0x80
 8001e24:	9300      	str	r3, [sp, #0]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2208      	movs	r2, #8
 8001e2a:	f7ff fbba 	bl	80015a2 <_ZN6SX128x11SendPayloadEPhhNS_10TickTime_sEh>
		}
	}
	return 0;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3710      	adds	r7, #16
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <_ZN10SX128x_OBJ12tx_recursionEv>:
{
	return tx_length;
}

void SX128x_OBJ::tx_recursion()
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af02      	add	r7, sp, #8
 8001e3e:	6078      	str	r0, [r7, #4]

	uint16_t irqRegs = GetIrqStatus();
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff fb5f 	bl	8001506 <_ZN6SX128x12GetIrqStatusEv>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	81fb      	strh	r3, [r7, #14]
	if(!(irqRegs|IRQ_TX_DONE))
		return;
	ClearIrqStatus(IRQ_TX_DONE);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2101      	movs	r1, #1
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff fb72 	bl	800153a <_ZN6SX128x14ClearIrqStatusEt>
	if(tx_sprt == tx_fifo[7])
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d106      	bne.n	8001e74 <_ZN10SX128x_OBJ12tx_recursionEv+0x3c>
	{
		tx_sprt = tx_fifo[0];
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 8001e72:	e006      	b.n	8001e82 <_ZN10SX128x_OBJ12tx_recursionEv+0x4a>
	}
	else
	{
		tx_sprt += 4;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8001e7a:	1d1a      	adds	r2, r3, #4
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	}
	tx_length--;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f993 3118 	ldrsb.w	r3, [r3, #280]	; 0x118
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	b25a      	sxtb	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
	if(tx_length >= 0)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f993 3118 	ldrsb.w	r3, [r3, #280]	; 0x118
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	db04      	blt.n	8001eaa <_ZN10SX128x_OBJ12tx_recursionEv+0x72>
	{
		tx_activated = 0;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
 8001ea8:	e00d      	b.n	8001ec6 <_ZN10SX128x_OBJ12tx_recursionEv+0x8e>
		return;
	}
	TickTime_t t;
	t.PeriodBase = RADIO_TICK_SIZE_0015_US;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	723b      	strb	r3, [r7, #8]
	t.PeriodBaseCount = 0;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	817b      	strh	r3, [r7, #10]
	SendPayload(tx_sprt, 8, t, 0x80);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 8001eba:	2380      	movs	r3, #128	; 0x80
 8001ebc:	9300      	str	r3, [sp, #0]
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	2208      	movs	r2, #8
 8001ec2:	f7ff fb6e 	bl	80015a2 <_ZN6SX128x11SendPayloadEPhhNS_10TickTime_sEh>

}
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <_ZNSt14_Function_baseC1Ev>:
	  static bool
	  _M_not_empty_function(const _Tp&)
	  { return true; }
      };

    _Function_base() = default;
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	2300      	movs	r3, #0
 8001eda:	6013      	str	r3, [r2, #0]
 8001edc:	6053      	str	r3, [r2, #4]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	609a      	str	r2, [r3, #8]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <_ZNSt8functionIFvvEEC1Ev>:

      /**
       *  @brief Default construct creates an empty function call wrapper.
       *  @post `!(bool)*this`
       */
      function() noexcept
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b082      	sub	sp, #8
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	461a      	mov	r2, r3
 8001efe:	2300      	movs	r3, #0
 8001f00:	6013      	str	r3, [r2, #0]
 8001f02:	6053      	str	r3, [r2, #4]
 8001f04:	6093      	str	r3, [r2, #8]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff ffdf 	bl	8001ecc <_ZNSt14_Function_baseC1Ev>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	60da      	str	r2, [r3, #12]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <_ZNSt8functionIFvN6SX128x14IrqErrorCode_tEEEC1Ev>:
      function() noexcept
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b082      	sub	sp, #8
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	461a      	mov	r2, r3
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	6013      	str	r3, [r2, #0]
 8001f2e:	6053      	str	r3, [r2, #4]
 8001f30:	6093      	str	r3, [r2, #8]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff ffc9 	bl	8001ecc <_ZNSt14_Function_baseC1Ev>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	60da      	str	r2, [r3, #12]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4618      	mov	r0, r3
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <_ZNSt8functionIFvN6SX128x16IrqRangingCode_tEEEC1Ev>:
      function() noexcept
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b082      	sub	sp, #8
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	461a      	mov	r2, r3
 8001f56:	2300      	movs	r3, #0
 8001f58:	6013      	str	r3, [r2, #0]
 8001f5a:	6053      	str	r3, [r2, #4]
 8001f5c:	6093      	str	r3, [r2, #8]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff ffb3 	bl	8001ecc <_ZNSt14_Function_baseC1Ev>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	60da      	str	r2, [r3, #12]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <_ZNSt8functionIFvbEEC1Ev>:
      function() noexcept
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b082      	sub	sp, #8
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	461a      	mov	r2, r3
 8001f82:	2300      	movs	r3, #0
 8001f84:	6013      	str	r3, [r2, #0]
 8001f86:	6053      	str	r3, [r2, #4]
 8001f88:	6093      	str	r3, [r2, #8]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff ff9d 	bl	8001ecc <_ZNSt14_Function_baseC1Ev>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	60da      	str	r2, [r3, #12]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b082      	sub	sp, #8
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
      if (_M_manager)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d005      	beq.n	8001fbe <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	6879      	ldr	r1, [r7, #4]
 8001fba:	2203      	movs	r2, #3
 8001fbc:	4798      	blx	r3
    }
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3708      	adds	r7, #8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <_ZN10SX128x_OBJ11HalGpioReadEN6SX128x17GpioPinFunction_tE>:
}
#elif defined NUCLEO_L476
extern SPI_HandleTypeDef hspi1;

uint8_t SX128x_OBJ::HalGpioRead(GpioPinFunction_t func)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	70fb      	strb	r3, [r7, #3]
	switch (func)
 8001fd4:	78fb      	ldrb	r3, [r7, #3]
 8001fd6:	2b04      	cmp	r3, #4
 8001fd8:	d820      	bhi.n	800201c <_ZN10SX128x_OBJ11HalGpioReadEN6SX128x17GpioPinFunction_tE+0x54>
 8001fda:	a201      	add	r2, pc, #4	; (adr r2, 8001fe0 <_ZN10SX128x_OBJ11HalGpioReadEN6SX128x17GpioPinFunction_tE+0x18>)
 8001fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe0:	08001ff5 	.word	0x08001ff5
 8001fe4:	08002001 	.word	0x08002001
 8001fe8:	08002011 	.word	0x08002011
 8001fec:	08002015 	.word	0x08002015
 8001ff0:	08002019 	.word	0x08002019
	{
		case GPIO_PIN_RESET:
			return HAL_GPIO_ReadPin(SX1280_RST_GPIO_Port, SX1280_RST_Pin);
 8001ff4:	2180      	movs	r1, #128	; 0x80
 8001ff6:	480c      	ldr	r0, [pc, #48]	; (8002028 <_ZN10SX128x_OBJ11HalGpioReadEN6SX128x17GpioPinFunction_tE+0x60>)
 8001ff8:	f001 fac8 	bl	800358c <HAL_GPIO_ReadPin>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	e00e      	b.n	800201e <_ZN10SX128x_OBJ11HalGpioReadEN6SX128x17GpioPinFunction_tE+0x56>
		case GPIO_PIN_BUSY:
			return HAL_GPIO_ReadPin(SX1280_BUSY_GPIO_Port, SX1280_BUSY_Pin);
 8002000:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002004:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002008:	f001 fac0 	bl	800358c <HAL_GPIO_ReadPin>
 800200c:	4603      	mov	r3, r0
 800200e:	e006      	b.n	800201e <_ZN10SX128x_OBJ11HalGpioReadEN6SX128x17GpioPinFunction_tE+0x56>
		case GPIO_PIN_DIO1:
			return 0;
 8002010:	2300      	movs	r3, #0
 8002012:	e004      	b.n	800201e <_ZN10SX128x_OBJ11HalGpioReadEN6SX128x17GpioPinFunction_tE+0x56>
		case GPIO_PIN_DIO2:
			return 0;
 8002014:	2300      	movs	r3, #0
 8002016:	e002      	b.n	800201e <_ZN10SX128x_OBJ11HalGpioReadEN6SX128x17GpioPinFunction_tE+0x56>
		case GPIO_PIN_DIO3:
			return 0;
 8002018:	2300      	movs	r3, #0
 800201a:	e000      	b.n	800201e <_ZN10SX128x_OBJ11HalGpioReadEN6SX128x17GpioPinFunction_tE+0x56>
		default:
			return 0;
 800201c:	2300      	movs	r3, #0
	}
}
 800201e:	4618      	mov	r0, r3
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	48000800 	.word	0x48000800

0800202c <_ZN10SX128x_OBJ12HalGpioWriteEN6SX128x17GpioPinFunction_tEh>:


void SX128x_OBJ::HalGpioWrite(GpioPinFunction_t func, register uint8_t value)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	4613      	mov	r3, r2
 8002036:	460a      	mov	r2, r1
 8002038:	70fa      	strb	r2, [r7, #3]
	switch (func)
 800203a:	78fa      	ldrb	r2, [r7, #3]
 800203c:	2a04      	cmp	r2, #4
 800203e:	d81b      	bhi.n	8002078 <_ZN10SX128x_OBJ12HalGpioWriteEN6SX128x17GpioPinFunction_tEh+0x4c>
 8002040:	a101      	add	r1, pc, #4	; (adr r1, 8002048 <_ZN10SX128x_OBJ12HalGpioWriteEN6SX128x17GpioPinFunction_tEh+0x1c>)
 8002042:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8002046:	bf00      	nop
 8002048:	0800205d 	.word	0x0800205d
 800204c:	08002069 	.word	0x08002069
 8002050:	08002079 	.word	0x08002079
 8002054:	08002079 	.word	0x08002079
 8002058:	08002079 	.word	0x08002079
	{
	case GPIO_PIN_RESET:
		HAL_GPIO_WritePin(SX1280_RST_GPIO_Port, SX1280_RST_Pin, (GPIO_PinState)value);
 800205c:	461a      	mov	r2, r3
 800205e:	2180      	movs	r1, #128	; 0x80
 8002060:	4808      	ldr	r0, [pc, #32]	; (8002084 <_ZN10SX128x_OBJ12HalGpioWriteEN6SX128x17GpioPinFunction_tEh+0x58>)
 8002062:	f001 faab 	bl	80035bc <HAL_GPIO_WritePin>
		break;
 8002066:	e008      	b.n	800207a <_ZN10SX128x_OBJ12HalGpioWriteEN6SX128x17GpioPinFunction_tEh+0x4e>
	case GPIO_PIN_BUSY:
		HAL_GPIO_WritePin(SX1280_BUSY_GPIO_Port, SX1280_BUSY_Pin, (GPIO_PinState)value);
 8002068:	461a      	mov	r2, r3
 800206a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800206e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002072:	f001 faa3 	bl	80035bc <HAL_GPIO_WritePin>
		break;
 8002076:	e000      	b.n	800207a <_ZN10SX128x_OBJ12HalGpioWriteEN6SX128x17GpioPinFunction_tEh+0x4e>
	case GPIO_PIN_DIO2:
		break;
	case GPIO_PIN_DIO3:
		break;
	default:
		break;
 8002078:	bf00      	nop
	}
}
 800207a:	bf00      	nop
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	48000800 	.word	0x48000800

08002088 <_ZN10SX128x_OBJ14HalSpiTransferEPhPKht>:

void SX128x_OBJ::HalSpiTransfer(uint8_t *buffer_in, const uint8_t *buffer_out, uint16_t size)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
 8002094:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(SX1280_NSS_GPIO_Port, SX1280_NSS_Pin, (GPIO_PinState)0);
 8002096:	2200      	movs	r2, #0
 8002098:	2140      	movs	r1, #64	; 0x40
 800209a:	4806      	ldr	r0, [pc, #24]	; (80020b4 <_ZN10SX128x_OBJ14HalSpiTransferEPhPKht+0x2c>)
 800209c:	f001 fa8e 	bl	80035bc <HAL_GPIO_WritePin>
#ifdef SX1280_INTERRUPT_MODE
	HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t*)buffer_out, buffer_in, size);
 80020a0:	887b      	ldrh	r3, [r7, #2]
 80020a2:	68ba      	ldr	r2, [r7, #8]
 80020a4:	6879      	ldr	r1, [r7, #4]
 80020a6:	4804      	ldr	r0, [pc, #16]	; (80020b8 <_ZN10SX128x_OBJ14HalSpiTransferEPhPKht+0x30>)
 80020a8:	f002 fe88 	bl	8004dbc <HAL_SPI_TransmitReceive_IT>
#else
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)buffer_out, buffer_in, size, 1);
	HAL_GPIO_WritePin(SX1280_NSS_GPIO_Port, SX1280_NSS_Pin, (GPIO_PinState)1);
#endif
}
 80020ac:	bf00      	nop
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	48000400 	.word	0x48000400
 80020b8:	200001f4 	.word	0x200001f4

080020bc <_ZN10SX128x_OBJ19HalSpiTransferDelayEPhPKht>:

void SX128x_OBJ::HalSpiTransferDelay(uint8_t *buffer_in, const uint8_t *buffer_out, uint16_t size)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
 80020c8:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(SX1280_NSS_GPIO_Port, SX1280_NSS_Pin, (GPIO_PinState)0);
 80020ca:	2200      	movs	r2, #0
 80020cc:	2140      	movs	r1, #64	; 0x40
 80020ce:	4808      	ldr	r0, [pc, #32]	; (80020f0 <_ZN10SX128x_OBJ19HalSpiTransferDelayEPhPKht+0x34>)
 80020d0:	f001 fa74 	bl	80035bc <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80020d4:	200a      	movs	r0, #10
 80020d6:	f000 ff39 	bl	8002f4c <HAL_Delay>
#ifdef SX1280_INTERRUPT_MODE
	HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t*)buffer_out, buffer_in, size);
 80020da:	887b      	ldrh	r3, [r7, #2]
 80020dc:	68ba      	ldr	r2, [r7, #8]
 80020de:	6879      	ldr	r1, [r7, #4]
 80020e0:	4804      	ldr	r0, [pc, #16]	; (80020f4 <_ZN10SX128x_OBJ19HalSpiTransferDelayEPhPKht+0x38>)
 80020e2:	f002 fe6b 	bl	8004dbc <HAL_SPI_TransmitReceive_IT>
#else
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)buffer_out, buffer_in, size, 1);
	HAL_GPIO_WritePin(SX1280_NSS_GPIO_Port, SX1280_NSS_Pin, (GPIO_PinState)1);
#endif
}
 80020e6:	bf00      	nop
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	48000400 	.word	0x48000400
 80020f4:	200001f4 	.word	0x200001f4

080020f8 <_ZNSt8functionIFvvEED1Ev>:
    class function<_Res(_ArgTypes...)>
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff ff4d 	bl	8001fa2 <_ZNSt14_Function_baseD1Ev>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4618      	mov	r0, r3
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <_ZNSt8functionIFvN6SX128x14IrqErrorCode_tEEED1Ev>:
 8002112:	b580      	push	{r7, lr}
 8002114:	b082      	sub	sp, #8
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff ff40 	bl	8001fa2 <_ZNSt14_Function_baseD1Ev>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4618      	mov	r0, r3
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <_ZNSt8functionIFvN6SX128x16IrqRangingCode_tEEED1Ev>:
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff ff33 	bl	8001fa2 <_ZNSt14_Function_baseD1Ev>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4618      	mov	r0, r3
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <_ZNSt8functionIFvbEED1Ev>:
 8002146:	b580      	push	{r7, lr}
 8002148:	b082      	sub	sp, #8
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff ff26 	bl	8001fa2 <_ZNSt14_Function_baseD1Ev>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4618      	mov	r0, r3
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <_ZN6SX128xUt0_D1Ev>:
	struct {
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	3380      	adds	r3, #128	; 0x80
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff ffea 	bl	8002146 <_ZNSt8functionIFvbEED1Ev>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	3370      	adds	r3, #112	; 0x70
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff ffd8 	bl	800212c <_ZNSt8functionIFvN6SX128x16IrqRangingCode_tEEED1Ev>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3360      	adds	r3, #96	; 0x60
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff ffc6 	bl	8002112 <_ZNSt8functionIFvN6SX128x14IrqErrorCode_tEEED1Ev>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	3350      	adds	r3, #80	; 0x50
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff ffb4 	bl	80020f8 <_ZNSt8functionIFvvEED1Ev>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3340      	adds	r3, #64	; 0x40
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff ffaf 	bl	80020f8 <_ZNSt8functionIFvvEED1Ev>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	3330      	adds	r3, #48	; 0x30
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff ffaa 	bl	80020f8 <_ZNSt8functionIFvvEED1Ev>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3320      	adds	r3, #32
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff ffa5 	bl	80020f8 <_ZNSt8functionIFvvEED1Ev>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3310      	adds	r3, #16
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff ffa0 	bl	80020f8 <_ZNSt8functionIFvvEED1Ev>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff ff9c 	bl	80020f8 <_ZNSt8functionIFvvEED1Ev>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4618      	mov	r0, r3
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
	...

080021cc <_ZN6SX128xD1Ev>:
	virtual ~SX128x() = default;
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	4a06      	ldr	r2, [pc, #24]	; (80021f0 <_ZN6SX128xD1Ev+0x24>)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	3318      	adds	r3, #24
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff ffbe 	bl	8002160 <_ZN6SX128xUt0_D1Ev>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4618      	mov	r0, r3
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	080098d4 	.word	0x080098d4

080021f4 <_ZN6SX128xD0Ev>:
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f7ff ffe5 	bl	80021cc <_ZN6SX128xD1Ev>
 8002202:	21d0      	movs	r1, #208	; 0xd0
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f004 fc9a 	bl	8006b3e <_ZdlPvj>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4618      	mov	r0, r3
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <_ZN10SX128x_OBJD1Ev>:
#define PACKET_SIZE 8
#define FIFO_SIZE 8
#define IS_TX
#define SX1280_INTERRUPT_MODE

class SX128x_OBJ : public SX128x
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	4a05      	ldr	r2, [pc, #20]	; (8002234 <_ZN10SX128x_OBJD1Ev+0x20>)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff ffd1 	bl	80021cc <_ZN6SX128xD1Ev>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4618      	mov	r0, r3
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	08009938 	.word	0x08009938

08002238 <_ZN10SX128x_OBJD0Ev>:
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f7ff ffe7 	bl	8002214 <_ZN10SX128x_OBJD1Ev>
 8002246:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f004 fc77 	bl	8006b3e <_ZdlPvj>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4618      	mov	r0, r3
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	0000      	movs	r0, r0
 800225c:	0000      	movs	r0, r0
	...

08002260 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b0a6      	sub	sp, #152	; 0x98
 8002264:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002266:	f000 fdf5 	bl	8002e54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800226a:	f000 f923 	bl	80024b4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800226e:	f000 fab5 	bl	80027dc <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8002272:	f000 fa7f 	bl	8002774 <_ZL19MX_USART2_UART_Initv>
  MX_SPI1_Init();
 8002276:	f000 f97d 	bl	8002574 <_ZL12MX_SPI1_Initv>
  MX_TIM1_Init();
 800227a:	f000 f9bd 	bl	80025f8 <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 800227e:	f000 fa1d 	bl	80026bc <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */

  uint8_t test_packet[8] = {1, 2, 3, 4, 5, 6, 7, 8};
 8002282:	4a85      	ldr	r2, [pc, #532]	; (8002498 <main+0x238>)
 8002284:	f107 030c 	add.w	r3, r7, #12
 8002288:	e892 0003 	ldmia.w	r2, {r0, r1}
 800228c:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t rx;

  rx = a.Init();
 8002290:	4882      	ldr	r0, [pc, #520]	; (800249c <main+0x23c>)
 8002292:	f7ff fc66 	bl	8001b62 <_ZN10SX128x_OBJ4InitEv>
 8002296:	4603      	mov	r3, r0
 8002298:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
  if(rx == 0)
 800229c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d17b      	bne.n	800239c <main+0x13c>
  {
	  uart_buf_len = sprintf(uart_buf, "SX1280 Initialize success\r\n");
 80022a4:	f107 0314 	add.w	r3, r7, #20
 80022a8:	497d      	ldr	r1, [pc, #500]	; (80024a0 <main+0x240>)
 80022aa:	4618      	mov	r0, r3
 80022ac:	f005 fa24 	bl	80076f8 <siprintf>
 80022b0:	67f8      	str	r0, [r7, #124]	; 0x7c
	  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 80022b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	f107 0114 	add.w	r1, r7, #20
 80022ba:	2364      	movs	r3, #100	; 0x64
 80022bc:	4879      	ldr	r0, [pc, #484]	; (80024a4 <main+0x244>)
 80022be:	f003 fee7 	bl	8006090 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
	  while(1);
  }


  HAL_TIM_Base_Start_IT(&htim2);
 80022c2:	4879      	ldr	r0, [pc, #484]	; (80024a8 <main+0x248>)
 80022c4:	f003 fa4e 	bl	8005764 <HAL_TIM_Base_Start_IT>

  a.TxSetting();
 80022c8:	4874      	ldr	r0, [pc, #464]	; (800249c <main+0x23c>)
 80022ca:	f7ff fc1f 	bl	8001b0c <_ZN10SX128x_OBJ9TxSettingEv>
  rx = a.PutPacket(test_packet); //1
 80022ce:	f107 030c 	add.w	r3, r7, #12
 80022d2:	4619      	mov	r1, r3
 80022d4:	4871      	ldr	r0, [pc, #452]	; (800249c <main+0x23c>)
 80022d6:	f7ff fd59 	bl	8001d8c <_ZN10SX128x_OBJ9PutPacketEPh>
 80022da:	4603      	mov	r3, r0
 80022dc:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
  rx = a.PutPacket(test_packet); //2
 80022e0:	f107 030c 	add.w	r3, r7, #12
 80022e4:	4619      	mov	r1, r3
 80022e6:	486d      	ldr	r0, [pc, #436]	; (800249c <main+0x23c>)
 80022e8:	f7ff fd50 	bl	8001d8c <_ZN10SX128x_OBJ9PutPacketEPh>
 80022ec:	4603      	mov	r3, r0
 80022ee:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
  rx = a.PutPacket(test_packet); //3
 80022f2:	f107 030c 	add.w	r3, r7, #12
 80022f6:	4619      	mov	r1, r3
 80022f8:	4868      	ldr	r0, [pc, #416]	; (800249c <main+0x23c>)
 80022fa:	f7ff fd47 	bl	8001d8c <_ZN10SX128x_OBJ9PutPacketEPh>
 80022fe:	4603      	mov	r3, r0
 8002300:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
  rx = a.PutPacket(test_packet); //4
 8002304:	f107 030c 	add.w	r3, r7, #12
 8002308:	4619      	mov	r1, r3
 800230a:	4864      	ldr	r0, [pc, #400]	; (800249c <main+0x23c>)
 800230c:	f7ff fd3e 	bl	8001d8c <_ZN10SX128x_OBJ9PutPacketEPh>
 8002310:	4603      	mov	r3, r0
 8002312:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
  rx = a.PutPacket(test_packet); //5
 8002316:	f107 030c 	add.w	r3, r7, #12
 800231a:	4619      	mov	r1, r3
 800231c:	485f      	ldr	r0, [pc, #380]	; (800249c <main+0x23c>)
 800231e:	f7ff fd35 	bl	8001d8c <_ZN10SX128x_OBJ9PutPacketEPh>
 8002322:	4603      	mov	r3, r0
 8002324:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
  rx = a.PutPacket(test_packet); //6
 8002328:	f107 030c 	add.w	r3, r7, #12
 800232c:	4619      	mov	r1, r3
 800232e:	485b      	ldr	r0, [pc, #364]	; (800249c <main+0x23c>)
 8002330:	f7ff fd2c 	bl	8001d8c <_ZN10SX128x_OBJ9PutPacketEPh>
 8002334:	4603      	mov	r3, r0
 8002336:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
  rx = a.PutPacket(test_packet); //7
 800233a:	f107 030c 	add.w	r3, r7, #12
 800233e:	4619      	mov	r1, r3
 8002340:	4856      	ldr	r0, [pc, #344]	; (800249c <main+0x23c>)
 8002342:	f7ff fd23 	bl	8001d8c <_ZN10SX128x_OBJ9PutPacketEPh>
 8002346:	4603      	mov	r3, r0
 8002348:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
  rx = a.PutPacket(test_packet); //8
 800234c:	f107 030c 	add.w	r3, r7, #12
 8002350:	4619      	mov	r1, r3
 8002352:	4852      	ldr	r0, [pc, #328]	; (800249c <main+0x23c>)
 8002354:	f7ff fd1a 	bl	8001d8c <_ZN10SX128x_OBJ9PutPacketEPh>
 8002358:	4603      	mov	r3, r0
 800235a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
  rx = a.PutPacket(test_packet); //9
 800235e:	f107 030c 	add.w	r3, r7, #12
 8002362:	4619      	mov	r1, r3
 8002364:	484d      	ldr	r0, [pc, #308]	; (800249c <main+0x23c>)
 8002366:	f7ff fd11 	bl	8001d8c <_ZN10SX128x_OBJ9PutPacketEPh>
 800236a:	4603      	mov	r3, r0
 800236c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint16_t time_temp;
  uint32_t counter = 0;
 8002370:	2300      	movs	r3, #0
 8002372:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t counter_ = 0;
 8002376:	2300      	movs	r3, #0
 8002378:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t temp_counter[2] = {0};
 800237c:	1d3b      	adds	r3, r7, #4
 800237e:	2200      	movs	r2, #0
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	605a      	str	r2, [r3, #4]

  time_temp = HAL_GetTick();
 8002384:	f000 fdd6 	bl	8002f34 <HAL_GetTick>
 8002388:	4603      	mov	r3, r0
 800238a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  counter = 0;
 800238e:	2300      	movs	r3, #0
 8002390:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  counter_= 0;
 8002394:	2300      	movs	r3, #0
 8002396:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800239a:	e00f      	b.n	80023bc <main+0x15c>
	  uart_buf_len = sprintf(uart_buf, "SX1280 Initialize fail\r\n");
 800239c:	f107 0314 	add.w	r3, r7, #20
 80023a0:	4942      	ldr	r1, [pc, #264]	; (80024ac <main+0x24c>)
 80023a2:	4618      	mov	r0, r3
 80023a4:	f005 f9a8 	bl	80076f8 <siprintf>
 80023a8:	67f8      	str	r0, [r7, #124]	; 0x7c
	  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 80023aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	f107 0114 	add.w	r1, r7, #20
 80023b2:	2364      	movs	r3, #100	; 0x64
 80023b4:	483b      	ldr	r0, [pc, #236]	; (80024a4 <main+0x244>)
 80023b6:	f003 fe6b 	bl	8006090 <HAL_UART_Transmit>
	  while(1);
 80023ba:	e7fe      	b.n	80023ba <main+0x15a>

  while (1)
  {
	  temp_counter[0] = counter;
 80023bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023c0:	607b      	str	r3, [r7, #4]
	  while(a.PutPacket((uint8_t*)temp_counter))
 80023c2:	e007      	b.n	80023d4 <main+0x174>
	  {
		  counter_++;
 80023c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023c8:	3301      	adds	r3, #1
 80023ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
//		  for(int i = 0; i < 10000; i++);
		  HAL_Delay(1);
 80023ce:	2001      	movs	r0, #1
 80023d0:	f000 fdbc 	bl	8002f4c <HAL_Delay>
	  while(a.PutPacket((uint8_t*)temp_counter))
 80023d4:	1d3b      	adds	r3, r7, #4
 80023d6:	4619      	mov	r1, r3
 80023d8:	4830      	ldr	r0, [pc, #192]	; (800249c <main+0x23c>)
 80023da:	f7ff fcd7 	bl	8001d8c <_ZN10SX128x_OBJ9PutPacketEPh>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	bf14      	ite	ne
 80023e4:	2301      	movne	r3, #1
 80023e6:	2300      	moveq	r3, #0
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1ea      	bne.n	80023c4 <main+0x164>
	  }
//	  times++;
	  counter ++;
 80023ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023f2:	3301      	adds	r3, #1
 80023f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	  counter_++;
 80023f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023fc:	3301      	adds	r3, #1
 80023fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	  if (counter >= 100)
 8002402:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002406:	2b63      	cmp	r3, #99	; 0x63
 8002408:	d9d8      	bls.n	80023bc <main+0x15c>
	  {
		  time_temp = HAL_GetTick() - time_temp;
 800240a:	f000 fd93 	bl	8002f34 <HAL_GetTick>
 800240e:	4603      	mov	r3, r0
 8002410:	b29a      	uxth	r2, r3
 8002412:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e

		  float bps = 100*8*8*1000./time_temp;
 800241c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002420:	4618      	mov	r0, r3
 8002422:	f7fe f87f 	bl	8000524 <__aeabi_i2d>
 8002426:	4602      	mov	r2, r0
 8002428:	460b      	mov	r3, r1
 800242a:	a119      	add	r1, pc, #100	; (adr r1, 8002490 <main+0x230>)
 800242c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002430:	f7fe fa0c 	bl	800084c <__aeabi_ddiv>
 8002434:	4602      	mov	r2, r0
 8002436:	460b      	mov	r3, r1
 8002438:	4610      	mov	r0, r2
 800243a:	4619      	mov	r1, r3
 800243c:	f7fe fbd4 	bl	8000be8 <__aeabi_d2f>
 8002440:	4603      	mov	r3, r0
 8002442:	67bb      	str	r3, [r7, #120]	; 0x78


		  uart_buf_len = sprintf(uart_buf, "Bit Rate: %15.5f bps, count: %3lu, total put count:%8lu\r\n", bps, counter, counter_);
 8002444:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002446:	f7fe f87f 	bl	8000548 <__aeabi_f2d>
 800244a:	4602      	mov	r2, r0
 800244c:	460b      	mov	r3, r1
 800244e:	f107 0014 	add.w	r0, r7, #20
 8002452:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8002456:	9101      	str	r1, [sp, #4]
 8002458:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800245c:	9100      	str	r1, [sp, #0]
 800245e:	4914      	ldr	r1, [pc, #80]	; (80024b0 <main+0x250>)
 8002460:	f005 f94a 	bl	80076f8 <siprintf>
 8002464:	67f8      	str	r0, [r7, #124]	; 0x7c
		  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8002466:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002468:	b29a      	uxth	r2, r3
 800246a:	f107 0114 	add.w	r1, r7, #20
 800246e:	2364      	movs	r3, #100	; 0x64
 8002470:	480c      	ldr	r0, [pc, #48]	; (80024a4 <main+0x244>)
 8002472:	f003 fe0d 	bl	8006090 <HAL_UART_Transmit>

		  counter = 0;
 8002476:	2300      	movs	r3, #0
 8002478:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		  counter_= 0;
 800247c:	2300      	movs	r3, #0
 800247e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		  time_temp = HAL_GetTick();
 8002482:	f000 fd57 	bl	8002f34 <HAL_GetTick>
 8002486:	4603      	mov	r3, r0
 8002488:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
//	  uint16_t temp;
//	  temp = a.GetIrqStatus();
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 800248c:	e796      	b.n	80023bc <main+0x15c>
 800248e:	bf00      	nop
 8002490:	00000000 	.word	0x00000000
 8002494:	41586a00 	.word	0x41586a00
 8002498:	080098c4 	.word	0x080098c4
 800249c:	20000378 	.word	0x20000378
 80024a0:	08009850 	.word	0x08009850
 80024a4:	200002f0 	.word	0x200002f0
 80024a8:	200002a4 	.word	0x200002a4
 80024ac:	0800986c 	.word	0x0800986c
 80024b0:	08009888 	.word	0x08009888

080024b4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b096      	sub	sp, #88	; 0x58
 80024b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024ba:	f107 0314 	add.w	r3, r7, #20
 80024be:	2244      	movs	r2, #68	; 0x44
 80024c0:	2100      	movs	r1, #0
 80024c2:	4618      	mov	r0, r3
 80024c4:	f005 f97b 	bl	80077be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024c8:	463b      	mov	r3, r7
 80024ca:	2200      	movs	r2, #0
 80024cc:	601a      	str	r2, [r3, #0]
 80024ce:	605a      	str	r2, [r3, #4]
 80024d0:	609a      	str	r2, [r3, #8]
 80024d2:	60da      	str	r2, [r3, #12]
 80024d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80024d6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80024da:	f001 f8b9 	bl	8003650 <HAL_PWREx_ControlVoltageScaling>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	bf14      	ite	ne
 80024e4:	2301      	movne	r3, #1
 80024e6:	2300      	moveq	r3, #0
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 80024ee:	f000 fa29 	bl	8002944 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80024f2:	2302      	movs	r3, #2
 80024f4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024fc:	2310      	movs	r3, #16
 80024fe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002500:	2302      	movs	r3, #2
 8002502:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002504:	2302      	movs	r3, #2
 8002506:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002508:	2301      	movs	r3, #1
 800250a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800250c:	230a      	movs	r3, #10
 800250e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002510:	2307      	movs	r3, #7
 8002512:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002514:	2302      	movs	r3, #2
 8002516:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002518:	2302      	movs	r3, #2
 800251a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800251c:	f107 0314 	add.w	r3, r7, #20
 8002520:	4618      	mov	r0, r3
 8002522:	f001 f8eb 	bl	80036fc <HAL_RCC_OscConfig>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	bf14      	ite	ne
 800252c:	2301      	movne	r3, #1
 800252e:	2300      	moveq	r3, #0
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <_Z18SystemClock_Configv+0x86>
  {
    Error_Handler();
 8002536:	f000 fa05 	bl	8002944 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800253a:	230f      	movs	r3, #15
 800253c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800253e:	2303      	movs	r3, #3
 8002540:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002542:	2300      	movs	r3, #0
 8002544:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002546:	2300      	movs	r3, #0
 8002548:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800254a:	2300      	movs	r3, #0
 800254c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800254e:	463b      	mov	r3, r7
 8002550:	2104      	movs	r1, #4
 8002552:	4618      	mov	r0, r3
 8002554:	f001 fcae 	bl	8003eb4 <HAL_RCC_ClockConfig>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	bf14      	ite	ne
 800255e:	2301      	movne	r3, #1
 8002560:	2300      	moveq	r3, #0
 8002562:	b2db      	uxtb	r3, r3
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <_Z18SystemClock_Configv+0xb8>
  {
    Error_Handler();
 8002568:	f000 f9ec 	bl	8002944 <Error_Handler>
  }
}
 800256c:	bf00      	nop
 800256e:	3758      	adds	r7, #88	; 0x58
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002578:	4b1d      	ldr	r3, [pc, #116]	; (80025f0 <_ZL12MX_SPI1_Initv+0x7c>)
 800257a:	4a1e      	ldr	r2, [pc, #120]	; (80025f4 <_ZL12MX_SPI1_Initv+0x80>)
 800257c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800257e:	4b1c      	ldr	r3, [pc, #112]	; (80025f0 <_ZL12MX_SPI1_Initv+0x7c>)
 8002580:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002584:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002586:	4b1a      	ldr	r3, [pc, #104]	; (80025f0 <_ZL12MX_SPI1_Initv+0x7c>)
 8002588:	2200      	movs	r2, #0
 800258a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800258c:	4b18      	ldr	r3, [pc, #96]	; (80025f0 <_ZL12MX_SPI1_Initv+0x7c>)
 800258e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002592:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002594:	4b16      	ldr	r3, [pc, #88]	; (80025f0 <_ZL12MX_SPI1_Initv+0x7c>)
 8002596:	2200      	movs	r2, #0
 8002598:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800259a:	4b15      	ldr	r3, [pc, #84]	; (80025f0 <_ZL12MX_SPI1_Initv+0x7c>)
 800259c:	2200      	movs	r2, #0
 800259e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80025a0:	4b13      	ldr	r3, [pc, #76]	; (80025f0 <_ZL12MX_SPI1_Initv+0x7c>)
 80025a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025a6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80025a8:	4b11      	ldr	r3, [pc, #68]	; (80025f0 <_ZL12MX_SPI1_Initv+0x7c>)
 80025aa:	2210      	movs	r2, #16
 80025ac:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025ae:	4b10      	ldr	r3, [pc, #64]	; (80025f0 <_ZL12MX_SPI1_Initv+0x7c>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80025b4:	4b0e      	ldr	r3, [pc, #56]	; (80025f0 <_ZL12MX_SPI1_Initv+0x7c>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025ba:	4b0d      	ldr	r3, [pc, #52]	; (80025f0 <_ZL12MX_SPI1_Initv+0x7c>)
 80025bc:	2200      	movs	r2, #0
 80025be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80025c0:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <_ZL12MX_SPI1_Initv+0x7c>)
 80025c2:	2207      	movs	r2, #7
 80025c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80025c6:	4b0a      	ldr	r3, [pc, #40]	; (80025f0 <_ZL12MX_SPI1_Initv+0x7c>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80025cc:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <_ZL12MX_SPI1_Initv+0x7c>)
 80025ce:	2208      	movs	r2, #8
 80025d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80025d2:	4807      	ldr	r0, [pc, #28]	; (80025f0 <_ZL12MX_SPI1_Initv+0x7c>)
 80025d4:	f002 fb4e 	bl	8004c74 <HAL_SPI_Init>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	bf14      	ite	ne
 80025de:	2301      	movne	r3, #1
 80025e0:	2300      	moveq	r3, #0
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <_ZL12MX_SPI1_Initv+0x78>
  {
    Error_Handler();
 80025e8:	f000 f9ac 	bl	8002944 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80025ec:	bf00      	nop
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	200001f4 	.word	0x200001f4
 80025f4:	40013000 	.word	0x40013000

080025f8 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b088      	sub	sp, #32
 80025fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025fe:	f107 0310 	add.w	r3, r7, #16
 8002602:	2200      	movs	r2, #0
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	605a      	str	r2, [r3, #4]
 8002608:	609a      	str	r2, [r3, #8]
 800260a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800260c:	1d3b      	adds	r3, r7, #4
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	605a      	str	r2, [r3, #4]
 8002614:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002616:	4b27      	ldr	r3, [pc, #156]	; (80026b4 <_ZL12MX_TIM1_Initv+0xbc>)
 8002618:	4a27      	ldr	r2, [pc, #156]	; (80026b8 <_ZL12MX_TIM1_Initv+0xc0>)
 800261a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 800261c:	4b25      	ldr	r3, [pc, #148]	; (80026b4 <_ZL12MX_TIM1_Initv+0xbc>)
 800261e:	224f      	movs	r2, #79	; 0x4f
 8002620:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002622:	4b24      	ldr	r3, [pc, #144]	; (80026b4 <_ZL12MX_TIM1_Initv+0xbc>)
 8002624:	2200      	movs	r2, #0
 8002626:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002628:	4b22      	ldr	r3, [pc, #136]	; (80026b4 <_ZL12MX_TIM1_Initv+0xbc>)
 800262a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800262e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002630:	4b20      	ldr	r3, [pc, #128]	; (80026b4 <_ZL12MX_TIM1_Initv+0xbc>)
 8002632:	2200      	movs	r2, #0
 8002634:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002636:	4b1f      	ldr	r3, [pc, #124]	; (80026b4 <_ZL12MX_TIM1_Initv+0xbc>)
 8002638:	2200      	movs	r2, #0
 800263a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800263c:	4b1d      	ldr	r3, [pc, #116]	; (80026b4 <_ZL12MX_TIM1_Initv+0xbc>)
 800263e:	2200      	movs	r2, #0
 8002640:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002642:	481c      	ldr	r0, [pc, #112]	; (80026b4 <_ZL12MX_TIM1_Initv+0xbc>)
 8002644:	f003 f836 	bl	80056b4 <HAL_TIM_Base_Init>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	bf14      	ite	ne
 800264e:	2301      	movne	r3, #1
 8002650:	2300      	moveq	r3, #0
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <_ZL12MX_TIM1_Initv+0x64>
  {
    Error_Handler();
 8002658:	f000 f974 	bl	8002944 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800265c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002660:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002662:	f107 0310 	add.w	r3, r7, #16
 8002666:	4619      	mov	r1, r3
 8002668:	4812      	ldr	r0, [pc, #72]	; (80026b4 <_ZL12MX_TIM1_Initv+0xbc>)
 800266a:	f003 f9ed 	bl	8005a48 <HAL_TIM_ConfigClockSource>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	bf14      	ite	ne
 8002674:	2301      	movne	r3, #1
 8002676:	2300      	moveq	r3, #0
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <_ZL12MX_TIM1_Initv+0x8a>
  {
    Error_Handler();
 800267e:	f000 f961 	bl	8002944 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002682:	2300      	movs	r3, #0
 8002684:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002686:	2300      	movs	r3, #0
 8002688:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800268a:	2300      	movs	r3, #0
 800268c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800268e:	1d3b      	adds	r3, r7, #4
 8002690:	4619      	mov	r1, r3
 8002692:	4808      	ldr	r0, [pc, #32]	; (80026b4 <_ZL12MX_TIM1_Initv+0xbc>)
 8002694:	f003 fc08 	bl	8005ea8 <HAL_TIMEx_MasterConfigSynchronization>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	bf14      	ite	ne
 800269e:	2301      	movne	r3, #1
 80026a0:	2300      	moveq	r3, #0
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <_ZL12MX_TIM1_Initv+0xb4>
  {
    Error_Handler();
 80026a8:	f000 f94c 	bl	8002944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80026ac:	bf00      	nop
 80026ae:	3720      	adds	r7, #32
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	20000258 	.word	0x20000258
 80026b8:	40012c00 	.word	0x40012c00

080026bc <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b088      	sub	sp, #32
 80026c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026c2:	f107 0310 	add.w	r3, r7, #16
 80026c6:	2200      	movs	r2, #0
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	605a      	str	r2, [r3, #4]
 80026cc:	609a      	str	r2, [r3, #8]
 80026ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026d0:	1d3b      	adds	r3, r7, #4
 80026d2:	2200      	movs	r2, #0
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	605a      	str	r2, [r3, #4]
 80026d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80026da:	4b25      	ldr	r3, [pc, #148]	; (8002770 <_ZL12MX_TIM2_Initv+0xb4>)
 80026dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 80026e2:	4b23      	ldr	r3, [pc, #140]	; (8002770 <_ZL12MX_TIM2_Initv+0xb4>)
 80026e4:	224f      	movs	r2, #79	; 0x4f
 80026e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026e8:	4b21      	ldr	r3, [pc, #132]	; (8002770 <_ZL12MX_TIM2_Initv+0xb4>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80026ee:	4b20      	ldr	r3, [pc, #128]	; (8002770 <_ZL12MX_TIM2_Initv+0xb4>)
 80026f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80026f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026f6:	4b1e      	ldr	r3, [pc, #120]	; (8002770 <_ZL12MX_TIM2_Initv+0xb4>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026fc:	4b1c      	ldr	r3, [pc, #112]	; (8002770 <_ZL12MX_TIM2_Initv+0xb4>)
 80026fe:	2200      	movs	r2, #0
 8002700:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002702:	481b      	ldr	r0, [pc, #108]	; (8002770 <_ZL12MX_TIM2_Initv+0xb4>)
 8002704:	f002 ffd6 	bl	80056b4 <HAL_TIM_Base_Init>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	bf14      	ite	ne
 800270e:	2301      	movne	r3, #1
 8002710:	2300      	moveq	r3, #0
 8002712:	b2db      	uxtb	r3, r3
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <_ZL12MX_TIM2_Initv+0x60>
  {
    Error_Handler();
 8002718:	f000 f914 	bl	8002944 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800271c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002720:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002722:	f107 0310 	add.w	r3, r7, #16
 8002726:	4619      	mov	r1, r3
 8002728:	4811      	ldr	r0, [pc, #68]	; (8002770 <_ZL12MX_TIM2_Initv+0xb4>)
 800272a:	f003 f98d 	bl	8005a48 <HAL_TIM_ConfigClockSource>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	bf14      	ite	ne
 8002734:	2301      	movne	r3, #1
 8002736:	2300      	moveq	r3, #0
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <_ZL12MX_TIM2_Initv+0x86>
  {
    Error_Handler();
 800273e:	f000 f901 	bl	8002944 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002742:	2300      	movs	r3, #0
 8002744:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002746:	2300      	movs	r3, #0
 8002748:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800274a:	1d3b      	adds	r3, r7, #4
 800274c:	4619      	mov	r1, r3
 800274e:	4808      	ldr	r0, [pc, #32]	; (8002770 <_ZL12MX_TIM2_Initv+0xb4>)
 8002750:	f003 fbaa 	bl	8005ea8 <HAL_TIMEx_MasterConfigSynchronization>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	bf14      	ite	ne
 800275a:	2301      	movne	r3, #1
 800275c:	2300      	moveq	r3, #0
 800275e:	b2db      	uxtb	r3, r3
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <_ZL12MX_TIM2_Initv+0xac>
  {
    Error_Handler();
 8002764:	f000 f8ee 	bl	8002944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002768:	bf00      	nop
 800276a:	3720      	adds	r7, #32
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	200002a4 	.word	0x200002a4

08002774 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002778:	4b16      	ldr	r3, [pc, #88]	; (80027d4 <_ZL19MX_USART2_UART_Initv+0x60>)
 800277a:	4a17      	ldr	r2, [pc, #92]	; (80027d8 <_ZL19MX_USART2_UART_Initv+0x64>)
 800277c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800277e:	4b15      	ldr	r3, [pc, #84]	; (80027d4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002780:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002784:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002786:	4b13      	ldr	r3, [pc, #76]	; (80027d4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002788:	2200      	movs	r2, #0
 800278a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800278c:	4b11      	ldr	r3, [pc, #68]	; (80027d4 <_ZL19MX_USART2_UART_Initv+0x60>)
 800278e:	2200      	movs	r2, #0
 8002790:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002792:	4b10      	ldr	r3, [pc, #64]	; (80027d4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8002794:	2200      	movs	r2, #0
 8002796:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002798:	4b0e      	ldr	r3, [pc, #56]	; (80027d4 <_ZL19MX_USART2_UART_Initv+0x60>)
 800279a:	220c      	movs	r2, #12
 800279c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800279e:	4b0d      	ldr	r3, [pc, #52]	; (80027d4 <_ZL19MX_USART2_UART_Initv+0x60>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027a4:	4b0b      	ldr	r3, [pc, #44]	; (80027d4 <_ZL19MX_USART2_UART_Initv+0x60>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027aa:	4b0a      	ldr	r3, [pc, #40]	; (80027d4 <_ZL19MX_USART2_UART_Initv+0x60>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027b0:	4b08      	ldr	r3, [pc, #32]	; (80027d4 <_ZL19MX_USART2_UART_Initv+0x60>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027b6:	4807      	ldr	r0, [pc, #28]	; (80027d4 <_ZL19MX_USART2_UART_Initv+0x60>)
 80027b8:	f003 fc1c 	bl	8005ff4 <HAL_UART_Init>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	bf14      	ite	ne
 80027c2:	2301      	movne	r3, #1
 80027c4:	2300      	moveq	r3, #0
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 80027cc:	f000 f8ba 	bl	8002944 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027d0:	bf00      	nop
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	200002f0 	.word	0x200002f0
 80027d8:	40004400 	.word	0x40004400

080027dc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b08a      	sub	sp, #40	; 0x28
 80027e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e2:	f107 0314 	add.w	r3, r7, #20
 80027e6:	2200      	movs	r2, #0
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	605a      	str	r2, [r3, #4]
 80027ec:	609a      	str	r2, [r3, #8]
 80027ee:	60da      	str	r2, [r3, #12]
 80027f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027f2:	4b46      	ldr	r3, [pc, #280]	; (800290c <_ZL12MX_GPIO_Initv+0x130>)
 80027f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f6:	4a45      	ldr	r2, [pc, #276]	; (800290c <_ZL12MX_GPIO_Initv+0x130>)
 80027f8:	f043 0304 	orr.w	r3, r3, #4
 80027fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027fe:	4b43      	ldr	r3, [pc, #268]	; (800290c <_ZL12MX_GPIO_Initv+0x130>)
 8002800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002802:	f003 0304 	and.w	r3, r3, #4
 8002806:	613b      	str	r3, [r7, #16]
 8002808:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800280a:	4b40      	ldr	r3, [pc, #256]	; (800290c <_ZL12MX_GPIO_Initv+0x130>)
 800280c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800280e:	4a3f      	ldr	r2, [pc, #252]	; (800290c <_ZL12MX_GPIO_Initv+0x130>)
 8002810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002814:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002816:	4b3d      	ldr	r3, [pc, #244]	; (800290c <_ZL12MX_GPIO_Initv+0x130>)
 8002818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800281a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002822:	4b3a      	ldr	r3, [pc, #232]	; (800290c <_ZL12MX_GPIO_Initv+0x130>)
 8002824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002826:	4a39      	ldr	r2, [pc, #228]	; (800290c <_ZL12MX_GPIO_Initv+0x130>)
 8002828:	f043 0301 	orr.w	r3, r3, #1
 800282c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800282e:	4b37      	ldr	r3, [pc, #220]	; (800290c <_ZL12MX_GPIO_Initv+0x130>)
 8002830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	60bb      	str	r3, [r7, #8]
 8002838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800283a:	4b34      	ldr	r3, [pc, #208]	; (800290c <_ZL12MX_GPIO_Initv+0x130>)
 800283c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800283e:	4a33      	ldr	r2, [pc, #204]	; (800290c <_ZL12MX_GPIO_Initv+0x130>)
 8002840:	f043 0302 	orr.w	r3, r3, #2
 8002844:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002846:	4b31      	ldr	r3, [pc, #196]	; (800290c <_ZL12MX_GPIO_Initv+0x130>)
 8002848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	607b      	str	r3, [r7, #4]
 8002850:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SX1280_RST_GPIO_Port, SX1280_RST_Pin, GPIO_PIN_SET);
 8002852:	2201      	movs	r2, #1
 8002854:	2180      	movs	r1, #128	; 0x80
 8002856:	482e      	ldr	r0, [pc, #184]	; (8002910 <_ZL12MX_GPIO_Initv+0x134>)
 8002858:	f000 feb0 	bl	80035bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SX1280_NSS_GPIO_Port, SX1280_NSS_Pin, GPIO_PIN_SET);
 800285c:	2201      	movs	r2, #1
 800285e:	2140      	movs	r1, #64	; 0x40
 8002860:	482c      	ldr	r0, [pc, #176]	; (8002914 <_ZL12MX_GPIO_Initv+0x138>)
 8002862:	f000 feab 	bl	80035bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002866:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800286a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800286c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002870:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002872:	2300      	movs	r3, #0
 8002874:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002876:	f107 0314 	add.w	r3, r7, #20
 800287a:	4619      	mov	r1, r3
 800287c:	4824      	ldr	r0, [pc, #144]	; (8002910 <_ZL12MX_GPIO_Initv+0x134>)
 800287e:	f000 fcdb 	bl	8003238 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX1280_RST_Pin */
  GPIO_InitStruct.Pin = SX1280_RST_Pin;
 8002882:	2380      	movs	r3, #128	; 0x80
 8002884:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002886:	2301      	movs	r3, #1
 8002888:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800288a:	2301      	movs	r3, #1
 800288c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800288e:	2303      	movs	r3, #3
 8002890:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SX1280_RST_GPIO_Port, &GPIO_InitStruct);
 8002892:	f107 0314 	add.w	r3, r7, #20
 8002896:	4619      	mov	r1, r3
 8002898:	481d      	ldr	r0, [pc, #116]	; (8002910 <_ZL12MX_GPIO_Initv+0x134>)
 800289a:	f000 fccd 	bl	8003238 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800289e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80028a4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80028a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80028aa:	2302      	movs	r3, #2
 80028ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ae:	f107 0314 	add.w	r3, r7, #20
 80028b2:	4619      	mov	r1, r3
 80028b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028b8:	f000 fcbe 	bl	8003238 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX1280_BUSY_Pin */
  GPIO_InitStruct.Pin = SX1280_BUSY_Pin;
 80028bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028c2:	2300      	movs	r3, #0
 80028c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80028c6:	2302      	movs	r3, #2
 80028c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SX1280_BUSY_GPIO_Port, &GPIO_InitStruct);
 80028ca:	f107 0314 	add.w	r3, r7, #20
 80028ce:	4619      	mov	r1, r3
 80028d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028d4:	f000 fcb0 	bl	8003238 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX1280_NSS_Pin */
  GPIO_InitStruct.Pin = SX1280_NSS_Pin;
 80028d8:	2340      	movs	r3, #64	; 0x40
 80028da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028dc:	2301      	movs	r3, #1
 80028de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028e0:	2301      	movs	r3, #1
 80028e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028e4:	2303      	movs	r3, #3
 80028e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SX1280_NSS_GPIO_Port, &GPIO_InitStruct);
 80028e8:	f107 0314 	add.w	r3, r7, #20
 80028ec:	4619      	mov	r1, r3
 80028ee:	4809      	ldr	r0, [pc, #36]	; (8002914 <_ZL12MX_GPIO_Initv+0x138>)
 80028f0:	f000 fca2 	bl	8003238 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80028f4:	2200      	movs	r2, #0
 80028f6:	2100      	movs	r1, #0
 80028f8:	2017      	movs	r0, #23
 80028fa:	f000 fc26 	bl	800314a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80028fe:	2017      	movs	r0, #23
 8002900:	f000 fc3f 	bl	8003182 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002904:	bf00      	nop
 8002906:	3728      	adds	r7, #40	; 0x28
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40021000 	.word	0x40021000
 8002910:	48000800 	.word	0x48000800
 8002914:	48000400 	.word	0x48000400

08002918 <HAL_SPI_TxRxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *spi)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
	if(spi->Instance == SPI1)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a05      	ldr	r2, [pc, #20]	; (800293c <HAL_SPI_TxRxCpltCallback+0x24>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d104      	bne.n	8002934 <HAL_SPI_TxRxCpltCallback+0x1c>
	{
		HAL_GPIO_WritePin(SX1280_NSS_GPIO_Port, SX1280_NSS_Pin, (GPIO_PinState)1);
 800292a:	2201      	movs	r2, #1
 800292c:	2140      	movs	r1, #64	; 0x40
 800292e:	4804      	ldr	r0, [pc, #16]	; (8002940 <HAL_SPI_TxRxCpltCallback+0x28>)
 8002930:	f000 fe44 	bl	80035bc <HAL_GPIO_WritePin>
	}
}
 8002934:	bf00      	nop
 8002936:	3708      	adds	r7, #8
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	40013000 	.word	0x40013000
 8002940:	48000400 	.word	0x48000400

08002944 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002948:	b672      	cpsid	i
}
 800294a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800294c:	e7fe      	b.n	800294c <Error_Handler+0x8>
	...

08002950 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d107      	bne.n	8002970 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002966:	4293      	cmp	r3, r2
 8002968:	d102      	bne.n	8002970 <_Z41__static_initialization_and_destruction_0ii+0x20>
SX128x_OBJ a;
 800296a:	4809      	ldr	r0, [pc, #36]	; (8002990 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800296c:	f7ff f9b2 	bl	8001cd4 <_ZN10SX128x_OBJC1Ev>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d107      	bne.n	8002986 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800297c:	4293      	cmp	r3, r2
 800297e:	d102      	bne.n	8002986 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002980:	4803      	ldr	r0, [pc, #12]	; (8002990 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002982:	f7ff fc47 	bl	8002214 <_ZN10SX128x_OBJD1Ev>
}
 8002986:	bf00      	nop
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	20000378 	.word	0x20000378

08002994 <_GLOBAL__sub_I_hspi1>:
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
 8002998:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800299c:	2001      	movs	r0, #1
 800299e:	f7ff ffd7 	bl	8002950 <_Z41__static_initialization_and_destruction_0ii>
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <_GLOBAL__sub_D_hspi1>:
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80029ac:	2000      	movs	r0, #0
 80029ae:	f7ff ffcf 	bl	8002950 <_Z41__static_initialization_and_destruction_0ii>
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ba:	4b0f      	ldr	r3, [pc, #60]	; (80029f8 <HAL_MspInit+0x44>)
 80029bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029be:	4a0e      	ldr	r2, [pc, #56]	; (80029f8 <HAL_MspInit+0x44>)
 80029c0:	f043 0301 	orr.w	r3, r3, #1
 80029c4:	6613      	str	r3, [r2, #96]	; 0x60
 80029c6:	4b0c      	ldr	r3, [pc, #48]	; (80029f8 <HAL_MspInit+0x44>)
 80029c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	607b      	str	r3, [r7, #4]
 80029d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029d2:	4b09      	ldr	r3, [pc, #36]	; (80029f8 <HAL_MspInit+0x44>)
 80029d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d6:	4a08      	ldr	r2, [pc, #32]	; (80029f8 <HAL_MspInit+0x44>)
 80029d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029dc:	6593      	str	r3, [r2, #88]	; 0x58
 80029de:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <HAL_MspInit+0x44>)
 80029e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e6:	603b      	str	r3, [r7, #0]
 80029e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	40021000 	.word	0x40021000

080029fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b08a      	sub	sp, #40	; 0x28
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a04:	f107 0314 	add.w	r3, r7, #20
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	605a      	str	r2, [r3, #4]
 8002a0e:	609a      	str	r2, [r3, #8]
 8002a10:	60da      	str	r2, [r3, #12]
 8002a12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a1b      	ldr	r2, [pc, #108]	; (8002a88 <HAL_SPI_MspInit+0x8c>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d130      	bne.n	8002a80 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a1e:	4b1b      	ldr	r3, [pc, #108]	; (8002a8c <HAL_SPI_MspInit+0x90>)
 8002a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a22:	4a1a      	ldr	r2, [pc, #104]	; (8002a8c <HAL_SPI_MspInit+0x90>)
 8002a24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a28:	6613      	str	r3, [r2, #96]	; 0x60
 8002a2a:	4b18      	ldr	r3, [pc, #96]	; (8002a8c <HAL_SPI_MspInit+0x90>)
 8002a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a32:	613b      	str	r3, [r7, #16]
 8002a34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a36:	4b15      	ldr	r3, [pc, #84]	; (8002a8c <HAL_SPI_MspInit+0x90>)
 8002a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a3a:	4a14      	ldr	r2, [pc, #80]	; (8002a8c <HAL_SPI_MspInit+0x90>)
 8002a3c:	f043 0301 	orr.w	r3, r3, #1
 8002a40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a42:	4b12      	ldr	r3, [pc, #72]	; (8002a8c <HAL_SPI_MspInit+0x90>)
 8002a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	60fb      	str	r3, [r7, #12]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002a4e:	23e0      	movs	r3, #224	; 0xe0
 8002a50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a52:	2302      	movs	r3, #2
 8002a54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a56:	2302      	movs	r3, #2
 8002a58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a5e:	2305      	movs	r3, #5
 8002a60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a62:	f107 0314 	add.w	r3, r7, #20
 8002a66:	4619      	mov	r1, r3
 8002a68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a6c:	f000 fbe4 	bl	8003238 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002a70:	2200      	movs	r2, #0
 8002a72:	2100      	movs	r1, #0
 8002a74:	2023      	movs	r0, #35	; 0x23
 8002a76:	f000 fb68 	bl	800314a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002a7a:	2023      	movs	r0, #35	; 0x23
 8002a7c:	f000 fb81 	bl	8003182 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002a80:	bf00      	nop
 8002a82:	3728      	adds	r7, #40	; 0x28
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	40013000 	.word	0x40013000
 8002a8c:	40021000 	.word	0x40021000

08002a90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a16      	ldr	r2, [pc, #88]	; (8002af8 <HAL_TIM_Base_MspInit+0x68>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d10c      	bne.n	8002abc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002aa2:	4b16      	ldr	r3, [pc, #88]	; (8002afc <HAL_TIM_Base_MspInit+0x6c>)
 8002aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aa6:	4a15      	ldr	r2, [pc, #84]	; (8002afc <HAL_TIM_Base_MspInit+0x6c>)
 8002aa8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002aac:	6613      	str	r3, [r2, #96]	; 0x60
 8002aae:	4b13      	ldr	r3, [pc, #76]	; (8002afc <HAL_TIM_Base_MspInit+0x6c>)
 8002ab0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ab2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002aba:	e018      	b.n	8002aee <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ac4:	d113      	bne.n	8002aee <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ac6:	4b0d      	ldr	r3, [pc, #52]	; (8002afc <HAL_TIM_Base_MspInit+0x6c>)
 8002ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aca:	4a0c      	ldr	r2, [pc, #48]	; (8002afc <HAL_TIM_Base_MspInit+0x6c>)
 8002acc:	f043 0301 	orr.w	r3, r3, #1
 8002ad0:	6593      	str	r3, [r2, #88]	; 0x58
 8002ad2:	4b0a      	ldr	r3, [pc, #40]	; (8002afc <HAL_TIM_Base_MspInit+0x6c>)
 8002ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	60bb      	str	r3, [r7, #8]
 8002adc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002ade:	2200      	movs	r2, #0
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	201c      	movs	r0, #28
 8002ae4:	f000 fb31 	bl	800314a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002ae8:	201c      	movs	r0, #28
 8002aea:	f000 fb4a 	bl	8003182 <HAL_NVIC_EnableIRQ>
}
 8002aee:	bf00      	nop
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40012c00 	.word	0x40012c00
 8002afc:	40021000 	.word	0x40021000

08002b00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b0ac      	sub	sp, #176	; 0xb0
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b08:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	605a      	str	r2, [r3, #4]
 8002b12:	609a      	str	r2, [r3, #8]
 8002b14:	60da      	str	r2, [r3, #12]
 8002b16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b18:	f107 0314 	add.w	r3, r7, #20
 8002b1c:	2288      	movs	r2, #136	; 0x88
 8002b1e:	2100      	movs	r1, #0
 8002b20:	4618      	mov	r0, r3
 8002b22:	f004 fe4c 	bl	80077be <memset>
  if(huart->Instance==USART2)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a21      	ldr	r2, [pc, #132]	; (8002bb0 <HAL_UART_MspInit+0xb0>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d13b      	bne.n	8002ba8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002b30:	2302      	movs	r3, #2
 8002b32:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002b34:	2300      	movs	r3, #0
 8002b36:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b38:	f107 0314 	add.w	r3, r7, #20
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f001 fbdd 	bl	80042fc <HAL_RCCEx_PeriphCLKConfig>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002b48:	f7ff fefc 	bl	8002944 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b4c:	4b19      	ldr	r3, [pc, #100]	; (8002bb4 <HAL_UART_MspInit+0xb4>)
 8002b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b50:	4a18      	ldr	r2, [pc, #96]	; (8002bb4 <HAL_UART_MspInit+0xb4>)
 8002b52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b56:	6593      	str	r3, [r2, #88]	; 0x58
 8002b58:	4b16      	ldr	r3, [pc, #88]	; (8002bb4 <HAL_UART_MspInit+0xb4>)
 8002b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b60:	613b      	str	r3, [r7, #16]
 8002b62:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b64:	4b13      	ldr	r3, [pc, #76]	; (8002bb4 <HAL_UART_MspInit+0xb4>)
 8002b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b68:	4a12      	ldr	r2, [pc, #72]	; (8002bb4 <HAL_UART_MspInit+0xb4>)
 8002b6a:	f043 0301 	orr.w	r3, r3, #1
 8002b6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b70:	4b10      	ldr	r3, [pc, #64]	; (8002bb4 <HAL_UART_MspInit+0xb4>)
 8002b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	60fb      	str	r3, [r7, #12]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002b7c:	230c      	movs	r3, #12
 8002b7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b82:	2302      	movs	r3, #2
 8002b84:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b94:	2307      	movs	r3, #7
 8002b96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b9a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ba4:	f000 fb48 	bl	8003238 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002ba8:	bf00      	nop
 8002baa:	37b0      	adds	r7, #176	; 0xb0
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40004400 	.word	0x40004400
 8002bb4:	40021000 	.word	0x40021000

08002bb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bbc:	e7fe      	b.n	8002bbc <NMI_Handler+0x4>

08002bbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bc2:	e7fe      	b.n	8002bc2 <HardFault_Handler+0x4>

08002bc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bc8:	e7fe      	b.n	8002bc8 <MemManage_Handler+0x4>

08002bca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bce:	e7fe      	b.n	8002bce <BusFault_Handler+0x4>

08002bd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bd4:	e7fe      	b.n	8002bd4 <UsageFault_Handler+0x4>

08002bd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bda:	bf00      	nop
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002be8:	bf00      	nop
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bf6:	bf00      	nop
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c04:	f000 f982 	bl	8002f0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c08:	bf00      	nop
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	a.tx_recursion();
 8002c10:	4804      	ldr	r0, [pc, #16]	; (8002c24 <EXTI9_5_IRQHandler+0x18>)
 8002c12:	f7ff f911 	bl	8001e38 <_ZN10SX128x_OBJ12tx_recursionEv>
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002c16:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002c1a:	f000 fce7 	bl	80035ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002c1e:	bf00      	nop
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	20000378 	.word	0x20000378

08002c28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c2c:	4802      	ldr	r0, [pc, #8]	; (8002c38 <TIM2_IRQHandler+0x10>)
 8002c2e:	f002 fe09 	bl	8005844 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c32:	bf00      	nop
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	200002a4 	.word	0x200002a4

08002c3c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002c40:	4802      	ldr	r0, [pc, #8]	; (8002c4c <SPI1_IRQHandler+0x10>)
 8002c42:	f002 f969 	bl	8004f18 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002c46:	bf00      	nop
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	200001f4 	.word	0x200001f4

08002c50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  return 1;
 8002c54:	2301      	movs	r3, #1
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <_kill>:

int _kill(int pid, int sig)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c6a:	f004 fe4f 	bl	800790c <__errno>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2216      	movs	r2, #22
 8002c72:	601a      	str	r2, [r3, #0]
  return -1;
 8002c74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <_exit>:

void _exit (int status)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c88:	f04f 31ff 	mov.w	r1, #4294967295
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f7ff ffe7 	bl	8002c60 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c92:	e7fe      	b.n	8002c92 <_exit+0x12>

08002c94 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	617b      	str	r3, [r7, #20]
 8002ca4:	e00a      	b.n	8002cbc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ca6:	f3af 8000 	nop.w
 8002caa:	4601      	mov	r1, r0
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	1c5a      	adds	r2, r3, #1
 8002cb0:	60ba      	str	r2, [r7, #8]
 8002cb2:	b2ca      	uxtb	r2, r1
 8002cb4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	617b      	str	r3, [r7, #20]
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	dbf0      	blt.n	8002ca6 <_read+0x12>
  }

  return len;
 8002cc4:	687b      	ldr	r3, [r7, #4]
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3718      	adds	r7, #24
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b086      	sub	sp, #24
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	60f8      	str	r0, [r7, #12]
 8002cd6:	60b9      	str	r1, [r7, #8]
 8002cd8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cda:	2300      	movs	r3, #0
 8002cdc:	617b      	str	r3, [r7, #20]
 8002cde:	e009      	b.n	8002cf4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	1c5a      	adds	r2, r3, #1
 8002ce4:	60ba      	str	r2, [r7, #8]
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	617b      	str	r3, [r7, #20]
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	dbf1      	blt.n	8002ce0 <_write+0x12>
  }
  return len;
 8002cfc:	687b      	ldr	r3, [r7, #4]
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3718      	adds	r7, #24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <_close>:

int _close(int file)
{
 8002d06:	b480      	push	{r7}
 8002d08:	b083      	sub	sp, #12
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b083      	sub	sp, #12
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
 8002d26:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d2e:	605a      	str	r2, [r3, #4]
  return 0;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <_isatty>:

int _isatty(int file)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d46:	2301      	movs	r3, #1
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3714      	adds	r7, #20
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
	...

08002d70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d78:	4a14      	ldr	r2, [pc, #80]	; (8002dcc <_sbrk+0x5c>)
 8002d7a:	4b15      	ldr	r3, [pc, #84]	; (8002dd0 <_sbrk+0x60>)
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d84:	4b13      	ldr	r3, [pc, #76]	; (8002dd4 <_sbrk+0x64>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d102      	bne.n	8002d92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d8c:	4b11      	ldr	r3, [pc, #68]	; (8002dd4 <_sbrk+0x64>)
 8002d8e:	4a12      	ldr	r2, [pc, #72]	; (8002dd8 <_sbrk+0x68>)
 8002d90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d92:	4b10      	ldr	r3, [pc, #64]	; (8002dd4 <_sbrk+0x64>)
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4413      	add	r3, r2
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d207      	bcs.n	8002db0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002da0:	f004 fdb4 	bl	800790c <__errno>
 8002da4:	4603      	mov	r3, r0
 8002da6:	220c      	movs	r2, #12
 8002da8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002daa:	f04f 33ff 	mov.w	r3, #4294967295
 8002dae:	e009      	b.n	8002dc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002db0:	4b08      	ldr	r3, [pc, #32]	; (8002dd4 <_sbrk+0x64>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002db6:	4b07      	ldr	r3, [pc, #28]	; (8002dd4 <_sbrk+0x64>)
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	4a05      	ldr	r2, [pc, #20]	; (8002dd4 <_sbrk+0x64>)
 8002dc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3718      	adds	r7, #24
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	20018000 	.word	0x20018000
 8002dd0:	00000400 	.word	0x00000400
 8002dd4:	200004c0 	.word	0x200004c0
 8002dd8:	20000618 	.word	0x20000618

08002ddc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002de0:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <SystemInit+0x20>)
 8002de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de6:	4a05      	ldr	r2, [pc, #20]	; (8002dfc <SystemInit+0x20>)
 8002de8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002dec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002df0:	bf00      	nop
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	e000ed00 	.word	0xe000ed00

08002e00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002e00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e38 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002e04:	f7ff ffea 	bl	8002ddc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e08:	480c      	ldr	r0, [pc, #48]	; (8002e3c <LoopForever+0x6>)
  ldr r1, =_edata
 8002e0a:	490d      	ldr	r1, [pc, #52]	; (8002e40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e0c:	4a0d      	ldr	r2, [pc, #52]	; (8002e44 <LoopForever+0xe>)
  movs r3, #0
 8002e0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e10:	e002      	b.n	8002e18 <LoopCopyDataInit>

08002e12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e16:	3304      	adds	r3, #4

08002e18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e1c:	d3f9      	bcc.n	8002e12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e1e:	4a0a      	ldr	r2, [pc, #40]	; (8002e48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e20:	4c0a      	ldr	r4, [pc, #40]	; (8002e4c <LoopForever+0x16>)
  movs r3, #0
 8002e22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e24:	e001      	b.n	8002e2a <LoopFillZerobss>

08002e26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e28:	3204      	adds	r2, #4

08002e2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e2c:	d3fb      	bcc.n	8002e26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e2e:	f004 fd73 	bl	8007918 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002e32:	f7ff fa15 	bl	8002260 <main>

08002e36 <LoopForever>:

LoopForever:
    b LoopForever
 8002e36:	e7fe      	b.n	8002e36 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002e38:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002e3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e40:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002e44:	08009d64 	.word	0x08009d64
  ldr r2, =_sbss
 8002e48:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002e4c:	20000614 	.word	0x20000614

08002e50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002e50:	e7fe      	b.n	8002e50 <ADC1_2_IRQHandler>
	...

08002e54 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e5e:	4b0c      	ldr	r3, [pc, #48]	; (8002e90 <HAL_Init+0x3c>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a0b      	ldr	r2, [pc, #44]	; (8002e90 <HAL_Init+0x3c>)
 8002e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e68:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e6a:	2003      	movs	r0, #3
 8002e6c:	f000 f962 	bl	8003134 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e70:	2000      	movs	r0, #0
 8002e72:	f000 f80f 	bl	8002e94 <HAL_InitTick>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d002      	beq.n	8002e82 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	71fb      	strb	r3, [r7, #7]
 8002e80:	e001      	b.n	8002e86 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002e82:	f7ff fd97 	bl	80029b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e86:	79fb      	ldrb	r3, [r7, #7]
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3708      	adds	r7, #8
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40022000 	.word	0x40022000

08002e94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002ea0:	4b17      	ldr	r3, [pc, #92]	; (8002f00 <HAL_InitTick+0x6c>)
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d023      	beq.n	8002ef0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002ea8:	4b16      	ldr	r3, [pc, #88]	; (8002f04 <HAL_InitTick+0x70>)
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	4b14      	ldr	r3, [pc, #80]	; (8002f00 <HAL_InitTick+0x6c>)
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002eb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f000 f96d 	bl	800319e <HAL_SYSTICK_Config>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10f      	bne.n	8002eea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2b0f      	cmp	r3, #15
 8002ece:	d809      	bhi.n	8002ee4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	6879      	ldr	r1, [r7, #4]
 8002ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ed8:	f000 f937 	bl	800314a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002edc:	4a0a      	ldr	r2, [pc, #40]	; (8002f08 <HAL_InitTick+0x74>)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6013      	str	r3, [r2, #0]
 8002ee2:	e007      	b.n	8002ef4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	73fb      	strb	r3, [r7, #15]
 8002ee8:	e004      	b.n	8002ef4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	73fb      	strb	r3, [r7, #15]
 8002eee:	e001      	b.n	8002ef4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	20000008 	.word	0x20000008
 8002f04:	20000000 	.word	0x20000000
 8002f08:	20000004 	.word	0x20000004

08002f0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f10:	4b06      	ldr	r3, [pc, #24]	; (8002f2c <HAL_IncTick+0x20>)
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	461a      	mov	r2, r3
 8002f16:	4b06      	ldr	r3, [pc, #24]	; (8002f30 <HAL_IncTick+0x24>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	4a04      	ldr	r2, [pc, #16]	; (8002f30 <HAL_IncTick+0x24>)
 8002f1e:	6013      	str	r3, [r2, #0]
}
 8002f20:	bf00      	nop
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	20000008 	.word	0x20000008
 8002f30:	200004c4 	.word	0x200004c4

08002f34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  return uwTick;
 8002f38:	4b03      	ldr	r3, [pc, #12]	; (8002f48 <HAL_GetTick+0x14>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	200004c4 	.word	0x200004c4

08002f4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f54:	f7ff ffee 	bl	8002f34 <HAL_GetTick>
 8002f58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f64:	d005      	beq.n	8002f72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002f66:	4b0a      	ldr	r3, [pc, #40]	; (8002f90 <HAL_Delay+0x44>)
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	4413      	add	r3, r2
 8002f70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f72:	bf00      	nop
 8002f74:	f7ff ffde 	bl	8002f34 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	68fa      	ldr	r2, [r7, #12]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d8f7      	bhi.n	8002f74 <HAL_Delay+0x28>
  {
  }
}
 8002f84:	bf00      	nop
 8002f86:	bf00      	nop
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	20000008 	.word	0x20000008

08002f94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f003 0307 	and.w	r3, r3, #7
 8002fa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fa4:	4b0c      	ldr	r3, [pc, #48]	; (8002fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002faa:	68ba      	ldr	r2, [r7, #8]
 8002fac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fc6:	4a04      	ldr	r2, [pc, #16]	; (8002fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	60d3      	str	r3, [r2, #12]
}
 8002fcc:	bf00      	nop
 8002fce:	3714      	adds	r7, #20
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	e000ed00 	.word	0xe000ed00

08002fdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fe0:	4b04      	ldr	r3, [pc, #16]	; (8002ff4 <__NVIC_GetPriorityGrouping+0x18>)
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	0a1b      	lsrs	r3, r3, #8
 8002fe6:	f003 0307 	and.w	r3, r3, #7
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr
 8002ff4:	e000ed00 	.word	0xe000ed00

08002ff8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	4603      	mov	r3, r0
 8003000:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003006:	2b00      	cmp	r3, #0
 8003008:	db0b      	blt.n	8003022 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800300a:	79fb      	ldrb	r3, [r7, #7]
 800300c:	f003 021f 	and.w	r2, r3, #31
 8003010:	4907      	ldr	r1, [pc, #28]	; (8003030 <__NVIC_EnableIRQ+0x38>)
 8003012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003016:	095b      	lsrs	r3, r3, #5
 8003018:	2001      	movs	r0, #1
 800301a:	fa00 f202 	lsl.w	r2, r0, r2
 800301e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003022:	bf00      	nop
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	e000e100 	.word	0xe000e100

08003034 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	4603      	mov	r3, r0
 800303c:	6039      	str	r1, [r7, #0]
 800303e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003044:	2b00      	cmp	r3, #0
 8003046:	db0a      	blt.n	800305e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	b2da      	uxtb	r2, r3
 800304c:	490c      	ldr	r1, [pc, #48]	; (8003080 <__NVIC_SetPriority+0x4c>)
 800304e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003052:	0112      	lsls	r2, r2, #4
 8003054:	b2d2      	uxtb	r2, r2
 8003056:	440b      	add	r3, r1
 8003058:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800305c:	e00a      	b.n	8003074 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	b2da      	uxtb	r2, r3
 8003062:	4908      	ldr	r1, [pc, #32]	; (8003084 <__NVIC_SetPriority+0x50>)
 8003064:	79fb      	ldrb	r3, [r7, #7]
 8003066:	f003 030f 	and.w	r3, r3, #15
 800306a:	3b04      	subs	r3, #4
 800306c:	0112      	lsls	r2, r2, #4
 800306e:	b2d2      	uxtb	r2, r2
 8003070:	440b      	add	r3, r1
 8003072:	761a      	strb	r2, [r3, #24]
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr
 8003080:	e000e100 	.word	0xe000e100
 8003084:	e000ed00 	.word	0xe000ed00

08003088 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003088:	b480      	push	{r7}
 800308a:	b089      	sub	sp, #36	; 0x24
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f003 0307 	and.w	r3, r3, #7
 800309a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	f1c3 0307 	rsb	r3, r3, #7
 80030a2:	2b04      	cmp	r3, #4
 80030a4:	bf28      	it	cs
 80030a6:	2304      	movcs	r3, #4
 80030a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	3304      	adds	r3, #4
 80030ae:	2b06      	cmp	r3, #6
 80030b0:	d902      	bls.n	80030b8 <NVIC_EncodePriority+0x30>
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	3b03      	subs	r3, #3
 80030b6:	e000      	b.n	80030ba <NVIC_EncodePriority+0x32>
 80030b8:	2300      	movs	r3, #0
 80030ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030bc:	f04f 32ff 	mov.w	r2, #4294967295
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	fa02 f303 	lsl.w	r3, r2, r3
 80030c6:	43da      	mvns	r2, r3
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	401a      	ands	r2, r3
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030d0:	f04f 31ff 	mov.w	r1, #4294967295
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	fa01 f303 	lsl.w	r3, r1, r3
 80030da:	43d9      	mvns	r1, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030e0:	4313      	orrs	r3, r2
         );
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3724      	adds	r7, #36	; 0x24
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
	...

080030f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	3b01      	subs	r3, #1
 80030fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003100:	d301      	bcc.n	8003106 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003102:	2301      	movs	r3, #1
 8003104:	e00f      	b.n	8003126 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003106:	4a0a      	ldr	r2, [pc, #40]	; (8003130 <SysTick_Config+0x40>)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	3b01      	subs	r3, #1
 800310c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800310e:	210f      	movs	r1, #15
 8003110:	f04f 30ff 	mov.w	r0, #4294967295
 8003114:	f7ff ff8e 	bl	8003034 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003118:	4b05      	ldr	r3, [pc, #20]	; (8003130 <SysTick_Config+0x40>)
 800311a:	2200      	movs	r2, #0
 800311c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800311e:	4b04      	ldr	r3, [pc, #16]	; (8003130 <SysTick_Config+0x40>)
 8003120:	2207      	movs	r2, #7
 8003122:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	e000e010 	.word	0xe000e010

08003134 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f7ff ff29 	bl	8002f94 <__NVIC_SetPriorityGrouping>
}
 8003142:	bf00      	nop
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b086      	sub	sp, #24
 800314e:	af00      	add	r7, sp, #0
 8003150:	4603      	mov	r3, r0
 8003152:	60b9      	str	r1, [r7, #8]
 8003154:	607a      	str	r2, [r7, #4]
 8003156:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003158:	2300      	movs	r3, #0
 800315a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800315c:	f7ff ff3e 	bl	8002fdc <__NVIC_GetPriorityGrouping>
 8003160:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	68b9      	ldr	r1, [r7, #8]
 8003166:	6978      	ldr	r0, [r7, #20]
 8003168:	f7ff ff8e 	bl	8003088 <NVIC_EncodePriority>
 800316c:	4602      	mov	r2, r0
 800316e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003172:	4611      	mov	r1, r2
 8003174:	4618      	mov	r0, r3
 8003176:	f7ff ff5d 	bl	8003034 <__NVIC_SetPriority>
}
 800317a:	bf00      	nop
 800317c:	3718      	adds	r7, #24
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b082      	sub	sp, #8
 8003186:	af00      	add	r7, sp, #0
 8003188:	4603      	mov	r3, r0
 800318a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800318c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003190:	4618      	mov	r0, r3
 8003192:	f7ff ff31 	bl	8002ff8 <__NVIC_EnableIRQ>
}
 8003196:	bf00      	nop
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b082      	sub	sp, #8
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f7ff ffa2 	bl	80030f0 <SysTick_Config>
 80031ac:	4603      	mov	r3, r0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b084      	sub	sp, #16
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031be:	2300      	movs	r3, #0
 80031c0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d005      	beq.n	80031da <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2204      	movs	r2, #4
 80031d2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	73fb      	strb	r3, [r7, #15]
 80031d8:	e029      	b.n	800322e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f022 020e 	bic.w	r2, r2, #14
 80031e8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 0201 	bic.w	r2, r2, #1
 80031f8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fe:	f003 021c 	and.w	r2, r3, #28
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	2101      	movs	r1, #1
 8003208:	fa01 f202 	lsl.w	r2, r1, r2
 800320c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003222:	2b00      	cmp	r3, #0
 8003224:	d003      	beq.n	800322e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	4798      	blx	r3
    }
  }
  return status;
 800322e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003230:	4618      	mov	r0, r3
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003238:	b480      	push	{r7}
 800323a:	b087      	sub	sp, #28
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003242:	2300      	movs	r3, #0
 8003244:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003246:	e17f      	b.n	8003548 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	2101      	movs	r1, #1
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	fa01 f303 	lsl.w	r3, r1, r3
 8003254:	4013      	ands	r3, r2
 8003256:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2b00      	cmp	r3, #0
 800325c:	f000 8171 	beq.w	8003542 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f003 0303 	and.w	r3, r3, #3
 8003268:	2b01      	cmp	r3, #1
 800326a:	d005      	beq.n	8003278 <HAL_GPIO_Init+0x40>
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f003 0303 	and.w	r3, r3, #3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d130      	bne.n	80032da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	2203      	movs	r2, #3
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	43db      	mvns	r3, r3
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	4013      	ands	r3, r2
 800328e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	68da      	ldr	r2, [r3, #12]
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	4313      	orrs	r3, r2
 80032a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032ae:	2201      	movs	r2, #1
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	43db      	mvns	r3, r3
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	4013      	ands	r3, r2
 80032bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	091b      	lsrs	r3, r3, #4
 80032c4:	f003 0201 	and.w	r2, r3, #1
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	fa02 f303 	lsl.w	r3, r2, r3
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f003 0303 	and.w	r3, r3, #3
 80032e2:	2b03      	cmp	r3, #3
 80032e4:	d118      	bne.n	8003318 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80032ec:	2201      	movs	r2, #1
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	43db      	mvns	r3, r3
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	4013      	ands	r3, r2
 80032fa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	08db      	lsrs	r3, r3, #3
 8003302:	f003 0201 	and.w	r2, r3, #1
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	4313      	orrs	r3, r2
 8003310:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f003 0303 	and.w	r3, r3, #3
 8003320:	2b03      	cmp	r3, #3
 8003322:	d017      	beq.n	8003354 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	2203      	movs	r2, #3
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	43db      	mvns	r3, r3
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	4013      	ands	r3, r2
 800333a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	4313      	orrs	r3, r2
 800334c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f003 0303 	and.w	r3, r3, #3
 800335c:	2b02      	cmp	r3, #2
 800335e:	d123      	bne.n	80033a8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	08da      	lsrs	r2, r3, #3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	3208      	adds	r2, #8
 8003368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800336c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	f003 0307 	and.w	r3, r3, #7
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	220f      	movs	r2, #15
 8003378:	fa02 f303 	lsl.w	r3, r2, r3
 800337c:	43db      	mvns	r3, r3
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	4013      	ands	r3, r2
 8003382:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	691a      	ldr	r2, [r3, #16]
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	f003 0307 	and.w	r3, r3, #7
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	4313      	orrs	r3, r2
 8003398:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	08da      	lsrs	r2, r3, #3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	3208      	adds	r2, #8
 80033a2:	6939      	ldr	r1, [r7, #16]
 80033a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	2203      	movs	r2, #3
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	43db      	mvns	r3, r3
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	4013      	ands	r3, r2
 80033be:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f003 0203 	and.w	r2, r3, #3
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	fa02 f303 	lsl.w	r3, r2, r3
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f000 80ac 	beq.w	8003542 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033ea:	4b5f      	ldr	r3, [pc, #380]	; (8003568 <HAL_GPIO_Init+0x330>)
 80033ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033ee:	4a5e      	ldr	r2, [pc, #376]	; (8003568 <HAL_GPIO_Init+0x330>)
 80033f0:	f043 0301 	orr.w	r3, r3, #1
 80033f4:	6613      	str	r3, [r2, #96]	; 0x60
 80033f6:	4b5c      	ldr	r3, [pc, #368]	; (8003568 <HAL_GPIO_Init+0x330>)
 80033f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	60bb      	str	r3, [r7, #8]
 8003400:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003402:	4a5a      	ldr	r2, [pc, #360]	; (800356c <HAL_GPIO_Init+0x334>)
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	089b      	lsrs	r3, r3, #2
 8003408:	3302      	adds	r3, #2
 800340a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800340e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	f003 0303 	and.w	r3, r3, #3
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	220f      	movs	r2, #15
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	43db      	mvns	r3, r3
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	4013      	ands	r3, r2
 8003424:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800342c:	d025      	beq.n	800347a <HAL_GPIO_Init+0x242>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a4f      	ldr	r2, [pc, #316]	; (8003570 <HAL_GPIO_Init+0x338>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d01f      	beq.n	8003476 <HAL_GPIO_Init+0x23e>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a4e      	ldr	r2, [pc, #312]	; (8003574 <HAL_GPIO_Init+0x33c>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d019      	beq.n	8003472 <HAL_GPIO_Init+0x23a>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a4d      	ldr	r2, [pc, #308]	; (8003578 <HAL_GPIO_Init+0x340>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d013      	beq.n	800346e <HAL_GPIO_Init+0x236>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a4c      	ldr	r2, [pc, #304]	; (800357c <HAL_GPIO_Init+0x344>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d00d      	beq.n	800346a <HAL_GPIO_Init+0x232>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a4b      	ldr	r2, [pc, #300]	; (8003580 <HAL_GPIO_Init+0x348>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d007      	beq.n	8003466 <HAL_GPIO_Init+0x22e>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a4a      	ldr	r2, [pc, #296]	; (8003584 <HAL_GPIO_Init+0x34c>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d101      	bne.n	8003462 <HAL_GPIO_Init+0x22a>
 800345e:	2306      	movs	r3, #6
 8003460:	e00c      	b.n	800347c <HAL_GPIO_Init+0x244>
 8003462:	2307      	movs	r3, #7
 8003464:	e00a      	b.n	800347c <HAL_GPIO_Init+0x244>
 8003466:	2305      	movs	r3, #5
 8003468:	e008      	b.n	800347c <HAL_GPIO_Init+0x244>
 800346a:	2304      	movs	r3, #4
 800346c:	e006      	b.n	800347c <HAL_GPIO_Init+0x244>
 800346e:	2303      	movs	r3, #3
 8003470:	e004      	b.n	800347c <HAL_GPIO_Init+0x244>
 8003472:	2302      	movs	r3, #2
 8003474:	e002      	b.n	800347c <HAL_GPIO_Init+0x244>
 8003476:	2301      	movs	r3, #1
 8003478:	e000      	b.n	800347c <HAL_GPIO_Init+0x244>
 800347a:	2300      	movs	r3, #0
 800347c:	697a      	ldr	r2, [r7, #20]
 800347e:	f002 0203 	and.w	r2, r2, #3
 8003482:	0092      	lsls	r2, r2, #2
 8003484:	4093      	lsls	r3, r2
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	4313      	orrs	r3, r2
 800348a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800348c:	4937      	ldr	r1, [pc, #220]	; (800356c <HAL_GPIO_Init+0x334>)
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	089b      	lsrs	r3, r3, #2
 8003492:	3302      	adds	r3, #2
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800349a:	4b3b      	ldr	r3, [pc, #236]	; (8003588 <HAL_GPIO_Init+0x350>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	43db      	mvns	r3, r3
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	4013      	ands	r3, r2
 80034a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d003      	beq.n	80034be <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80034be:	4a32      	ldr	r2, [pc, #200]	; (8003588 <HAL_GPIO_Init+0x350>)
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80034c4:	4b30      	ldr	r3, [pc, #192]	; (8003588 <HAL_GPIO_Init+0x350>)
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	43db      	mvns	r3, r3
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	4013      	ands	r3, r2
 80034d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d003      	beq.n	80034e8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80034e8:	4a27      	ldr	r2, [pc, #156]	; (8003588 <HAL_GPIO_Init+0x350>)
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80034ee:	4b26      	ldr	r3, [pc, #152]	; (8003588 <HAL_GPIO_Init+0x350>)
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	43db      	mvns	r3, r3
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	4013      	ands	r3, r2
 80034fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	4313      	orrs	r3, r2
 8003510:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003512:	4a1d      	ldr	r2, [pc, #116]	; (8003588 <HAL_GPIO_Init+0x350>)
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003518:	4b1b      	ldr	r3, [pc, #108]	; (8003588 <HAL_GPIO_Init+0x350>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	43db      	mvns	r3, r3
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	4013      	ands	r3, r2
 8003526:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d003      	beq.n	800353c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	4313      	orrs	r3, r2
 800353a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800353c:	4a12      	ldr	r2, [pc, #72]	; (8003588 <HAL_GPIO_Init+0x350>)
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	3301      	adds	r3, #1
 8003546:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	fa22 f303 	lsr.w	r3, r2, r3
 8003552:	2b00      	cmp	r3, #0
 8003554:	f47f ae78 	bne.w	8003248 <HAL_GPIO_Init+0x10>
  }
}
 8003558:	bf00      	nop
 800355a:	bf00      	nop
 800355c:	371c      	adds	r7, #28
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	40021000 	.word	0x40021000
 800356c:	40010000 	.word	0x40010000
 8003570:	48000400 	.word	0x48000400
 8003574:	48000800 	.word	0x48000800
 8003578:	48000c00 	.word	0x48000c00
 800357c:	48001000 	.word	0x48001000
 8003580:	48001400 	.word	0x48001400
 8003584:	48001800 	.word	0x48001800
 8003588:	40010400 	.word	0x40010400

0800358c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	460b      	mov	r3, r1
 8003596:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	691a      	ldr	r2, [r3, #16]
 800359c:	887b      	ldrh	r3, [r7, #2]
 800359e:	4013      	ands	r3, r2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d002      	beq.n	80035aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035a4:	2301      	movs	r3, #1
 80035a6:	73fb      	strb	r3, [r7, #15]
 80035a8:	e001      	b.n	80035ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035aa:	2300      	movs	r3, #0
 80035ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3714      	adds	r7, #20
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	460b      	mov	r3, r1
 80035c6:	807b      	strh	r3, [r7, #2]
 80035c8:	4613      	mov	r3, r2
 80035ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035cc:	787b      	ldrb	r3, [r7, #1]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d003      	beq.n	80035da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035d2:	887a      	ldrh	r2, [r7, #2]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035d8:	e002      	b.n	80035e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035da:	887a      	ldrh	r2, [r7, #2]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	4603      	mov	r3, r0
 80035f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80035f6:	4b08      	ldr	r3, [pc, #32]	; (8003618 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035f8:	695a      	ldr	r2, [r3, #20]
 80035fa:	88fb      	ldrh	r3, [r7, #6]
 80035fc:	4013      	ands	r3, r2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d006      	beq.n	8003610 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003602:	4a05      	ldr	r2, [pc, #20]	; (8003618 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003604:	88fb      	ldrh	r3, [r7, #6]
 8003606:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003608:	88fb      	ldrh	r3, [r7, #6]
 800360a:	4618      	mov	r0, r3
 800360c:	f000 f806 	bl	800361c <HAL_GPIO_EXTI_Callback>
  }
}
 8003610:	bf00      	nop
 8003612:	3708      	adds	r7, #8
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	40010400 	.word	0x40010400

0800361c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	4603      	mov	r3, r0
 8003624:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003626:	bf00      	nop
 8003628:	370c      	adds	r7, #12
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
	...

08003634 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003638:	4b04      	ldr	r3, [pc, #16]	; (800364c <HAL_PWREx_GetVoltageRange+0x18>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003640:	4618      	mov	r0, r3
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	40007000 	.word	0x40007000

08003650 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003650:	b480      	push	{r7}
 8003652:	b085      	sub	sp, #20
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800365e:	d130      	bne.n	80036c2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003660:	4b23      	ldr	r3, [pc, #140]	; (80036f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003668:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800366c:	d038      	beq.n	80036e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800366e:	4b20      	ldr	r3, [pc, #128]	; (80036f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003676:	4a1e      	ldr	r2, [pc, #120]	; (80036f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003678:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800367c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800367e:	4b1d      	ldr	r3, [pc, #116]	; (80036f4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2232      	movs	r2, #50	; 0x32
 8003684:	fb02 f303 	mul.w	r3, r2, r3
 8003688:	4a1b      	ldr	r2, [pc, #108]	; (80036f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800368a:	fba2 2303 	umull	r2, r3, r2, r3
 800368e:	0c9b      	lsrs	r3, r3, #18
 8003690:	3301      	adds	r3, #1
 8003692:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003694:	e002      	b.n	800369c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	3b01      	subs	r3, #1
 800369a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800369c:	4b14      	ldr	r3, [pc, #80]	; (80036f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036a8:	d102      	bne.n	80036b0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1f2      	bne.n	8003696 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036b0:	4b0f      	ldr	r3, [pc, #60]	; (80036f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036b2:	695b      	ldr	r3, [r3, #20]
 80036b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036bc:	d110      	bne.n	80036e0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e00f      	b.n	80036e2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80036c2:	4b0b      	ldr	r3, [pc, #44]	; (80036f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ce:	d007      	beq.n	80036e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80036d0:	4b07      	ldr	r3, [pc, #28]	; (80036f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036d8:	4a05      	ldr	r2, [pc, #20]	; (80036f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036de:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3714      	adds	r7, #20
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	40007000 	.word	0x40007000
 80036f4:	20000000 	.word	0x20000000
 80036f8:	431bde83 	.word	0x431bde83

080036fc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b088      	sub	sp, #32
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e3ca      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800370e:	4b97      	ldr	r3, [pc, #604]	; (800396c <HAL_RCC_OscConfig+0x270>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f003 030c 	and.w	r3, r3, #12
 8003716:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003718:	4b94      	ldr	r3, [pc, #592]	; (800396c <HAL_RCC_OscConfig+0x270>)
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	f003 0303 	and.w	r3, r3, #3
 8003720:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0310 	and.w	r3, r3, #16
 800372a:	2b00      	cmp	r3, #0
 800372c:	f000 80e4 	beq.w	80038f8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d007      	beq.n	8003746 <HAL_RCC_OscConfig+0x4a>
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	2b0c      	cmp	r3, #12
 800373a:	f040 808b 	bne.w	8003854 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	2b01      	cmp	r3, #1
 8003742:	f040 8087 	bne.w	8003854 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003746:	4b89      	ldr	r3, [pc, #548]	; (800396c <HAL_RCC_OscConfig+0x270>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d005      	beq.n	800375e <HAL_RCC_OscConfig+0x62>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e3a2      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a1a      	ldr	r2, [r3, #32]
 8003762:	4b82      	ldr	r3, [pc, #520]	; (800396c <HAL_RCC_OscConfig+0x270>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0308 	and.w	r3, r3, #8
 800376a:	2b00      	cmp	r3, #0
 800376c:	d004      	beq.n	8003778 <HAL_RCC_OscConfig+0x7c>
 800376e:	4b7f      	ldr	r3, [pc, #508]	; (800396c <HAL_RCC_OscConfig+0x270>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003776:	e005      	b.n	8003784 <HAL_RCC_OscConfig+0x88>
 8003778:	4b7c      	ldr	r3, [pc, #496]	; (800396c <HAL_RCC_OscConfig+0x270>)
 800377a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800377e:	091b      	lsrs	r3, r3, #4
 8003780:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003784:	4293      	cmp	r3, r2
 8003786:	d223      	bcs.n	80037d0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a1b      	ldr	r3, [r3, #32]
 800378c:	4618      	mov	r0, r3
 800378e:	f000 fd55 	bl	800423c <RCC_SetFlashLatencyFromMSIRange>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e383      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800379c:	4b73      	ldr	r3, [pc, #460]	; (800396c <HAL_RCC_OscConfig+0x270>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a72      	ldr	r2, [pc, #456]	; (800396c <HAL_RCC_OscConfig+0x270>)
 80037a2:	f043 0308 	orr.w	r3, r3, #8
 80037a6:	6013      	str	r3, [r2, #0]
 80037a8:	4b70      	ldr	r3, [pc, #448]	; (800396c <HAL_RCC_OscConfig+0x270>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a1b      	ldr	r3, [r3, #32]
 80037b4:	496d      	ldr	r1, [pc, #436]	; (800396c <HAL_RCC_OscConfig+0x270>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037ba:	4b6c      	ldr	r3, [pc, #432]	; (800396c <HAL_RCC_OscConfig+0x270>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	021b      	lsls	r3, r3, #8
 80037c8:	4968      	ldr	r1, [pc, #416]	; (800396c <HAL_RCC_OscConfig+0x270>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	604b      	str	r3, [r1, #4]
 80037ce:	e025      	b.n	800381c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037d0:	4b66      	ldr	r3, [pc, #408]	; (800396c <HAL_RCC_OscConfig+0x270>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a65      	ldr	r2, [pc, #404]	; (800396c <HAL_RCC_OscConfig+0x270>)
 80037d6:	f043 0308 	orr.w	r3, r3, #8
 80037da:	6013      	str	r3, [r2, #0]
 80037dc:	4b63      	ldr	r3, [pc, #396]	; (800396c <HAL_RCC_OscConfig+0x270>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a1b      	ldr	r3, [r3, #32]
 80037e8:	4960      	ldr	r1, [pc, #384]	; (800396c <HAL_RCC_OscConfig+0x270>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037ee:	4b5f      	ldr	r3, [pc, #380]	; (800396c <HAL_RCC_OscConfig+0x270>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	69db      	ldr	r3, [r3, #28]
 80037fa:	021b      	lsls	r3, r3, #8
 80037fc:	495b      	ldr	r1, [pc, #364]	; (800396c <HAL_RCC_OscConfig+0x270>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d109      	bne.n	800381c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a1b      	ldr	r3, [r3, #32]
 800380c:	4618      	mov	r0, r3
 800380e:	f000 fd15 	bl	800423c <RCC_SetFlashLatencyFromMSIRange>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d001      	beq.n	800381c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e343      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800381c:	f000 fc4a 	bl	80040b4 <HAL_RCC_GetSysClockFreq>
 8003820:	4602      	mov	r2, r0
 8003822:	4b52      	ldr	r3, [pc, #328]	; (800396c <HAL_RCC_OscConfig+0x270>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	091b      	lsrs	r3, r3, #4
 8003828:	f003 030f 	and.w	r3, r3, #15
 800382c:	4950      	ldr	r1, [pc, #320]	; (8003970 <HAL_RCC_OscConfig+0x274>)
 800382e:	5ccb      	ldrb	r3, [r1, r3]
 8003830:	f003 031f 	and.w	r3, r3, #31
 8003834:	fa22 f303 	lsr.w	r3, r2, r3
 8003838:	4a4e      	ldr	r2, [pc, #312]	; (8003974 <HAL_RCC_OscConfig+0x278>)
 800383a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800383c:	4b4e      	ldr	r3, [pc, #312]	; (8003978 <HAL_RCC_OscConfig+0x27c>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4618      	mov	r0, r3
 8003842:	f7ff fb27 	bl	8002e94 <HAL_InitTick>
 8003846:	4603      	mov	r3, r0
 8003848:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800384a:	7bfb      	ldrb	r3, [r7, #15]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d052      	beq.n	80038f6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003850:	7bfb      	ldrb	r3, [r7, #15]
 8003852:	e327      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d032      	beq.n	80038c2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800385c:	4b43      	ldr	r3, [pc, #268]	; (800396c <HAL_RCC_OscConfig+0x270>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a42      	ldr	r2, [pc, #264]	; (800396c <HAL_RCC_OscConfig+0x270>)
 8003862:	f043 0301 	orr.w	r3, r3, #1
 8003866:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003868:	f7ff fb64 	bl	8002f34 <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800386e:	e008      	b.n	8003882 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003870:	f7ff fb60 	bl	8002f34 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b02      	cmp	r3, #2
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e310      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003882:	4b3a      	ldr	r3, [pc, #232]	; (800396c <HAL_RCC_OscConfig+0x270>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d0f0      	beq.n	8003870 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800388e:	4b37      	ldr	r3, [pc, #220]	; (800396c <HAL_RCC_OscConfig+0x270>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a36      	ldr	r2, [pc, #216]	; (800396c <HAL_RCC_OscConfig+0x270>)
 8003894:	f043 0308 	orr.w	r3, r3, #8
 8003898:	6013      	str	r3, [r2, #0]
 800389a:	4b34      	ldr	r3, [pc, #208]	; (800396c <HAL_RCC_OscConfig+0x270>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	4931      	ldr	r1, [pc, #196]	; (800396c <HAL_RCC_OscConfig+0x270>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038ac:	4b2f      	ldr	r3, [pc, #188]	; (800396c <HAL_RCC_OscConfig+0x270>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	69db      	ldr	r3, [r3, #28]
 80038b8:	021b      	lsls	r3, r3, #8
 80038ba:	492c      	ldr	r1, [pc, #176]	; (800396c <HAL_RCC_OscConfig+0x270>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	604b      	str	r3, [r1, #4]
 80038c0:	e01a      	b.n	80038f8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80038c2:	4b2a      	ldr	r3, [pc, #168]	; (800396c <HAL_RCC_OscConfig+0x270>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a29      	ldr	r2, [pc, #164]	; (800396c <HAL_RCC_OscConfig+0x270>)
 80038c8:	f023 0301 	bic.w	r3, r3, #1
 80038cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038ce:	f7ff fb31 	bl	8002f34 <HAL_GetTick>
 80038d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038d4:	e008      	b.n	80038e8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038d6:	f7ff fb2d 	bl	8002f34 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d901      	bls.n	80038e8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e2dd      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038e8:	4b20      	ldr	r3, [pc, #128]	; (800396c <HAL_RCC_OscConfig+0x270>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d1f0      	bne.n	80038d6 <HAL_RCC_OscConfig+0x1da>
 80038f4:	e000      	b.n	80038f8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038f6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0301 	and.w	r3, r3, #1
 8003900:	2b00      	cmp	r3, #0
 8003902:	d074      	beq.n	80039ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	2b08      	cmp	r3, #8
 8003908:	d005      	beq.n	8003916 <HAL_RCC_OscConfig+0x21a>
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	2b0c      	cmp	r3, #12
 800390e:	d10e      	bne.n	800392e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	2b03      	cmp	r3, #3
 8003914:	d10b      	bne.n	800392e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003916:	4b15      	ldr	r3, [pc, #84]	; (800396c <HAL_RCC_OscConfig+0x270>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d064      	beq.n	80039ec <HAL_RCC_OscConfig+0x2f0>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d160      	bne.n	80039ec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e2ba      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003936:	d106      	bne.n	8003946 <HAL_RCC_OscConfig+0x24a>
 8003938:	4b0c      	ldr	r3, [pc, #48]	; (800396c <HAL_RCC_OscConfig+0x270>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a0b      	ldr	r2, [pc, #44]	; (800396c <HAL_RCC_OscConfig+0x270>)
 800393e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003942:	6013      	str	r3, [r2, #0]
 8003944:	e026      	b.n	8003994 <HAL_RCC_OscConfig+0x298>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800394e:	d115      	bne.n	800397c <HAL_RCC_OscConfig+0x280>
 8003950:	4b06      	ldr	r3, [pc, #24]	; (800396c <HAL_RCC_OscConfig+0x270>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a05      	ldr	r2, [pc, #20]	; (800396c <HAL_RCC_OscConfig+0x270>)
 8003956:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800395a:	6013      	str	r3, [r2, #0]
 800395c:	4b03      	ldr	r3, [pc, #12]	; (800396c <HAL_RCC_OscConfig+0x270>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a02      	ldr	r2, [pc, #8]	; (800396c <HAL_RCC_OscConfig+0x270>)
 8003962:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003966:	6013      	str	r3, [r2, #0]
 8003968:	e014      	b.n	8003994 <HAL_RCC_OscConfig+0x298>
 800396a:	bf00      	nop
 800396c:	40021000 	.word	0x40021000
 8003970:	08009994 	.word	0x08009994
 8003974:	20000000 	.word	0x20000000
 8003978:	20000004 	.word	0x20000004
 800397c:	4ba0      	ldr	r3, [pc, #640]	; (8003c00 <HAL_RCC_OscConfig+0x504>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a9f      	ldr	r2, [pc, #636]	; (8003c00 <HAL_RCC_OscConfig+0x504>)
 8003982:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003986:	6013      	str	r3, [r2, #0]
 8003988:	4b9d      	ldr	r3, [pc, #628]	; (8003c00 <HAL_RCC_OscConfig+0x504>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a9c      	ldr	r2, [pc, #624]	; (8003c00 <HAL_RCC_OscConfig+0x504>)
 800398e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003992:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d013      	beq.n	80039c4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399c:	f7ff faca 	bl	8002f34 <HAL_GetTick>
 80039a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039a4:	f7ff fac6 	bl	8002f34 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b64      	cmp	r3, #100	; 0x64
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e276      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039b6:	4b92      	ldr	r3, [pc, #584]	; (8003c00 <HAL_RCC_OscConfig+0x504>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d0f0      	beq.n	80039a4 <HAL_RCC_OscConfig+0x2a8>
 80039c2:	e014      	b.n	80039ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c4:	f7ff fab6 	bl	8002f34 <HAL_GetTick>
 80039c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039cc:	f7ff fab2 	bl	8002f34 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b64      	cmp	r3, #100	; 0x64
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e262      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039de:	4b88      	ldr	r3, [pc, #544]	; (8003c00 <HAL_RCC_OscConfig+0x504>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1f0      	bne.n	80039cc <HAL_RCC_OscConfig+0x2d0>
 80039ea:	e000      	b.n	80039ee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d060      	beq.n	8003abc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	2b04      	cmp	r3, #4
 80039fe:	d005      	beq.n	8003a0c <HAL_RCC_OscConfig+0x310>
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	2b0c      	cmp	r3, #12
 8003a04:	d119      	bne.n	8003a3a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d116      	bne.n	8003a3a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a0c:	4b7c      	ldr	r3, [pc, #496]	; (8003c00 <HAL_RCC_OscConfig+0x504>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d005      	beq.n	8003a24 <HAL_RCC_OscConfig+0x328>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d101      	bne.n	8003a24 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e23f      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a24:	4b76      	ldr	r3, [pc, #472]	; (8003c00 <HAL_RCC_OscConfig+0x504>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	061b      	lsls	r3, r3, #24
 8003a32:	4973      	ldr	r1, [pc, #460]	; (8003c00 <HAL_RCC_OscConfig+0x504>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a38:	e040      	b.n	8003abc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d023      	beq.n	8003a8a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a42:	4b6f      	ldr	r3, [pc, #444]	; (8003c00 <HAL_RCC_OscConfig+0x504>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a6e      	ldr	r2, [pc, #440]	; (8003c00 <HAL_RCC_OscConfig+0x504>)
 8003a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a4e:	f7ff fa71 	bl	8002f34 <HAL_GetTick>
 8003a52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a54:	e008      	b.n	8003a68 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a56:	f7ff fa6d 	bl	8002f34 <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d901      	bls.n	8003a68 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e21d      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a68:	4b65      	ldr	r3, [pc, #404]	; (8003c00 <HAL_RCC_OscConfig+0x504>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d0f0      	beq.n	8003a56 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a74:	4b62      	ldr	r3, [pc, #392]	; (8003c00 <HAL_RCC_OscConfig+0x504>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	061b      	lsls	r3, r3, #24
 8003a82:	495f      	ldr	r1, [pc, #380]	; (8003c00 <HAL_RCC_OscConfig+0x504>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	604b      	str	r3, [r1, #4]
 8003a88:	e018      	b.n	8003abc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a8a:	4b5d      	ldr	r3, [pc, #372]	; (8003c00 <HAL_RCC_OscConfig+0x504>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a5c      	ldr	r2, [pc, #368]	; (8003c00 <HAL_RCC_OscConfig+0x504>)
 8003a90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a96:	f7ff fa4d 	bl	8002f34 <HAL_GetTick>
 8003a9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a9c:	e008      	b.n	8003ab0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a9e:	f7ff fa49 	bl	8002f34 <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d901      	bls.n	8003ab0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e1f9      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ab0:	4b53      	ldr	r3, [pc, #332]	; (8003c00 <HAL_RCC_OscConfig+0x504>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d1f0      	bne.n	8003a9e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0308 	and.w	r3, r3, #8
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d03c      	beq.n	8003b42 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	695b      	ldr	r3, [r3, #20]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d01c      	beq.n	8003b0a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ad0:	4b4b      	ldr	r3, [pc, #300]	; (8003c00 <HAL_RCC_OscConfig+0x504>)
 8003ad2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ad6:	4a4a      	ldr	r2, [pc, #296]	; (8003c00 <HAL_RCC_OscConfig+0x504>)
 8003ad8:	f043 0301 	orr.w	r3, r3, #1
 8003adc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ae0:	f7ff fa28 	bl	8002f34 <HAL_GetTick>
 8003ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ae6:	e008      	b.n	8003afa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ae8:	f7ff fa24 	bl	8002f34 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e1d4      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003afa:	4b41      	ldr	r3, [pc, #260]	; (8003c00 <HAL_RCC_OscConfig+0x504>)
 8003afc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d0ef      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x3ec>
 8003b08:	e01b      	b.n	8003b42 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b0a:	4b3d      	ldr	r3, [pc, #244]	; (8003c00 <HAL_RCC_OscConfig+0x504>)
 8003b0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b10:	4a3b      	ldr	r2, [pc, #236]	; (8003c00 <HAL_RCC_OscConfig+0x504>)
 8003b12:	f023 0301 	bic.w	r3, r3, #1
 8003b16:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b1a:	f7ff fa0b 	bl	8002f34 <HAL_GetTick>
 8003b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b20:	e008      	b.n	8003b34 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b22:	f7ff fa07 	bl	8002f34 <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d901      	bls.n	8003b34 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e1b7      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b34:	4b32      	ldr	r3, [pc, #200]	; (8003c00 <HAL_RCC_OscConfig+0x504>)
 8003b36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1ef      	bne.n	8003b22 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0304 	and.w	r3, r3, #4
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f000 80a6 	beq.w	8003c9c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b50:	2300      	movs	r3, #0
 8003b52:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003b54:	4b2a      	ldr	r3, [pc, #168]	; (8003c00 <HAL_RCC_OscConfig+0x504>)
 8003b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d10d      	bne.n	8003b7c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b60:	4b27      	ldr	r3, [pc, #156]	; (8003c00 <HAL_RCC_OscConfig+0x504>)
 8003b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b64:	4a26      	ldr	r2, [pc, #152]	; (8003c00 <HAL_RCC_OscConfig+0x504>)
 8003b66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b6a:	6593      	str	r3, [r2, #88]	; 0x58
 8003b6c:	4b24      	ldr	r3, [pc, #144]	; (8003c00 <HAL_RCC_OscConfig+0x504>)
 8003b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b74:	60bb      	str	r3, [r7, #8]
 8003b76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b7c:	4b21      	ldr	r3, [pc, #132]	; (8003c04 <HAL_RCC_OscConfig+0x508>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d118      	bne.n	8003bba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b88:	4b1e      	ldr	r3, [pc, #120]	; (8003c04 <HAL_RCC_OscConfig+0x508>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a1d      	ldr	r2, [pc, #116]	; (8003c04 <HAL_RCC_OscConfig+0x508>)
 8003b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b92:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b94:	f7ff f9ce 	bl	8002f34 <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b9c:	f7ff f9ca 	bl	8002f34 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e17a      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bae:	4b15      	ldr	r3, [pc, #84]	; (8003c04 <HAL_RCC_OscConfig+0x508>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d0f0      	beq.n	8003b9c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d108      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x4d8>
 8003bc2:	4b0f      	ldr	r3, [pc, #60]	; (8003c00 <HAL_RCC_OscConfig+0x504>)
 8003bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc8:	4a0d      	ldr	r2, [pc, #52]	; (8003c00 <HAL_RCC_OscConfig+0x504>)
 8003bca:	f043 0301 	orr.w	r3, r3, #1
 8003bce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bd2:	e029      	b.n	8003c28 <HAL_RCC_OscConfig+0x52c>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	2b05      	cmp	r3, #5
 8003bda:	d115      	bne.n	8003c08 <HAL_RCC_OscConfig+0x50c>
 8003bdc:	4b08      	ldr	r3, [pc, #32]	; (8003c00 <HAL_RCC_OscConfig+0x504>)
 8003bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be2:	4a07      	ldr	r2, [pc, #28]	; (8003c00 <HAL_RCC_OscConfig+0x504>)
 8003be4:	f043 0304 	orr.w	r3, r3, #4
 8003be8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bec:	4b04      	ldr	r3, [pc, #16]	; (8003c00 <HAL_RCC_OscConfig+0x504>)
 8003bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf2:	4a03      	ldr	r2, [pc, #12]	; (8003c00 <HAL_RCC_OscConfig+0x504>)
 8003bf4:	f043 0301 	orr.w	r3, r3, #1
 8003bf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bfc:	e014      	b.n	8003c28 <HAL_RCC_OscConfig+0x52c>
 8003bfe:	bf00      	nop
 8003c00:	40021000 	.word	0x40021000
 8003c04:	40007000 	.word	0x40007000
 8003c08:	4b9c      	ldr	r3, [pc, #624]	; (8003e7c <HAL_RCC_OscConfig+0x780>)
 8003c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0e:	4a9b      	ldr	r2, [pc, #620]	; (8003e7c <HAL_RCC_OscConfig+0x780>)
 8003c10:	f023 0301 	bic.w	r3, r3, #1
 8003c14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c18:	4b98      	ldr	r3, [pc, #608]	; (8003e7c <HAL_RCC_OscConfig+0x780>)
 8003c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c1e:	4a97      	ldr	r2, [pc, #604]	; (8003e7c <HAL_RCC_OscConfig+0x780>)
 8003c20:	f023 0304 	bic.w	r3, r3, #4
 8003c24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d016      	beq.n	8003c5e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c30:	f7ff f980 	bl	8002f34 <HAL_GetTick>
 8003c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c36:	e00a      	b.n	8003c4e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c38:	f7ff f97c 	bl	8002f34 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e12a      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c4e:	4b8b      	ldr	r3, [pc, #556]	; (8003e7c <HAL_RCC_OscConfig+0x780>)
 8003c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d0ed      	beq.n	8003c38 <HAL_RCC_OscConfig+0x53c>
 8003c5c:	e015      	b.n	8003c8a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c5e:	f7ff f969 	bl	8002f34 <HAL_GetTick>
 8003c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c64:	e00a      	b.n	8003c7c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c66:	f7ff f965 	bl	8002f34 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d901      	bls.n	8003c7c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e113      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c7c:	4b7f      	ldr	r3, [pc, #508]	; (8003e7c <HAL_RCC_OscConfig+0x780>)
 8003c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1ed      	bne.n	8003c66 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c8a:	7ffb      	ldrb	r3, [r7, #31]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d105      	bne.n	8003c9c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c90:	4b7a      	ldr	r3, [pc, #488]	; (8003e7c <HAL_RCC_OscConfig+0x780>)
 8003c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c94:	4a79      	ldr	r2, [pc, #484]	; (8003e7c <HAL_RCC_OscConfig+0x780>)
 8003c96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c9a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f000 80fe 	beq.w	8003ea2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	f040 80d0 	bne.w	8003e50 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003cb0:	4b72      	ldr	r3, [pc, #456]	; (8003e7c <HAL_RCC_OscConfig+0x780>)
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	f003 0203 	and.w	r2, r3, #3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d130      	bne.n	8003d26 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d127      	bne.n	8003d26 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ce0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d11f      	bne.n	8003d26 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003cf0:	2a07      	cmp	r2, #7
 8003cf2:	bf14      	ite	ne
 8003cf4:	2201      	movne	r2, #1
 8003cf6:	2200      	moveq	r2, #0
 8003cf8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d113      	bne.n	8003d26 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d08:	085b      	lsrs	r3, r3, #1
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d109      	bne.n	8003d26 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1c:	085b      	lsrs	r3, r3, #1
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d06e      	beq.n	8003e04 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	2b0c      	cmp	r3, #12
 8003d2a:	d069      	beq.n	8003e00 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003d2c:	4b53      	ldr	r3, [pc, #332]	; (8003e7c <HAL_RCC_OscConfig+0x780>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d105      	bne.n	8003d44 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003d38:	4b50      	ldr	r3, [pc, #320]	; (8003e7c <HAL_RCC_OscConfig+0x780>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e0ad      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003d48:	4b4c      	ldr	r3, [pc, #304]	; (8003e7c <HAL_RCC_OscConfig+0x780>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a4b      	ldr	r2, [pc, #300]	; (8003e7c <HAL_RCC_OscConfig+0x780>)
 8003d4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d52:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d54:	f7ff f8ee 	bl	8002f34 <HAL_GetTick>
 8003d58:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d5a:	e008      	b.n	8003d6e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d5c:	f7ff f8ea 	bl	8002f34 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e09a      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d6e:	4b43      	ldr	r3, [pc, #268]	; (8003e7c <HAL_RCC_OscConfig+0x780>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1f0      	bne.n	8003d5c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d7a:	4b40      	ldr	r3, [pc, #256]	; (8003e7c <HAL_RCC_OscConfig+0x780>)
 8003d7c:	68da      	ldr	r2, [r3, #12]
 8003d7e:	4b40      	ldr	r3, [pc, #256]	; (8003e80 <HAL_RCC_OscConfig+0x784>)
 8003d80:	4013      	ands	r3, r2
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003d8a:	3a01      	subs	r2, #1
 8003d8c:	0112      	lsls	r2, r2, #4
 8003d8e:	4311      	orrs	r1, r2
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d94:	0212      	lsls	r2, r2, #8
 8003d96:	4311      	orrs	r1, r2
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003d9c:	0852      	lsrs	r2, r2, #1
 8003d9e:	3a01      	subs	r2, #1
 8003da0:	0552      	lsls	r2, r2, #21
 8003da2:	4311      	orrs	r1, r2
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003da8:	0852      	lsrs	r2, r2, #1
 8003daa:	3a01      	subs	r2, #1
 8003dac:	0652      	lsls	r2, r2, #25
 8003dae:	4311      	orrs	r1, r2
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003db4:	0912      	lsrs	r2, r2, #4
 8003db6:	0452      	lsls	r2, r2, #17
 8003db8:	430a      	orrs	r2, r1
 8003dba:	4930      	ldr	r1, [pc, #192]	; (8003e7c <HAL_RCC_OscConfig+0x780>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003dc0:	4b2e      	ldr	r3, [pc, #184]	; (8003e7c <HAL_RCC_OscConfig+0x780>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a2d      	ldr	r2, [pc, #180]	; (8003e7c <HAL_RCC_OscConfig+0x780>)
 8003dc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003dcc:	4b2b      	ldr	r3, [pc, #172]	; (8003e7c <HAL_RCC_OscConfig+0x780>)
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	4a2a      	ldr	r2, [pc, #168]	; (8003e7c <HAL_RCC_OscConfig+0x780>)
 8003dd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dd6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003dd8:	f7ff f8ac 	bl	8002f34 <HAL_GetTick>
 8003ddc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dde:	e008      	b.n	8003df2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003de0:	f7ff f8a8 	bl	8002f34 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d901      	bls.n	8003df2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e058      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003df2:	4b22      	ldr	r3, [pc, #136]	; (8003e7c <HAL_RCC_OscConfig+0x780>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d0f0      	beq.n	8003de0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003dfe:	e050      	b.n	8003ea2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e04f      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e04:	4b1d      	ldr	r3, [pc, #116]	; (8003e7c <HAL_RCC_OscConfig+0x780>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d148      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003e10:	4b1a      	ldr	r3, [pc, #104]	; (8003e7c <HAL_RCC_OscConfig+0x780>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a19      	ldr	r2, [pc, #100]	; (8003e7c <HAL_RCC_OscConfig+0x780>)
 8003e16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e1a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e1c:	4b17      	ldr	r3, [pc, #92]	; (8003e7c <HAL_RCC_OscConfig+0x780>)
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	4a16      	ldr	r2, [pc, #88]	; (8003e7c <HAL_RCC_OscConfig+0x780>)
 8003e22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e26:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e28:	f7ff f884 	bl	8002f34 <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e2e:	e008      	b.n	8003e42 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e30:	f7ff f880 	bl	8002f34 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e030      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e42:	4b0e      	ldr	r3, [pc, #56]	; (8003e7c <HAL_RCC_OscConfig+0x780>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d0f0      	beq.n	8003e30 <HAL_RCC_OscConfig+0x734>
 8003e4e:	e028      	b.n	8003ea2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	2b0c      	cmp	r3, #12
 8003e54:	d023      	beq.n	8003e9e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e56:	4b09      	ldr	r3, [pc, #36]	; (8003e7c <HAL_RCC_OscConfig+0x780>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a08      	ldr	r2, [pc, #32]	; (8003e7c <HAL_RCC_OscConfig+0x780>)
 8003e5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e62:	f7ff f867 	bl	8002f34 <HAL_GetTick>
 8003e66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e68:	e00c      	b.n	8003e84 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e6a:	f7ff f863 	bl	8002f34 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d905      	bls.n	8003e84 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e013      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7a8>
 8003e7c:	40021000 	.word	0x40021000
 8003e80:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e84:	4b09      	ldr	r3, [pc, #36]	; (8003eac <HAL_RCC_OscConfig+0x7b0>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1ec      	bne.n	8003e6a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003e90:	4b06      	ldr	r3, [pc, #24]	; (8003eac <HAL_RCC_OscConfig+0x7b0>)
 8003e92:	68da      	ldr	r2, [r3, #12]
 8003e94:	4905      	ldr	r1, [pc, #20]	; (8003eac <HAL_RCC_OscConfig+0x7b0>)
 8003e96:	4b06      	ldr	r3, [pc, #24]	; (8003eb0 <HAL_RCC_OscConfig+0x7b4>)
 8003e98:	4013      	ands	r3, r2
 8003e9a:	60cb      	str	r3, [r1, #12]
 8003e9c:	e001      	b.n	8003ea2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e000      	b.n	8003ea4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3720      	adds	r7, #32
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	40021000 	.word	0x40021000
 8003eb0:	feeefffc 	.word	0xfeeefffc

08003eb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d101      	bne.n	8003ec8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e0e7      	b.n	8004098 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ec8:	4b75      	ldr	r3, [pc, #468]	; (80040a0 <HAL_RCC_ClockConfig+0x1ec>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0307 	and.w	r3, r3, #7
 8003ed0:	683a      	ldr	r2, [r7, #0]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d910      	bls.n	8003ef8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ed6:	4b72      	ldr	r3, [pc, #456]	; (80040a0 <HAL_RCC_ClockConfig+0x1ec>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f023 0207 	bic.w	r2, r3, #7
 8003ede:	4970      	ldr	r1, [pc, #448]	; (80040a0 <HAL_RCC_ClockConfig+0x1ec>)
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ee6:	4b6e      	ldr	r3, [pc, #440]	; (80040a0 <HAL_RCC_ClockConfig+0x1ec>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0307 	and.w	r3, r3, #7
 8003eee:	683a      	ldr	r2, [r7, #0]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d001      	beq.n	8003ef8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e0cf      	b.n	8004098 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d010      	beq.n	8003f26 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689a      	ldr	r2, [r3, #8]
 8003f08:	4b66      	ldr	r3, [pc, #408]	; (80040a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d908      	bls.n	8003f26 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f14:	4b63      	ldr	r3, [pc, #396]	; (80040a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	4960      	ldr	r1, [pc, #384]	; (80040a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d04c      	beq.n	8003fcc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	2b03      	cmp	r3, #3
 8003f38:	d107      	bne.n	8003f4a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f3a:	4b5a      	ldr	r3, [pc, #360]	; (80040a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d121      	bne.n	8003f8a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e0a6      	b.n	8004098 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d107      	bne.n	8003f62 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f52:	4b54      	ldr	r3, [pc, #336]	; (80040a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d115      	bne.n	8003f8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e09a      	b.n	8004098 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d107      	bne.n	8003f7a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f6a:	4b4e      	ldr	r3, [pc, #312]	; (80040a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d109      	bne.n	8003f8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e08e      	b.n	8004098 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f7a:	4b4a      	ldr	r3, [pc, #296]	; (80040a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e086      	b.n	8004098 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f8a:	4b46      	ldr	r3, [pc, #280]	; (80040a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f023 0203 	bic.w	r2, r3, #3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	4943      	ldr	r1, [pc, #268]	; (80040a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f9c:	f7fe ffca 	bl	8002f34 <HAL_GetTick>
 8003fa0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fa2:	e00a      	b.n	8003fba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fa4:	f7fe ffc6 	bl	8002f34 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d901      	bls.n	8003fba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e06e      	b.n	8004098 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fba:	4b3a      	ldr	r3, [pc, #232]	; (80040a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f003 020c 	and.w	r2, r3, #12
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d1eb      	bne.n	8003fa4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0302 	and.w	r3, r3, #2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d010      	beq.n	8003ffa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689a      	ldr	r2, [r3, #8]
 8003fdc:	4b31      	ldr	r3, [pc, #196]	; (80040a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d208      	bcs.n	8003ffa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fe8:	4b2e      	ldr	r3, [pc, #184]	; (80040a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	492b      	ldr	r1, [pc, #172]	; (80040a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ffa:	4b29      	ldr	r3, [pc, #164]	; (80040a0 <HAL_RCC_ClockConfig+0x1ec>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0307 	and.w	r3, r3, #7
 8004002:	683a      	ldr	r2, [r7, #0]
 8004004:	429a      	cmp	r2, r3
 8004006:	d210      	bcs.n	800402a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004008:	4b25      	ldr	r3, [pc, #148]	; (80040a0 <HAL_RCC_ClockConfig+0x1ec>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f023 0207 	bic.w	r2, r3, #7
 8004010:	4923      	ldr	r1, [pc, #140]	; (80040a0 <HAL_RCC_ClockConfig+0x1ec>)
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	4313      	orrs	r3, r2
 8004016:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004018:	4b21      	ldr	r3, [pc, #132]	; (80040a0 <HAL_RCC_ClockConfig+0x1ec>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0307 	and.w	r3, r3, #7
 8004020:	683a      	ldr	r2, [r7, #0]
 8004022:	429a      	cmp	r2, r3
 8004024:	d001      	beq.n	800402a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e036      	b.n	8004098 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0304 	and.w	r3, r3, #4
 8004032:	2b00      	cmp	r3, #0
 8004034:	d008      	beq.n	8004048 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004036:	4b1b      	ldr	r3, [pc, #108]	; (80040a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	4918      	ldr	r1, [pc, #96]	; (80040a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004044:	4313      	orrs	r3, r2
 8004046:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0308 	and.w	r3, r3, #8
 8004050:	2b00      	cmp	r3, #0
 8004052:	d009      	beq.n	8004068 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004054:	4b13      	ldr	r3, [pc, #76]	; (80040a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	00db      	lsls	r3, r3, #3
 8004062:	4910      	ldr	r1, [pc, #64]	; (80040a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004064:	4313      	orrs	r3, r2
 8004066:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004068:	f000 f824 	bl	80040b4 <HAL_RCC_GetSysClockFreq>
 800406c:	4602      	mov	r2, r0
 800406e:	4b0d      	ldr	r3, [pc, #52]	; (80040a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	091b      	lsrs	r3, r3, #4
 8004074:	f003 030f 	and.w	r3, r3, #15
 8004078:	490b      	ldr	r1, [pc, #44]	; (80040a8 <HAL_RCC_ClockConfig+0x1f4>)
 800407a:	5ccb      	ldrb	r3, [r1, r3]
 800407c:	f003 031f 	and.w	r3, r3, #31
 8004080:	fa22 f303 	lsr.w	r3, r2, r3
 8004084:	4a09      	ldr	r2, [pc, #36]	; (80040ac <HAL_RCC_ClockConfig+0x1f8>)
 8004086:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004088:	4b09      	ldr	r3, [pc, #36]	; (80040b0 <HAL_RCC_ClockConfig+0x1fc>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4618      	mov	r0, r3
 800408e:	f7fe ff01 	bl	8002e94 <HAL_InitTick>
 8004092:	4603      	mov	r3, r0
 8004094:	72fb      	strb	r3, [r7, #11]

  return status;
 8004096:	7afb      	ldrb	r3, [r7, #11]
}
 8004098:	4618      	mov	r0, r3
 800409a:	3710      	adds	r7, #16
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	40022000 	.word	0x40022000
 80040a4:	40021000 	.word	0x40021000
 80040a8:	08009994 	.word	0x08009994
 80040ac:	20000000 	.word	0x20000000
 80040b0:	20000004 	.word	0x20000004

080040b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b089      	sub	sp, #36	; 0x24
 80040b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80040ba:	2300      	movs	r3, #0
 80040bc:	61fb      	str	r3, [r7, #28]
 80040be:	2300      	movs	r3, #0
 80040c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040c2:	4b3e      	ldr	r3, [pc, #248]	; (80041bc <HAL_RCC_GetSysClockFreq+0x108>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f003 030c 	and.w	r3, r3, #12
 80040ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040cc:	4b3b      	ldr	r3, [pc, #236]	; (80041bc <HAL_RCC_GetSysClockFreq+0x108>)
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	f003 0303 	and.w	r3, r3, #3
 80040d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d005      	beq.n	80040e8 <HAL_RCC_GetSysClockFreq+0x34>
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	2b0c      	cmp	r3, #12
 80040e0:	d121      	bne.n	8004126 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d11e      	bne.n	8004126 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80040e8:	4b34      	ldr	r3, [pc, #208]	; (80041bc <HAL_RCC_GetSysClockFreq+0x108>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0308 	and.w	r3, r3, #8
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d107      	bne.n	8004104 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80040f4:	4b31      	ldr	r3, [pc, #196]	; (80041bc <HAL_RCC_GetSysClockFreq+0x108>)
 80040f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040fa:	0a1b      	lsrs	r3, r3, #8
 80040fc:	f003 030f 	and.w	r3, r3, #15
 8004100:	61fb      	str	r3, [r7, #28]
 8004102:	e005      	b.n	8004110 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004104:	4b2d      	ldr	r3, [pc, #180]	; (80041bc <HAL_RCC_GetSysClockFreq+0x108>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	091b      	lsrs	r3, r3, #4
 800410a:	f003 030f 	and.w	r3, r3, #15
 800410e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004110:	4a2b      	ldr	r2, [pc, #172]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004118:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d10d      	bne.n	800413c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004124:	e00a      	b.n	800413c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	2b04      	cmp	r3, #4
 800412a:	d102      	bne.n	8004132 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800412c:	4b25      	ldr	r3, [pc, #148]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800412e:	61bb      	str	r3, [r7, #24]
 8004130:	e004      	b.n	800413c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	2b08      	cmp	r3, #8
 8004136:	d101      	bne.n	800413c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004138:	4b23      	ldr	r3, [pc, #140]	; (80041c8 <HAL_RCC_GetSysClockFreq+0x114>)
 800413a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	2b0c      	cmp	r3, #12
 8004140:	d134      	bne.n	80041ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004142:	4b1e      	ldr	r3, [pc, #120]	; (80041bc <HAL_RCC_GetSysClockFreq+0x108>)
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	f003 0303 	and.w	r3, r3, #3
 800414a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	2b02      	cmp	r3, #2
 8004150:	d003      	beq.n	800415a <HAL_RCC_GetSysClockFreq+0xa6>
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	2b03      	cmp	r3, #3
 8004156:	d003      	beq.n	8004160 <HAL_RCC_GetSysClockFreq+0xac>
 8004158:	e005      	b.n	8004166 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800415a:	4b1a      	ldr	r3, [pc, #104]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800415c:	617b      	str	r3, [r7, #20]
      break;
 800415e:	e005      	b.n	800416c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004160:	4b19      	ldr	r3, [pc, #100]	; (80041c8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004162:	617b      	str	r3, [r7, #20]
      break;
 8004164:	e002      	b.n	800416c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	617b      	str	r3, [r7, #20]
      break;
 800416a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800416c:	4b13      	ldr	r3, [pc, #76]	; (80041bc <HAL_RCC_GetSysClockFreq+0x108>)
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	091b      	lsrs	r3, r3, #4
 8004172:	f003 0307 	and.w	r3, r3, #7
 8004176:	3301      	adds	r3, #1
 8004178:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800417a:	4b10      	ldr	r3, [pc, #64]	; (80041bc <HAL_RCC_GetSysClockFreq+0x108>)
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	0a1b      	lsrs	r3, r3, #8
 8004180:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004184:	697a      	ldr	r2, [r7, #20]
 8004186:	fb03 f202 	mul.w	r2, r3, r2
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004190:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004192:	4b0a      	ldr	r3, [pc, #40]	; (80041bc <HAL_RCC_GetSysClockFreq+0x108>)
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	0e5b      	lsrs	r3, r3, #25
 8004198:	f003 0303 	and.w	r3, r3, #3
 800419c:	3301      	adds	r3, #1
 800419e:	005b      	lsls	r3, r3, #1
 80041a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80041ac:	69bb      	ldr	r3, [r7, #24]
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3724      	adds	r7, #36	; 0x24
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	40021000 	.word	0x40021000
 80041c0:	080099ac 	.word	0x080099ac
 80041c4:	00f42400 	.word	0x00f42400
 80041c8:	007a1200 	.word	0x007a1200

080041cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041cc:	b480      	push	{r7}
 80041ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041d0:	4b03      	ldr	r3, [pc, #12]	; (80041e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80041d2:	681b      	ldr	r3, [r3, #0]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	20000000 	.word	0x20000000

080041e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80041e8:	f7ff fff0 	bl	80041cc <HAL_RCC_GetHCLKFreq>
 80041ec:	4602      	mov	r2, r0
 80041ee:	4b06      	ldr	r3, [pc, #24]	; (8004208 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	0a1b      	lsrs	r3, r3, #8
 80041f4:	f003 0307 	and.w	r3, r3, #7
 80041f8:	4904      	ldr	r1, [pc, #16]	; (800420c <HAL_RCC_GetPCLK1Freq+0x28>)
 80041fa:	5ccb      	ldrb	r3, [r1, r3]
 80041fc:	f003 031f 	and.w	r3, r3, #31
 8004200:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004204:	4618      	mov	r0, r3
 8004206:	bd80      	pop	{r7, pc}
 8004208:	40021000 	.word	0x40021000
 800420c:	080099a4 	.word	0x080099a4

08004210 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004214:	f7ff ffda 	bl	80041cc <HAL_RCC_GetHCLKFreq>
 8004218:	4602      	mov	r2, r0
 800421a:	4b06      	ldr	r3, [pc, #24]	; (8004234 <HAL_RCC_GetPCLK2Freq+0x24>)
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	0adb      	lsrs	r3, r3, #11
 8004220:	f003 0307 	and.w	r3, r3, #7
 8004224:	4904      	ldr	r1, [pc, #16]	; (8004238 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004226:	5ccb      	ldrb	r3, [r1, r3]
 8004228:	f003 031f 	and.w	r3, r3, #31
 800422c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004230:	4618      	mov	r0, r3
 8004232:	bd80      	pop	{r7, pc}
 8004234:	40021000 	.word	0x40021000
 8004238:	080099a4 	.word	0x080099a4

0800423c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b086      	sub	sp, #24
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004244:	2300      	movs	r3, #0
 8004246:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004248:	4b2a      	ldr	r3, [pc, #168]	; (80042f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800424a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800424c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d003      	beq.n	800425c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004254:	f7ff f9ee 	bl	8003634 <HAL_PWREx_GetVoltageRange>
 8004258:	6178      	str	r0, [r7, #20]
 800425a:	e014      	b.n	8004286 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800425c:	4b25      	ldr	r3, [pc, #148]	; (80042f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800425e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004260:	4a24      	ldr	r2, [pc, #144]	; (80042f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004262:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004266:	6593      	str	r3, [r2, #88]	; 0x58
 8004268:	4b22      	ldr	r3, [pc, #136]	; (80042f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800426a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800426c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004270:	60fb      	str	r3, [r7, #12]
 8004272:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004274:	f7ff f9de 	bl	8003634 <HAL_PWREx_GetVoltageRange>
 8004278:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800427a:	4b1e      	ldr	r3, [pc, #120]	; (80042f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800427c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800427e:	4a1d      	ldr	r2, [pc, #116]	; (80042f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004280:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004284:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800428c:	d10b      	bne.n	80042a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2b80      	cmp	r3, #128	; 0x80
 8004292:	d919      	bls.n	80042c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2ba0      	cmp	r3, #160	; 0xa0
 8004298:	d902      	bls.n	80042a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800429a:	2302      	movs	r3, #2
 800429c:	613b      	str	r3, [r7, #16]
 800429e:	e013      	b.n	80042c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80042a0:	2301      	movs	r3, #1
 80042a2:	613b      	str	r3, [r7, #16]
 80042a4:	e010      	b.n	80042c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2b80      	cmp	r3, #128	; 0x80
 80042aa:	d902      	bls.n	80042b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80042ac:	2303      	movs	r3, #3
 80042ae:	613b      	str	r3, [r7, #16]
 80042b0:	e00a      	b.n	80042c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2b80      	cmp	r3, #128	; 0x80
 80042b6:	d102      	bne.n	80042be <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80042b8:	2302      	movs	r3, #2
 80042ba:	613b      	str	r3, [r7, #16]
 80042bc:	e004      	b.n	80042c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2b70      	cmp	r3, #112	; 0x70
 80042c2:	d101      	bne.n	80042c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80042c4:	2301      	movs	r3, #1
 80042c6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80042c8:	4b0b      	ldr	r3, [pc, #44]	; (80042f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f023 0207 	bic.w	r2, r3, #7
 80042d0:	4909      	ldr	r1, [pc, #36]	; (80042f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80042d8:	4b07      	ldr	r3, [pc, #28]	; (80042f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0307 	and.w	r3, r3, #7
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d001      	beq.n	80042ea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e000      	b.n	80042ec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3718      	adds	r7, #24
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	40021000 	.word	0x40021000
 80042f8:	40022000 	.word	0x40022000

080042fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004304:	2300      	movs	r3, #0
 8004306:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004308:	2300      	movs	r3, #0
 800430a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004314:	2b00      	cmp	r3, #0
 8004316:	d041      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800431c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004320:	d02a      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004322:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004326:	d824      	bhi.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004328:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800432c:	d008      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800432e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004332:	d81e      	bhi.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00a      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004338:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800433c:	d010      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800433e:	e018      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004340:	4b86      	ldr	r3, [pc, #536]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	4a85      	ldr	r2, [pc, #532]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004346:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800434a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800434c:	e015      	b.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	3304      	adds	r3, #4
 8004352:	2100      	movs	r1, #0
 8004354:	4618      	mov	r0, r3
 8004356:	f000 fabb 	bl	80048d0 <RCCEx_PLLSAI1_Config>
 800435a:	4603      	mov	r3, r0
 800435c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800435e:	e00c      	b.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	3320      	adds	r3, #32
 8004364:	2100      	movs	r1, #0
 8004366:	4618      	mov	r0, r3
 8004368:	f000 fba6 	bl	8004ab8 <RCCEx_PLLSAI2_Config>
 800436c:	4603      	mov	r3, r0
 800436e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004370:	e003      	b.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	74fb      	strb	r3, [r7, #19]
      break;
 8004376:	e000      	b.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004378:	bf00      	nop
    }

    if(ret == HAL_OK)
 800437a:	7cfb      	ldrb	r3, [r7, #19]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d10b      	bne.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004380:	4b76      	ldr	r3, [pc, #472]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004386:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800438e:	4973      	ldr	r1, [pc, #460]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004390:	4313      	orrs	r3, r2
 8004392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004396:	e001      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004398:	7cfb      	ldrb	r3, [r7, #19]
 800439a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d041      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043ac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80043b0:	d02a      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80043b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80043b6:	d824      	bhi.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80043b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043bc:	d008      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80043be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043c2:	d81e      	bhi.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00a      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80043c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043cc:	d010      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80043ce:	e018      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80043d0:	4b62      	ldr	r3, [pc, #392]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	4a61      	ldr	r2, [pc, #388]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043da:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80043dc:	e015      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	3304      	adds	r3, #4
 80043e2:	2100      	movs	r1, #0
 80043e4:	4618      	mov	r0, r3
 80043e6:	f000 fa73 	bl	80048d0 <RCCEx_PLLSAI1_Config>
 80043ea:	4603      	mov	r3, r0
 80043ec:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80043ee:	e00c      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	3320      	adds	r3, #32
 80043f4:	2100      	movs	r1, #0
 80043f6:	4618      	mov	r0, r3
 80043f8:	f000 fb5e 	bl	8004ab8 <RCCEx_PLLSAI2_Config>
 80043fc:	4603      	mov	r3, r0
 80043fe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004400:	e003      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	74fb      	strb	r3, [r7, #19]
      break;
 8004406:	e000      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004408:	bf00      	nop
    }

    if(ret == HAL_OK)
 800440a:	7cfb      	ldrb	r3, [r7, #19]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10b      	bne.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004410:	4b52      	ldr	r3, [pc, #328]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004416:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800441e:	494f      	ldr	r1, [pc, #316]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004420:	4313      	orrs	r3, r2
 8004422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004426:	e001      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004428:	7cfb      	ldrb	r3, [r7, #19]
 800442a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004434:	2b00      	cmp	r3, #0
 8004436:	f000 80a0 	beq.w	800457a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800443a:	2300      	movs	r3, #0
 800443c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800443e:	4b47      	ldr	r3, [pc, #284]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d101      	bne.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800444a:	2301      	movs	r3, #1
 800444c:	e000      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800444e:	2300      	movs	r3, #0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d00d      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004454:	4b41      	ldr	r3, [pc, #260]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004458:	4a40      	ldr	r2, [pc, #256]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800445a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800445e:	6593      	str	r3, [r2, #88]	; 0x58
 8004460:	4b3e      	ldr	r3, [pc, #248]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004468:	60bb      	str	r3, [r7, #8]
 800446a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800446c:	2301      	movs	r3, #1
 800446e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004470:	4b3b      	ldr	r3, [pc, #236]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a3a      	ldr	r2, [pc, #232]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004476:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800447a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800447c:	f7fe fd5a 	bl	8002f34 <HAL_GetTick>
 8004480:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004482:	e009      	b.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004484:	f7fe fd56 	bl	8002f34 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b02      	cmp	r3, #2
 8004490:	d902      	bls.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	74fb      	strb	r3, [r7, #19]
        break;
 8004496:	e005      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004498:	4b31      	ldr	r3, [pc, #196]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d0ef      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80044a4:	7cfb      	ldrb	r3, [r7, #19]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d15c      	bne.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044aa:	4b2c      	ldr	r3, [pc, #176]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044b4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d01f      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x200>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d019      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80044c8:	4b24      	ldr	r3, [pc, #144]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80044d4:	4b21      	ldr	r3, [pc, #132]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044da:	4a20      	ldr	r2, [pc, #128]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80044e4:	4b1d      	ldr	r3, [pc, #116]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ea:	4a1c      	ldr	r2, [pc, #112]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80044f4:	4a19      	ldr	r2, [pc, #100]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	2b00      	cmp	r3, #0
 8004504:	d016      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004506:	f7fe fd15 	bl	8002f34 <HAL_GetTick>
 800450a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800450c:	e00b      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800450e:	f7fe fd11 	bl	8002f34 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	f241 3288 	movw	r2, #5000	; 0x1388
 800451c:	4293      	cmp	r3, r2
 800451e:	d902      	bls.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	74fb      	strb	r3, [r7, #19]
            break;
 8004524:	e006      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004526:	4b0d      	ldr	r3, [pc, #52]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d0ec      	beq.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004534:	7cfb      	ldrb	r3, [r7, #19]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10c      	bne.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800453a:	4b08      	ldr	r3, [pc, #32]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800453c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004540:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800454a:	4904      	ldr	r1, [pc, #16]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800454c:	4313      	orrs	r3, r2
 800454e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004552:	e009      	b.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004554:	7cfb      	ldrb	r3, [r7, #19]
 8004556:	74bb      	strb	r3, [r7, #18]
 8004558:	e006      	b.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800455a:	bf00      	nop
 800455c:	40021000 	.word	0x40021000
 8004560:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004564:	7cfb      	ldrb	r3, [r7, #19]
 8004566:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004568:	7c7b      	ldrb	r3, [r7, #17]
 800456a:	2b01      	cmp	r3, #1
 800456c:	d105      	bne.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800456e:	4b9e      	ldr	r3, [pc, #632]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004572:	4a9d      	ldr	r2, [pc, #628]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004574:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004578:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00a      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004586:	4b98      	ldr	r3, [pc, #608]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800458c:	f023 0203 	bic.w	r2, r3, #3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004594:	4994      	ldr	r1, [pc, #592]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004596:	4313      	orrs	r3, r2
 8004598:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0302 	and.w	r3, r3, #2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00a      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045a8:	4b8f      	ldr	r3, [pc, #572]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ae:	f023 020c 	bic.w	r2, r3, #12
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b6:	498c      	ldr	r1, [pc, #560]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0304 	and.w	r3, r3, #4
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00a      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80045ca:	4b87      	ldr	r3, [pc, #540]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d8:	4983      	ldr	r1, [pc, #524]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0308 	and.w	r3, r3, #8
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00a      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80045ec:	4b7e      	ldr	r3, [pc, #504]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fa:	497b      	ldr	r1, [pc, #492]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0310 	and.w	r3, r3, #16
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00a      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800460e:	4b76      	ldr	r3, [pc, #472]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004614:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800461c:	4972      	ldr	r1, [pc, #456]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800461e:	4313      	orrs	r3, r2
 8004620:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0320 	and.w	r3, r3, #32
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00a      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004630:	4b6d      	ldr	r3, [pc, #436]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004636:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800463e:	496a      	ldr	r1, [pc, #424]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004640:	4313      	orrs	r3, r2
 8004642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00a      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004652:	4b65      	ldr	r3, [pc, #404]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004658:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004660:	4961      	ldr	r1, [pc, #388]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004662:	4313      	orrs	r3, r2
 8004664:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00a      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004674:	4b5c      	ldr	r3, [pc, #368]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800467a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004682:	4959      	ldr	r1, [pc, #356]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004684:	4313      	orrs	r3, r2
 8004686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00a      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004696:	4b54      	ldr	r3, [pc, #336]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800469c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046a4:	4950      	ldr	r1, [pc, #320]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00a      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046b8:	4b4b      	ldr	r3, [pc, #300]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046be:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c6:	4948      	ldr	r1, [pc, #288]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00a      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046da:	4b43      	ldr	r3, [pc, #268]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046e8:	493f      	ldr	r1, [pc, #252]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d028      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046fc:	4b3a      	ldr	r3, [pc, #232]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004702:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800470a:	4937      	ldr	r1, [pc, #220]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800470c:	4313      	orrs	r3, r2
 800470e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004716:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800471a:	d106      	bne.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800471c:	4b32      	ldr	r3, [pc, #200]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	4a31      	ldr	r2, [pc, #196]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004722:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004726:	60d3      	str	r3, [r2, #12]
 8004728:	e011      	b.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800472e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004732:	d10c      	bne.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	3304      	adds	r3, #4
 8004738:	2101      	movs	r1, #1
 800473a:	4618      	mov	r0, r3
 800473c:	f000 f8c8 	bl	80048d0 <RCCEx_PLLSAI1_Config>
 8004740:	4603      	mov	r3, r0
 8004742:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004744:	7cfb      	ldrb	r3, [r7, #19]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d001      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800474a:	7cfb      	ldrb	r3, [r7, #19]
 800474c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d028      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800475a:	4b23      	ldr	r3, [pc, #140]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800475c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004760:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004768:	491f      	ldr	r1, [pc, #124]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800476a:	4313      	orrs	r3, r2
 800476c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004774:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004778:	d106      	bne.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800477a:	4b1b      	ldr	r3, [pc, #108]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	4a1a      	ldr	r2, [pc, #104]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004780:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004784:	60d3      	str	r3, [r2, #12]
 8004786:	e011      	b.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800478c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004790:	d10c      	bne.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	3304      	adds	r3, #4
 8004796:	2101      	movs	r1, #1
 8004798:	4618      	mov	r0, r3
 800479a:	f000 f899 	bl	80048d0 <RCCEx_PLLSAI1_Config>
 800479e:	4603      	mov	r3, r0
 80047a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047a2:	7cfb      	ldrb	r3, [r7, #19]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d001      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80047a8:	7cfb      	ldrb	r3, [r7, #19]
 80047aa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d02b      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047b8:	4b0b      	ldr	r3, [pc, #44]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047c6:	4908      	ldr	r1, [pc, #32]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047d6:	d109      	bne.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047d8:	4b03      	ldr	r3, [pc, #12]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	4a02      	ldr	r2, [pc, #8]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047e2:	60d3      	str	r3, [r2, #12]
 80047e4:	e014      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80047e6:	bf00      	nop
 80047e8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047f4:	d10c      	bne.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	3304      	adds	r3, #4
 80047fa:	2101      	movs	r1, #1
 80047fc:	4618      	mov	r0, r3
 80047fe:	f000 f867 	bl	80048d0 <RCCEx_PLLSAI1_Config>
 8004802:	4603      	mov	r3, r0
 8004804:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004806:	7cfb      	ldrb	r3, [r7, #19]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d001      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800480c:	7cfb      	ldrb	r3, [r7, #19]
 800480e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d02f      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800481c:	4b2b      	ldr	r3, [pc, #172]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800481e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004822:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800482a:	4928      	ldr	r1, [pc, #160]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800482c:	4313      	orrs	r3, r2
 800482e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004836:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800483a:	d10d      	bne.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	3304      	adds	r3, #4
 8004840:	2102      	movs	r1, #2
 8004842:	4618      	mov	r0, r3
 8004844:	f000 f844 	bl	80048d0 <RCCEx_PLLSAI1_Config>
 8004848:	4603      	mov	r3, r0
 800484a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800484c:	7cfb      	ldrb	r3, [r7, #19]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d014      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004852:	7cfb      	ldrb	r3, [r7, #19]
 8004854:	74bb      	strb	r3, [r7, #18]
 8004856:	e011      	b.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800485c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004860:	d10c      	bne.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	3320      	adds	r3, #32
 8004866:	2102      	movs	r1, #2
 8004868:	4618      	mov	r0, r3
 800486a:	f000 f925 	bl	8004ab8 <RCCEx_PLLSAI2_Config>
 800486e:	4603      	mov	r3, r0
 8004870:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004872:	7cfb      	ldrb	r3, [r7, #19]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d001      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004878:	7cfb      	ldrb	r3, [r7, #19]
 800487a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00a      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004888:	4b10      	ldr	r3, [pc, #64]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800488a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800488e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004896:	490d      	ldr	r1, [pc, #52]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004898:	4313      	orrs	r3, r2
 800489a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00b      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80048aa:	4b08      	ldr	r3, [pc, #32]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048ba:	4904      	ldr	r1, [pc, #16]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80048c2:	7cbb      	ldrb	r3, [r7, #18]
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3718      	adds	r7, #24
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	40021000 	.word	0x40021000

080048d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048da:	2300      	movs	r3, #0
 80048dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80048de:	4b75      	ldr	r3, [pc, #468]	; (8004ab4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	f003 0303 	and.w	r3, r3, #3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d018      	beq.n	800491c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80048ea:	4b72      	ldr	r3, [pc, #456]	; (8004ab4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	f003 0203 	and.w	r2, r3, #3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d10d      	bne.n	8004916 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
       ||
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d009      	beq.n	8004916 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004902:	4b6c      	ldr	r3, [pc, #432]	; (8004ab4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	091b      	lsrs	r3, r3, #4
 8004908:	f003 0307 	and.w	r3, r3, #7
 800490c:	1c5a      	adds	r2, r3, #1
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
       ||
 8004912:	429a      	cmp	r2, r3
 8004914:	d047      	beq.n	80049a6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	73fb      	strb	r3, [r7, #15]
 800491a:	e044      	b.n	80049a6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2b03      	cmp	r3, #3
 8004922:	d018      	beq.n	8004956 <RCCEx_PLLSAI1_Config+0x86>
 8004924:	2b03      	cmp	r3, #3
 8004926:	d825      	bhi.n	8004974 <RCCEx_PLLSAI1_Config+0xa4>
 8004928:	2b01      	cmp	r3, #1
 800492a:	d002      	beq.n	8004932 <RCCEx_PLLSAI1_Config+0x62>
 800492c:	2b02      	cmp	r3, #2
 800492e:	d009      	beq.n	8004944 <RCCEx_PLLSAI1_Config+0x74>
 8004930:	e020      	b.n	8004974 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004932:	4b60      	ldr	r3, [pc, #384]	; (8004ab4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	2b00      	cmp	r3, #0
 800493c:	d11d      	bne.n	800497a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004942:	e01a      	b.n	800497a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004944:	4b5b      	ldr	r3, [pc, #364]	; (8004ab4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800494c:	2b00      	cmp	r3, #0
 800494e:	d116      	bne.n	800497e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004954:	e013      	b.n	800497e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004956:	4b57      	ldr	r3, [pc, #348]	; (8004ab4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d10f      	bne.n	8004982 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004962:	4b54      	ldr	r3, [pc, #336]	; (8004ab4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d109      	bne.n	8004982 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004972:	e006      	b.n	8004982 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	73fb      	strb	r3, [r7, #15]
      break;
 8004978:	e004      	b.n	8004984 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800497a:	bf00      	nop
 800497c:	e002      	b.n	8004984 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800497e:	bf00      	nop
 8004980:	e000      	b.n	8004984 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004982:	bf00      	nop
    }

    if(status == HAL_OK)
 8004984:	7bfb      	ldrb	r3, [r7, #15]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d10d      	bne.n	80049a6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800498a:	4b4a      	ldr	r3, [pc, #296]	; (8004ab4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6819      	ldr	r1, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	3b01      	subs	r3, #1
 800499c:	011b      	lsls	r3, r3, #4
 800499e:	430b      	orrs	r3, r1
 80049a0:	4944      	ldr	r1, [pc, #272]	; (8004ab4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80049a6:	7bfb      	ldrb	r3, [r7, #15]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d17d      	bne.n	8004aa8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80049ac:	4b41      	ldr	r3, [pc, #260]	; (8004ab4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a40      	ldr	r2, [pc, #256]	; (8004ab4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80049b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049b8:	f7fe fabc 	bl	8002f34 <HAL_GetTick>
 80049bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80049be:	e009      	b.n	80049d4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049c0:	f7fe fab8 	bl	8002f34 <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d902      	bls.n	80049d4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	73fb      	strb	r3, [r7, #15]
        break;
 80049d2:	e005      	b.n	80049e0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80049d4:	4b37      	ldr	r3, [pc, #220]	; (8004ab4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1ef      	bne.n	80049c0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80049e0:	7bfb      	ldrb	r3, [r7, #15]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d160      	bne.n	8004aa8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d111      	bne.n	8004a10 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049ec:	4b31      	ldr	r3, [pc, #196]	; (8004ab4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80049f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	6892      	ldr	r2, [r2, #8]
 80049fc:	0211      	lsls	r1, r2, #8
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	68d2      	ldr	r2, [r2, #12]
 8004a02:	0912      	lsrs	r2, r2, #4
 8004a04:	0452      	lsls	r2, r2, #17
 8004a06:	430a      	orrs	r2, r1
 8004a08:	492a      	ldr	r1, [pc, #168]	; (8004ab4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	610b      	str	r3, [r1, #16]
 8004a0e:	e027      	b.n	8004a60 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d112      	bne.n	8004a3c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a16:	4b27      	ldr	r3, [pc, #156]	; (8004ab4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004a1e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	6892      	ldr	r2, [r2, #8]
 8004a26:	0211      	lsls	r1, r2, #8
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	6912      	ldr	r2, [r2, #16]
 8004a2c:	0852      	lsrs	r2, r2, #1
 8004a2e:	3a01      	subs	r2, #1
 8004a30:	0552      	lsls	r2, r2, #21
 8004a32:	430a      	orrs	r2, r1
 8004a34:	491f      	ldr	r1, [pc, #124]	; (8004ab4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	610b      	str	r3, [r1, #16]
 8004a3a:	e011      	b.n	8004a60 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a3c:	4b1d      	ldr	r3, [pc, #116]	; (8004ab4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004a44:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	6892      	ldr	r2, [r2, #8]
 8004a4c:	0211      	lsls	r1, r2, #8
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	6952      	ldr	r2, [r2, #20]
 8004a52:	0852      	lsrs	r2, r2, #1
 8004a54:	3a01      	subs	r2, #1
 8004a56:	0652      	lsls	r2, r2, #25
 8004a58:	430a      	orrs	r2, r1
 8004a5a:	4916      	ldr	r1, [pc, #88]	; (8004ab4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004a60:	4b14      	ldr	r3, [pc, #80]	; (8004ab4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a13      	ldr	r2, [pc, #76]	; (8004ab4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a6a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a6c:	f7fe fa62 	bl	8002f34 <HAL_GetTick>
 8004a70:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a72:	e009      	b.n	8004a88 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a74:	f7fe fa5e 	bl	8002f34 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d902      	bls.n	8004a88 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	73fb      	strb	r3, [r7, #15]
          break;
 8004a86:	e005      	b.n	8004a94 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a88:	4b0a      	ldr	r3, [pc, #40]	; (8004ab4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d0ef      	beq.n	8004a74 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004a94:	7bfb      	ldrb	r3, [r7, #15]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d106      	bne.n	8004aa8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004a9a:	4b06      	ldr	r3, [pc, #24]	; (8004ab4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a9c:	691a      	ldr	r2, [r3, #16]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	4904      	ldr	r1, [pc, #16]	; (8004ab4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3710      	adds	r7, #16
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	40021000 	.word	0x40021000

08004ab8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004ac6:	4b6a      	ldr	r3, [pc, #424]	; (8004c70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	f003 0303 	and.w	r3, r3, #3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d018      	beq.n	8004b04 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004ad2:	4b67      	ldr	r3, [pc, #412]	; (8004c70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	f003 0203 	and.w	r2, r3, #3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d10d      	bne.n	8004afe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
       ||
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d009      	beq.n	8004afe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004aea:	4b61      	ldr	r3, [pc, #388]	; (8004c70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	091b      	lsrs	r3, r3, #4
 8004af0:	f003 0307 	and.w	r3, r3, #7
 8004af4:	1c5a      	adds	r2, r3, #1
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
       ||
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d047      	beq.n	8004b8e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	73fb      	strb	r3, [r7, #15]
 8004b02:	e044      	b.n	8004b8e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2b03      	cmp	r3, #3
 8004b0a:	d018      	beq.n	8004b3e <RCCEx_PLLSAI2_Config+0x86>
 8004b0c:	2b03      	cmp	r3, #3
 8004b0e:	d825      	bhi.n	8004b5c <RCCEx_PLLSAI2_Config+0xa4>
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d002      	beq.n	8004b1a <RCCEx_PLLSAI2_Config+0x62>
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d009      	beq.n	8004b2c <RCCEx_PLLSAI2_Config+0x74>
 8004b18:	e020      	b.n	8004b5c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b1a:	4b55      	ldr	r3, [pc, #340]	; (8004c70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0302 	and.w	r3, r3, #2
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d11d      	bne.n	8004b62 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b2a:	e01a      	b.n	8004b62 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b2c:	4b50      	ldr	r3, [pc, #320]	; (8004c70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d116      	bne.n	8004b66 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b3c:	e013      	b.n	8004b66 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b3e:	4b4c      	ldr	r3, [pc, #304]	; (8004c70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10f      	bne.n	8004b6a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b4a:	4b49      	ldr	r3, [pc, #292]	; (8004c70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d109      	bne.n	8004b6a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b5a:	e006      	b.n	8004b6a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b60:	e004      	b.n	8004b6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b62:	bf00      	nop
 8004b64:	e002      	b.n	8004b6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b66:	bf00      	nop
 8004b68:	e000      	b.n	8004b6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b6a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b6c:	7bfb      	ldrb	r3, [r7, #15]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10d      	bne.n	8004b8e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b72:	4b3f      	ldr	r3, [pc, #252]	; (8004c70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6819      	ldr	r1, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	3b01      	subs	r3, #1
 8004b84:	011b      	lsls	r3, r3, #4
 8004b86:	430b      	orrs	r3, r1
 8004b88:	4939      	ldr	r1, [pc, #228]	; (8004c70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004b8e:	7bfb      	ldrb	r3, [r7, #15]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d167      	bne.n	8004c64 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004b94:	4b36      	ldr	r3, [pc, #216]	; (8004c70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a35      	ldr	r2, [pc, #212]	; (8004c70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ba0:	f7fe f9c8 	bl	8002f34 <HAL_GetTick>
 8004ba4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004ba6:	e009      	b.n	8004bbc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ba8:	f7fe f9c4 	bl	8002f34 <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d902      	bls.n	8004bbc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	73fb      	strb	r3, [r7, #15]
        break;
 8004bba:	e005      	b.n	8004bc8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004bbc:	4b2c      	ldr	r3, [pc, #176]	; (8004c70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d1ef      	bne.n	8004ba8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004bc8:	7bfb      	ldrb	r3, [r7, #15]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d14a      	bne.n	8004c64 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d111      	bne.n	8004bf8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004bd4:	4b26      	ldr	r3, [pc, #152]	; (8004c70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bd6:	695b      	ldr	r3, [r3, #20]
 8004bd8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004bdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	6892      	ldr	r2, [r2, #8]
 8004be4:	0211      	lsls	r1, r2, #8
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	68d2      	ldr	r2, [r2, #12]
 8004bea:	0912      	lsrs	r2, r2, #4
 8004bec:	0452      	lsls	r2, r2, #17
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	491f      	ldr	r1, [pc, #124]	; (8004c70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	614b      	str	r3, [r1, #20]
 8004bf6:	e011      	b.n	8004c1c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004bf8:	4b1d      	ldr	r3, [pc, #116]	; (8004c70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bfa:	695b      	ldr	r3, [r3, #20]
 8004bfc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004c00:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	6892      	ldr	r2, [r2, #8]
 8004c08:	0211      	lsls	r1, r2, #8
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	6912      	ldr	r2, [r2, #16]
 8004c0e:	0852      	lsrs	r2, r2, #1
 8004c10:	3a01      	subs	r2, #1
 8004c12:	0652      	lsls	r2, r2, #25
 8004c14:	430a      	orrs	r2, r1
 8004c16:	4916      	ldr	r1, [pc, #88]	; (8004c70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004c1c:	4b14      	ldr	r3, [pc, #80]	; (8004c70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a13      	ldr	r2, [pc, #76]	; (8004c70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c26:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c28:	f7fe f984 	bl	8002f34 <HAL_GetTick>
 8004c2c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c2e:	e009      	b.n	8004c44 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c30:	f7fe f980 	bl	8002f34 <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d902      	bls.n	8004c44 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	73fb      	strb	r3, [r7, #15]
          break;
 8004c42:	e005      	b.n	8004c50 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c44:	4b0a      	ldr	r3, [pc, #40]	; (8004c70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d0ef      	beq.n	8004c30 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004c50:	7bfb      	ldrb	r3, [r7, #15]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d106      	bne.n	8004c64 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004c56:	4b06      	ldr	r3, [pc, #24]	; (8004c70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c58:	695a      	ldr	r2, [r3, #20]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	4904      	ldr	r1, [pc, #16]	; (8004c70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3710      	adds	r7, #16
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	40021000 	.word	0x40021000

08004c74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e095      	b.n	8004db2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d108      	bne.n	8004ca0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c96:	d009      	beq.n	8004cac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	61da      	str	r2, [r3, #28]
 8004c9e:	e005      	b.n	8004cac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d106      	bne.n	8004ccc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f7fd fe98 	bl	80029fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2202      	movs	r2, #2
 8004cd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ce2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004cec:	d902      	bls.n	8004cf4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	60fb      	str	r3, [r7, #12]
 8004cf2:	e002      	b.n	8004cfa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004cf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004cf8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004d02:	d007      	beq.n	8004d14 <HAL_SPI_Init+0xa0>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d0c:	d002      	beq.n	8004d14 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004d24:	431a      	orrs	r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	431a      	orrs	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	695b      	ldr	r3, [r3, #20]
 8004d34:	f003 0301 	and.w	r3, r3, #1
 8004d38:	431a      	orrs	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d42:	431a      	orrs	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	69db      	ldr	r3, [r3, #28]
 8004d48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d4c:	431a      	orrs	r2, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d56:	ea42 0103 	orr.w	r1, r2, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d5e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	430a      	orrs	r2, r1
 8004d68:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	0c1b      	lsrs	r3, r3, #16
 8004d70:	f003 0204 	and.w	r2, r3, #4
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d78:	f003 0310 	and.w	r3, r3, #16
 8004d7c:	431a      	orrs	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d82:	f003 0308 	and.w	r3, r3, #8
 8004d86:	431a      	orrs	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004d90:	ea42 0103 	orr.w	r1, r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	430a      	orrs	r2, r1
 8004da0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3710      	adds	r7, #16
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
	...

08004dbc <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b087      	sub	sp, #28
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	607a      	str	r2, [r7, #4]
 8004dc8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004dd4:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ddc:	7dbb      	ldrb	r3, [r7, #22]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d00d      	beq.n	8004dfe <HAL_SPI_TransmitReceive_IT+0x42>
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004de8:	d106      	bne.n	8004df8 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d102      	bne.n	8004df8 <HAL_SPI_TransmitReceive_IT+0x3c>
 8004df2:	7dbb      	ldrb	r3, [r7, #22]
 8004df4:	2b04      	cmp	r3, #4
 8004df6:	d002      	beq.n	8004dfe <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 8004df8:	2302      	movs	r3, #2
 8004dfa:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004dfc:	e07d      	b.n	8004efa <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d005      	beq.n	8004e10 <HAL_SPI_TransmitReceive_IT+0x54>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d002      	beq.n	8004e10 <HAL_SPI_TransmitReceive_IT+0x54>
 8004e0a:	887b      	ldrh	r3, [r7, #2]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d102      	bne.n	8004e16 <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e14:	e071      	b.n	8004efa <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d101      	bne.n	8004e24 <HAL_SPI_TransmitReceive_IT+0x68>
 8004e20:	2302      	movs	r3, #2
 8004e22:	e06b      	b.n	8004efc <HAL_SPI_TransmitReceive_IT+0x140>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	2b04      	cmp	r3, #4
 8004e36:	d003      	beq.n	8004e40 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2205      	movs	r2, #5
 8004e3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2200      	movs	r2, #0
 8004e44:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	68ba      	ldr	r2, [r7, #8]
 8004e4a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	887a      	ldrh	r2, [r7, #2]
 8004e50:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	887a      	ldrh	r2, [r7, #2]
 8004e56:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	887a      	ldrh	r2, [r7, #2]
 8004e62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	887a      	ldrh	r2, [r7, #2]
 8004e6a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e76:	d906      	bls.n	8004e86 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	4a23      	ldr	r2, [pc, #140]	; (8004f08 <HAL_SPI_TransmitReceive_IT+0x14c>)
 8004e7c:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	4a22      	ldr	r2, [pc, #136]	; (8004f0c <HAL_SPI_TransmitReceive_IT+0x150>)
 8004e82:	651a      	str	r2, [r3, #80]	; 0x50
 8004e84:	e005      	b.n	8004e92 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	4a21      	ldr	r2, [pc, #132]	; (8004f10 <HAL_SPI_TransmitReceive_IT+0x154>)
 8004e8a:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	4a21      	ldr	r2, [pc, #132]	; (8004f14 <HAL_SPI_TransmitReceive_IT+0x158>)
 8004e90:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e9a:	d802      	bhi.n	8004ea2 <HAL_SPI_TransmitReceive_IT+0xe6>
 8004e9c:	887b      	ldrh	r3, [r7, #2]
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d908      	bls.n	8004eb4 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	685a      	ldr	r2, [r3, #4]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004eb0:	605a      	str	r2, [r3, #4]
 8004eb2:	e007      	b.n	8004ec4 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	685a      	ldr	r2, [r3, #4]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ec2:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ece:	2b40      	cmp	r3, #64	; 0x40
 8004ed0:	d007      	beq.n	8004ee2 <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ee0:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	685a      	ldr	r2, [r3, #4]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8004ef8:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8004efa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	371c      	adds	r7, #28
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr
 8004f08:	080052a3 	.word	0x080052a3
 8004f0c:	08005309 	.word	0x08005309
 8004f10:	08005153 	.word	0x08005153
 8004f14:	08005211 	.word	0x08005211

08004f18 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b088      	sub	sp, #32
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d10e      	bne.n	8004f58 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d009      	beq.n	8004f58 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d004      	beq.n	8004f58 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	4798      	blx	r3
    return;
 8004f56:	e0ce      	b.n	80050f6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d009      	beq.n	8004f76 <HAL_SPI_IRQHandler+0x5e>
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d004      	beq.n	8004f76 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	4798      	blx	r3
    return;
 8004f74:	e0bf      	b.n	80050f6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	f003 0320 	and.w	r3, r3, #32
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d10a      	bne.n	8004f96 <HAL_SPI_IRQHandler+0x7e>
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d105      	bne.n	8004f96 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	f000 80b0 	beq.w	80050f6 <HAL_SPI_IRQHandler+0x1de>
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	f003 0320 	and.w	r3, r3, #32
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f000 80aa 	beq.w	80050f6 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d023      	beq.n	8004ff4 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	2b03      	cmp	r3, #3
 8004fb6:	d011      	beq.n	8004fdc <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fbc:	f043 0204 	orr.w	r2, r3, #4
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	617b      	str	r3, [r7, #20]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	617b      	str	r3, [r7, #20]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	617b      	str	r3, [r7, #20]
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	e00b      	b.n	8004ff4 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fdc:	2300      	movs	r3, #0
 8004fde:	613b      	str	r3, [r7, #16]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	613b      	str	r3, [r7, #16]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	613b      	str	r3, [r7, #16]
 8004ff0:	693b      	ldr	r3, [r7, #16]
        return;
 8004ff2:	e080      	b.n	80050f6 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	f003 0320 	and.w	r3, r3, #32
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d014      	beq.n	8005028 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005002:	f043 0201 	orr.w	r2, r3, #1
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800500a:	2300      	movs	r3, #0
 800500c:	60fb      	str	r3, [r7, #12]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	60fb      	str	r3, [r7, #12]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005024:	601a      	str	r2, [r3, #0]
 8005026:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00c      	beq.n	800504c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005036:	f043 0208 	orr.w	r2, r3, #8
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800503e:	2300      	movs	r3, #0
 8005040:	60bb      	str	r3, [r7, #8]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	60bb      	str	r3, [r7, #8]
 800504a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005050:	2b00      	cmp	r3, #0
 8005052:	d04f      	beq.n	80050f4 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	685a      	ldr	r2, [r3, #4]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005062:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	2b00      	cmp	r3, #0
 8005074:	d104      	bne.n	8005080 <HAL_SPI_IRQHandler+0x168>
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	f003 0301 	and.w	r3, r3, #1
 800507c:	2b00      	cmp	r3, #0
 800507e:	d034      	beq.n	80050ea <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	685a      	ldr	r2, [r3, #4]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f022 0203 	bic.w	r2, r2, #3
 800508e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005094:	2b00      	cmp	r3, #0
 8005096:	d011      	beq.n	80050bc <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800509c:	4a17      	ldr	r2, [pc, #92]	; (80050fc <HAL_SPI_IRQHandler+0x1e4>)
 800509e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7fe f886 	bl	80031b6 <HAL_DMA_Abort_IT>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d005      	beq.n	80050bc <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d016      	beq.n	80050f2 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050c8:	4a0c      	ldr	r2, [pc, #48]	; (80050fc <HAL_SPI_IRQHandler+0x1e4>)
 80050ca:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d0:	4618      	mov	r0, r3
 80050d2:	f7fe f870 	bl	80031b6 <HAL_DMA_Abort_IT>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00a      	beq.n	80050f2 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80050e8:	e003      	b.n	80050f2 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 f812 	bl	8005114 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80050f0:	e000      	b.n	80050f4 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80050f2:	bf00      	nop
    return;
 80050f4:	bf00      	nop
  }
}
 80050f6:	3720      	adds	r7, #32
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	08005129 	.word	0x08005129

08005100 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005108:	bf00      	nop
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800511c:	bf00      	nop
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005134:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005144:	68f8      	ldr	r0, [r7, #12]
 8005146:	f7ff ffe5 	bl	8005114 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800514a:	bf00      	nop
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005152:	b580      	push	{r7, lr}
 8005154:	b082      	sub	sp, #8
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005160:	b29b      	uxth	r3, r3
 8005162:	2b01      	cmp	r3, #1
 8005164:	d923      	bls.n	80051ae <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68da      	ldr	r2, [r3, #12]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005170:	b292      	uxth	r2, r2
 8005172:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005178:	1c9a      	adds	r2, r3, #2
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005184:	b29b      	uxth	r3, r3
 8005186:	3b02      	subs	r3, #2
 8005188:	b29a      	uxth	r2, r3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005196:	b29b      	uxth	r3, r3
 8005198:	2b01      	cmp	r3, #1
 800519a:	d11f      	bne.n	80051dc <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	685a      	ldr	r2, [r3, #4]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80051aa:	605a      	str	r2, [r3, #4]
 80051ac:	e016      	b.n	80051dc <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f103 020c 	add.w	r2, r3, #12
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ba:	7812      	ldrb	r2, [r2, #0]
 80051bc:	b2d2      	uxtb	r2, r2
 80051be:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c4:	1c5a      	adds	r2, r3, #1
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	3b01      	subs	r3, #1
 80051d4:	b29a      	uxth	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d10f      	bne.n	8005208 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	685a      	ldr	r2, [r3, #4]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80051f6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d102      	bne.n	8005208 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 fa14 	bl	8005630 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005208:	bf00      	nop
 800520a:	3708      	adds	r7, #8
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800521c:	b29b      	uxth	r3, r3
 800521e:	2b01      	cmp	r3, #1
 8005220:	d912      	bls.n	8005248 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005226:	881a      	ldrh	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005232:	1c9a      	adds	r2, r3, #2
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800523c:	b29b      	uxth	r3, r3
 800523e:	3b02      	subs	r3, #2
 8005240:	b29a      	uxth	r2, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005246:	e012      	b.n	800526e <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	330c      	adds	r3, #12
 8005252:	7812      	ldrb	r2, [r2, #0]
 8005254:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800525a:	1c5a      	adds	r2, r3, #1
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005264:	b29b      	uxth	r3, r3
 8005266:	3b01      	subs	r3, #1
 8005268:	b29a      	uxth	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005272:	b29b      	uxth	r3, r3
 8005274:	2b00      	cmp	r3, #0
 8005276:	d110      	bne.n	800529a <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	685a      	ldr	r2, [r3, #4]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005286:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800528e:	b29b      	uxth	r3, r3
 8005290:	2b00      	cmp	r3, #0
 8005292:	d102      	bne.n	800529a <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 f9cb 	bl	8005630 <SPI_CloseRxTx_ISR>
    }
  }
}
 800529a:	bf00      	nop
 800529c:	3708      	adds	r7, #8
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80052a2:	b580      	push	{r7, lr}
 80052a4:	b082      	sub	sp, #8
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68da      	ldr	r2, [r3, #12]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b4:	b292      	uxth	r2, r2
 80052b6:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052bc:	1c9a      	adds	r2, r3, #2
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	3b01      	subs	r3, #1
 80052cc:	b29a      	uxth	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052da:	b29b      	uxth	r3, r3
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d10f      	bne.n	8005300 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	685a      	ldr	r2, [r3, #4]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052ee:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d102      	bne.n	8005300 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 f998 	bl	8005630 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005300:	bf00      	nop
 8005302:	3708      	adds	r7, #8
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005314:	881a      	ldrh	r2, [r3, #0]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005320:	1c9a      	adds	r2, r3, #2
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800532a:	b29b      	uxth	r3, r3
 800532c:	3b01      	subs	r3, #1
 800532e:	b29a      	uxth	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005338:	b29b      	uxth	r3, r3
 800533a:	2b00      	cmp	r3, #0
 800533c:	d110      	bne.n	8005360 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	685a      	ldr	r2, [r3, #4]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800534c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005354:	b29b      	uxth	r3, r3
 8005356:	2b00      	cmp	r3, #0
 8005358:	d102      	bne.n	8005360 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f968 	bl	8005630 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005360:	bf00      	nop
 8005362:	3708      	adds	r7, #8
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b088      	sub	sp, #32
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	603b      	str	r3, [r7, #0]
 8005374:	4613      	mov	r3, r2
 8005376:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005378:	f7fd fddc 	bl	8002f34 <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005380:	1a9b      	subs	r3, r3, r2
 8005382:	683a      	ldr	r2, [r7, #0]
 8005384:	4413      	add	r3, r2
 8005386:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005388:	f7fd fdd4 	bl	8002f34 <HAL_GetTick>
 800538c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800538e:	4b39      	ldr	r3, [pc, #228]	; (8005474 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	015b      	lsls	r3, r3, #5
 8005394:	0d1b      	lsrs	r3, r3, #20
 8005396:	69fa      	ldr	r2, [r7, #28]
 8005398:	fb02 f303 	mul.w	r3, r2, r3
 800539c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800539e:	e054      	b.n	800544a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a6:	d050      	beq.n	800544a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053a8:	f7fd fdc4 	bl	8002f34 <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	69fa      	ldr	r2, [r7, #28]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d902      	bls.n	80053be <SPI_WaitFlagStateUntilTimeout+0x56>
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d13d      	bne.n	800543a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	685a      	ldr	r2, [r3, #4]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80053cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053d6:	d111      	bne.n	80053fc <SPI_WaitFlagStateUntilTimeout+0x94>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053e0:	d004      	beq.n	80053ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053ea:	d107      	bne.n	80053fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005400:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005404:	d10f      	bne.n	8005426 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005414:	601a      	str	r2, [r3, #0]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005424:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2201      	movs	r2, #1
 800542a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e017      	b.n	800546a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d101      	bne.n	8005444 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005440:	2300      	movs	r3, #0
 8005442:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	3b01      	subs	r3, #1
 8005448:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	689a      	ldr	r2, [r3, #8]
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	4013      	ands	r3, r2
 8005454:	68ba      	ldr	r2, [r7, #8]
 8005456:	429a      	cmp	r2, r3
 8005458:	bf0c      	ite	eq
 800545a:	2301      	moveq	r3, #1
 800545c:	2300      	movne	r3, #0
 800545e:	b2db      	uxtb	r3, r3
 8005460:	461a      	mov	r2, r3
 8005462:	79fb      	ldrb	r3, [r7, #7]
 8005464:	429a      	cmp	r2, r3
 8005466:	d19b      	bne.n	80053a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3720      	adds	r7, #32
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	20000000 	.word	0x20000000

08005478 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b08a      	sub	sp, #40	; 0x28
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	607a      	str	r2, [r7, #4]
 8005484:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005486:	2300      	movs	r3, #0
 8005488:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800548a:	f7fd fd53 	bl	8002f34 <HAL_GetTick>
 800548e:	4602      	mov	r2, r0
 8005490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005492:	1a9b      	subs	r3, r3, r2
 8005494:	683a      	ldr	r2, [r7, #0]
 8005496:	4413      	add	r3, r2
 8005498:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800549a:	f7fd fd4b 	bl	8002f34 <HAL_GetTick>
 800549e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	330c      	adds	r3, #12
 80054a6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80054a8:	4b3d      	ldr	r3, [pc, #244]	; (80055a0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	4613      	mov	r3, r2
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	4413      	add	r3, r2
 80054b2:	00da      	lsls	r2, r3, #3
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	0d1b      	lsrs	r3, r3, #20
 80054b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ba:	fb02 f303 	mul.w	r3, r2, r3
 80054be:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80054c0:	e060      	b.n	8005584 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80054c8:	d107      	bne.n	80054da <SPI_WaitFifoStateUntilTimeout+0x62>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d104      	bne.n	80054da <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80054d8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e0:	d050      	beq.n	8005584 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80054e2:	f7fd fd27 	bl	8002f34 <HAL_GetTick>
 80054e6:	4602      	mov	r2, r0
 80054e8:	6a3b      	ldr	r3, [r7, #32]
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d902      	bls.n	80054f8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80054f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d13d      	bne.n	8005574 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	685a      	ldr	r2, [r3, #4]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005506:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005510:	d111      	bne.n	8005536 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800551a:	d004      	beq.n	8005526 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005524:	d107      	bne.n	8005536 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005534:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800553a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800553e:	d10f      	bne.n	8005560 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800554e:	601a      	str	r2, [r3, #0]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800555e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e010      	b.n	8005596 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d101      	bne.n	800557e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800557a:	2300      	movs	r3, #0
 800557c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	3b01      	subs	r3, #1
 8005582:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	689a      	ldr	r2, [r3, #8]
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	4013      	ands	r3, r2
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	429a      	cmp	r2, r3
 8005592:	d196      	bne.n	80054c2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3728      	adds	r7, #40	; 0x28
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	20000000 	.word	0x20000000

080055a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b086      	sub	sp, #24
 80055a8:	af02      	add	r7, sp, #8
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	9300      	str	r3, [sp, #0]
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80055bc:	68f8      	ldr	r0, [r7, #12]
 80055be:	f7ff ff5b 	bl	8005478 <SPI_WaitFifoStateUntilTimeout>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d007      	beq.n	80055d8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055cc:	f043 0220 	orr.w	r2, r3, #32
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80055d4:	2303      	movs	r3, #3
 80055d6:	e027      	b.n	8005628 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	9300      	str	r3, [sp, #0]
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	2200      	movs	r2, #0
 80055e0:	2180      	movs	r1, #128	; 0x80
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	f7ff fec0 	bl	8005368 <SPI_WaitFlagStateUntilTimeout>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d007      	beq.n	80055fe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055f2:	f043 0220 	orr.w	r2, r3, #32
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e014      	b.n	8005628 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	9300      	str	r3, [sp, #0]
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	2200      	movs	r2, #0
 8005606:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800560a:	68f8      	ldr	r0, [r7, #12]
 800560c:	f7ff ff34 	bl	8005478 <SPI_WaitFifoStateUntilTimeout>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d007      	beq.n	8005626 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800561a:	f043 0220 	orr.w	r2, r3, #32
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	e000      	b.n	8005628 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3710      	adds	r7, #16
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005638:	f7fd fc7c 	bl	8002f34 <HAL_GetTick>
 800563c:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	685a      	ldr	r2, [r3, #4]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f022 0220 	bic.w	r2, r2, #32
 800564c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	2164      	movs	r1, #100	; 0x64
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f7ff ffa6 	bl	80055a4 <SPI_EndRxTxTransaction>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d005      	beq.n	800566a <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005662:	f043 0220 	orr.w	r2, r3, #32
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800566e:	2b00      	cmp	r3, #0
 8005670:	d115      	bne.n	800569e <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005678:	b2db      	uxtb	r3, r3
 800567a:	2b04      	cmp	r3, #4
 800567c:	d107      	bne.n	800568e <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2201      	movs	r2, #1
 8005682:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f7ff fd3a 	bl	8005100 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800568c:	e00e      	b.n	80056ac <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2201      	movs	r2, #1
 8005692:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f7fd f93e 	bl	8002918 <HAL_SPI_TxRxCpltCallback>
}
 800569c:	e006      	b.n	80056ac <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f7ff fd34 	bl	8005114 <HAL_SPI_ErrorCallback>
}
 80056ac:	bf00      	nop
 80056ae:	3710      	adds	r7, #16
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d101      	bne.n	80056c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e049      	b.n	800575a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d106      	bne.n	80056e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f7fd f9d8 	bl	8002a90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2202      	movs	r2, #2
 80056e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	3304      	adds	r3, #4
 80056f0:	4619      	mov	r1, r3
 80056f2:	4610      	mov	r0, r2
 80056f4:	f000 faa4 	bl	8005c40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3708      	adds	r7, #8
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
	...

08005764 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005772:	b2db      	uxtb	r3, r3
 8005774:	2b01      	cmp	r3, #1
 8005776:	d001      	beq.n	800577c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e04f      	b.n	800581c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2202      	movs	r2, #2
 8005780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68da      	ldr	r2, [r3, #12]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f042 0201 	orr.w	r2, r2, #1
 8005792:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a23      	ldr	r2, [pc, #140]	; (8005828 <HAL_TIM_Base_Start_IT+0xc4>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d01d      	beq.n	80057da <HAL_TIM_Base_Start_IT+0x76>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057a6:	d018      	beq.n	80057da <HAL_TIM_Base_Start_IT+0x76>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a1f      	ldr	r2, [pc, #124]	; (800582c <HAL_TIM_Base_Start_IT+0xc8>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d013      	beq.n	80057da <HAL_TIM_Base_Start_IT+0x76>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a1e      	ldr	r2, [pc, #120]	; (8005830 <HAL_TIM_Base_Start_IT+0xcc>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d00e      	beq.n	80057da <HAL_TIM_Base_Start_IT+0x76>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a1c      	ldr	r2, [pc, #112]	; (8005834 <HAL_TIM_Base_Start_IT+0xd0>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d009      	beq.n	80057da <HAL_TIM_Base_Start_IT+0x76>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a1b      	ldr	r2, [pc, #108]	; (8005838 <HAL_TIM_Base_Start_IT+0xd4>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d004      	beq.n	80057da <HAL_TIM_Base_Start_IT+0x76>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a19      	ldr	r2, [pc, #100]	; (800583c <HAL_TIM_Base_Start_IT+0xd8>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d115      	bne.n	8005806 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	689a      	ldr	r2, [r3, #8]
 80057e0:	4b17      	ldr	r3, [pc, #92]	; (8005840 <HAL_TIM_Base_Start_IT+0xdc>)
 80057e2:	4013      	ands	r3, r2
 80057e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2b06      	cmp	r3, #6
 80057ea:	d015      	beq.n	8005818 <HAL_TIM_Base_Start_IT+0xb4>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057f2:	d011      	beq.n	8005818 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f042 0201 	orr.w	r2, r2, #1
 8005802:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005804:	e008      	b.n	8005818 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f042 0201 	orr.w	r2, r2, #1
 8005814:	601a      	str	r2, [r3, #0]
 8005816:	e000      	b.n	800581a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005818:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	3714      	adds	r7, #20
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr
 8005828:	40012c00 	.word	0x40012c00
 800582c:	40000400 	.word	0x40000400
 8005830:	40000800 	.word	0x40000800
 8005834:	40000c00 	.word	0x40000c00
 8005838:	40013400 	.word	0x40013400
 800583c:	40014000 	.word	0x40014000
 8005840:	00010007 	.word	0x00010007

08005844 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	f003 0302 	and.w	r3, r3, #2
 8005862:	2b00      	cmp	r3, #0
 8005864:	d020      	beq.n	80058a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f003 0302 	and.w	r3, r3, #2
 800586c:	2b00      	cmp	r3, #0
 800586e:	d01b      	beq.n	80058a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f06f 0202 	mvn.w	r2, #2
 8005878:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2201      	movs	r2, #1
 800587e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	699b      	ldr	r3, [r3, #24]
 8005886:	f003 0303 	and.w	r3, r3, #3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d003      	beq.n	8005896 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 f9b7 	bl	8005c02 <HAL_TIM_IC_CaptureCallback>
 8005894:	e005      	b.n	80058a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f9a9 	bl	8005bee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 f9ba 	bl	8005c16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	f003 0304 	and.w	r3, r3, #4
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d020      	beq.n	80058f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f003 0304 	and.w	r3, r3, #4
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d01b      	beq.n	80058f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f06f 0204 	mvn.w	r2, #4
 80058c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2202      	movs	r2, #2
 80058ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d003      	beq.n	80058e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 f991 	bl	8005c02 <HAL_TIM_IC_CaptureCallback>
 80058e0:	e005      	b.n	80058ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 f983 	bl	8005bee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 f994 	bl	8005c16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	f003 0308 	and.w	r3, r3, #8
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d020      	beq.n	8005940 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f003 0308 	and.w	r3, r3, #8
 8005904:	2b00      	cmp	r3, #0
 8005906:	d01b      	beq.n	8005940 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f06f 0208 	mvn.w	r2, #8
 8005910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2204      	movs	r2, #4
 8005916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	69db      	ldr	r3, [r3, #28]
 800591e:	f003 0303 	and.w	r3, r3, #3
 8005922:	2b00      	cmp	r3, #0
 8005924:	d003      	beq.n	800592e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 f96b 	bl	8005c02 <HAL_TIM_IC_CaptureCallback>
 800592c:	e005      	b.n	800593a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 f95d 	bl	8005bee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 f96e 	bl	8005c16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	f003 0310 	and.w	r3, r3, #16
 8005946:	2b00      	cmp	r3, #0
 8005948:	d020      	beq.n	800598c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f003 0310 	and.w	r3, r3, #16
 8005950:	2b00      	cmp	r3, #0
 8005952:	d01b      	beq.n	800598c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f06f 0210 	mvn.w	r2, #16
 800595c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2208      	movs	r2, #8
 8005962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	69db      	ldr	r3, [r3, #28]
 800596a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800596e:	2b00      	cmp	r3, #0
 8005970:	d003      	beq.n	800597a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 f945 	bl	8005c02 <HAL_TIM_IC_CaptureCallback>
 8005978:	e005      	b.n	8005986 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 f937 	bl	8005bee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 f948 	bl	8005c16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	f003 0301 	and.w	r3, r3, #1
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00c      	beq.n	80059b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f003 0301 	and.w	r3, r3, #1
 800599c:	2b00      	cmp	r3, #0
 800599e:	d007      	beq.n	80059b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f06f 0201 	mvn.w	r2, #1
 80059a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 f915 	bl	8005bda <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d00c      	beq.n	80059d4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d007      	beq.n	80059d4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80059cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 fafc 	bl	8005fcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00c      	beq.n	80059f8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d007      	beq.n	80059f8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80059f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 faf4 	bl	8005fe0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00c      	beq.n	8005a1c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d007      	beq.n	8005a1c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 f907 	bl	8005c2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	f003 0320 	and.w	r3, r3, #32
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00c      	beq.n	8005a40 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f003 0320 	and.w	r3, r3, #32
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d007      	beq.n	8005a40 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f06f 0220 	mvn.w	r2, #32
 8005a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 fabc 	bl	8005fb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a40:	bf00      	nop
 8005a42:	3710      	adds	r7, #16
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a52:	2300      	movs	r3, #0
 8005a54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d101      	bne.n	8005a64 <HAL_TIM_ConfigClockSource+0x1c>
 8005a60:	2302      	movs	r3, #2
 8005a62:	e0b6      	b.n	8005bd2 <HAL_TIM_ConfigClockSource+0x18a>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2202      	movs	r2, #2
 8005a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68ba      	ldr	r2, [r7, #8]
 8005a96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aa0:	d03e      	beq.n	8005b20 <HAL_TIM_ConfigClockSource+0xd8>
 8005aa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aa6:	f200 8087 	bhi.w	8005bb8 <HAL_TIM_ConfigClockSource+0x170>
 8005aaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aae:	f000 8086 	beq.w	8005bbe <HAL_TIM_ConfigClockSource+0x176>
 8005ab2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ab6:	d87f      	bhi.n	8005bb8 <HAL_TIM_ConfigClockSource+0x170>
 8005ab8:	2b70      	cmp	r3, #112	; 0x70
 8005aba:	d01a      	beq.n	8005af2 <HAL_TIM_ConfigClockSource+0xaa>
 8005abc:	2b70      	cmp	r3, #112	; 0x70
 8005abe:	d87b      	bhi.n	8005bb8 <HAL_TIM_ConfigClockSource+0x170>
 8005ac0:	2b60      	cmp	r3, #96	; 0x60
 8005ac2:	d050      	beq.n	8005b66 <HAL_TIM_ConfigClockSource+0x11e>
 8005ac4:	2b60      	cmp	r3, #96	; 0x60
 8005ac6:	d877      	bhi.n	8005bb8 <HAL_TIM_ConfigClockSource+0x170>
 8005ac8:	2b50      	cmp	r3, #80	; 0x50
 8005aca:	d03c      	beq.n	8005b46 <HAL_TIM_ConfigClockSource+0xfe>
 8005acc:	2b50      	cmp	r3, #80	; 0x50
 8005ace:	d873      	bhi.n	8005bb8 <HAL_TIM_ConfigClockSource+0x170>
 8005ad0:	2b40      	cmp	r3, #64	; 0x40
 8005ad2:	d058      	beq.n	8005b86 <HAL_TIM_ConfigClockSource+0x13e>
 8005ad4:	2b40      	cmp	r3, #64	; 0x40
 8005ad6:	d86f      	bhi.n	8005bb8 <HAL_TIM_ConfigClockSource+0x170>
 8005ad8:	2b30      	cmp	r3, #48	; 0x30
 8005ada:	d064      	beq.n	8005ba6 <HAL_TIM_ConfigClockSource+0x15e>
 8005adc:	2b30      	cmp	r3, #48	; 0x30
 8005ade:	d86b      	bhi.n	8005bb8 <HAL_TIM_ConfigClockSource+0x170>
 8005ae0:	2b20      	cmp	r3, #32
 8005ae2:	d060      	beq.n	8005ba6 <HAL_TIM_ConfigClockSource+0x15e>
 8005ae4:	2b20      	cmp	r3, #32
 8005ae6:	d867      	bhi.n	8005bb8 <HAL_TIM_ConfigClockSource+0x170>
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d05c      	beq.n	8005ba6 <HAL_TIM_ConfigClockSource+0x15e>
 8005aec:	2b10      	cmp	r3, #16
 8005aee:	d05a      	beq.n	8005ba6 <HAL_TIM_ConfigClockSource+0x15e>
 8005af0:	e062      	b.n	8005bb8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b02:	f000 f9b1 	bl	8005e68 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68ba      	ldr	r2, [r7, #8]
 8005b1c:	609a      	str	r2, [r3, #8]
      break;
 8005b1e:	e04f      	b.n	8005bc0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b30:	f000 f99a 	bl	8005e68 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	689a      	ldr	r2, [r3, #8]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b42:	609a      	str	r2, [r3, #8]
      break;
 8005b44:	e03c      	b.n	8005bc0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b52:	461a      	mov	r2, r3
 8005b54:	f000 f90e 	bl	8005d74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2150      	movs	r1, #80	; 0x50
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f000 f967 	bl	8005e32 <TIM_ITRx_SetConfig>
      break;
 8005b64:	e02c      	b.n	8005bc0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b72:	461a      	mov	r2, r3
 8005b74:	f000 f92d 	bl	8005dd2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2160      	movs	r1, #96	; 0x60
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f000 f957 	bl	8005e32 <TIM_ITRx_SetConfig>
      break;
 8005b84:	e01c      	b.n	8005bc0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b92:	461a      	mov	r2, r3
 8005b94:	f000 f8ee 	bl	8005d74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2140      	movs	r1, #64	; 0x40
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f000 f947 	bl	8005e32 <TIM_ITRx_SetConfig>
      break;
 8005ba4:	e00c      	b.n	8005bc0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4619      	mov	r1, r3
 8005bb0:	4610      	mov	r0, r2
 8005bb2:	f000 f93e 	bl	8005e32 <TIM_ITRx_SetConfig>
      break;
 8005bb6:	e003      	b.n	8005bc0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	73fb      	strb	r3, [r7, #15]
      break;
 8005bbc:	e000      	b.n	8005bc0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005bbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3710      	adds	r7, #16
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}

08005bda <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b083      	sub	sp, #12
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005be2:	bf00      	nop
 8005be4:	370c      	adds	r7, #12
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr

08005bee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bee:	b480      	push	{r7}
 8005bf0:	b083      	sub	sp, #12
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bf6:	bf00      	nop
 8005bf8:	370c      	adds	r7, #12
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr

08005c02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c02:	b480      	push	{r7}
 8005c04:	b083      	sub	sp, #12
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c0a:	bf00      	nop
 8005c0c:	370c      	adds	r7, #12
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr

08005c16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c16:	b480      	push	{r7}
 8005c18:	b083      	sub	sp, #12
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c1e:	bf00      	nop
 8005c20:	370c      	adds	r7, #12
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr

08005c2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c2a:	b480      	push	{r7}
 8005c2c:	b083      	sub	sp, #12
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c32:	bf00      	nop
 8005c34:	370c      	adds	r7, #12
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
	...

08005c40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b085      	sub	sp, #20
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a40      	ldr	r2, [pc, #256]	; (8005d54 <TIM_Base_SetConfig+0x114>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d013      	beq.n	8005c80 <TIM_Base_SetConfig+0x40>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c5e:	d00f      	beq.n	8005c80 <TIM_Base_SetConfig+0x40>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4a3d      	ldr	r2, [pc, #244]	; (8005d58 <TIM_Base_SetConfig+0x118>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d00b      	beq.n	8005c80 <TIM_Base_SetConfig+0x40>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a3c      	ldr	r2, [pc, #240]	; (8005d5c <TIM_Base_SetConfig+0x11c>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d007      	beq.n	8005c80 <TIM_Base_SetConfig+0x40>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a3b      	ldr	r2, [pc, #236]	; (8005d60 <TIM_Base_SetConfig+0x120>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d003      	beq.n	8005c80 <TIM_Base_SetConfig+0x40>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a3a      	ldr	r2, [pc, #232]	; (8005d64 <TIM_Base_SetConfig+0x124>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d108      	bne.n	8005c92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a2f      	ldr	r2, [pc, #188]	; (8005d54 <TIM_Base_SetConfig+0x114>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d01f      	beq.n	8005cda <TIM_Base_SetConfig+0x9a>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ca0:	d01b      	beq.n	8005cda <TIM_Base_SetConfig+0x9a>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a2c      	ldr	r2, [pc, #176]	; (8005d58 <TIM_Base_SetConfig+0x118>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d017      	beq.n	8005cda <TIM_Base_SetConfig+0x9a>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a2b      	ldr	r2, [pc, #172]	; (8005d5c <TIM_Base_SetConfig+0x11c>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d013      	beq.n	8005cda <TIM_Base_SetConfig+0x9a>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a2a      	ldr	r2, [pc, #168]	; (8005d60 <TIM_Base_SetConfig+0x120>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d00f      	beq.n	8005cda <TIM_Base_SetConfig+0x9a>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a29      	ldr	r2, [pc, #164]	; (8005d64 <TIM_Base_SetConfig+0x124>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d00b      	beq.n	8005cda <TIM_Base_SetConfig+0x9a>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a28      	ldr	r2, [pc, #160]	; (8005d68 <TIM_Base_SetConfig+0x128>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d007      	beq.n	8005cda <TIM_Base_SetConfig+0x9a>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a27      	ldr	r2, [pc, #156]	; (8005d6c <TIM_Base_SetConfig+0x12c>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d003      	beq.n	8005cda <TIM_Base_SetConfig+0x9a>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a26      	ldr	r2, [pc, #152]	; (8005d70 <TIM_Base_SetConfig+0x130>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d108      	bne.n	8005cec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ce0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	695b      	ldr	r3, [r3, #20]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	689a      	ldr	r2, [r3, #8]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a10      	ldr	r2, [pc, #64]	; (8005d54 <TIM_Base_SetConfig+0x114>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d00f      	beq.n	8005d38 <TIM_Base_SetConfig+0xf8>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a12      	ldr	r2, [pc, #72]	; (8005d64 <TIM_Base_SetConfig+0x124>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d00b      	beq.n	8005d38 <TIM_Base_SetConfig+0xf8>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a11      	ldr	r2, [pc, #68]	; (8005d68 <TIM_Base_SetConfig+0x128>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d007      	beq.n	8005d38 <TIM_Base_SetConfig+0xf8>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a10      	ldr	r2, [pc, #64]	; (8005d6c <TIM_Base_SetConfig+0x12c>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d003      	beq.n	8005d38 <TIM_Base_SetConfig+0xf8>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a0f      	ldr	r2, [pc, #60]	; (8005d70 <TIM_Base_SetConfig+0x130>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d103      	bne.n	8005d40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	691a      	ldr	r2, [r3, #16]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	615a      	str	r2, [r3, #20]
}
 8005d46:	bf00      	nop
 8005d48:	3714      	adds	r7, #20
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr
 8005d52:	bf00      	nop
 8005d54:	40012c00 	.word	0x40012c00
 8005d58:	40000400 	.word	0x40000400
 8005d5c:	40000800 	.word	0x40000800
 8005d60:	40000c00 	.word	0x40000c00
 8005d64:	40013400 	.word	0x40013400
 8005d68:	40014000 	.word	0x40014000
 8005d6c:	40014400 	.word	0x40014400
 8005d70:	40014800 	.word	0x40014800

08005d74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b087      	sub	sp, #28
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6a1b      	ldr	r3, [r3, #32]
 8005d84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	6a1b      	ldr	r3, [r3, #32]
 8005d8a:	f023 0201 	bic.w	r2, r3, #1
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	699b      	ldr	r3, [r3, #24]
 8005d96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	011b      	lsls	r3, r3, #4
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	f023 030a 	bic.w	r3, r3, #10
 8005db0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005db2:	697a      	ldr	r2, [r7, #20]
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	693a      	ldr	r2, [r7, #16]
 8005dbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	697a      	ldr	r2, [r7, #20]
 8005dc4:	621a      	str	r2, [r3, #32]
}
 8005dc6:	bf00      	nop
 8005dc8:	371c      	adds	r7, #28
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr

08005dd2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dd2:	b480      	push	{r7}
 8005dd4:	b087      	sub	sp, #28
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	60f8      	str	r0, [r7, #12]
 8005dda:	60b9      	str	r1, [r7, #8]
 8005ddc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6a1b      	ldr	r3, [r3, #32]
 8005de2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6a1b      	ldr	r3, [r3, #32]
 8005de8:	f023 0210 	bic.w	r2, r3, #16
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	699b      	ldr	r3, [r3, #24]
 8005df4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005dfc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	031b      	lsls	r3, r3, #12
 8005e02:	693a      	ldr	r2, [r7, #16]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e0e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	011b      	lsls	r3, r3, #4
 8005e14:	697a      	ldr	r2, [r7, #20]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	693a      	ldr	r2, [r7, #16]
 8005e1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	697a      	ldr	r2, [r7, #20]
 8005e24:	621a      	str	r2, [r3, #32]
}
 8005e26:	bf00      	nop
 8005e28:	371c      	adds	r7, #28
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr

08005e32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e32:	b480      	push	{r7}
 8005e34:	b085      	sub	sp, #20
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	6078      	str	r0, [r7, #4]
 8005e3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e4a:	683a      	ldr	r2, [r7, #0]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	f043 0307 	orr.w	r3, r3, #7
 8005e54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	609a      	str	r2, [r3, #8]
}
 8005e5c:	bf00      	nop
 8005e5e:	3714      	adds	r7, #20
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b087      	sub	sp, #28
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	607a      	str	r2, [r7, #4]
 8005e74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	021a      	lsls	r2, r3, #8
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	431a      	orrs	r2, r3
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	697a      	ldr	r2, [r7, #20]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	697a      	ldr	r2, [r7, #20]
 8005e9a:	609a      	str	r2, [r3, #8]
}
 8005e9c:	bf00      	nop
 8005e9e:	371c      	adds	r7, #28
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b085      	sub	sp, #20
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d101      	bne.n	8005ec0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ebc:	2302      	movs	r3, #2
 8005ebe:	e068      	b.n	8005f92 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2202      	movs	r2, #2
 8005ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a2e      	ldr	r2, [pc, #184]	; (8005fa0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d004      	beq.n	8005ef4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a2d      	ldr	r2, [pc, #180]	; (8005fa4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d108      	bne.n	8005f06 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005efa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f0c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	68fa      	ldr	r2, [r7, #12]
 8005f1e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a1e      	ldr	r2, [pc, #120]	; (8005fa0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d01d      	beq.n	8005f66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f32:	d018      	beq.n	8005f66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a1b      	ldr	r2, [pc, #108]	; (8005fa8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d013      	beq.n	8005f66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a1a      	ldr	r2, [pc, #104]	; (8005fac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d00e      	beq.n	8005f66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a18      	ldr	r2, [pc, #96]	; (8005fb0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d009      	beq.n	8005f66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a13      	ldr	r2, [pc, #76]	; (8005fa4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d004      	beq.n	8005f66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a14      	ldr	r2, [pc, #80]	; (8005fb4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d10c      	bne.n	8005f80 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	68ba      	ldr	r2, [r7, #8]
 8005f7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3714      	adds	r7, #20
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	40012c00 	.word	0x40012c00
 8005fa4:	40013400 	.word	0x40013400
 8005fa8:	40000400 	.word	0x40000400
 8005fac:	40000800 	.word	0x40000800
 8005fb0:	40000c00 	.word	0x40000c00
 8005fb4:	40014000 	.word	0x40014000

08005fb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005fc0:	bf00      	nop
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fd4:	bf00      	nop
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005fe8:	bf00      	nop
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d101      	bne.n	8006006 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e040      	b.n	8006088 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800600a:	2b00      	cmp	r3, #0
 800600c:	d106      	bne.n	800601c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f7fc fd72 	bl	8002b00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2224      	movs	r2, #36	; 0x24
 8006020:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f022 0201 	bic.w	r2, r2, #1
 8006030:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006036:	2b00      	cmp	r3, #0
 8006038:	d002      	beq.n	8006040 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 fb6a 	bl	8006714 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f000 f8af 	bl	80061a4 <UART_SetConfig>
 8006046:	4603      	mov	r3, r0
 8006048:	2b01      	cmp	r3, #1
 800604a:	d101      	bne.n	8006050 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e01b      	b.n	8006088 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	685a      	ldr	r2, [r3, #4]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800605e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	689a      	ldr	r2, [r3, #8]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800606e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f042 0201 	orr.w	r2, r2, #1
 800607e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 fbe9 	bl	8006858 <UART_CheckIdleState>
 8006086:	4603      	mov	r3, r0
}
 8006088:	4618      	mov	r0, r3
 800608a:	3708      	adds	r7, #8
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b08a      	sub	sp, #40	; 0x28
 8006094:	af02      	add	r7, sp, #8
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	603b      	str	r3, [r7, #0]
 800609c:	4613      	mov	r3, r2
 800609e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060a4:	2b20      	cmp	r3, #32
 80060a6:	d178      	bne.n	800619a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d002      	beq.n	80060b4 <HAL_UART_Transmit+0x24>
 80060ae:	88fb      	ldrh	r3, [r7, #6]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d101      	bne.n	80060b8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	e071      	b.n	800619c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2221      	movs	r2, #33	; 0x21
 80060c4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80060c6:	f7fc ff35 	bl	8002f34 <HAL_GetTick>
 80060ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	88fa      	ldrh	r2, [r7, #6]
 80060d0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	88fa      	ldrh	r2, [r7, #6]
 80060d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060e4:	d108      	bne.n	80060f8 <HAL_UART_Transmit+0x68>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d104      	bne.n	80060f8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80060ee:	2300      	movs	r3, #0
 80060f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	61bb      	str	r3, [r7, #24]
 80060f6:	e003      	b.n	8006100 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060fc:	2300      	movs	r3, #0
 80060fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006100:	e030      	b.n	8006164 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	9300      	str	r3, [sp, #0]
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	2200      	movs	r2, #0
 800610a:	2180      	movs	r1, #128	; 0x80
 800610c:	68f8      	ldr	r0, [r7, #12]
 800610e:	f000 fc4b 	bl	80069a8 <UART_WaitOnFlagUntilTimeout>
 8006112:	4603      	mov	r3, r0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d004      	beq.n	8006122 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2220      	movs	r2, #32
 800611c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	e03c      	b.n	800619c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d10b      	bne.n	8006140 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	881a      	ldrh	r2, [r3, #0]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006134:	b292      	uxth	r2, r2
 8006136:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	3302      	adds	r3, #2
 800613c:	61bb      	str	r3, [r7, #24]
 800613e:	e008      	b.n	8006152 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	781a      	ldrb	r2, [r3, #0]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	b292      	uxth	r2, r2
 800614a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	3301      	adds	r3, #1
 8006150:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006158:	b29b      	uxth	r3, r3
 800615a:	3b01      	subs	r3, #1
 800615c:	b29a      	uxth	r2, r3
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800616a:	b29b      	uxth	r3, r3
 800616c:	2b00      	cmp	r3, #0
 800616e:	d1c8      	bne.n	8006102 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	9300      	str	r3, [sp, #0]
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	2200      	movs	r2, #0
 8006178:	2140      	movs	r1, #64	; 0x40
 800617a:	68f8      	ldr	r0, [r7, #12]
 800617c:	f000 fc14 	bl	80069a8 <UART_WaitOnFlagUntilTimeout>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d004      	beq.n	8006190 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2220      	movs	r2, #32
 800618a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800618c:	2303      	movs	r3, #3
 800618e:	e005      	b.n	800619c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2220      	movs	r2, #32
 8006194:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006196:	2300      	movs	r3, #0
 8006198:	e000      	b.n	800619c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800619a:	2302      	movs	r3, #2
  }
}
 800619c:	4618      	mov	r0, r3
 800619e:	3720      	adds	r7, #32
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061a8:	b08a      	sub	sp, #40	; 0x28
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80061ae:	2300      	movs	r3, #0
 80061b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	689a      	ldr	r2, [r3, #8]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	691b      	ldr	r3, [r3, #16]
 80061bc:	431a      	orrs	r2, r3
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	695b      	ldr	r3, [r3, #20]
 80061c2:	431a      	orrs	r2, r3
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	69db      	ldr	r3, [r3, #28]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	4ba4      	ldr	r3, [pc, #656]	; (8006464 <UART_SetConfig+0x2c0>)
 80061d4:	4013      	ands	r3, r2
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	6812      	ldr	r2, [r2, #0]
 80061da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80061dc:	430b      	orrs	r3, r1
 80061de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	68da      	ldr	r2, [r3, #12]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	430a      	orrs	r2, r1
 80061f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	699b      	ldr	r3, [r3, #24]
 80061fa:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a99      	ldr	r2, [pc, #612]	; (8006468 <UART_SetConfig+0x2c4>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d004      	beq.n	8006210 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6a1b      	ldr	r3, [r3, #32]
 800620a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800620c:	4313      	orrs	r3, r2
 800620e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006220:	430a      	orrs	r2, r1
 8006222:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a90      	ldr	r2, [pc, #576]	; (800646c <UART_SetConfig+0x2c8>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d126      	bne.n	800627c <UART_SetConfig+0xd8>
 800622e:	4b90      	ldr	r3, [pc, #576]	; (8006470 <UART_SetConfig+0x2cc>)
 8006230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006234:	f003 0303 	and.w	r3, r3, #3
 8006238:	2b03      	cmp	r3, #3
 800623a:	d81b      	bhi.n	8006274 <UART_SetConfig+0xd0>
 800623c:	a201      	add	r2, pc, #4	; (adr r2, 8006244 <UART_SetConfig+0xa0>)
 800623e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006242:	bf00      	nop
 8006244:	08006255 	.word	0x08006255
 8006248:	08006265 	.word	0x08006265
 800624c:	0800625d 	.word	0x0800625d
 8006250:	0800626d 	.word	0x0800626d
 8006254:	2301      	movs	r3, #1
 8006256:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800625a:	e116      	b.n	800648a <UART_SetConfig+0x2e6>
 800625c:	2302      	movs	r3, #2
 800625e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006262:	e112      	b.n	800648a <UART_SetConfig+0x2e6>
 8006264:	2304      	movs	r3, #4
 8006266:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800626a:	e10e      	b.n	800648a <UART_SetConfig+0x2e6>
 800626c:	2308      	movs	r3, #8
 800626e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006272:	e10a      	b.n	800648a <UART_SetConfig+0x2e6>
 8006274:	2310      	movs	r3, #16
 8006276:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800627a:	e106      	b.n	800648a <UART_SetConfig+0x2e6>
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a7c      	ldr	r2, [pc, #496]	; (8006474 <UART_SetConfig+0x2d0>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d138      	bne.n	80062f8 <UART_SetConfig+0x154>
 8006286:	4b7a      	ldr	r3, [pc, #488]	; (8006470 <UART_SetConfig+0x2cc>)
 8006288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800628c:	f003 030c 	and.w	r3, r3, #12
 8006290:	2b0c      	cmp	r3, #12
 8006292:	d82d      	bhi.n	80062f0 <UART_SetConfig+0x14c>
 8006294:	a201      	add	r2, pc, #4	; (adr r2, 800629c <UART_SetConfig+0xf8>)
 8006296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800629a:	bf00      	nop
 800629c:	080062d1 	.word	0x080062d1
 80062a0:	080062f1 	.word	0x080062f1
 80062a4:	080062f1 	.word	0x080062f1
 80062a8:	080062f1 	.word	0x080062f1
 80062ac:	080062e1 	.word	0x080062e1
 80062b0:	080062f1 	.word	0x080062f1
 80062b4:	080062f1 	.word	0x080062f1
 80062b8:	080062f1 	.word	0x080062f1
 80062bc:	080062d9 	.word	0x080062d9
 80062c0:	080062f1 	.word	0x080062f1
 80062c4:	080062f1 	.word	0x080062f1
 80062c8:	080062f1 	.word	0x080062f1
 80062cc:	080062e9 	.word	0x080062e9
 80062d0:	2300      	movs	r3, #0
 80062d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062d6:	e0d8      	b.n	800648a <UART_SetConfig+0x2e6>
 80062d8:	2302      	movs	r3, #2
 80062da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062de:	e0d4      	b.n	800648a <UART_SetConfig+0x2e6>
 80062e0:	2304      	movs	r3, #4
 80062e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062e6:	e0d0      	b.n	800648a <UART_SetConfig+0x2e6>
 80062e8:	2308      	movs	r3, #8
 80062ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062ee:	e0cc      	b.n	800648a <UART_SetConfig+0x2e6>
 80062f0:	2310      	movs	r3, #16
 80062f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062f6:	e0c8      	b.n	800648a <UART_SetConfig+0x2e6>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a5e      	ldr	r2, [pc, #376]	; (8006478 <UART_SetConfig+0x2d4>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d125      	bne.n	800634e <UART_SetConfig+0x1aa>
 8006302:	4b5b      	ldr	r3, [pc, #364]	; (8006470 <UART_SetConfig+0x2cc>)
 8006304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006308:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800630c:	2b30      	cmp	r3, #48	; 0x30
 800630e:	d016      	beq.n	800633e <UART_SetConfig+0x19a>
 8006310:	2b30      	cmp	r3, #48	; 0x30
 8006312:	d818      	bhi.n	8006346 <UART_SetConfig+0x1a2>
 8006314:	2b20      	cmp	r3, #32
 8006316:	d00a      	beq.n	800632e <UART_SetConfig+0x18a>
 8006318:	2b20      	cmp	r3, #32
 800631a:	d814      	bhi.n	8006346 <UART_SetConfig+0x1a2>
 800631c:	2b00      	cmp	r3, #0
 800631e:	d002      	beq.n	8006326 <UART_SetConfig+0x182>
 8006320:	2b10      	cmp	r3, #16
 8006322:	d008      	beq.n	8006336 <UART_SetConfig+0x192>
 8006324:	e00f      	b.n	8006346 <UART_SetConfig+0x1a2>
 8006326:	2300      	movs	r3, #0
 8006328:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800632c:	e0ad      	b.n	800648a <UART_SetConfig+0x2e6>
 800632e:	2302      	movs	r3, #2
 8006330:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006334:	e0a9      	b.n	800648a <UART_SetConfig+0x2e6>
 8006336:	2304      	movs	r3, #4
 8006338:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800633c:	e0a5      	b.n	800648a <UART_SetConfig+0x2e6>
 800633e:	2308      	movs	r3, #8
 8006340:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006344:	e0a1      	b.n	800648a <UART_SetConfig+0x2e6>
 8006346:	2310      	movs	r3, #16
 8006348:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800634c:	e09d      	b.n	800648a <UART_SetConfig+0x2e6>
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a4a      	ldr	r2, [pc, #296]	; (800647c <UART_SetConfig+0x2d8>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d125      	bne.n	80063a4 <UART_SetConfig+0x200>
 8006358:	4b45      	ldr	r3, [pc, #276]	; (8006470 <UART_SetConfig+0x2cc>)
 800635a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800635e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006362:	2bc0      	cmp	r3, #192	; 0xc0
 8006364:	d016      	beq.n	8006394 <UART_SetConfig+0x1f0>
 8006366:	2bc0      	cmp	r3, #192	; 0xc0
 8006368:	d818      	bhi.n	800639c <UART_SetConfig+0x1f8>
 800636a:	2b80      	cmp	r3, #128	; 0x80
 800636c:	d00a      	beq.n	8006384 <UART_SetConfig+0x1e0>
 800636e:	2b80      	cmp	r3, #128	; 0x80
 8006370:	d814      	bhi.n	800639c <UART_SetConfig+0x1f8>
 8006372:	2b00      	cmp	r3, #0
 8006374:	d002      	beq.n	800637c <UART_SetConfig+0x1d8>
 8006376:	2b40      	cmp	r3, #64	; 0x40
 8006378:	d008      	beq.n	800638c <UART_SetConfig+0x1e8>
 800637a:	e00f      	b.n	800639c <UART_SetConfig+0x1f8>
 800637c:	2300      	movs	r3, #0
 800637e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006382:	e082      	b.n	800648a <UART_SetConfig+0x2e6>
 8006384:	2302      	movs	r3, #2
 8006386:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800638a:	e07e      	b.n	800648a <UART_SetConfig+0x2e6>
 800638c:	2304      	movs	r3, #4
 800638e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006392:	e07a      	b.n	800648a <UART_SetConfig+0x2e6>
 8006394:	2308      	movs	r3, #8
 8006396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800639a:	e076      	b.n	800648a <UART_SetConfig+0x2e6>
 800639c:	2310      	movs	r3, #16
 800639e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063a2:	e072      	b.n	800648a <UART_SetConfig+0x2e6>
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a35      	ldr	r2, [pc, #212]	; (8006480 <UART_SetConfig+0x2dc>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d12a      	bne.n	8006404 <UART_SetConfig+0x260>
 80063ae:	4b30      	ldr	r3, [pc, #192]	; (8006470 <UART_SetConfig+0x2cc>)
 80063b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063bc:	d01a      	beq.n	80063f4 <UART_SetConfig+0x250>
 80063be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063c2:	d81b      	bhi.n	80063fc <UART_SetConfig+0x258>
 80063c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063c8:	d00c      	beq.n	80063e4 <UART_SetConfig+0x240>
 80063ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063ce:	d815      	bhi.n	80063fc <UART_SetConfig+0x258>
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d003      	beq.n	80063dc <UART_SetConfig+0x238>
 80063d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063d8:	d008      	beq.n	80063ec <UART_SetConfig+0x248>
 80063da:	e00f      	b.n	80063fc <UART_SetConfig+0x258>
 80063dc:	2300      	movs	r3, #0
 80063de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063e2:	e052      	b.n	800648a <UART_SetConfig+0x2e6>
 80063e4:	2302      	movs	r3, #2
 80063e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063ea:	e04e      	b.n	800648a <UART_SetConfig+0x2e6>
 80063ec:	2304      	movs	r3, #4
 80063ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063f2:	e04a      	b.n	800648a <UART_SetConfig+0x2e6>
 80063f4:	2308      	movs	r3, #8
 80063f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063fa:	e046      	b.n	800648a <UART_SetConfig+0x2e6>
 80063fc:	2310      	movs	r3, #16
 80063fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006402:	e042      	b.n	800648a <UART_SetConfig+0x2e6>
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a17      	ldr	r2, [pc, #92]	; (8006468 <UART_SetConfig+0x2c4>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d13a      	bne.n	8006484 <UART_SetConfig+0x2e0>
 800640e:	4b18      	ldr	r3, [pc, #96]	; (8006470 <UART_SetConfig+0x2cc>)
 8006410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006414:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006418:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800641c:	d01a      	beq.n	8006454 <UART_SetConfig+0x2b0>
 800641e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006422:	d81b      	bhi.n	800645c <UART_SetConfig+0x2b8>
 8006424:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006428:	d00c      	beq.n	8006444 <UART_SetConfig+0x2a0>
 800642a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800642e:	d815      	bhi.n	800645c <UART_SetConfig+0x2b8>
 8006430:	2b00      	cmp	r3, #0
 8006432:	d003      	beq.n	800643c <UART_SetConfig+0x298>
 8006434:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006438:	d008      	beq.n	800644c <UART_SetConfig+0x2a8>
 800643a:	e00f      	b.n	800645c <UART_SetConfig+0x2b8>
 800643c:	2300      	movs	r3, #0
 800643e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006442:	e022      	b.n	800648a <UART_SetConfig+0x2e6>
 8006444:	2302      	movs	r3, #2
 8006446:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800644a:	e01e      	b.n	800648a <UART_SetConfig+0x2e6>
 800644c:	2304      	movs	r3, #4
 800644e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006452:	e01a      	b.n	800648a <UART_SetConfig+0x2e6>
 8006454:	2308      	movs	r3, #8
 8006456:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800645a:	e016      	b.n	800648a <UART_SetConfig+0x2e6>
 800645c:	2310      	movs	r3, #16
 800645e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006462:	e012      	b.n	800648a <UART_SetConfig+0x2e6>
 8006464:	efff69f3 	.word	0xefff69f3
 8006468:	40008000 	.word	0x40008000
 800646c:	40013800 	.word	0x40013800
 8006470:	40021000 	.word	0x40021000
 8006474:	40004400 	.word	0x40004400
 8006478:	40004800 	.word	0x40004800
 800647c:	40004c00 	.word	0x40004c00
 8006480:	40005000 	.word	0x40005000
 8006484:	2310      	movs	r3, #16
 8006486:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a9f      	ldr	r2, [pc, #636]	; (800670c <UART_SetConfig+0x568>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d17a      	bne.n	800658a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006494:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006498:	2b08      	cmp	r3, #8
 800649a:	d824      	bhi.n	80064e6 <UART_SetConfig+0x342>
 800649c:	a201      	add	r2, pc, #4	; (adr r2, 80064a4 <UART_SetConfig+0x300>)
 800649e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a2:	bf00      	nop
 80064a4:	080064c9 	.word	0x080064c9
 80064a8:	080064e7 	.word	0x080064e7
 80064ac:	080064d1 	.word	0x080064d1
 80064b0:	080064e7 	.word	0x080064e7
 80064b4:	080064d7 	.word	0x080064d7
 80064b8:	080064e7 	.word	0x080064e7
 80064bc:	080064e7 	.word	0x080064e7
 80064c0:	080064e7 	.word	0x080064e7
 80064c4:	080064df 	.word	0x080064df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064c8:	f7fd fe8c 	bl	80041e4 <HAL_RCC_GetPCLK1Freq>
 80064cc:	61f8      	str	r0, [r7, #28]
        break;
 80064ce:	e010      	b.n	80064f2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064d0:	4b8f      	ldr	r3, [pc, #572]	; (8006710 <UART_SetConfig+0x56c>)
 80064d2:	61fb      	str	r3, [r7, #28]
        break;
 80064d4:	e00d      	b.n	80064f2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064d6:	f7fd fded 	bl	80040b4 <HAL_RCC_GetSysClockFreq>
 80064da:	61f8      	str	r0, [r7, #28]
        break;
 80064dc:	e009      	b.n	80064f2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064e2:	61fb      	str	r3, [r7, #28]
        break;
 80064e4:	e005      	b.n	80064f2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80064e6:	2300      	movs	r3, #0
 80064e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80064f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f000 80fb 	beq.w	80066f0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	685a      	ldr	r2, [r3, #4]
 80064fe:	4613      	mov	r3, r2
 8006500:	005b      	lsls	r3, r3, #1
 8006502:	4413      	add	r3, r2
 8006504:	69fa      	ldr	r2, [r7, #28]
 8006506:	429a      	cmp	r2, r3
 8006508:	d305      	bcc.n	8006516 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006510:	69fa      	ldr	r2, [r7, #28]
 8006512:	429a      	cmp	r2, r3
 8006514:	d903      	bls.n	800651e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800651c:	e0e8      	b.n	80066f0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	2200      	movs	r2, #0
 8006522:	461c      	mov	r4, r3
 8006524:	4615      	mov	r5, r2
 8006526:	f04f 0200 	mov.w	r2, #0
 800652a:	f04f 0300 	mov.w	r3, #0
 800652e:	022b      	lsls	r3, r5, #8
 8006530:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006534:	0222      	lsls	r2, r4, #8
 8006536:	68f9      	ldr	r1, [r7, #12]
 8006538:	6849      	ldr	r1, [r1, #4]
 800653a:	0849      	lsrs	r1, r1, #1
 800653c:	2000      	movs	r0, #0
 800653e:	4688      	mov	r8, r1
 8006540:	4681      	mov	r9, r0
 8006542:	eb12 0a08 	adds.w	sl, r2, r8
 8006546:	eb43 0b09 	adc.w	fp, r3, r9
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	603b      	str	r3, [r7, #0]
 8006552:	607a      	str	r2, [r7, #4]
 8006554:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006558:	4650      	mov	r0, sl
 800655a:	4659      	mov	r1, fp
 800655c:	f7fa fb94 	bl	8000c88 <__aeabi_uldivmod>
 8006560:	4602      	mov	r2, r0
 8006562:	460b      	mov	r3, r1
 8006564:	4613      	mov	r3, r2
 8006566:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800656e:	d308      	bcc.n	8006582 <UART_SetConfig+0x3de>
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006576:	d204      	bcs.n	8006582 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	69ba      	ldr	r2, [r7, #24]
 800657e:	60da      	str	r2, [r3, #12]
 8006580:	e0b6      	b.n	80066f0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006588:	e0b2      	b.n	80066f0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	69db      	ldr	r3, [r3, #28]
 800658e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006592:	d15e      	bne.n	8006652 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006594:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006598:	2b08      	cmp	r3, #8
 800659a:	d828      	bhi.n	80065ee <UART_SetConfig+0x44a>
 800659c:	a201      	add	r2, pc, #4	; (adr r2, 80065a4 <UART_SetConfig+0x400>)
 800659e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a2:	bf00      	nop
 80065a4:	080065c9 	.word	0x080065c9
 80065a8:	080065d1 	.word	0x080065d1
 80065ac:	080065d9 	.word	0x080065d9
 80065b0:	080065ef 	.word	0x080065ef
 80065b4:	080065df 	.word	0x080065df
 80065b8:	080065ef 	.word	0x080065ef
 80065bc:	080065ef 	.word	0x080065ef
 80065c0:	080065ef 	.word	0x080065ef
 80065c4:	080065e7 	.word	0x080065e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065c8:	f7fd fe0c 	bl	80041e4 <HAL_RCC_GetPCLK1Freq>
 80065cc:	61f8      	str	r0, [r7, #28]
        break;
 80065ce:	e014      	b.n	80065fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065d0:	f7fd fe1e 	bl	8004210 <HAL_RCC_GetPCLK2Freq>
 80065d4:	61f8      	str	r0, [r7, #28]
        break;
 80065d6:	e010      	b.n	80065fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065d8:	4b4d      	ldr	r3, [pc, #308]	; (8006710 <UART_SetConfig+0x56c>)
 80065da:	61fb      	str	r3, [r7, #28]
        break;
 80065dc:	e00d      	b.n	80065fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065de:	f7fd fd69 	bl	80040b4 <HAL_RCC_GetSysClockFreq>
 80065e2:	61f8      	str	r0, [r7, #28]
        break;
 80065e4:	e009      	b.n	80065fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065ea:	61fb      	str	r3, [r7, #28]
        break;
 80065ec:	e005      	b.n	80065fa <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80065ee:	2300      	movs	r3, #0
 80065f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80065f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d077      	beq.n	80066f0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	005a      	lsls	r2, r3, #1
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	085b      	lsrs	r3, r3, #1
 800660a:	441a      	add	r2, r3
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	fbb2 f3f3 	udiv	r3, r2, r3
 8006614:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	2b0f      	cmp	r3, #15
 800661a:	d916      	bls.n	800664a <UART_SetConfig+0x4a6>
 800661c:	69bb      	ldr	r3, [r7, #24]
 800661e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006622:	d212      	bcs.n	800664a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	b29b      	uxth	r3, r3
 8006628:	f023 030f 	bic.w	r3, r3, #15
 800662c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800662e:	69bb      	ldr	r3, [r7, #24]
 8006630:	085b      	lsrs	r3, r3, #1
 8006632:	b29b      	uxth	r3, r3
 8006634:	f003 0307 	and.w	r3, r3, #7
 8006638:	b29a      	uxth	r2, r3
 800663a:	8afb      	ldrh	r3, [r7, #22]
 800663c:	4313      	orrs	r3, r2
 800663e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	8afa      	ldrh	r2, [r7, #22]
 8006646:	60da      	str	r2, [r3, #12]
 8006648:	e052      	b.n	80066f0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006650:	e04e      	b.n	80066f0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006652:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006656:	2b08      	cmp	r3, #8
 8006658:	d827      	bhi.n	80066aa <UART_SetConfig+0x506>
 800665a:	a201      	add	r2, pc, #4	; (adr r2, 8006660 <UART_SetConfig+0x4bc>)
 800665c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006660:	08006685 	.word	0x08006685
 8006664:	0800668d 	.word	0x0800668d
 8006668:	08006695 	.word	0x08006695
 800666c:	080066ab 	.word	0x080066ab
 8006670:	0800669b 	.word	0x0800669b
 8006674:	080066ab 	.word	0x080066ab
 8006678:	080066ab 	.word	0x080066ab
 800667c:	080066ab 	.word	0x080066ab
 8006680:	080066a3 	.word	0x080066a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006684:	f7fd fdae 	bl	80041e4 <HAL_RCC_GetPCLK1Freq>
 8006688:	61f8      	str	r0, [r7, #28]
        break;
 800668a:	e014      	b.n	80066b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800668c:	f7fd fdc0 	bl	8004210 <HAL_RCC_GetPCLK2Freq>
 8006690:	61f8      	str	r0, [r7, #28]
        break;
 8006692:	e010      	b.n	80066b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006694:	4b1e      	ldr	r3, [pc, #120]	; (8006710 <UART_SetConfig+0x56c>)
 8006696:	61fb      	str	r3, [r7, #28]
        break;
 8006698:	e00d      	b.n	80066b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800669a:	f7fd fd0b 	bl	80040b4 <HAL_RCC_GetSysClockFreq>
 800669e:	61f8      	str	r0, [r7, #28]
        break;
 80066a0:	e009      	b.n	80066b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066a6:	61fb      	str	r3, [r7, #28]
        break;
 80066a8:	e005      	b.n	80066b6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80066aa:	2300      	movs	r3, #0
 80066ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80066b4:	bf00      	nop
    }

    if (pclk != 0U)
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d019      	beq.n	80066f0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	085a      	lsrs	r2, r3, #1
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	441a      	add	r2, r3
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ce:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	2b0f      	cmp	r3, #15
 80066d4:	d909      	bls.n	80066ea <UART_SetConfig+0x546>
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066dc:	d205      	bcs.n	80066ea <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	b29a      	uxth	r2, r3
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	60da      	str	r2, [r3, #12]
 80066e8:	e002      	b.n	80066f0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2200      	movs	r2, #0
 80066f4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2200      	movs	r2, #0
 80066fa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80066fc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006700:	4618      	mov	r0, r3
 8006702:	3728      	adds	r7, #40	; 0x28
 8006704:	46bd      	mov	sp, r7
 8006706:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800670a:	bf00      	nop
 800670c:	40008000 	.word	0x40008000
 8006710:	00f42400 	.word	0x00f42400

08006714 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006720:	f003 0308 	and.w	r3, r3, #8
 8006724:	2b00      	cmp	r3, #0
 8006726:	d00a      	beq.n	800673e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	430a      	orrs	r2, r1
 800673c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006742:	f003 0301 	and.w	r3, r3, #1
 8006746:	2b00      	cmp	r3, #0
 8006748:	d00a      	beq.n	8006760 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	430a      	orrs	r2, r1
 800675e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006764:	f003 0302 	and.w	r3, r3, #2
 8006768:	2b00      	cmp	r3, #0
 800676a:	d00a      	beq.n	8006782 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	430a      	orrs	r2, r1
 8006780:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006786:	f003 0304 	and.w	r3, r3, #4
 800678a:	2b00      	cmp	r3, #0
 800678c:	d00a      	beq.n	80067a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	430a      	orrs	r2, r1
 80067a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a8:	f003 0310 	and.w	r3, r3, #16
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d00a      	beq.n	80067c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	430a      	orrs	r2, r1
 80067c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ca:	f003 0320 	and.w	r3, r3, #32
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d00a      	beq.n	80067e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	430a      	orrs	r2, r1
 80067e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d01a      	beq.n	800682a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	430a      	orrs	r2, r1
 8006808:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006812:	d10a      	bne.n	800682a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	430a      	orrs	r2, r1
 8006828:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00a      	beq.n	800684c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	430a      	orrs	r2, r1
 800684a:	605a      	str	r2, [r3, #4]
  }
}
 800684c:	bf00      	nop
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b098      	sub	sp, #96	; 0x60
 800685c:	af02      	add	r7, sp, #8
 800685e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006868:	f7fc fb64 	bl	8002f34 <HAL_GetTick>
 800686c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 0308 	and.w	r3, r3, #8
 8006878:	2b08      	cmp	r3, #8
 800687a:	d12e      	bne.n	80068da <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800687c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006880:	9300      	str	r3, [sp, #0]
 8006882:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006884:	2200      	movs	r2, #0
 8006886:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 f88c 	bl	80069a8 <UART_WaitOnFlagUntilTimeout>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d021      	beq.n	80068da <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800689c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800689e:	e853 3f00 	ldrex	r3, [r3]
 80068a2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80068a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068aa:	653b      	str	r3, [r7, #80]	; 0x50
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	461a      	mov	r2, r3
 80068b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068b4:	647b      	str	r3, [r7, #68]	; 0x44
 80068b6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80068ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068bc:	e841 2300 	strex	r3, r2, [r1]
 80068c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80068c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d1e6      	bne.n	8006896 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2220      	movs	r2, #32
 80068cc:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e062      	b.n	80069a0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 0304 	and.w	r3, r3, #4
 80068e4:	2b04      	cmp	r3, #4
 80068e6:	d149      	bne.n	800697c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068ec:	9300      	str	r3, [sp, #0]
 80068ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068f0:	2200      	movs	r2, #0
 80068f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 f856 	bl	80069a8 <UART_WaitOnFlagUntilTimeout>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d03c      	beq.n	800697c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690a:	e853 3f00 	ldrex	r3, [r3]
 800690e:	623b      	str	r3, [r7, #32]
   return(result);
 8006910:	6a3b      	ldr	r3, [r7, #32]
 8006912:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006916:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	461a      	mov	r2, r3
 800691e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006920:	633b      	str	r3, [r7, #48]	; 0x30
 8006922:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006924:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006926:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006928:	e841 2300 	strex	r3, r2, [r1]
 800692c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800692e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006930:	2b00      	cmp	r3, #0
 8006932:	d1e6      	bne.n	8006902 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	3308      	adds	r3, #8
 800693a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	e853 3f00 	ldrex	r3, [r3]
 8006942:	60fb      	str	r3, [r7, #12]
   return(result);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f023 0301 	bic.w	r3, r3, #1
 800694a:	64bb      	str	r3, [r7, #72]	; 0x48
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	3308      	adds	r3, #8
 8006952:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006954:	61fa      	str	r2, [r7, #28]
 8006956:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006958:	69b9      	ldr	r1, [r7, #24]
 800695a:	69fa      	ldr	r2, [r7, #28]
 800695c:	e841 2300 	strex	r3, r2, [r1]
 8006960:	617b      	str	r3, [r7, #20]
   return(result);
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d1e5      	bne.n	8006934 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2220      	movs	r2, #32
 800696c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006978:	2303      	movs	r3, #3
 800697a:	e011      	b.n	80069a0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2220      	movs	r2, #32
 8006980:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2220      	movs	r2, #32
 8006986:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3758      	adds	r7, #88	; 0x58
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	603b      	str	r3, [r7, #0]
 80069b4:	4613      	mov	r3, r2
 80069b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069b8:	e049      	b.n	8006a4e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069ba:	69bb      	ldr	r3, [r7, #24]
 80069bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069c0:	d045      	beq.n	8006a4e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069c2:	f7fc fab7 	bl	8002f34 <HAL_GetTick>
 80069c6:	4602      	mov	r2, r0
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	1ad3      	subs	r3, r2, r3
 80069cc:	69ba      	ldr	r2, [r7, #24]
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d302      	bcc.n	80069d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d101      	bne.n	80069dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80069d8:	2303      	movs	r3, #3
 80069da:	e048      	b.n	8006a6e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 0304 	and.w	r3, r3, #4
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d031      	beq.n	8006a4e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	69db      	ldr	r3, [r3, #28]
 80069f0:	f003 0308 	and.w	r3, r3, #8
 80069f4:	2b08      	cmp	r3, #8
 80069f6:	d110      	bne.n	8006a1a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	2208      	movs	r2, #8
 80069fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a00:	68f8      	ldr	r0, [r7, #12]
 8006a02:	f000 f838 	bl	8006a76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2208      	movs	r2, #8
 8006a0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e029      	b.n	8006a6e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	69db      	ldr	r3, [r3, #28]
 8006a20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a28:	d111      	bne.n	8006a4e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	f000 f81e 	bl	8006a76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2220      	movs	r2, #32
 8006a3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	e00f      	b.n	8006a6e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	69da      	ldr	r2, [r3, #28]
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	4013      	ands	r3, r2
 8006a58:	68ba      	ldr	r2, [r7, #8]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	bf0c      	ite	eq
 8006a5e:	2301      	moveq	r3, #1
 8006a60:	2300      	movne	r3, #0
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	461a      	mov	r2, r3
 8006a66:	79fb      	ldrb	r3, [r7, #7]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d0a6      	beq.n	80069ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3710      	adds	r7, #16
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}

08006a76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a76:	b480      	push	{r7}
 8006a78:	b095      	sub	sp, #84	; 0x54
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a86:	e853 3f00 	ldrex	r3, [r3]
 8006a8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	461a      	mov	r2, r3
 8006a9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a9c:	643b      	str	r3, [r7, #64]	; 0x40
 8006a9e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006aa2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006aa4:	e841 2300 	strex	r3, r2, [r1]
 8006aa8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d1e6      	bne.n	8006a7e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	3308      	adds	r3, #8
 8006ab6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab8:	6a3b      	ldr	r3, [r7, #32]
 8006aba:	e853 3f00 	ldrex	r3, [r3]
 8006abe:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	f023 0301 	bic.w	r3, r3, #1
 8006ac6:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	3308      	adds	r3, #8
 8006ace:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ad0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ad2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ad6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ad8:	e841 2300 	strex	r3, r2, [r1]
 8006adc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1e5      	bne.n	8006ab0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d118      	bne.n	8006b1e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	e853 3f00 	ldrex	r3, [r3]
 8006af8:	60bb      	str	r3, [r7, #8]
   return(result);
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	f023 0310 	bic.w	r3, r3, #16
 8006b00:	647b      	str	r3, [r7, #68]	; 0x44
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	461a      	mov	r2, r3
 8006b08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b0a:	61bb      	str	r3, [r7, #24]
 8006b0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0e:	6979      	ldr	r1, [r7, #20]
 8006b10:	69ba      	ldr	r2, [r7, #24]
 8006b12:	e841 2300 	strex	r3, r2, [r1]
 8006b16:	613b      	str	r3, [r7, #16]
   return(result);
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d1e6      	bne.n	8006aec <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2220      	movs	r2, #32
 8006b22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006b32:	bf00      	nop
 8006b34:	3754      	adds	r7, #84	; 0x54
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr

08006b3e <_ZdlPvj>:
 8006b3e:	f000 b800 	b.w	8006b42 <_ZdlPv>

08006b42 <_ZdlPv>:
 8006b42:	f000 b80f 	b.w	8006b64 <free>

08006b46 <abort>:
 8006b46:	b508      	push	{r3, lr}
 8006b48:	2006      	movs	r0, #6
 8006b4a:	f000 fe69 	bl	8007820 <raise>
 8006b4e:	2001      	movs	r0, #1
 8006b50:	f7fc f896 	bl	8002c80 <_exit>

08006b54 <malloc>:
 8006b54:	4b02      	ldr	r3, [pc, #8]	; (8006b60 <malloc+0xc>)
 8006b56:	4601      	mov	r1, r0
 8006b58:	6818      	ldr	r0, [r3, #0]
 8006b5a:	f000 b82b 	b.w	8006bb4 <_malloc_r>
 8006b5e:	bf00      	nop
 8006b60:	20000064 	.word	0x20000064

08006b64 <free>:
 8006b64:	4b02      	ldr	r3, [pc, #8]	; (8006b70 <free+0xc>)
 8006b66:	4601      	mov	r1, r0
 8006b68:	6818      	ldr	r0, [r3, #0]
 8006b6a:	f001 bd83 	b.w	8008674 <_free_r>
 8006b6e:	bf00      	nop
 8006b70:	20000064 	.word	0x20000064

08006b74 <sbrk_aligned>:
 8006b74:	b570      	push	{r4, r5, r6, lr}
 8006b76:	4e0e      	ldr	r6, [pc, #56]	; (8006bb0 <sbrk_aligned+0x3c>)
 8006b78:	460c      	mov	r4, r1
 8006b7a:	6831      	ldr	r1, [r6, #0]
 8006b7c:	4605      	mov	r5, r0
 8006b7e:	b911      	cbnz	r1, 8006b86 <sbrk_aligned+0x12>
 8006b80:	f000 fea2 	bl	80078c8 <_sbrk_r>
 8006b84:	6030      	str	r0, [r6, #0]
 8006b86:	4621      	mov	r1, r4
 8006b88:	4628      	mov	r0, r5
 8006b8a:	f000 fe9d 	bl	80078c8 <_sbrk_r>
 8006b8e:	1c43      	adds	r3, r0, #1
 8006b90:	d00a      	beq.n	8006ba8 <sbrk_aligned+0x34>
 8006b92:	1cc4      	adds	r4, r0, #3
 8006b94:	f024 0403 	bic.w	r4, r4, #3
 8006b98:	42a0      	cmp	r0, r4
 8006b9a:	d007      	beq.n	8006bac <sbrk_aligned+0x38>
 8006b9c:	1a21      	subs	r1, r4, r0
 8006b9e:	4628      	mov	r0, r5
 8006ba0:	f000 fe92 	bl	80078c8 <_sbrk_r>
 8006ba4:	3001      	adds	r0, #1
 8006ba6:	d101      	bne.n	8006bac <sbrk_aligned+0x38>
 8006ba8:	f04f 34ff 	mov.w	r4, #4294967295
 8006bac:	4620      	mov	r0, r4
 8006bae:	bd70      	pop	{r4, r5, r6, pc}
 8006bb0:	200004cc 	.word	0x200004cc

08006bb4 <_malloc_r>:
 8006bb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bb8:	1ccd      	adds	r5, r1, #3
 8006bba:	f025 0503 	bic.w	r5, r5, #3
 8006bbe:	3508      	adds	r5, #8
 8006bc0:	2d0c      	cmp	r5, #12
 8006bc2:	bf38      	it	cc
 8006bc4:	250c      	movcc	r5, #12
 8006bc6:	2d00      	cmp	r5, #0
 8006bc8:	4607      	mov	r7, r0
 8006bca:	db01      	blt.n	8006bd0 <_malloc_r+0x1c>
 8006bcc:	42a9      	cmp	r1, r5
 8006bce:	d905      	bls.n	8006bdc <_malloc_r+0x28>
 8006bd0:	230c      	movs	r3, #12
 8006bd2:	603b      	str	r3, [r7, #0]
 8006bd4:	2600      	movs	r6, #0
 8006bd6:	4630      	mov	r0, r6
 8006bd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bdc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006cb0 <_malloc_r+0xfc>
 8006be0:	f000 f868 	bl	8006cb4 <__malloc_lock>
 8006be4:	f8d8 3000 	ldr.w	r3, [r8]
 8006be8:	461c      	mov	r4, r3
 8006bea:	bb5c      	cbnz	r4, 8006c44 <_malloc_r+0x90>
 8006bec:	4629      	mov	r1, r5
 8006bee:	4638      	mov	r0, r7
 8006bf0:	f7ff ffc0 	bl	8006b74 <sbrk_aligned>
 8006bf4:	1c43      	adds	r3, r0, #1
 8006bf6:	4604      	mov	r4, r0
 8006bf8:	d155      	bne.n	8006ca6 <_malloc_r+0xf2>
 8006bfa:	f8d8 4000 	ldr.w	r4, [r8]
 8006bfe:	4626      	mov	r6, r4
 8006c00:	2e00      	cmp	r6, #0
 8006c02:	d145      	bne.n	8006c90 <_malloc_r+0xdc>
 8006c04:	2c00      	cmp	r4, #0
 8006c06:	d048      	beq.n	8006c9a <_malloc_r+0xe6>
 8006c08:	6823      	ldr	r3, [r4, #0]
 8006c0a:	4631      	mov	r1, r6
 8006c0c:	4638      	mov	r0, r7
 8006c0e:	eb04 0903 	add.w	r9, r4, r3
 8006c12:	f000 fe59 	bl	80078c8 <_sbrk_r>
 8006c16:	4581      	cmp	r9, r0
 8006c18:	d13f      	bne.n	8006c9a <_malloc_r+0xe6>
 8006c1a:	6821      	ldr	r1, [r4, #0]
 8006c1c:	1a6d      	subs	r5, r5, r1
 8006c1e:	4629      	mov	r1, r5
 8006c20:	4638      	mov	r0, r7
 8006c22:	f7ff ffa7 	bl	8006b74 <sbrk_aligned>
 8006c26:	3001      	adds	r0, #1
 8006c28:	d037      	beq.n	8006c9a <_malloc_r+0xe6>
 8006c2a:	6823      	ldr	r3, [r4, #0]
 8006c2c:	442b      	add	r3, r5
 8006c2e:	6023      	str	r3, [r4, #0]
 8006c30:	f8d8 3000 	ldr.w	r3, [r8]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d038      	beq.n	8006caa <_malloc_r+0xf6>
 8006c38:	685a      	ldr	r2, [r3, #4]
 8006c3a:	42a2      	cmp	r2, r4
 8006c3c:	d12b      	bne.n	8006c96 <_malloc_r+0xe2>
 8006c3e:	2200      	movs	r2, #0
 8006c40:	605a      	str	r2, [r3, #4]
 8006c42:	e00f      	b.n	8006c64 <_malloc_r+0xb0>
 8006c44:	6822      	ldr	r2, [r4, #0]
 8006c46:	1b52      	subs	r2, r2, r5
 8006c48:	d41f      	bmi.n	8006c8a <_malloc_r+0xd6>
 8006c4a:	2a0b      	cmp	r2, #11
 8006c4c:	d917      	bls.n	8006c7e <_malloc_r+0xca>
 8006c4e:	1961      	adds	r1, r4, r5
 8006c50:	42a3      	cmp	r3, r4
 8006c52:	6025      	str	r5, [r4, #0]
 8006c54:	bf18      	it	ne
 8006c56:	6059      	strne	r1, [r3, #4]
 8006c58:	6863      	ldr	r3, [r4, #4]
 8006c5a:	bf08      	it	eq
 8006c5c:	f8c8 1000 	streq.w	r1, [r8]
 8006c60:	5162      	str	r2, [r4, r5]
 8006c62:	604b      	str	r3, [r1, #4]
 8006c64:	4638      	mov	r0, r7
 8006c66:	f104 060b 	add.w	r6, r4, #11
 8006c6a:	f000 f829 	bl	8006cc0 <__malloc_unlock>
 8006c6e:	f026 0607 	bic.w	r6, r6, #7
 8006c72:	1d23      	adds	r3, r4, #4
 8006c74:	1af2      	subs	r2, r6, r3
 8006c76:	d0ae      	beq.n	8006bd6 <_malloc_r+0x22>
 8006c78:	1b9b      	subs	r3, r3, r6
 8006c7a:	50a3      	str	r3, [r4, r2]
 8006c7c:	e7ab      	b.n	8006bd6 <_malloc_r+0x22>
 8006c7e:	42a3      	cmp	r3, r4
 8006c80:	6862      	ldr	r2, [r4, #4]
 8006c82:	d1dd      	bne.n	8006c40 <_malloc_r+0x8c>
 8006c84:	f8c8 2000 	str.w	r2, [r8]
 8006c88:	e7ec      	b.n	8006c64 <_malloc_r+0xb0>
 8006c8a:	4623      	mov	r3, r4
 8006c8c:	6864      	ldr	r4, [r4, #4]
 8006c8e:	e7ac      	b.n	8006bea <_malloc_r+0x36>
 8006c90:	4634      	mov	r4, r6
 8006c92:	6876      	ldr	r6, [r6, #4]
 8006c94:	e7b4      	b.n	8006c00 <_malloc_r+0x4c>
 8006c96:	4613      	mov	r3, r2
 8006c98:	e7cc      	b.n	8006c34 <_malloc_r+0x80>
 8006c9a:	230c      	movs	r3, #12
 8006c9c:	603b      	str	r3, [r7, #0]
 8006c9e:	4638      	mov	r0, r7
 8006ca0:	f000 f80e 	bl	8006cc0 <__malloc_unlock>
 8006ca4:	e797      	b.n	8006bd6 <_malloc_r+0x22>
 8006ca6:	6025      	str	r5, [r4, #0]
 8006ca8:	e7dc      	b.n	8006c64 <_malloc_r+0xb0>
 8006caa:	605b      	str	r3, [r3, #4]
 8006cac:	deff      	udf	#255	; 0xff
 8006cae:	bf00      	nop
 8006cb0:	200004c8 	.word	0x200004c8

08006cb4 <__malloc_lock>:
 8006cb4:	4801      	ldr	r0, [pc, #4]	; (8006cbc <__malloc_lock+0x8>)
 8006cb6:	f000 be53 	b.w	8007960 <__retarget_lock_acquire_recursive>
 8006cba:	bf00      	nop
 8006cbc:	20000610 	.word	0x20000610

08006cc0 <__malloc_unlock>:
 8006cc0:	4801      	ldr	r0, [pc, #4]	; (8006cc8 <__malloc_unlock+0x8>)
 8006cc2:	f000 be4e 	b.w	8007962 <__retarget_lock_release_recursive>
 8006cc6:	bf00      	nop
 8006cc8:	20000610 	.word	0x20000610

08006ccc <__cvt>:
 8006ccc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006cd0:	ec55 4b10 	vmov	r4, r5, d0
 8006cd4:	2d00      	cmp	r5, #0
 8006cd6:	460e      	mov	r6, r1
 8006cd8:	4619      	mov	r1, r3
 8006cda:	462b      	mov	r3, r5
 8006cdc:	bfbb      	ittet	lt
 8006cde:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006ce2:	461d      	movlt	r5, r3
 8006ce4:	2300      	movge	r3, #0
 8006ce6:	232d      	movlt	r3, #45	; 0x2d
 8006ce8:	700b      	strb	r3, [r1, #0]
 8006cea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006cec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006cf0:	4691      	mov	r9, r2
 8006cf2:	f023 0820 	bic.w	r8, r3, #32
 8006cf6:	bfbc      	itt	lt
 8006cf8:	4622      	movlt	r2, r4
 8006cfa:	4614      	movlt	r4, r2
 8006cfc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d00:	d005      	beq.n	8006d0e <__cvt+0x42>
 8006d02:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006d06:	d100      	bne.n	8006d0a <__cvt+0x3e>
 8006d08:	3601      	adds	r6, #1
 8006d0a:	2102      	movs	r1, #2
 8006d0c:	e000      	b.n	8006d10 <__cvt+0x44>
 8006d0e:	2103      	movs	r1, #3
 8006d10:	ab03      	add	r3, sp, #12
 8006d12:	9301      	str	r3, [sp, #4]
 8006d14:	ab02      	add	r3, sp, #8
 8006d16:	9300      	str	r3, [sp, #0]
 8006d18:	ec45 4b10 	vmov	d0, r4, r5
 8006d1c:	4653      	mov	r3, sl
 8006d1e:	4632      	mov	r2, r6
 8006d20:	f000 feb6 	bl	8007a90 <_dtoa_r>
 8006d24:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006d28:	4607      	mov	r7, r0
 8006d2a:	d102      	bne.n	8006d32 <__cvt+0x66>
 8006d2c:	f019 0f01 	tst.w	r9, #1
 8006d30:	d022      	beq.n	8006d78 <__cvt+0xac>
 8006d32:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d36:	eb07 0906 	add.w	r9, r7, r6
 8006d3a:	d110      	bne.n	8006d5e <__cvt+0x92>
 8006d3c:	783b      	ldrb	r3, [r7, #0]
 8006d3e:	2b30      	cmp	r3, #48	; 0x30
 8006d40:	d10a      	bne.n	8006d58 <__cvt+0x8c>
 8006d42:	2200      	movs	r2, #0
 8006d44:	2300      	movs	r3, #0
 8006d46:	4620      	mov	r0, r4
 8006d48:	4629      	mov	r1, r5
 8006d4a:	f7f9 febd 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d4e:	b918      	cbnz	r0, 8006d58 <__cvt+0x8c>
 8006d50:	f1c6 0601 	rsb	r6, r6, #1
 8006d54:	f8ca 6000 	str.w	r6, [sl]
 8006d58:	f8da 3000 	ldr.w	r3, [sl]
 8006d5c:	4499      	add	r9, r3
 8006d5e:	2200      	movs	r2, #0
 8006d60:	2300      	movs	r3, #0
 8006d62:	4620      	mov	r0, r4
 8006d64:	4629      	mov	r1, r5
 8006d66:	f7f9 feaf 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d6a:	b108      	cbz	r0, 8006d70 <__cvt+0xa4>
 8006d6c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006d70:	2230      	movs	r2, #48	; 0x30
 8006d72:	9b03      	ldr	r3, [sp, #12]
 8006d74:	454b      	cmp	r3, r9
 8006d76:	d307      	bcc.n	8006d88 <__cvt+0xbc>
 8006d78:	9b03      	ldr	r3, [sp, #12]
 8006d7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d7c:	1bdb      	subs	r3, r3, r7
 8006d7e:	4638      	mov	r0, r7
 8006d80:	6013      	str	r3, [r2, #0]
 8006d82:	b004      	add	sp, #16
 8006d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d88:	1c59      	adds	r1, r3, #1
 8006d8a:	9103      	str	r1, [sp, #12]
 8006d8c:	701a      	strb	r2, [r3, #0]
 8006d8e:	e7f0      	b.n	8006d72 <__cvt+0xa6>

08006d90 <__exponent>:
 8006d90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d92:	4603      	mov	r3, r0
 8006d94:	2900      	cmp	r1, #0
 8006d96:	bfb8      	it	lt
 8006d98:	4249      	neglt	r1, r1
 8006d9a:	f803 2b02 	strb.w	r2, [r3], #2
 8006d9e:	bfb4      	ite	lt
 8006da0:	222d      	movlt	r2, #45	; 0x2d
 8006da2:	222b      	movge	r2, #43	; 0x2b
 8006da4:	2909      	cmp	r1, #9
 8006da6:	7042      	strb	r2, [r0, #1]
 8006da8:	dd2a      	ble.n	8006e00 <__exponent+0x70>
 8006daa:	f10d 0207 	add.w	r2, sp, #7
 8006dae:	4617      	mov	r7, r2
 8006db0:	260a      	movs	r6, #10
 8006db2:	4694      	mov	ip, r2
 8006db4:	fb91 f5f6 	sdiv	r5, r1, r6
 8006db8:	fb06 1415 	mls	r4, r6, r5, r1
 8006dbc:	3430      	adds	r4, #48	; 0x30
 8006dbe:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006dc2:	460c      	mov	r4, r1
 8006dc4:	2c63      	cmp	r4, #99	; 0x63
 8006dc6:	f102 32ff 	add.w	r2, r2, #4294967295
 8006dca:	4629      	mov	r1, r5
 8006dcc:	dcf1      	bgt.n	8006db2 <__exponent+0x22>
 8006dce:	3130      	adds	r1, #48	; 0x30
 8006dd0:	f1ac 0402 	sub.w	r4, ip, #2
 8006dd4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006dd8:	1c41      	adds	r1, r0, #1
 8006dda:	4622      	mov	r2, r4
 8006ddc:	42ba      	cmp	r2, r7
 8006dde:	d30a      	bcc.n	8006df6 <__exponent+0x66>
 8006de0:	f10d 0209 	add.w	r2, sp, #9
 8006de4:	eba2 020c 	sub.w	r2, r2, ip
 8006de8:	42bc      	cmp	r4, r7
 8006dea:	bf88      	it	hi
 8006dec:	2200      	movhi	r2, #0
 8006dee:	4413      	add	r3, r2
 8006df0:	1a18      	subs	r0, r3, r0
 8006df2:	b003      	add	sp, #12
 8006df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006df6:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006dfa:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006dfe:	e7ed      	b.n	8006ddc <__exponent+0x4c>
 8006e00:	2330      	movs	r3, #48	; 0x30
 8006e02:	3130      	adds	r1, #48	; 0x30
 8006e04:	7083      	strb	r3, [r0, #2]
 8006e06:	70c1      	strb	r1, [r0, #3]
 8006e08:	1d03      	adds	r3, r0, #4
 8006e0a:	e7f1      	b.n	8006df0 <__exponent+0x60>

08006e0c <_printf_float>:
 8006e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e10:	ed2d 8b02 	vpush	{d8}
 8006e14:	b08d      	sub	sp, #52	; 0x34
 8006e16:	460c      	mov	r4, r1
 8006e18:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006e1c:	4616      	mov	r6, r2
 8006e1e:	461f      	mov	r7, r3
 8006e20:	4605      	mov	r5, r0
 8006e22:	f000 fd05 	bl	8007830 <_localeconv_r>
 8006e26:	f8d0 a000 	ldr.w	sl, [r0]
 8006e2a:	4650      	mov	r0, sl
 8006e2c:	f7f9 fa20 	bl	8000270 <strlen>
 8006e30:	2300      	movs	r3, #0
 8006e32:	930a      	str	r3, [sp, #40]	; 0x28
 8006e34:	6823      	ldr	r3, [r4, #0]
 8006e36:	9305      	str	r3, [sp, #20]
 8006e38:	f8d8 3000 	ldr.w	r3, [r8]
 8006e3c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006e40:	3307      	adds	r3, #7
 8006e42:	f023 0307 	bic.w	r3, r3, #7
 8006e46:	f103 0208 	add.w	r2, r3, #8
 8006e4a:	f8c8 2000 	str.w	r2, [r8]
 8006e4e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006e52:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006e56:	9307      	str	r3, [sp, #28]
 8006e58:	f8cd 8018 	str.w	r8, [sp, #24]
 8006e5c:	ee08 0a10 	vmov	s16, r0
 8006e60:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006e64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e68:	4b9e      	ldr	r3, [pc, #632]	; (80070e4 <_printf_float+0x2d8>)
 8006e6a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e6e:	f7f9 fe5d 	bl	8000b2c <__aeabi_dcmpun>
 8006e72:	bb88      	cbnz	r0, 8006ed8 <_printf_float+0xcc>
 8006e74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e78:	4b9a      	ldr	r3, [pc, #616]	; (80070e4 <_printf_float+0x2d8>)
 8006e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e7e:	f7f9 fe37 	bl	8000af0 <__aeabi_dcmple>
 8006e82:	bb48      	cbnz	r0, 8006ed8 <_printf_float+0xcc>
 8006e84:	2200      	movs	r2, #0
 8006e86:	2300      	movs	r3, #0
 8006e88:	4640      	mov	r0, r8
 8006e8a:	4649      	mov	r1, r9
 8006e8c:	f7f9 fe26 	bl	8000adc <__aeabi_dcmplt>
 8006e90:	b110      	cbz	r0, 8006e98 <_printf_float+0x8c>
 8006e92:	232d      	movs	r3, #45	; 0x2d
 8006e94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e98:	4a93      	ldr	r2, [pc, #588]	; (80070e8 <_printf_float+0x2dc>)
 8006e9a:	4b94      	ldr	r3, [pc, #592]	; (80070ec <_printf_float+0x2e0>)
 8006e9c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006ea0:	bf94      	ite	ls
 8006ea2:	4690      	movls	r8, r2
 8006ea4:	4698      	movhi	r8, r3
 8006ea6:	2303      	movs	r3, #3
 8006ea8:	6123      	str	r3, [r4, #16]
 8006eaa:	9b05      	ldr	r3, [sp, #20]
 8006eac:	f023 0304 	bic.w	r3, r3, #4
 8006eb0:	6023      	str	r3, [r4, #0]
 8006eb2:	f04f 0900 	mov.w	r9, #0
 8006eb6:	9700      	str	r7, [sp, #0]
 8006eb8:	4633      	mov	r3, r6
 8006eba:	aa0b      	add	r2, sp, #44	; 0x2c
 8006ebc:	4621      	mov	r1, r4
 8006ebe:	4628      	mov	r0, r5
 8006ec0:	f000 f9da 	bl	8007278 <_printf_common>
 8006ec4:	3001      	adds	r0, #1
 8006ec6:	f040 8090 	bne.w	8006fea <_printf_float+0x1de>
 8006eca:	f04f 30ff 	mov.w	r0, #4294967295
 8006ece:	b00d      	add	sp, #52	; 0x34
 8006ed0:	ecbd 8b02 	vpop	{d8}
 8006ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ed8:	4642      	mov	r2, r8
 8006eda:	464b      	mov	r3, r9
 8006edc:	4640      	mov	r0, r8
 8006ede:	4649      	mov	r1, r9
 8006ee0:	f7f9 fe24 	bl	8000b2c <__aeabi_dcmpun>
 8006ee4:	b140      	cbz	r0, 8006ef8 <_printf_float+0xec>
 8006ee6:	464b      	mov	r3, r9
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	bfbc      	itt	lt
 8006eec:	232d      	movlt	r3, #45	; 0x2d
 8006eee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006ef2:	4a7f      	ldr	r2, [pc, #508]	; (80070f0 <_printf_float+0x2e4>)
 8006ef4:	4b7f      	ldr	r3, [pc, #508]	; (80070f4 <_printf_float+0x2e8>)
 8006ef6:	e7d1      	b.n	8006e9c <_printf_float+0x90>
 8006ef8:	6863      	ldr	r3, [r4, #4]
 8006efa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006efe:	9206      	str	r2, [sp, #24]
 8006f00:	1c5a      	adds	r2, r3, #1
 8006f02:	d13f      	bne.n	8006f84 <_printf_float+0x178>
 8006f04:	2306      	movs	r3, #6
 8006f06:	6063      	str	r3, [r4, #4]
 8006f08:	9b05      	ldr	r3, [sp, #20]
 8006f0a:	6861      	ldr	r1, [r4, #4]
 8006f0c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006f10:	2300      	movs	r3, #0
 8006f12:	9303      	str	r3, [sp, #12]
 8006f14:	ab0a      	add	r3, sp, #40	; 0x28
 8006f16:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006f1a:	ab09      	add	r3, sp, #36	; 0x24
 8006f1c:	ec49 8b10 	vmov	d0, r8, r9
 8006f20:	9300      	str	r3, [sp, #0]
 8006f22:	6022      	str	r2, [r4, #0]
 8006f24:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006f28:	4628      	mov	r0, r5
 8006f2a:	f7ff fecf 	bl	8006ccc <__cvt>
 8006f2e:	9b06      	ldr	r3, [sp, #24]
 8006f30:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f32:	2b47      	cmp	r3, #71	; 0x47
 8006f34:	4680      	mov	r8, r0
 8006f36:	d108      	bne.n	8006f4a <_printf_float+0x13e>
 8006f38:	1cc8      	adds	r0, r1, #3
 8006f3a:	db02      	blt.n	8006f42 <_printf_float+0x136>
 8006f3c:	6863      	ldr	r3, [r4, #4]
 8006f3e:	4299      	cmp	r1, r3
 8006f40:	dd41      	ble.n	8006fc6 <_printf_float+0x1ba>
 8006f42:	f1ab 0302 	sub.w	r3, fp, #2
 8006f46:	fa5f fb83 	uxtb.w	fp, r3
 8006f4a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006f4e:	d820      	bhi.n	8006f92 <_printf_float+0x186>
 8006f50:	3901      	subs	r1, #1
 8006f52:	465a      	mov	r2, fp
 8006f54:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006f58:	9109      	str	r1, [sp, #36]	; 0x24
 8006f5a:	f7ff ff19 	bl	8006d90 <__exponent>
 8006f5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f60:	1813      	adds	r3, r2, r0
 8006f62:	2a01      	cmp	r2, #1
 8006f64:	4681      	mov	r9, r0
 8006f66:	6123      	str	r3, [r4, #16]
 8006f68:	dc02      	bgt.n	8006f70 <_printf_float+0x164>
 8006f6a:	6822      	ldr	r2, [r4, #0]
 8006f6c:	07d2      	lsls	r2, r2, #31
 8006f6e:	d501      	bpl.n	8006f74 <_printf_float+0x168>
 8006f70:	3301      	adds	r3, #1
 8006f72:	6123      	str	r3, [r4, #16]
 8006f74:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d09c      	beq.n	8006eb6 <_printf_float+0xaa>
 8006f7c:	232d      	movs	r3, #45	; 0x2d
 8006f7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f82:	e798      	b.n	8006eb6 <_printf_float+0xaa>
 8006f84:	9a06      	ldr	r2, [sp, #24]
 8006f86:	2a47      	cmp	r2, #71	; 0x47
 8006f88:	d1be      	bne.n	8006f08 <_printf_float+0xfc>
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d1bc      	bne.n	8006f08 <_printf_float+0xfc>
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e7b9      	b.n	8006f06 <_printf_float+0xfa>
 8006f92:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006f96:	d118      	bne.n	8006fca <_printf_float+0x1be>
 8006f98:	2900      	cmp	r1, #0
 8006f9a:	6863      	ldr	r3, [r4, #4]
 8006f9c:	dd0b      	ble.n	8006fb6 <_printf_float+0x1aa>
 8006f9e:	6121      	str	r1, [r4, #16]
 8006fa0:	b913      	cbnz	r3, 8006fa8 <_printf_float+0x19c>
 8006fa2:	6822      	ldr	r2, [r4, #0]
 8006fa4:	07d0      	lsls	r0, r2, #31
 8006fa6:	d502      	bpl.n	8006fae <_printf_float+0x1a2>
 8006fa8:	3301      	adds	r3, #1
 8006faa:	440b      	add	r3, r1
 8006fac:	6123      	str	r3, [r4, #16]
 8006fae:	65a1      	str	r1, [r4, #88]	; 0x58
 8006fb0:	f04f 0900 	mov.w	r9, #0
 8006fb4:	e7de      	b.n	8006f74 <_printf_float+0x168>
 8006fb6:	b913      	cbnz	r3, 8006fbe <_printf_float+0x1b2>
 8006fb8:	6822      	ldr	r2, [r4, #0]
 8006fba:	07d2      	lsls	r2, r2, #31
 8006fbc:	d501      	bpl.n	8006fc2 <_printf_float+0x1b6>
 8006fbe:	3302      	adds	r3, #2
 8006fc0:	e7f4      	b.n	8006fac <_printf_float+0x1a0>
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e7f2      	b.n	8006fac <_printf_float+0x1a0>
 8006fc6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006fca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fcc:	4299      	cmp	r1, r3
 8006fce:	db05      	blt.n	8006fdc <_printf_float+0x1d0>
 8006fd0:	6823      	ldr	r3, [r4, #0]
 8006fd2:	6121      	str	r1, [r4, #16]
 8006fd4:	07d8      	lsls	r0, r3, #31
 8006fd6:	d5ea      	bpl.n	8006fae <_printf_float+0x1a2>
 8006fd8:	1c4b      	adds	r3, r1, #1
 8006fda:	e7e7      	b.n	8006fac <_printf_float+0x1a0>
 8006fdc:	2900      	cmp	r1, #0
 8006fde:	bfd4      	ite	le
 8006fe0:	f1c1 0202 	rsble	r2, r1, #2
 8006fe4:	2201      	movgt	r2, #1
 8006fe6:	4413      	add	r3, r2
 8006fe8:	e7e0      	b.n	8006fac <_printf_float+0x1a0>
 8006fea:	6823      	ldr	r3, [r4, #0]
 8006fec:	055a      	lsls	r2, r3, #21
 8006fee:	d407      	bmi.n	8007000 <_printf_float+0x1f4>
 8006ff0:	6923      	ldr	r3, [r4, #16]
 8006ff2:	4642      	mov	r2, r8
 8006ff4:	4631      	mov	r1, r6
 8006ff6:	4628      	mov	r0, r5
 8006ff8:	47b8      	blx	r7
 8006ffa:	3001      	adds	r0, #1
 8006ffc:	d12c      	bne.n	8007058 <_printf_float+0x24c>
 8006ffe:	e764      	b.n	8006eca <_printf_float+0xbe>
 8007000:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007004:	f240 80e0 	bls.w	80071c8 <_printf_float+0x3bc>
 8007008:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800700c:	2200      	movs	r2, #0
 800700e:	2300      	movs	r3, #0
 8007010:	f7f9 fd5a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007014:	2800      	cmp	r0, #0
 8007016:	d034      	beq.n	8007082 <_printf_float+0x276>
 8007018:	4a37      	ldr	r2, [pc, #220]	; (80070f8 <_printf_float+0x2ec>)
 800701a:	2301      	movs	r3, #1
 800701c:	4631      	mov	r1, r6
 800701e:	4628      	mov	r0, r5
 8007020:	47b8      	blx	r7
 8007022:	3001      	adds	r0, #1
 8007024:	f43f af51 	beq.w	8006eca <_printf_float+0xbe>
 8007028:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800702c:	429a      	cmp	r2, r3
 800702e:	db02      	blt.n	8007036 <_printf_float+0x22a>
 8007030:	6823      	ldr	r3, [r4, #0]
 8007032:	07d8      	lsls	r0, r3, #31
 8007034:	d510      	bpl.n	8007058 <_printf_float+0x24c>
 8007036:	ee18 3a10 	vmov	r3, s16
 800703a:	4652      	mov	r2, sl
 800703c:	4631      	mov	r1, r6
 800703e:	4628      	mov	r0, r5
 8007040:	47b8      	blx	r7
 8007042:	3001      	adds	r0, #1
 8007044:	f43f af41 	beq.w	8006eca <_printf_float+0xbe>
 8007048:	f04f 0800 	mov.w	r8, #0
 800704c:	f104 091a 	add.w	r9, r4, #26
 8007050:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007052:	3b01      	subs	r3, #1
 8007054:	4543      	cmp	r3, r8
 8007056:	dc09      	bgt.n	800706c <_printf_float+0x260>
 8007058:	6823      	ldr	r3, [r4, #0]
 800705a:	079b      	lsls	r3, r3, #30
 800705c:	f100 8107 	bmi.w	800726e <_printf_float+0x462>
 8007060:	68e0      	ldr	r0, [r4, #12]
 8007062:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007064:	4298      	cmp	r0, r3
 8007066:	bfb8      	it	lt
 8007068:	4618      	movlt	r0, r3
 800706a:	e730      	b.n	8006ece <_printf_float+0xc2>
 800706c:	2301      	movs	r3, #1
 800706e:	464a      	mov	r2, r9
 8007070:	4631      	mov	r1, r6
 8007072:	4628      	mov	r0, r5
 8007074:	47b8      	blx	r7
 8007076:	3001      	adds	r0, #1
 8007078:	f43f af27 	beq.w	8006eca <_printf_float+0xbe>
 800707c:	f108 0801 	add.w	r8, r8, #1
 8007080:	e7e6      	b.n	8007050 <_printf_float+0x244>
 8007082:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007084:	2b00      	cmp	r3, #0
 8007086:	dc39      	bgt.n	80070fc <_printf_float+0x2f0>
 8007088:	4a1b      	ldr	r2, [pc, #108]	; (80070f8 <_printf_float+0x2ec>)
 800708a:	2301      	movs	r3, #1
 800708c:	4631      	mov	r1, r6
 800708e:	4628      	mov	r0, r5
 8007090:	47b8      	blx	r7
 8007092:	3001      	adds	r0, #1
 8007094:	f43f af19 	beq.w	8006eca <_printf_float+0xbe>
 8007098:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800709c:	4313      	orrs	r3, r2
 800709e:	d102      	bne.n	80070a6 <_printf_float+0x29a>
 80070a0:	6823      	ldr	r3, [r4, #0]
 80070a2:	07d9      	lsls	r1, r3, #31
 80070a4:	d5d8      	bpl.n	8007058 <_printf_float+0x24c>
 80070a6:	ee18 3a10 	vmov	r3, s16
 80070aa:	4652      	mov	r2, sl
 80070ac:	4631      	mov	r1, r6
 80070ae:	4628      	mov	r0, r5
 80070b0:	47b8      	blx	r7
 80070b2:	3001      	adds	r0, #1
 80070b4:	f43f af09 	beq.w	8006eca <_printf_float+0xbe>
 80070b8:	f04f 0900 	mov.w	r9, #0
 80070bc:	f104 0a1a 	add.w	sl, r4, #26
 80070c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070c2:	425b      	negs	r3, r3
 80070c4:	454b      	cmp	r3, r9
 80070c6:	dc01      	bgt.n	80070cc <_printf_float+0x2c0>
 80070c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070ca:	e792      	b.n	8006ff2 <_printf_float+0x1e6>
 80070cc:	2301      	movs	r3, #1
 80070ce:	4652      	mov	r2, sl
 80070d0:	4631      	mov	r1, r6
 80070d2:	4628      	mov	r0, r5
 80070d4:	47b8      	blx	r7
 80070d6:	3001      	adds	r0, #1
 80070d8:	f43f aef7 	beq.w	8006eca <_printf_float+0xbe>
 80070dc:	f109 0901 	add.w	r9, r9, #1
 80070e0:	e7ee      	b.n	80070c0 <_printf_float+0x2b4>
 80070e2:	bf00      	nop
 80070e4:	7fefffff 	.word	0x7fefffff
 80070e8:	080099dc 	.word	0x080099dc
 80070ec:	080099e0 	.word	0x080099e0
 80070f0:	080099e4 	.word	0x080099e4
 80070f4:	080099e8 	.word	0x080099e8
 80070f8:	080099ec 	.word	0x080099ec
 80070fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007100:	429a      	cmp	r2, r3
 8007102:	bfa8      	it	ge
 8007104:	461a      	movge	r2, r3
 8007106:	2a00      	cmp	r2, #0
 8007108:	4691      	mov	r9, r2
 800710a:	dc37      	bgt.n	800717c <_printf_float+0x370>
 800710c:	f04f 0b00 	mov.w	fp, #0
 8007110:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007114:	f104 021a 	add.w	r2, r4, #26
 8007118:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800711a:	9305      	str	r3, [sp, #20]
 800711c:	eba3 0309 	sub.w	r3, r3, r9
 8007120:	455b      	cmp	r3, fp
 8007122:	dc33      	bgt.n	800718c <_printf_float+0x380>
 8007124:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007128:	429a      	cmp	r2, r3
 800712a:	db3b      	blt.n	80071a4 <_printf_float+0x398>
 800712c:	6823      	ldr	r3, [r4, #0]
 800712e:	07da      	lsls	r2, r3, #31
 8007130:	d438      	bmi.n	80071a4 <_printf_float+0x398>
 8007132:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007136:	eba2 0903 	sub.w	r9, r2, r3
 800713a:	9b05      	ldr	r3, [sp, #20]
 800713c:	1ad2      	subs	r2, r2, r3
 800713e:	4591      	cmp	r9, r2
 8007140:	bfa8      	it	ge
 8007142:	4691      	movge	r9, r2
 8007144:	f1b9 0f00 	cmp.w	r9, #0
 8007148:	dc35      	bgt.n	80071b6 <_printf_float+0x3aa>
 800714a:	f04f 0800 	mov.w	r8, #0
 800714e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007152:	f104 0a1a 	add.w	sl, r4, #26
 8007156:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800715a:	1a9b      	subs	r3, r3, r2
 800715c:	eba3 0309 	sub.w	r3, r3, r9
 8007160:	4543      	cmp	r3, r8
 8007162:	f77f af79 	ble.w	8007058 <_printf_float+0x24c>
 8007166:	2301      	movs	r3, #1
 8007168:	4652      	mov	r2, sl
 800716a:	4631      	mov	r1, r6
 800716c:	4628      	mov	r0, r5
 800716e:	47b8      	blx	r7
 8007170:	3001      	adds	r0, #1
 8007172:	f43f aeaa 	beq.w	8006eca <_printf_float+0xbe>
 8007176:	f108 0801 	add.w	r8, r8, #1
 800717a:	e7ec      	b.n	8007156 <_printf_float+0x34a>
 800717c:	4613      	mov	r3, r2
 800717e:	4631      	mov	r1, r6
 8007180:	4642      	mov	r2, r8
 8007182:	4628      	mov	r0, r5
 8007184:	47b8      	blx	r7
 8007186:	3001      	adds	r0, #1
 8007188:	d1c0      	bne.n	800710c <_printf_float+0x300>
 800718a:	e69e      	b.n	8006eca <_printf_float+0xbe>
 800718c:	2301      	movs	r3, #1
 800718e:	4631      	mov	r1, r6
 8007190:	4628      	mov	r0, r5
 8007192:	9205      	str	r2, [sp, #20]
 8007194:	47b8      	blx	r7
 8007196:	3001      	adds	r0, #1
 8007198:	f43f ae97 	beq.w	8006eca <_printf_float+0xbe>
 800719c:	9a05      	ldr	r2, [sp, #20]
 800719e:	f10b 0b01 	add.w	fp, fp, #1
 80071a2:	e7b9      	b.n	8007118 <_printf_float+0x30c>
 80071a4:	ee18 3a10 	vmov	r3, s16
 80071a8:	4652      	mov	r2, sl
 80071aa:	4631      	mov	r1, r6
 80071ac:	4628      	mov	r0, r5
 80071ae:	47b8      	blx	r7
 80071b0:	3001      	adds	r0, #1
 80071b2:	d1be      	bne.n	8007132 <_printf_float+0x326>
 80071b4:	e689      	b.n	8006eca <_printf_float+0xbe>
 80071b6:	9a05      	ldr	r2, [sp, #20]
 80071b8:	464b      	mov	r3, r9
 80071ba:	4442      	add	r2, r8
 80071bc:	4631      	mov	r1, r6
 80071be:	4628      	mov	r0, r5
 80071c0:	47b8      	blx	r7
 80071c2:	3001      	adds	r0, #1
 80071c4:	d1c1      	bne.n	800714a <_printf_float+0x33e>
 80071c6:	e680      	b.n	8006eca <_printf_float+0xbe>
 80071c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071ca:	2a01      	cmp	r2, #1
 80071cc:	dc01      	bgt.n	80071d2 <_printf_float+0x3c6>
 80071ce:	07db      	lsls	r3, r3, #31
 80071d0:	d53a      	bpl.n	8007248 <_printf_float+0x43c>
 80071d2:	2301      	movs	r3, #1
 80071d4:	4642      	mov	r2, r8
 80071d6:	4631      	mov	r1, r6
 80071d8:	4628      	mov	r0, r5
 80071da:	47b8      	blx	r7
 80071dc:	3001      	adds	r0, #1
 80071de:	f43f ae74 	beq.w	8006eca <_printf_float+0xbe>
 80071e2:	ee18 3a10 	vmov	r3, s16
 80071e6:	4652      	mov	r2, sl
 80071e8:	4631      	mov	r1, r6
 80071ea:	4628      	mov	r0, r5
 80071ec:	47b8      	blx	r7
 80071ee:	3001      	adds	r0, #1
 80071f0:	f43f ae6b 	beq.w	8006eca <_printf_float+0xbe>
 80071f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80071f8:	2200      	movs	r2, #0
 80071fa:	2300      	movs	r3, #0
 80071fc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007200:	f7f9 fc62 	bl	8000ac8 <__aeabi_dcmpeq>
 8007204:	b9d8      	cbnz	r0, 800723e <_printf_float+0x432>
 8007206:	f10a 33ff 	add.w	r3, sl, #4294967295
 800720a:	f108 0201 	add.w	r2, r8, #1
 800720e:	4631      	mov	r1, r6
 8007210:	4628      	mov	r0, r5
 8007212:	47b8      	blx	r7
 8007214:	3001      	adds	r0, #1
 8007216:	d10e      	bne.n	8007236 <_printf_float+0x42a>
 8007218:	e657      	b.n	8006eca <_printf_float+0xbe>
 800721a:	2301      	movs	r3, #1
 800721c:	4652      	mov	r2, sl
 800721e:	4631      	mov	r1, r6
 8007220:	4628      	mov	r0, r5
 8007222:	47b8      	blx	r7
 8007224:	3001      	adds	r0, #1
 8007226:	f43f ae50 	beq.w	8006eca <_printf_float+0xbe>
 800722a:	f108 0801 	add.w	r8, r8, #1
 800722e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007230:	3b01      	subs	r3, #1
 8007232:	4543      	cmp	r3, r8
 8007234:	dcf1      	bgt.n	800721a <_printf_float+0x40e>
 8007236:	464b      	mov	r3, r9
 8007238:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800723c:	e6da      	b.n	8006ff4 <_printf_float+0x1e8>
 800723e:	f04f 0800 	mov.w	r8, #0
 8007242:	f104 0a1a 	add.w	sl, r4, #26
 8007246:	e7f2      	b.n	800722e <_printf_float+0x422>
 8007248:	2301      	movs	r3, #1
 800724a:	4642      	mov	r2, r8
 800724c:	e7df      	b.n	800720e <_printf_float+0x402>
 800724e:	2301      	movs	r3, #1
 8007250:	464a      	mov	r2, r9
 8007252:	4631      	mov	r1, r6
 8007254:	4628      	mov	r0, r5
 8007256:	47b8      	blx	r7
 8007258:	3001      	adds	r0, #1
 800725a:	f43f ae36 	beq.w	8006eca <_printf_float+0xbe>
 800725e:	f108 0801 	add.w	r8, r8, #1
 8007262:	68e3      	ldr	r3, [r4, #12]
 8007264:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007266:	1a5b      	subs	r3, r3, r1
 8007268:	4543      	cmp	r3, r8
 800726a:	dcf0      	bgt.n	800724e <_printf_float+0x442>
 800726c:	e6f8      	b.n	8007060 <_printf_float+0x254>
 800726e:	f04f 0800 	mov.w	r8, #0
 8007272:	f104 0919 	add.w	r9, r4, #25
 8007276:	e7f4      	b.n	8007262 <_printf_float+0x456>

08007278 <_printf_common>:
 8007278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800727c:	4616      	mov	r6, r2
 800727e:	4699      	mov	r9, r3
 8007280:	688a      	ldr	r2, [r1, #8]
 8007282:	690b      	ldr	r3, [r1, #16]
 8007284:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007288:	4293      	cmp	r3, r2
 800728a:	bfb8      	it	lt
 800728c:	4613      	movlt	r3, r2
 800728e:	6033      	str	r3, [r6, #0]
 8007290:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007294:	4607      	mov	r7, r0
 8007296:	460c      	mov	r4, r1
 8007298:	b10a      	cbz	r2, 800729e <_printf_common+0x26>
 800729a:	3301      	adds	r3, #1
 800729c:	6033      	str	r3, [r6, #0]
 800729e:	6823      	ldr	r3, [r4, #0]
 80072a0:	0699      	lsls	r1, r3, #26
 80072a2:	bf42      	ittt	mi
 80072a4:	6833      	ldrmi	r3, [r6, #0]
 80072a6:	3302      	addmi	r3, #2
 80072a8:	6033      	strmi	r3, [r6, #0]
 80072aa:	6825      	ldr	r5, [r4, #0]
 80072ac:	f015 0506 	ands.w	r5, r5, #6
 80072b0:	d106      	bne.n	80072c0 <_printf_common+0x48>
 80072b2:	f104 0a19 	add.w	sl, r4, #25
 80072b6:	68e3      	ldr	r3, [r4, #12]
 80072b8:	6832      	ldr	r2, [r6, #0]
 80072ba:	1a9b      	subs	r3, r3, r2
 80072bc:	42ab      	cmp	r3, r5
 80072be:	dc26      	bgt.n	800730e <_printf_common+0x96>
 80072c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80072c4:	1e13      	subs	r3, r2, #0
 80072c6:	6822      	ldr	r2, [r4, #0]
 80072c8:	bf18      	it	ne
 80072ca:	2301      	movne	r3, #1
 80072cc:	0692      	lsls	r2, r2, #26
 80072ce:	d42b      	bmi.n	8007328 <_printf_common+0xb0>
 80072d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072d4:	4649      	mov	r1, r9
 80072d6:	4638      	mov	r0, r7
 80072d8:	47c0      	blx	r8
 80072da:	3001      	adds	r0, #1
 80072dc:	d01e      	beq.n	800731c <_printf_common+0xa4>
 80072de:	6823      	ldr	r3, [r4, #0]
 80072e0:	6922      	ldr	r2, [r4, #16]
 80072e2:	f003 0306 	and.w	r3, r3, #6
 80072e6:	2b04      	cmp	r3, #4
 80072e8:	bf02      	ittt	eq
 80072ea:	68e5      	ldreq	r5, [r4, #12]
 80072ec:	6833      	ldreq	r3, [r6, #0]
 80072ee:	1aed      	subeq	r5, r5, r3
 80072f0:	68a3      	ldr	r3, [r4, #8]
 80072f2:	bf0c      	ite	eq
 80072f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072f8:	2500      	movne	r5, #0
 80072fa:	4293      	cmp	r3, r2
 80072fc:	bfc4      	itt	gt
 80072fe:	1a9b      	subgt	r3, r3, r2
 8007300:	18ed      	addgt	r5, r5, r3
 8007302:	2600      	movs	r6, #0
 8007304:	341a      	adds	r4, #26
 8007306:	42b5      	cmp	r5, r6
 8007308:	d11a      	bne.n	8007340 <_printf_common+0xc8>
 800730a:	2000      	movs	r0, #0
 800730c:	e008      	b.n	8007320 <_printf_common+0xa8>
 800730e:	2301      	movs	r3, #1
 8007310:	4652      	mov	r2, sl
 8007312:	4649      	mov	r1, r9
 8007314:	4638      	mov	r0, r7
 8007316:	47c0      	blx	r8
 8007318:	3001      	adds	r0, #1
 800731a:	d103      	bne.n	8007324 <_printf_common+0xac>
 800731c:	f04f 30ff 	mov.w	r0, #4294967295
 8007320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007324:	3501      	adds	r5, #1
 8007326:	e7c6      	b.n	80072b6 <_printf_common+0x3e>
 8007328:	18e1      	adds	r1, r4, r3
 800732a:	1c5a      	adds	r2, r3, #1
 800732c:	2030      	movs	r0, #48	; 0x30
 800732e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007332:	4422      	add	r2, r4
 8007334:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007338:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800733c:	3302      	adds	r3, #2
 800733e:	e7c7      	b.n	80072d0 <_printf_common+0x58>
 8007340:	2301      	movs	r3, #1
 8007342:	4622      	mov	r2, r4
 8007344:	4649      	mov	r1, r9
 8007346:	4638      	mov	r0, r7
 8007348:	47c0      	blx	r8
 800734a:	3001      	adds	r0, #1
 800734c:	d0e6      	beq.n	800731c <_printf_common+0xa4>
 800734e:	3601      	adds	r6, #1
 8007350:	e7d9      	b.n	8007306 <_printf_common+0x8e>
	...

08007354 <_printf_i>:
 8007354:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007358:	7e0f      	ldrb	r7, [r1, #24]
 800735a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800735c:	2f78      	cmp	r7, #120	; 0x78
 800735e:	4691      	mov	r9, r2
 8007360:	4680      	mov	r8, r0
 8007362:	460c      	mov	r4, r1
 8007364:	469a      	mov	sl, r3
 8007366:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800736a:	d807      	bhi.n	800737c <_printf_i+0x28>
 800736c:	2f62      	cmp	r7, #98	; 0x62
 800736e:	d80a      	bhi.n	8007386 <_printf_i+0x32>
 8007370:	2f00      	cmp	r7, #0
 8007372:	f000 80d4 	beq.w	800751e <_printf_i+0x1ca>
 8007376:	2f58      	cmp	r7, #88	; 0x58
 8007378:	f000 80c0 	beq.w	80074fc <_printf_i+0x1a8>
 800737c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007380:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007384:	e03a      	b.n	80073fc <_printf_i+0xa8>
 8007386:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800738a:	2b15      	cmp	r3, #21
 800738c:	d8f6      	bhi.n	800737c <_printf_i+0x28>
 800738e:	a101      	add	r1, pc, #4	; (adr r1, 8007394 <_printf_i+0x40>)
 8007390:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007394:	080073ed 	.word	0x080073ed
 8007398:	08007401 	.word	0x08007401
 800739c:	0800737d 	.word	0x0800737d
 80073a0:	0800737d 	.word	0x0800737d
 80073a4:	0800737d 	.word	0x0800737d
 80073a8:	0800737d 	.word	0x0800737d
 80073ac:	08007401 	.word	0x08007401
 80073b0:	0800737d 	.word	0x0800737d
 80073b4:	0800737d 	.word	0x0800737d
 80073b8:	0800737d 	.word	0x0800737d
 80073bc:	0800737d 	.word	0x0800737d
 80073c0:	08007505 	.word	0x08007505
 80073c4:	0800742d 	.word	0x0800742d
 80073c8:	080074bf 	.word	0x080074bf
 80073cc:	0800737d 	.word	0x0800737d
 80073d0:	0800737d 	.word	0x0800737d
 80073d4:	08007527 	.word	0x08007527
 80073d8:	0800737d 	.word	0x0800737d
 80073dc:	0800742d 	.word	0x0800742d
 80073e0:	0800737d 	.word	0x0800737d
 80073e4:	0800737d 	.word	0x0800737d
 80073e8:	080074c7 	.word	0x080074c7
 80073ec:	682b      	ldr	r3, [r5, #0]
 80073ee:	1d1a      	adds	r2, r3, #4
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	602a      	str	r2, [r5, #0]
 80073f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073fc:	2301      	movs	r3, #1
 80073fe:	e09f      	b.n	8007540 <_printf_i+0x1ec>
 8007400:	6820      	ldr	r0, [r4, #0]
 8007402:	682b      	ldr	r3, [r5, #0]
 8007404:	0607      	lsls	r7, r0, #24
 8007406:	f103 0104 	add.w	r1, r3, #4
 800740a:	6029      	str	r1, [r5, #0]
 800740c:	d501      	bpl.n	8007412 <_printf_i+0xbe>
 800740e:	681e      	ldr	r6, [r3, #0]
 8007410:	e003      	b.n	800741a <_printf_i+0xc6>
 8007412:	0646      	lsls	r6, r0, #25
 8007414:	d5fb      	bpl.n	800740e <_printf_i+0xba>
 8007416:	f9b3 6000 	ldrsh.w	r6, [r3]
 800741a:	2e00      	cmp	r6, #0
 800741c:	da03      	bge.n	8007426 <_printf_i+0xd2>
 800741e:	232d      	movs	r3, #45	; 0x2d
 8007420:	4276      	negs	r6, r6
 8007422:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007426:	485a      	ldr	r0, [pc, #360]	; (8007590 <_printf_i+0x23c>)
 8007428:	230a      	movs	r3, #10
 800742a:	e012      	b.n	8007452 <_printf_i+0xfe>
 800742c:	682b      	ldr	r3, [r5, #0]
 800742e:	6820      	ldr	r0, [r4, #0]
 8007430:	1d19      	adds	r1, r3, #4
 8007432:	6029      	str	r1, [r5, #0]
 8007434:	0605      	lsls	r5, r0, #24
 8007436:	d501      	bpl.n	800743c <_printf_i+0xe8>
 8007438:	681e      	ldr	r6, [r3, #0]
 800743a:	e002      	b.n	8007442 <_printf_i+0xee>
 800743c:	0641      	lsls	r1, r0, #25
 800743e:	d5fb      	bpl.n	8007438 <_printf_i+0xe4>
 8007440:	881e      	ldrh	r6, [r3, #0]
 8007442:	4853      	ldr	r0, [pc, #332]	; (8007590 <_printf_i+0x23c>)
 8007444:	2f6f      	cmp	r7, #111	; 0x6f
 8007446:	bf0c      	ite	eq
 8007448:	2308      	moveq	r3, #8
 800744a:	230a      	movne	r3, #10
 800744c:	2100      	movs	r1, #0
 800744e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007452:	6865      	ldr	r5, [r4, #4]
 8007454:	60a5      	str	r5, [r4, #8]
 8007456:	2d00      	cmp	r5, #0
 8007458:	bfa2      	ittt	ge
 800745a:	6821      	ldrge	r1, [r4, #0]
 800745c:	f021 0104 	bicge.w	r1, r1, #4
 8007460:	6021      	strge	r1, [r4, #0]
 8007462:	b90e      	cbnz	r6, 8007468 <_printf_i+0x114>
 8007464:	2d00      	cmp	r5, #0
 8007466:	d04b      	beq.n	8007500 <_printf_i+0x1ac>
 8007468:	4615      	mov	r5, r2
 800746a:	fbb6 f1f3 	udiv	r1, r6, r3
 800746e:	fb03 6711 	mls	r7, r3, r1, r6
 8007472:	5dc7      	ldrb	r7, [r0, r7]
 8007474:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007478:	4637      	mov	r7, r6
 800747a:	42bb      	cmp	r3, r7
 800747c:	460e      	mov	r6, r1
 800747e:	d9f4      	bls.n	800746a <_printf_i+0x116>
 8007480:	2b08      	cmp	r3, #8
 8007482:	d10b      	bne.n	800749c <_printf_i+0x148>
 8007484:	6823      	ldr	r3, [r4, #0]
 8007486:	07de      	lsls	r6, r3, #31
 8007488:	d508      	bpl.n	800749c <_printf_i+0x148>
 800748a:	6923      	ldr	r3, [r4, #16]
 800748c:	6861      	ldr	r1, [r4, #4]
 800748e:	4299      	cmp	r1, r3
 8007490:	bfde      	ittt	le
 8007492:	2330      	movle	r3, #48	; 0x30
 8007494:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007498:	f105 35ff 	addle.w	r5, r5, #4294967295
 800749c:	1b52      	subs	r2, r2, r5
 800749e:	6122      	str	r2, [r4, #16]
 80074a0:	f8cd a000 	str.w	sl, [sp]
 80074a4:	464b      	mov	r3, r9
 80074a6:	aa03      	add	r2, sp, #12
 80074a8:	4621      	mov	r1, r4
 80074aa:	4640      	mov	r0, r8
 80074ac:	f7ff fee4 	bl	8007278 <_printf_common>
 80074b0:	3001      	adds	r0, #1
 80074b2:	d14a      	bne.n	800754a <_printf_i+0x1f6>
 80074b4:	f04f 30ff 	mov.w	r0, #4294967295
 80074b8:	b004      	add	sp, #16
 80074ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074be:	6823      	ldr	r3, [r4, #0]
 80074c0:	f043 0320 	orr.w	r3, r3, #32
 80074c4:	6023      	str	r3, [r4, #0]
 80074c6:	4833      	ldr	r0, [pc, #204]	; (8007594 <_printf_i+0x240>)
 80074c8:	2778      	movs	r7, #120	; 0x78
 80074ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80074ce:	6823      	ldr	r3, [r4, #0]
 80074d0:	6829      	ldr	r1, [r5, #0]
 80074d2:	061f      	lsls	r7, r3, #24
 80074d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80074d8:	d402      	bmi.n	80074e0 <_printf_i+0x18c>
 80074da:	065f      	lsls	r7, r3, #25
 80074dc:	bf48      	it	mi
 80074de:	b2b6      	uxthmi	r6, r6
 80074e0:	07df      	lsls	r7, r3, #31
 80074e2:	bf48      	it	mi
 80074e4:	f043 0320 	orrmi.w	r3, r3, #32
 80074e8:	6029      	str	r1, [r5, #0]
 80074ea:	bf48      	it	mi
 80074ec:	6023      	strmi	r3, [r4, #0]
 80074ee:	b91e      	cbnz	r6, 80074f8 <_printf_i+0x1a4>
 80074f0:	6823      	ldr	r3, [r4, #0]
 80074f2:	f023 0320 	bic.w	r3, r3, #32
 80074f6:	6023      	str	r3, [r4, #0]
 80074f8:	2310      	movs	r3, #16
 80074fa:	e7a7      	b.n	800744c <_printf_i+0xf8>
 80074fc:	4824      	ldr	r0, [pc, #144]	; (8007590 <_printf_i+0x23c>)
 80074fe:	e7e4      	b.n	80074ca <_printf_i+0x176>
 8007500:	4615      	mov	r5, r2
 8007502:	e7bd      	b.n	8007480 <_printf_i+0x12c>
 8007504:	682b      	ldr	r3, [r5, #0]
 8007506:	6826      	ldr	r6, [r4, #0]
 8007508:	6961      	ldr	r1, [r4, #20]
 800750a:	1d18      	adds	r0, r3, #4
 800750c:	6028      	str	r0, [r5, #0]
 800750e:	0635      	lsls	r5, r6, #24
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	d501      	bpl.n	8007518 <_printf_i+0x1c4>
 8007514:	6019      	str	r1, [r3, #0]
 8007516:	e002      	b.n	800751e <_printf_i+0x1ca>
 8007518:	0670      	lsls	r0, r6, #25
 800751a:	d5fb      	bpl.n	8007514 <_printf_i+0x1c0>
 800751c:	8019      	strh	r1, [r3, #0]
 800751e:	2300      	movs	r3, #0
 8007520:	6123      	str	r3, [r4, #16]
 8007522:	4615      	mov	r5, r2
 8007524:	e7bc      	b.n	80074a0 <_printf_i+0x14c>
 8007526:	682b      	ldr	r3, [r5, #0]
 8007528:	1d1a      	adds	r2, r3, #4
 800752a:	602a      	str	r2, [r5, #0]
 800752c:	681d      	ldr	r5, [r3, #0]
 800752e:	6862      	ldr	r2, [r4, #4]
 8007530:	2100      	movs	r1, #0
 8007532:	4628      	mov	r0, r5
 8007534:	f7f8 fe4c 	bl	80001d0 <memchr>
 8007538:	b108      	cbz	r0, 800753e <_printf_i+0x1ea>
 800753a:	1b40      	subs	r0, r0, r5
 800753c:	6060      	str	r0, [r4, #4]
 800753e:	6863      	ldr	r3, [r4, #4]
 8007540:	6123      	str	r3, [r4, #16]
 8007542:	2300      	movs	r3, #0
 8007544:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007548:	e7aa      	b.n	80074a0 <_printf_i+0x14c>
 800754a:	6923      	ldr	r3, [r4, #16]
 800754c:	462a      	mov	r2, r5
 800754e:	4649      	mov	r1, r9
 8007550:	4640      	mov	r0, r8
 8007552:	47d0      	blx	sl
 8007554:	3001      	adds	r0, #1
 8007556:	d0ad      	beq.n	80074b4 <_printf_i+0x160>
 8007558:	6823      	ldr	r3, [r4, #0]
 800755a:	079b      	lsls	r3, r3, #30
 800755c:	d413      	bmi.n	8007586 <_printf_i+0x232>
 800755e:	68e0      	ldr	r0, [r4, #12]
 8007560:	9b03      	ldr	r3, [sp, #12]
 8007562:	4298      	cmp	r0, r3
 8007564:	bfb8      	it	lt
 8007566:	4618      	movlt	r0, r3
 8007568:	e7a6      	b.n	80074b8 <_printf_i+0x164>
 800756a:	2301      	movs	r3, #1
 800756c:	4632      	mov	r2, r6
 800756e:	4649      	mov	r1, r9
 8007570:	4640      	mov	r0, r8
 8007572:	47d0      	blx	sl
 8007574:	3001      	adds	r0, #1
 8007576:	d09d      	beq.n	80074b4 <_printf_i+0x160>
 8007578:	3501      	adds	r5, #1
 800757a:	68e3      	ldr	r3, [r4, #12]
 800757c:	9903      	ldr	r1, [sp, #12]
 800757e:	1a5b      	subs	r3, r3, r1
 8007580:	42ab      	cmp	r3, r5
 8007582:	dcf2      	bgt.n	800756a <_printf_i+0x216>
 8007584:	e7eb      	b.n	800755e <_printf_i+0x20a>
 8007586:	2500      	movs	r5, #0
 8007588:	f104 0619 	add.w	r6, r4, #25
 800758c:	e7f5      	b.n	800757a <_printf_i+0x226>
 800758e:	bf00      	nop
 8007590:	080099ee 	.word	0x080099ee
 8007594:	080099ff 	.word	0x080099ff

08007598 <std>:
 8007598:	2300      	movs	r3, #0
 800759a:	b510      	push	{r4, lr}
 800759c:	4604      	mov	r4, r0
 800759e:	e9c0 3300 	strd	r3, r3, [r0]
 80075a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80075a6:	6083      	str	r3, [r0, #8]
 80075a8:	8181      	strh	r1, [r0, #12]
 80075aa:	6643      	str	r3, [r0, #100]	; 0x64
 80075ac:	81c2      	strh	r2, [r0, #14]
 80075ae:	6183      	str	r3, [r0, #24]
 80075b0:	4619      	mov	r1, r3
 80075b2:	2208      	movs	r2, #8
 80075b4:	305c      	adds	r0, #92	; 0x5c
 80075b6:	f000 f902 	bl	80077be <memset>
 80075ba:	4b05      	ldr	r3, [pc, #20]	; (80075d0 <std+0x38>)
 80075bc:	6263      	str	r3, [r4, #36]	; 0x24
 80075be:	4b05      	ldr	r3, [pc, #20]	; (80075d4 <std+0x3c>)
 80075c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80075c2:	4b05      	ldr	r3, [pc, #20]	; (80075d8 <std+0x40>)
 80075c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80075c6:	4b05      	ldr	r3, [pc, #20]	; (80075dc <std+0x44>)
 80075c8:	6224      	str	r4, [r4, #32]
 80075ca:	6323      	str	r3, [r4, #48]	; 0x30
 80075cc:	bd10      	pop	{r4, pc}
 80075ce:	bf00      	nop
 80075d0:	08007739 	.word	0x08007739
 80075d4:	0800775b 	.word	0x0800775b
 80075d8:	08007793 	.word	0x08007793
 80075dc:	080077b7 	.word	0x080077b7

080075e0 <stdio_exit_handler>:
 80075e0:	4a02      	ldr	r2, [pc, #8]	; (80075ec <stdio_exit_handler+0xc>)
 80075e2:	4903      	ldr	r1, [pc, #12]	; (80075f0 <stdio_exit_handler+0x10>)
 80075e4:	4803      	ldr	r0, [pc, #12]	; (80075f4 <stdio_exit_handler+0x14>)
 80075e6:	f000 b869 	b.w	80076bc <_fwalk_sglue>
 80075ea:	bf00      	nop
 80075ec:	2000000c 	.word	0x2000000c
 80075f0:	080091c1 	.word	0x080091c1
 80075f4:	20000018 	.word	0x20000018

080075f8 <cleanup_stdio>:
 80075f8:	6841      	ldr	r1, [r0, #4]
 80075fa:	4b0c      	ldr	r3, [pc, #48]	; (800762c <cleanup_stdio+0x34>)
 80075fc:	4299      	cmp	r1, r3
 80075fe:	b510      	push	{r4, lr}
 8007600:	4604      	mov	r4, r0
 8007602:	d001      	beq.n	8007608 <cleanup_stdio+0x10>
 8007604:	f001 fddc 	bl	80091c0 <_fflush_r>
 8007608:	68a1      	ldr	r1, [r4, #8]
 800760a:	4b09      	ldr	r3, [pc, #36]	; (8007630 <cleanup_stdio+0x38>)
 800760c:	4299      	cmp	r1, r3
 800760e:	d002      	beq.n	8007616 <cleanup_stdio+0x1e>
 8007610:	4620      	mov	r0, r4
 8007612:	f001 fdd5 	bl	80091c0 <_fflush_r>
 8007616:	68e1      	ldr	r1, [r4, #12]
 8007618:	4b06      	ldr	r3, [pc, #24]	; (8007634 <cleanup_stdio+0x3c>)
 800761a:	4299      	cmp	r1, r3
 800761c:	d004      	beq.n	8007628 <cleanup_stdio+0x30>
 800761e:	4620      	mov	r0, r4
 8007620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007624:	f001 bdcc 	b.w	80091c0 <_fflush_r>
 8007628:	bd10      	pop	{r4, pc}
 800762a:	bf00      	nop
 800762c:	200004d0 	.word	0x200004d0
 8007630:	20000538 	.word	0x20000538
 8007634:	200005a0 	.word	0x200005a0

08007638 <global_stdio_init.part.0>:
 8007638:	b510      	push	{r4, lr}
 800763a:	4b0b      	ldr	r3, [pc, #44]	; (8007668 <global_stdio_init.part.0+0x30>)
 800763c:	4c0b      	ldr	r4, [pc, #44]	; (800766c <global_stdio_init.part.0+0x34>)
 800763e:	4a0c      	ldr	r2, [pc, #48]	; (8007670 <global_stdio_init.part.0+0x38>)
 8007640:	601a      	str	r2, [r3, #0]
 8007642:	4620      	mov	r0, r4
 8007644:	2200      	movs	r2, #0
 8007646:	2104      	movs	r1, #4
 8007648:	f7ff ffa6 	bl	8007598 <std>
 800764c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007650:	2201      	movs	r2, #1
 8007652:	2109      	movs	r1, #9
 8007654:	f7ff ffa0 	bl	8007598 <std>
 8007658:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800765c:	2202      	movs	r2, #2
 800765e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007662:	2112      	movs	r1, #18
 8007664:	f7ff bf98 	b.w	8007598 <std>
 8007668:	20000608 	.word	0x20000608
 800766c:	200004d0 	.word	0x200004d0
 8007670:	080075e1 	.word	0x080075e1

08007674 <__sfp_lock_acquire>:
 8007674:	4801      	ldr	r0, [pc, #4]	; (800767c <__sfp_lock_acquire+0x8>)
 8007676:	f000 b973 	b.w	8007960 <__retarget_lock_acquire_recursive>
 800767a:	bf00      	nop
 800767c:	20000611 	.word	0x20000611

08007680 <__sfp_lock_release>:
 8007680:	4801      	ldr	r0, [pc, #4]	; (8007688 <__sfp_lock_release+0x8>)
 8007682:	f000 b96e 	b.w	8007962 <__retarget_lock_release_recursive>
 8007686:	bf00      	nop
 8007688:	20000611 	.word	0x20000611

0800768c <__sinit>:
 800768c:	b510      	push	{r4, lr}
 800768e:	4604      	mov	r4, r0
 8007690:	f7ff fff0 	bl	8007674 <__sfp_lock_acquire>
 8007694:	6a23      	ldr	r3, [r4, #32]
 8007696:	b11b      	cbz	r3, 80076a0 <__sinit+0x14>
 8007698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800769c:	f7ff bff0 	b.w	8007680 <__sfp_lock_release>
 80076a0:	4b04      	ldr	r3, [pc, #16]	; (80076b4 <__sinit+0x28>)
 80076a2:	6223      	str	r3, [r4, #32]
 80076a4:	4b04      	ldr	r3, [pc, #16]	; (80076b8 <__sinit+0x2c>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d1f5      	bne.n	8007698 <__sinit+0xc>
 80076ac:	f7ff ffc4 	bl	8007638 <global_stdio_init.part.0>
 80076b0:	e7f2      	b.n	8007698 <__sinit+0xc>
 80076b2:	bf00      	nop
 80076b4:	080075f9 	.word	0x080075f9
 80076b8:	20000608 	.word	0x20000608

080076bc <_fwalk_sglue>:
 80076bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076c0:	4607      	mov	r7, r0
 80076c2:	4688      	mov	r8, r1
 80076c4:	4614      	mov	r4, r2
 80076c6:	2600      	movs	r6, #0
 80076c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80076cc:	f1b9 0901 	subs.w	r9, r9, #1
 80076d0:	d505      	bpl.n	80076de <_fwalk_sglue+0x22>
 80076d2:	6824      	ldr	r4, [r4, #0]
 80076d4:	2c00      	cmp	r4, #0
 80076d6:	d1f7      	bne.n	80076c8 <_fwalk_sglue+0xc>
 80076d8:	4630      	mov	r0, r6
 80076da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076de:	89ab      	ldrh	r3, [r5, #12]
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d907      	bls.n	80076f4 <_fwalk_sglue+0x38>
 80076e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80076e8:	3301      	adds	r3, #1
 80076ea:	d003      	beq.n	80076f4 <_fwalk_sglue+0x38>
 80076ec:	4629      	mov	r1, r5
 80076ee:	4638      	mov	r0, r7
 80076f0:	47c0      	blx	r8
 80076f2:	4306      	orrs	r6, r0
 80076f4:	3568      	adds	r5, #104	; 0x68
 80076f6:	e7e9      	b.n	80076cc <_fwalk_sglue+0x10>

080076f8 <siprintf>:
 80076f8:	b40e      	push	{r1, r2, r3}
 80076fa:	b500      	push	{lr}
 80076fc:	b09c      	sub	sp, #112	; 0x70
 80076fe:	ab1d      	add	r3, sp, #116	; 0x74
 8007700:	9002      	str	r0, [sp, #8]
 8007702:	9006      	str	r0, [sp, #24]
 8007704:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007708:	4809      	ldr	r0, [pc, #36]	; (8007730 <siprintf+0x38>)
 800770a:	9107      	str	r1, [sp, #28]
 800770c:	9104      	str	r1, [sp, #16]
 800770e:	4909      	ldr	r1, [pc, #36]	; (8007734 <siprintf+0x3c>)
 8007710:	f853 2b04 	ldr.w	r2, [r3], #4
 8007714:	9105      	str	r1, [sp, #20]
 8007716:	6800      	ldr	r0, [r0, #0]
 8007718:	9301      	str	r3, [sp, #4]
 800771a:	a902      	add	r1, sp, #8
 800771c:	f001 fbcc 	bl	8008eb8 <_svfiprintf_r>
 8007720:	9b02      	ldr	r3, [sp, #8]
 8007722:	2200      	movs	r2, #0
 8007724:	701a      	strb	r2, [r3, #0]
 8007726:	b01c      	add	sp, #112	; 0x70
 8007728:	f85d eb04 	ldr.w	lr, [sp], #4
 800772c:	b003      	add	sp, #12
 800772e:	4770      	bx	lr
 8007730:	20000064 	.word	0x20000064
 8007734:	ffff0208 	.word	0xffff0208

08007738 <__sread>:
 8007738:	b510      	push	{r4, lr}
 800773a:	460c      	mov	r4, r1
 800773c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007740:	f000 f89c 	bl	800787c <_read_r>
 8007744:	2800      	cmp	r0, #0
 8007746:	bfab      	itete	ge
 8007748:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800774a:	89a3      	ldrhlt	r3, [r4, #12]
 800774c:	181b      	addge	r3, r3, r0
 800774e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007752:	bfac      	ite	ge
 8007754:	6563      	strge	r3, [r4, #84]	; 0x54
 8007756:	81a3      	strhlt	r3, [r4, #12]
 8007758:	bd10      	pop	{r4, pc}

0800775a <__swrite>:
 800775a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800775e:	461f      	mov	r7, r3
 8007760:	898b      	ldrh	r3, [r1, #12]
 8007762:	05db      	lsls	r3, r3, #23
 8007764:	4605      	mov	r5, r0
 8007766:	460c      	mov	r4, r1
 8007768:	4616      	mov	r6, r2
 800776a:	d505      	bpl.n	8007778 <__swrite+0x1e>
 800776c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007770:	2302      	movs	r3, #2
 8007772:	2200      	movs	r2, #0
 8007774:	f000 f870 	bl	8007858 <_lseek_r>
 8007778:	89a3      	ldrh	r3, [r4, #12]
 800777a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800777e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007782:	81a3      	strh	r3, [r4, #12]
 8007784:	4632      	mov	r2, r6
 8007786:	463b      	mov	r3, r7
 8007788:	4628      	mov	r0, r5
 800778a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800778e:	f000 b8ab 	b.w	80078e8 <_write_r>

08007792 <__sseek>:
 8007792:	b510      	push	{r4, lr}
 8007794:	460c      	mov	r4, r1
 8007796:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800779a:	f000 f85d 	bl	8007858 <_lseek_r>
 800779e:	1c43      	adds	r3, r0, #1
 80077a0:	89a3      	ldrh	r3, [r4, #12]
 80077a2:	bf15      	itete	ne
 80077a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80077a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80077aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80077ae:	81a3      	strheq	r3, [r4, #12]
 80077b0:	bf18      	it	ne
 80077b2:	81a3      	strhne	r3, [r4, #12]
 80077b4:	bd10      	pop	{r4, pc}

080077b6 <__sclose>:
 80077b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077ba:	f000 b83d 	b.w	8007838 <_close_r>

080077be <memset>:
 80077be:	4402      	add	r2, r0
 80077c0:	4603      	mov	r3, r0
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d100      	bne.n	80077c8 <memset+0xa>
 80077c6:	4770      	bx	lr
 80077c8:	f803 1b01 	strb.w	r1, [r3], #1
 80077cc:	e7f9      	b.n	80077c2 <memset+0x4>

080077ce <_raise_r>:
 80077ce:	291f      	cmp	r1, #31
 80077d0:	b538      	push	{r3, r4, r5, lr}
 80077d2:	4604      	mov	r4, r0
 80077d4:	460d      	mov	r5, r1
 80077d6:	d904      	bls.n	80077e2 <_raise_r+0x14>
 80077d8:	2316      	movs	r3, #22
 80077da:	6003      	str	r3, [r0, #0]
 80077dc:	f04f 30ff 	mov.w	r0, #4294967295
 80077e0:	bd38      	pop	{r3, r4, r5, pc}
 80077e2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80077e4:	b112      	cbz	r2, 80077ec <_raise_r+0x1e>
 80077e6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80077ea:	b94b      	cbnz	r3, 8007800 <_raise_r+0x32>
 80077ec:	4620      	mov	r0, r4
 80077ee:	f000 f869 	bl	80078c4 <_getpid_r>
 80077f2:	462a      	mov	r2, r5
 80077f4:	4601      	mov	r1, r0
 80077f6:	4620      	mov	r0, r4
 80077f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077fc:	f000 b850 	b.w	80078a0 <_kill_r>
 8007800:	2b01      	cmp	r3, #1
 8007802:	d00a      	beq.n	800781a <_raise_r+0x4c>
 8007804:	1c59      	adds	r1, r3, #1
 8007806:	d103      	bne.n	8007810 <_raise_r+0x42>
 8007808:	2316      	movs	r3, #22
 800780a:	6003      	str	r3, [r0, #0]
 800780c:	2001      	movs	r0, #1
 800780e:	e7e7      	b.n	80077e0 <_raise_r+0x12>
 8007810:	2400      	movs	r4, #0
 8007812:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007816:	4628      	mov	r0, r5
 8007818:	4798      	blx	r3
 800781a:	2000      	movs	r0, #0
 800781c:	e7e0      	b.n	80077e0 <_raise_r+0x12>
	...

08007820 <raise>:
 8007820:	4b02      	ldr	r3, [pc, #8]	; (800782c <raise+0xc>)
 8007822:	4601      	mov	r1, r0
 8007824:	6818      	ldr	r0, [r3, #0]
 8007826:	f7ff bfd2 	b.w	80077ce <_raise_r>
 800782a:	bf00      	nop
 800782c:	20000064 	.word	0x20000064

08007830 <_localeconv_r>:
 8007830:	4800      	ldr	r0, [pc, #0]	; (8007834 <_localeconv_r+0x4>)
 8007832:	4770      	bx	lr
 8007834:	20000158 	.word	0x20000158

08007838 <_close_r>:
 8007838:	b538      	push	{r3, r4, r5, lr}
 800783a:	4d06      	ldr	r5, [pc, #24]	; (8007854 <_close_r+0x1c>)
 800783c:	2300      	movs	r3, #0
 800783e:	4604      	mov	r4, r0
 8007840:	4608      	mov	r0, r1
 8007842:	602b      	str	r3, [r5, #0]
 8007844:	f7fb fa5f 	bl	8002d06 <_close>
 8007848:	1c43      	adds	r3, r0, #1
 800784a:	d102      	bne.n	8007852 <_close_r+0x1a>
 800784c:	682b      	ldr	r3, [r5, #0]
 800784e:	b103      	cbz	r3, 8007852 <_close_r+0x1a>
 8007850:	6023      	str	r3, [r4, #0]
 8007852:	bd38      	pop	{r3, r4, r5, pc}
 8007854:	2000060c 	.word	0x2000060c

08007858 <_lseek_r>:
 8007858:	b538      	push	{r3, r4, r5, lr}
 800785a:	4d07      	ldr	r5, [pc, #28]	; (8007878 <_lseek_r+0x20>)
 800785c:	4604      	mov	r4, r0
 800785e:	4608      	mov	r0, r1
 8007860:	4611      	mov	r1, r2
 8007862:	2200      	movs	r2, #0
 8007864:	602a      	str	r2, [r5, #0]
 8007866:	461a      	mov	r2, r3
 8007868:	f7fb fa74 	bl	8002d54 <_lseek>
 800786c:	1c43      	adds	r3, r0, #1
 800786e:	d102      	bne.n	8007876 <_lseek_r+0x1e>
 8007870:	682b      	ldr	r3, [r5, #0]
 8007872:	b103      	cbz	r3, 8007876 <_lseek_r+0x1e>
 8007874:	6023      	str	r3, [r4, #0]
 8007876:	bd38      	pop	{r3, r4, r5, pc}
 8007878:	2000060c 	.word	0x2000060c

0800787c <_read_r>:
 800787c:	b538      	push	{r3, r4, r5, lr}
 800787e:	4d07      	ldr	r5, [pc, #28]	; (800789c <_read_r+0x20>)
 8007880:	4604      	mov	r4, r0
 8007882:	4608      	mov	r0, r1
 8007884:	4611      	mov	r1, r2
 8007886:	2200      	movs	r2, #0
 8007888:	602a      	str	r2, [r5, #0]
 800788a:	461a      	mov	r2, r3
 800788c:	f7fb fa02 	bl	8002c94 <_read>
 8007890:	1c43      	adds	r3, r0, #1
 8007892:	d102      	bne.n	800789a <_read_r+0x1e>
 8007894:	682b      	ldr	r3, [r5, #0]
 8007896:	b103      	cbz	r3, 800789a <_read_r+0x1e>
 8007898:	6023      	str	r3, [r4, #0]
 800789a:	bd38      	pop	{r3, r4, r5, pc}
 800789c:	2000060c 	.word	0x2000060c

080078a0 <_kill_r>:
 80078a0:	b538      	push	{r3, r4, r5, lr}
 80078a2:	4d07      	ldr	r5, [pc, #28]	; (80078c0 <_kill_r+0x20>)
 80078a4:	2300      	movs	r3, #0
 80078a6:	4604      	mov	r4, r0
 80078a8:	4608      	mov	r0, r1
 80078aa:	4611      	mov	r1, r2
 80078ac:	602b      	str	r3, [r5, #0]
 80078ae:	f7fb f9d7 	bl	8002c60 <_kill>
 80078b2:	1c43      	adds	r3, r0, #1
 80078b4:	d102      	bne.n	80078bc <_kill_r+0x1c>
 80078b6:	682b      	ldr	r3, [r5, #0]
 80078b8:	b103      	cbz	r3, 80078bc <_kill_r+0x1c>
 80078ba:	6023      	str	r3, [r4, #0]
 80078bc:	bd38      	pop	{r3, r4, r5, pc}
 80078be:	bf00      	nop
 80078c0:	2000060c 	.word	0x2000060c

080078c4 <_getpid_r>:
 80078c4:	f7fb b9c4 	b.w	8002c50 <_getpid>

080078c8 <_sbrk_r>:
 80078c8:	b538      	push	{r3, r4, r5, lr}
 80078ca:	4d06      	ldr	r5, [pc, #24]	; (80078e4 <_sbrk_r+0x1c>)
 80078cc:	2300      	movs	r3, #0
 80078ce:	4604      	mov	r4, r0
 80078d0:	4608      	mov	r0, r1
 80078d2:	602b      	str	r3, [r5, #0]
 80078d4:	f7fb fa4c 	bl	8002d70 <_sbrk>
 80078d8:	1c43      	adds	r3, r0, #1
 80078da:	d102      	bne.n	80078e2 <_sbrk_r+0x1a>
 80078dc:	682b      	ldr	r3, [r5, #0]
 80078de:	b103      	cbz	r3, 80078e2 <_sbrk_r+0x1a>
 80078e0:	6023      	str	r3, [r4, #0]
 80078e2:	bd38      	pop	{r3, r4, r5, pc}
 80078e4:	2000060c 	.word	0x2000060c

080078e8 <_write_r>:
 80078e8:	b538      	push	{r3, r4, r5, lr}
 80078ea:	4d07      	ldr	r5, [pc, #28]	; (8007908 <_write_r+0x20>)
 80078ec:	4604      	mov	r4, r0
 80078ee:	4608      	mov	r0, r1
 80078f0:	4611      	mov	r1, r2
 80078f2:	2200      	movs	r2, #0
 80078f4:	602a      	str	r2, [r5, #0]
 80078f6:	461a      	mov	r2, r3
 80078f8:	f7fb f9e9 	bl	8002cce <_write>
 80078fc:	1c43      	adds	r3, r0, #1
 80078fe:	d102      	bne.n	8007906 <_write_r+0x1e>
 8007900:	682b      	ldr	r3, [r5, #0]
 8007902:	b103      	cbz	r3, 8007906 <_write_r+0x1e>
 8007904:	6023      	str	r3, [r4, #0]
 8007906:	bd38      	pop	{r3, r4, r5, pc}
 8007908:	2000060c 	.word	0x2000060c

0800790c <__errno>:
 800790c:	4b01      	ldr	r3, [pc, #4]	; (8007914 <__errno+0x8>)
 800790e:	6818      	ldr	r0, [r3, #0]
 8007910:	4770      	bx	lr
 8007912:	bf00      	nop
 8007914:	20000064 	.word	0x20000064

08007918 <__libc_init_array>:
 8007918:	b570      	push	{r4, r5, r6, lr}
 800791a:	4d0d      	ldr	r5, [pc, #52]	; (8007950 <__libc_init_array+0x38>)
 800791c:	4c0d      	ldr	r4, [pc, #52]	; (8007954 <__libc_init_array+0x3c>)
 800791e:	1b64      	subs	r4, r4, r5
 8007920:	10a4      	asrs	r4, r4, #2
 8007922:	2600      	movs	r6, #0
 8007924:	42a6      	cmp	r6, r4
 8007926:	d109      	bne.n	800793c <__libc_init_array+0x24>
 8007928:	4d0b      	ldr	r5, [pc, #44]	; (8007958 <__libc_init_array+0x40>)
 800792a:	4c0c      	ldr	r4, [pc, #48]	; (800795c <__libc_init_array+0x44>)
 800792c:	f001 ff84 	bl	8009838 <_init>
 8007930:	1b64      	subs	r4, r4, r5
 8007932:	10a4      	asrs	r4, r4, #2
 8007934:	2600      	movs	r6, #0
 8007936:	42a6      	cmp	r6, r4
 8007938:	d105      	bne.n	8007946 <__libc_init_array+0x2e>
 800793a:	bd70      	pop	{r4, r5, r6, pc}
 800793c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007940:	4798      	blx	r3
 8007942:	3601      	adds	r6, #1
 8007944:	e7ee      	b.n	8007924 <__libc_init_array+0xc>
 8007946:	f855 3b04 	ldr.w	r3, [r5], #4
 800794a:	4798      	blx	r3
 800794c:	3601      	adds	r6, #1
 800794e:	e7f2      	b.n	8007936 <__libc_init_array+0x1e>
 8007950:	08009d54 	.word	0x08009d54
 8007954:	08009d54 	.word	0x08009d54
 8007958:	08009d54 	.word	0x08009d54
 800795c:	08009d5c 	.word	0x08009d5c

08007960 <__retarget_lock_acquire_recursive>:
 8007960:	4770      	bx	lr

08007962 <__retarget_lock_release_recursive>:
 8007962:	4770      	bx	lr

08007964 <memcpy>:
 8007964:	440a      	add	r2, r1
 8007966:	4291      	cmp	r1, r2
 8007968:	f100 33ff 	add.w	r3, r0, #4294967295
 800796c:	d100      	bne.n	8007970 <memcpy+0xc>
 800796e:	4770      	bx	lr
 8007970:	b510      	push	{r4, lr}
 8007972:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007976:	f803 4f01 	strb.w	r4, [r3, #1]!
 800797a:	4291      	cmp	r1, r2
 800797c:	d1f9      	bne.n	8007972 <memcpy+0xe>
 800797e:	bd10      	pop	{r4, pc}

08007980 <quorem>:
 8007980:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007984:	6903      	ldr	r3, [r0, #16]
 8007986:	690c      	ldr	r4, [r1, #16]
 8007988:	42a3      	cmp	r3, r4
 800798a:	4607      	mov	r7, r0
 800798c:	db7e      	blt.n	8007a8c <quorem+0x10c>
 800798e:	3c01      	subs	r4, #1
 8007990:	f101 0814 	add.w	r8, r1, #20
 8007994:	f100 0514 	add.w	r5, r0, #20
 8007998:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800799c:	9301      	str	r3, [sp, #4]
 800799e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80079a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80079a6:	3301      	adds	r3, #1
 80079a8:	429a      	cmp	r2, r3
 80079aa:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80079ae:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80079b2:	fbb2 f6f3 	udiv	r6, r2, r3
 80079b6:	d331      	bcc.n	8007a1c <quorem+0x9c>
 80079b8:	f04f 0e00 	mov.w	lr, #0
 80079bc:	4640      	mov	r0, r8
 80079be:	46ac      	mov	ip, r5
 80079c0:	46f2      	mov	sl, lr
 80079c2:	f850 2b04 	ldr.w	r2, [r0], #4
 80079c6:	b293      	uxth	r3, r2
 80079c8:	fb06 e303 	mla	r3, r6, r3, lr
 80079cc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80079d0:	0c1a      	lsrs	r2, r3, #16
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	ebaa 0303 	sub.w	r3, sl, r3
 80079d8:	f8dc a000 	ldr.w	sl, [ip]
 80079dc:	fa13 f38a 	uxtah	r3, r3, sl
 80079e0:	fb06 220e 	mla	r2, r6, lr, r2
 80079e4:	9300      	str	r3, [sp, #0]
 80079e6:	9b00      	ldr	r3, [sp, #0]
 80079e8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80079ec:	b292      	uxth	r2, r2
 80079ee:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80079f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80079f6:	f8bd 3000 	ldrh.w	r3, [sp]
 80079fa:	4581      	cmp	r9, r0
 80079fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a00:	f84c 3b04 	str.w	r3, [ip], #4
 8007a04:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007a08:	d2db      	bcs.n	80079c2 <quorem+0x42>
 8007a0a:	f855 300b 	ldr.w	r3, [r5, fp]
 8007a0e:	b92b      	cbnz	r3, 8007a1c <quorem+0x9c>
 8007a10:	9b01      	ldr	r3, [sp, #4]
 8007a12:	3b04      	subs	r3, #4
 8007a14:	429d      	cmp	r5, r3
 8007a16:	461a      	mov	r2, r3
 8007a18:	d32c      	bcc.n	8007a74 <quorem+0xf4>
 8007a1a:	613c      	str	r4, [r7, #16]
 8007a1c:	4638      	mov	r0, r7
 8007a1e:	f001 f8f1 	bl	8008c04 <__mcmp>
 8007a22:	2800      	cmp	r0, #0
 8007a24:	db22      	blt.n	8007a6c <quorem+0xec>
 8007a26:	3601      	adds	r6, #1
 8007a28:	4629      	mov	r1, r5
 8007a2a:	2000      	movs	r0, #0
 8007a2c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007a30:	f8d1 c000 	ldr.w	ip, [r1]
 8007a34:	b293      	uxth	r3, r2
 8007a36:	1ac3      	subs	r3, r0, r3
 8007a38:	0c12      	lsrs	r2, r2, #16
 8007a3a:	fa13 f38c 	uxtah	r3, r3, ip
 8007a3e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007a42:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a4c:	45c1      	cmp	r9, r8
 8007a4e:	f841 3b04 	str.w	r3, [r1], #4
 8007a52:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007a56:	d2e9      	bcs.n	8007a2c <quorem+0xac>
 8007a58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a5c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a60:	b922      	cbnz	r2, 8007a6c <quorem+0xec>
 8007a62:	3b04      	subs	r3, #4
 8007a64:	429d      	cmp	r5, r3
 8007a66:	461a      	mov	r2, r3
 8007a68:	d30a      	bcc.n	8007a80 <quorem+0x100>
 8007a6a:	613c      	str	r4, [r7, #16]
 8007a6c:	4630      	mov	r0, r6
 8007a6e:	b003      	add	sp, #12
 8007a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a74:	6812      	ldr	r2, [r2, #0]
 8007a76:	3b04      	subs	r3, #4
 8007a78:	2a00      	cmp	r2, #0
 8007a7a:	d1ce      	bne.n	8007a1a <quorem+0x9a>
 8007a7c:	3c01      	subs	r4, #1
 8007a7e:	e7c9      	b.n	8007a14 <quorem+0x94>
 8007a80:	6812      	ldr	r2, [r2, #0]
 8007a82:	3b04      	subs	r3, #4
 8007a84:	2a00      	cmp	r2, #0
 8007a86:	d1f0      	bne.n	8007a6a <quorem+0xea>
 8007a88:	3c01      	subs	r4, #1
 8007a8a:	e7eb      	b.n	8007a64 <quorem+0xe4>
 8007a8c:	2000      	movs	r0, #0
 8007a8e:	e7ee      	b.n	8007a6e <quorem+0xee>

08007a90 <_dtoa_r>:
 8007a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a94:	ed2d 8b04 	vpush	{d8-d9}
 8007a98:	69c5      	ldr	r5, [r0, #28]
 8007a9a:	b093      	sub	sp, #76	; 0x4c
 8007a9c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007aa0:	ec57 6b10 	vmov	r6, r7, d0
 8007aa4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007aa8:	9107      	str	r1, [sp, #28]
 8007aaa:	4604      	mov	r4, r0
 8007aac:	920a      	str	r2, [sp, #40]	; 0x28
 8007aae:	930d      	str	r3, [sp, #52]	; 0x34
 8007ab0:	b975      	cbnz	r5, 8007ad0 <_dtoa_r+0x40>
 8007ab2:	2010      	movs	r0, #16
 8007ab4:	f7ff f84e 	bl	8006b54 <malloc>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	61e0      	str	r0, [r4, #28]
 8007abc:	b920      	cbnz	r0, 8007ac8 <_dtoa_r+0x38>
 8007abe:	4bae      	ldr	r3, [pc, #696]	; (8007d78 <_dtoa_r+0x2e8>)
 8007ac0:	21ef      	movs	r1, #239	; 0xef
 8007ac2:	48ae      	ldr	r0, [pc, #696]	; (8007d7c <_dtoa_r+0x2ec>)
 8007ac4:	f001 fbbe 	bl	8009244 <__assert_func>
 8007ac8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007acc:	6005      	str	r5, [r0, #0]
 8007ace:	60c5      	str	r5, [r0, #12]
 8007ad0:	69e3      	ldr	r3, [r4, #28]
 8007ad2:	6819      	ldr	r1, [r3, #0]
 8007ad4:	b151      	cbz	r1, 8007aec <_dtoa_r+0x5c>
 8007ad6:	685a      	ldr	r2, [r3, #4]
 8007ad8:	604a      	str	r2, [r1, #4]
 8007ada:	2301      	movs	r3, #1
 8007adc:	4093      	lsls	r3, r2
 8007ade:	608b      	str	r3, [r1, #8]
 8007ae0:	4620      	mov	r0, r4
 8007ae2:	f000 fe53 	bl	800878c <_Bfree>
 8007ae6:	69e3      	ldr	r3, [r4, #28]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	601a      	str	r2, [r3, #0]
 8007aec:	1e3b      	subs	r3, r7, #0
 8007aee:	bfbb      	ittet	lt
 8007af0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007af4:	9303      	strlt	r3, [sp, #12]
 8007af6:	2300      	movge	r3, #0
 8007af8:	2201      	movlt	r2, #1
 8007afa:	bfac      	ite	ge
 8007afc:	f8c8 3000 	strge.w	r3, [r8]
 8007b00:	f8c8 2000 	strlt.w	r2, [r8]
 8007b04:	4b9e      	ldr	r3, [pc, #632]	; (8007d80 <_dtoa_r+0x2f0>)
 8007b06:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007b0a:	ea33 0308 	bics.w	r3, r3, r8
 8007b0e:	d11b      	bne.n	8007b48 <_dtoa_r+0xb8>
 8007b10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b12:	f242 730f 	movw	r3, #9999	; 0x270f
 8007b16:	6013      	str	r3, [r2, #0]
 8007b18:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007b1c:	4333      	orrs	r3, r6
 8007b1e:	f000 8593 	beq.w	8008648 <_dtoa_r+0xbb8>
 8007b22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b24:	b963      	cbnz	r3, 8007b40 <_dtoa_r+0xb0>
 8007b26:	4b97      	ldr	r3, [pc, #604]	; (8007d84 <_dtoa_r+0x2f4>)
 8007b28:	e027      	b.n	8007b7a <_dtoa_r+0xea>
 8007b2a:	4b97      	ldr	r3, [pc, #604]	; (8007d88 <_dtoa_r+0x2f8>)
 8007b2c:	9300      	str	r3, [sp, #0]
 8007b2e:	3308      	adds	r3, #8
 8007b30:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007b32:	6013      	str	r3, [r2, #0]
 8007b34:	9800      	ldr	r0, [sp, #0]
 8007b36:	b013      	add	sp, #76	; 0x4c
 8007b38:	ecbd 8b04 	vpop	{d8-d9}
 8007b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b40:	4b90      	ldr	r3, [pc, #576]	; (8007d84 <_dtoa_r+0x2f4>)
 8007b42:	9300      	str	r3, [sp, #0]
 8007b44:	3303      	adds	r3, #3
 8007b46:	e7f3      	b.n	8007b30 <_dtoa_r+0xa0>
 8007b48:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	ec51 0b17 	vmov	r0, r1, d7
 8007b52:	eeb0 8a47 	vmov.f32	s16, s14
 8007b56:	eef0 8a67 	vmov.f32	s17, s15
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	f7f8 ffb4 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b60:	4681      	mov	r9, r0
 8007b62:	b160      	cbz	r0, 8007b7e <_dtoa_r+0xee>
 8007b64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b66:	2301      	movs	r3, #1
 8007b68:	6013      	str	r3, [r2, #0]
 8007b6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	f000 8568 	beq.w	8008642 <_dtoa_r+0xbb2>
 8007b72:	4b86      	ldr	r3, [pc, #536]	; (8007d8c <_dtoa_r+0x2fc>)
 8007b74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007b76:	6013      	str	r3, [r2, #0]
 8007b78:	3b01      	subs	r3, #1
 8007b7a:	9300      	str	r3, [sp, #0]
 8007b7c:	e7da      	b.n	8007b34 <_dtoa_r+0xa4>
 8007b7e:	aa10      	add	r2, sp, #64	; 0x40
 8007b80:	a911      	add	r1, sp, #68	; 0x44
 8007b82:	4620      	mov	r0, r4
 8007b84:	eeb0 0a48 	vmov.f32	s0, s16
 8007b88:	eef0 0a68 	vmov.f32	s1, s17
 8007b8c:	f001 f8e0 	bl	8008d50 <__d2b>
 8007b90:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007b94:	4682      	mov	sl, r0
 8007b96:	2d00      	cmp	r5, #0
 8007b98:	d07f      	beq.n	8007c9a <_dtoa_r+0x20a>
 8007b9a:	ee18 3a90 	vmov	r3, s17
 8007b9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ba2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007ba6:	ec51 0b18 	vmov	r0, r1, d8
 8007baa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007bae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007bb2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	2200      	movs	r2, #0
 8007bba:	4b75      	ldr	r3, [pc, #468]	; (8007d90 <_dtoa_r+0x300>)
 8007bbc:	f7f8 fb64 	bl	8000288 <__aeabi_dsub>
 8007bc0:	a367      	add	r3, pc, #412	; (adr r3, 8007d60 <_dtoa_r+0x2d0>)
 8007bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc6:	f7f8 fd17 	bl	80005f8 <__aeabi_dmul>
 8007bca:	a367      	add	r3, pc, #412	; (adr r3, 8007d68 <_dtoa_r+0x2d8>)
 8007bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd0:	f7f8 fb5c 	bl	800028c <__adddf3>
 8007bd4:	4606      	mov	r6, r0
 8007bd6:	4628      	mov	r0, r5
 8007bd8:	460f      	mov	r7, r1
 8007bda:	f7f8 fca3 	bl	8000524 <__aeabi_i2d>
 8007bde:	a364      	add	r3, pc, #400	; (adr r3, 8007d70 <_dtoa_r+0x2e0>)
 8007be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be4:	f7f8 fd08 	bl	80005f8 <__aeabi_dmul>
 8007be8:	4602      	mov	r2, r0
 8007bea:	460b      	mov	r3, r1
 8007bec:	4630      	mov	r0, r6
 8007bee:	4639      	mov	r1, r7
 8007bf0:	f7f8 fb4c 	bl	800028c <__adddf3>
 8007bf4:	4606      	mov	r6, r0
 8007bf6:	460f      	mov	r7, r1
 8007bf8:	f7f8 ffae 	bl	8000b58 <__aeabi_d2iz>
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	4683      	mov	fp, r0
 8007c00:	2300      	movs	r3, #0
 8007c02:	4630      	mov	r0, r6
 8007c04:	4639      	mov	r1, r7
 8007c06:	f7f8 ff69 	bl	8000adc <__aeabi_dcmplt>
 8007c0a:	b148      	cbz	r0, 8007c20 <_dtoa_r+0x190>
 8007c0c:	4658      	mov	r0, fp
 8007c0e:	f7f8 fc89 	bl	8000524 <__aeabi_i2d>
 8007c12:	4632      	mov	r2, r6
 8007c14:	463b      	mov	r3, r7
 8007c16:	f7f8 ff57 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c1a:	b908      	cbnz	r0, 8007c20 <_dtoa_r+0x190>
 8007c1c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007c20:	f1bb 0f16 	cmp.w	fp, #22
 8007c24:	d857      	bhi.n	8007cd6 <_dtoa_r+0x246>
 8007c26:	4b5b      	ldr	r3, [pc, #364]	; (8007d94 <_dtoa_r+0x304>)
 8007c28:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c30:	ec51 0b18 	vmov	r0, r1, d8
 8007c34:	f7f8 ff52 	bl	8000adc <__aeabi_dcmplt>
 8007c38:	2800      	cmp	r0, #0
 8007c3a:	d04e      	beq.n	8007cda <_dtoa_r+0x24a>
 8007c3c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007c40:	2300      	movs	r3, #0
 8007c42:	930c      	str	r3, [sp, #48]	; 0x30
 8007c44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c46:	1b5b      	subs	r3, r3, r5
 8007c48:	1e5a      	subs	r2, r3, #1
 8007c4a:	bf45      	ittet	mi
 8007c4c:	f1c3 0301 	rsbmi	r3, r3, #1
 8007c50:	9305      	strmi	r3, [sp, #20]
 8007c52:	2300      	movpl	r3, #0
 8007c54:	2300      	movmi	r3, #0
 8007c56:	9206      	str	r2, [sp, #24]
 8007c58:	bf54      	ite	pl
 8007c5a:	9305      	strpl	r3, [sp, #20]
 8007c5c:	9306      	strmi	r3, [sp, #24]
 8007c5e:	f1bb 0f00 	cmp.w	fp, #0
 8007c62:	db3c      	blt.n	8007cde <_dtoa_r+0x24e>
 8007c64:	9b06      	ldr	r3, [sp, #24]
 8007c66:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007c6a:	445b      	add	r3, fp
 8007c6c:	9306      	str	r3, [sp, #24]
 8007c6e:	2300      	movs	r3, #0
 8007c70:	9308      	str	r3, [sp, #32]
 8007c72:	9b07      	ldr	r3, [sp, #28]
 8007c74:	2b09      	cmp	r3, #9
 8007c76:	d868      	bhi.n	8007d4a <_dtoa_r+0x2ba>
 8007c78:	2b05      	cmp	r3, #5
 8007c7a:	bfc4      	itt	gt
 8007c7c:	3b04      	subgt	r3, #4
 8007c7e:	9307      	strgt	r3, [sp, #28]
 8007c80:	9b07      	ldr	r3, [sp, #28]
 8007c82:	f1a3 0302 	sub.w	r3, r3, #2
 8007c86:	bfcc      	ite	gt
 8007c88:	2500      	movgt	r5, #0
 8007c8a:	2501      	movle	r5, #1
 8007c8c:	2b03      	cmp	r3, #3
 8007c8e:	f200 8085 	bhi.w	8007d9c <_dtoa_r+0x30c>
 8007c92:	e8df f003 	tbb	[pc, r3]
 8007c96:	3b2e      	.short	0x3b2e
 8007c98:	5839      	.short	0x5839
 8007c9a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007c9e:	441d      	add	r5, r3
 8007ca0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007ca4:	2b20      	cmp	r3, #32
 8007ca6:	bfc1      	itttt	gt
 8007ca8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007cac:	fa08 f803 	lslgt.w	r8, r8, r3
 8007cb0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007cb4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007cb8:	bfd6      	itet	le
 8007cba:	f1c3 0320 	rsble	r3, r3, #32
 8007cbe:	ea48 0003 	orrgt.w	r0, r8, r3
 8007cc2:	fa06 f003 	lslle.w	r0, r6, r3
 8007cc6:	f7f8 fc1d 	bl	8000504 <__aeabi_ui2d>
 8007cca:	2201      	movs	r2, #1
 8007ccc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007cd0:	3d01      	subs	r5, #1
 8007cd2:	920e      	str	r2, [sp, #56]	; 0x38
 8007cd4:	e76f      	b.n	8007bb6 <_dtoa_r+0x126>
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	e7b3      	b.n	8007c42 <_dtoa_r+0x1b2>
 8007cda:	900c      	str	r0, [sp, #48]	; 0x30
 8007cdc:	e7b2      	b.n	8007c44 <_dtoa_r+0x1b4>
 8007cde:	9b05      	ldr	r3, [sp, #20]
 8007ce0:	eba3 030b 	sub.w	r3, r3, fp
 8007ce4:	9305      	str	r3, [sp, #20]
 8007ce6:	f1cb 0300 	rsb	r3, fp, #0
 8007cea:	9308      	str	r3, [sp, #32]
 8007cec:	2300      	movs	r3, #0
 8007cee:	930b      	str	r3, [sp, #44]	; 0x2c
 8007cf0:	e7bf      	b.n	8007c72 <_dtoa_r+0x1e2>
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	9309      	str	r3, [sp, #36]	; 0x24
 8007cf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	dc52      	bgt.n	8007da2 <_dtoa_r+0x312>
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	9301      	str	r3, [sp, #4]
 8007d00:	9304      	str	r3, [sp, #16]
 8007d02:	461a      	mov	r2, r3
 8007d04:	920a      	str	r2, [sp, #40]	; 0x28
 8007d06:	e00b      	b.n	8007d20 <_dtoa_r+0x290>
 8007d08:	2301      	movs	r3, #1
 8007d0a:	e7f3      	b.n	8007cf4 <_dtoa_r+0x264>
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	9309      	str	r3, [sp, #36]	; 0x24
 8007d10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d12:	445b      	add	r3, fp
 8007d14:	9301      	str	r3, [sp, #4]
 8007d16:	3301      	adds	r3, #1
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	9304      	str	r3, [sp, #16]
 8007d1c:	bfb8      	it	lt
 8007d1e:	2301      	movlt	r3, #1
 8007d20:	69e0      	ldr	r0, [r4, #28]
 8007d22:	2100      	movs	r1, #0
 8007d24:	2204      	movs	r2, #4
 8007d26:	f102 0614 	add.w	r6, r2, #20
 8007d2a:	429e      	cmp	r6, r3
 8007d2c:	d93d      	bls.n	8007daa <_dtoa_r+0x31a>
 8007d2e:	6041      	str	r1, [r0, #4]
 8007d30:	4620      	mov	r0, r4
 8007d32:	f000 fceb 	bl	800870c <_Balloc>
 8007d36:	9000      	str	r0, [sp, #0]
 8007d38:	2800      	cmp	r0, #0
 8007d3a:	d139      	bne.n	8007db0 <_dtoa_r+0x320>
 8007d3c:	4b16      	ldr	r3, [pc, #88]	; (8007d98 <_dtoa_r+0x308>)
 8007d3e:	4602      	mov	r2, r0
 8007d40:	f240 11af 	movw	r1, #431	; 0x1af
 8007d44:	e6bd      	b.n	8007ac2 <_dtoa_r+0x32>
 8007d46:	2301      	movs	r3, #1
 8007d48:	e7e1      	b.n	8007d0e <_dtoa_r+0x27e>
 8007d4a:	2501      	movs	r5, #1
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	9307      	str	r3, [sp, #28]
 8007d50:	9509      	str	r5, [sp, #36]	; 0x24
 8007d52:	f04f 33ff 	mov.w	r3, #4294967295
 8007d56:	9301      	str	r3, [sp, #4]
 8007d58:	9304      	str	r3, [sp, #16]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	2312      	movs	r3, #18
 8007d5e:	e7d1      	b.n	8007d04 <_dtoa_r+0x274>
 8007d60:	636f4361 	.word	0x636f4361
 8007d64:	3fd287a7 	.word	0x3fd287a7
 8007d68:	8b60c8b3 	.word	0x8b60c8b3
 8007d6c:	3fc68a28 	.word	0x3fc68a28
 8007d70:	509f79fb 	.word	0x509f79fb
 8007d74:	3fd34413 	.word	0x3fd34413
 8007d78:	08009a1d 	.word	0x08009a1d
 8007d7c:	08009a34 	.word	0x08009a34
 8007d80:	7ff00000 	.word	0x7ff00000
 8007d84:	08009a19 	.word	0x08009a19
 8007d88:	08009a10 	.word	0x08009a10
 8007d8c:	080099ed 	.word	0x080099ed
 8007d90:	3ff80000 	.word	0x3ff80000
 8007d94:	08009b20 	.word	0x08009b20
 8007d98:	08009a8c 	.word	0x08009a8c
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	9309      	str	r3, [sp, #36]	; 0x24
 8007da0:	e7d7      	b.n	8007d52 <_dtoa_r+0x2c2>
 8007da2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007da4:	9301      	str	r3, [sp, #4]
 8007da6:	9304      	str	r3, [sp, #16]
 8007da8:	e7ba      	b.n	8007d20 <_dtoa_r+0x290>
 8007daa:	3101      	adds	r1, #1
 8007dac:	0052      	lsls	r2, r2, #1
 8007dae:	e7ba      	b.n	8007d26 <_dtoa_r+0x296>
 8007db0:	69e3      	ldr	r3, [r4, #28]
 8007db2:	9a00      	ldr	r2, [sp, #0]
 8007db4:	601a      	str	r2, [r3, #0]
 8007db6:	9b04      	ldr	r3, [sp, #16]
 8007db8:	2b0e      	cmp	r3, #14
 8007dba:	f200 80a8 	bhi.w	8007f0e <_dtoa_r+0x47e>
 8007dbe:	2d00      	cmp	r5, #0
 8007dc0:	f000 80a5 	beq.w	8007f0e <_dtoa_r+0x47e>
 8007dc4:	f1bb 0f00 	cmp.w	fp, #0
 8007dc8:	dd38      	ble.n	8007e3c <_dtoa_r+0x3ac>
 8007dca:	4bc0      	ldr	r3, [pc, #768]	; (80080cc <_dtoa_r+0x63c>)
 8007dcc:	f00b 020f 	and.w	r2, fp, #15
 8007dd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007dd4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007dd8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007ddc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007de0:	d019      	beq.n	8007e16 <_dtoa_r+0x386>
 8007de2:	4bbb      	ldr	r3, [pc, #748]	; (80080d0 <_dtoa_r+0x640>)
 8007de4:	ec51 0b18 	vmov	r0, r1, d8
 8007de8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007dec:	f7f8 fd2e 	bl	800084c <__aeabi_ddiv>
 8007df0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007df4:	f008 080f 	and.w	r8, r8, #15
 8007df8:	2503      	movs	r5, #3
 8007dfa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80080d0 <_dtoa_r+0x640>
 8007dfe:	f1b8 0f00 	cmp.w	r8, #0
 8007e02:	d10a      	bne.n	8007e1a <_dtoa_r+0x38a>
 8007e04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e08:	4632      	mov	r2, r6
 8007e0a:	463b      	mov	r3, r7
 8007e0c:	f7f8 fd1e 	bl	800084c <__aeabi_ddiv>
 8007e10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e14:	e02b      	b.n	8007e6e <_dtoa_r+0x3de>
 8007e16:	2502      	movs	r5, #2
 8007e18:	e7ef      	b.n	8007dfa <_dtoa_r+0x36a>
 8007e1a:	f018 0f01 	tst.w	r8, #1
 8007e1e:	d008      	beq.n	8007e32 <_dtoa_r+0x3a2>
 8007e20:	4630      	mov	r0, r6
 8007e22:	4639      	mov	r1, r7
 8007e24:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007e28:	f7f8 fbe6 	bl	80005f8 <__aeabi_dmul>
 8007e2c:	3501      	adds	r5, #1
 8007e2e:	4606      	mov	r6, r0
 8007e30:	460f      	mov	r7, r1
 8007e32:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007e36:	f109 0908 	add.w	r9, r9, #8
 8007e3a:	e7e0      	b.n	8007dfe <_dtoa_r+0x36e>
 8007e3c:	f000 809f 	beq.w	8007f7e <_dtoa_r+0x4ee>
 8007e40:	f1cb 0600 	rsb	r6, fp, #0
 8007e44:	4ba1      	ldr	r3, [pc, #644]	; (80080cc <_dtoa_r+0x63c>)
 8007e46:	4fa2      	ldr	r7, [pc, #648]	; (80080d0 <_dtoa_r+0x640>)
 8007e48:	f006 020f 	and.w	r2, r6, #15
 8007e4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e54:	ec51 0b18 	vmov	r0, r1, d8
 8007e58:	f7f8 fbce 	bl	80005f8 <__aeabi_dmul>
 8007e5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e60:	1136      	asrs	r6, r6, #4
 8007e62:	2300      	movs	r3, #0
 8007e64:	2502      	movs	r5, #2
 8007e66:	2e00      	cmp	r6, #0
 8007e68:	d17e      	bne.n	8007f68 <_dtoa_r+0x4d8>
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d1d0      	bne.n	8007e10 <_dtoa_r+0x380>
 8007e6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e70:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	f000 8084 	beq.w	8007f82 <_dtoa_r+0x4f2>
 8007e7a:	4b96      	ldr	r3, [pc, #600]	; (80080d4 <_dtoa_r+0x644>)
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	4640      	mov	r0, r8
 8007e80:	4649      	mov	r1, r9
 8007e82:	f7f8 fe2b 	bl	8000adc <__aeabi_dcmplt>
 8007e86:	2800      	cmp	r0, #0
 8007e88:	d07b      	beq.n	8007f82 <_dtoa_r+0x4f2>
 8007e8a:	9b04      	ldr	r3, [sp, #16]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d078      	beq.n	8007f82 <_dtoa_r+0x4f2>
 8007e90:	9b01      	ldr	r3, [sp, #4]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	dd39      	ble.n	8007f0a <_dtoa_r+0x47a>
 8007e96:	4b90      	ldr	r3, [pc, #576]	; (80080d8 <_dtoa_r+0x648>)
 8007e98:	2200      	movs	r2, #0
 8007e9a:	4640      	mov	r0, r8
 8007e9c:	4649      	mov	r1, r9
 8007e9e:	f7f8 fbab 	bl	80005f8 <__aeabi_dmul>
 8007ea2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ea6:	9e01      	ldr	r6, [sp, #4]
 8007ea8:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007eac:	3501      	adds	r5, #1
 8007eae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007eb2:	4628      	mov	r0, r5
 8007eb4:	f7f8 fb36 	bl	8000524 <__aeabi_i2d>
 8007eb8:	4642      	mov	r2, r8
 8007eba:	464b      	mov	r3, r9
 8007ebc:	f7f8 fb9c 	bl	80005f8 <__aeabi_dmul>
 8007ec0:	4b86      	ldr	r3, [pc, #536]	; (80080dc <_dtoa_r+0x64c>)
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f7f8 f9e2 	bl	800028c <__adddf3>
 8007ec8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007ecc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ed0:	9303      	str	r3, [sp, #12]
 8007ed2:	2e00      	cmp	r6, #0
 8007ed4:	d158      	bne.n	8007f88 <_dtoa_r+0x4f8>
 8007ed6:	4b82      	ldr	r3, [pc, #520]	; (80080e0 <_dtoa_r+0x650>)
 8007ed8:	2200      	movs	r2, #0
 8007eda:	4640      	mov	r0, r8
 8007edc:	4649      	mov	r1, r9
 8007ede:	f7f8 f9d3 	bl	8000288 <__aeabi_dsub>
 8007ee2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ee6:	4680      	mov	r8, r0
 8007ee8:	4689      	mov	r9, r1
 8007eea:	f7f8 fe15 	bl	8000b18 <__aeabi_dcmpgt>
 8007eee:	2800      	cmp	r0, #0
 8007ef0:	f040 8296 	bne.w	8008420 <_dtoa_r+0x990>
 8007ef4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007ef8:	4640      	mov	r0, r8
 8007efa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007efe:	4649      	mov	r1, r9
 8007f00:	f7f8 fdec 	bl	8000adc <__aeabi_dcmplt>
 8007f04:	2800      	cmp	r0, #0
 8007f06:	f040 8289 	bne.w	800841c <_dtoa_r+0x98c>
 8007f0a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007f0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	f2c0 814e 	blt.w	80081b2 <_dtoa_r+0x722>
 8007f16:	f1bb 0f0e 	cmp.w	fp, #14
 8007f1a:	f300 814a 	bgt.w	80081b2 <_dtoa_r+0x722>
 8007f1e:	4b6b      	ldr	r3, [pc, #428]	; (80080cc <_dtoa_r+0x63c>)
 8007f20:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007f24:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007f28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	f280 80dc 	bge.w	80080e8 <_dtoa_r+0x658>
 8007f30:	9b04      	ldr	r3, [sp, #16]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	f300 80d8 	bgt.w	80080e8 <_dtoa_r+0x658>
 8007f38:	f040 826f 	bne.w	800841a <_dtoa_r+0x98a>
 8007f3c:	4b68      	ldr	r3, [pc, #416]	; (80080e0 <_dtoa_r+0x650>)
 8007f3e:	2200      	movs	r2, #0
 8007f40:	4640      	mov	r0, r8
 8007f42:	4649      	mov	r1, r9
 8007f44:	f7f8 fb58 	bl	80005f8 <__aeabi_dmul>
 8007f48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f4c:	f7f8 fdda 	bl	8000b04 <__aeabi_dcmpge>
 8007f50:	9e04      	ldr	r6, [sp, #16]
 8007f52:	4637      	mov	r7, r6
 8007f54:	2800      	cmp	r0, #0
 8007f56:	f040 8245 	bne.w	80083e4 <_dtoa_r+0x954>
 8007f5a:	9d00      	ldr	r5, [sp, #0]
 8007f5c:	2331      	movs	r3, #49	; 0x31
 8007f5e:	f805 3b01 	strb.w	r3, [r5], #1
 8007f62:	f10b 0b01 	add.w	fp, fp, #1
 8007f66:	e241      	b.n	80083ec <_dtoa_r+0x95c>
 8007f68:	07f2      	lsls	r2, r6, #31
 8007f6a:	d505      	bpl.n	8007f78 <_dtoa_r+0x4e8>
 8007f6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f70:	f7f8 fb42 	bl	80005f8 <__aeabi_dmul>
 8007f74:	3501      	adds	r5, #1
 8007f76:	2301      	movs	r3, #1
 8007f78:	1076      	asrs	r6, r6, #1
 8007f7a:	3708      	adds	r7, #8
 8007f7c:	e773      	b.n	8007e66 <_dtoa_r+0x3d6>
 8007f7e:	2502      	movs	r5, #2
 8007f80:	e775      	b.n	8007e6e <_dtoa_r+0x3de>
 8007f82:	9e04      	ldr	r6, [sp, #16]
 8007f84:	465f      	mov	r7, fp
 8007f86:	e792      	b.n	8007eae <_dtoa_r+0x41e>
 8007f88:	9900      	ldr	r1, [sp, #0]
 8007f8a:	4b50      	ldr	r3, [pc, #320]	; (80080cc <_dtoa_r+0x63c>)
 8007f8c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007f90:	4431      	add	r1, r6
 8007f92:	9102      	str	r1, [sp, #8]
 8007f94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f96:	eeb0 9a47 	vmov.f32	s18, s14
 8007f9a:	eef0 9a67 	vmov.f32	s19, s15
 8007f9e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007fa2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007fa6:	2900      	cmp	r1, #0
 8007fa8:	d044      	beq.n	8008034 <_dtoa_r+0x5a4>
 8007faa:	494e      	ldr	r1, [pc, #312]	; (80080e4 <_dtoa_r+0x654>)
 8007fac:	2000      	movs	r0, #0
 8007fae:	f7f8 fc4d 	bl	800084c <__aeabi_ddiv>
 8007fb2:	ec53 2b19 	vmov	r2, r3, d9
 8007fb6:	f7f8 f967 	bl	8000288 <__aeabi_dsub>
 8007fba:	9d00      	ldr	r5, [sp, #0]
 8007fbc:	ec41 0b19 	vmov	d9, r0, r1
 8007fc0:	4649      	mov	r1, r9
 8007fc2:	4640      	mov	r0, r8
 8007fc4:	f7f8 fdc8 	bl	8000b58 <__aeabi_d2iz>
 8007fc8:	4606      	mov	r6, r0
 8007fca:	f7f8 faab 	bl	8000524 <__aeabi_i2d>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	4640      	mov	r0, r8
 8007fd4:	4649      	mov	r1, r9
 8007fd6:	f7f8 f957 	bl	8000288 <__aeabi_dsub>
 8007fda:	3630      	adds	r6, #48	; 0x30
 8007fdc:	f805 6b01 	strb.w	r6, [r5], #1
 8007fe0:	ec53 2b19 	vmov	r2, r3, d9
 8007fe4:	4680      	mov	r8, r0
 8007fe6:	4689      	mov	r9, r1
 8007fe8:	f7f8 fd78 	bl	8000adc <__aeabi_dcmplt>
 8007fec:	2800      	cmp	r0, #0
 8007fee:	d164      	bne.n	80080ba <_dtoa_r+0x62a>
 8007ff0:	4642      	mov	r2, r8
 8007ff2:	464b      	mov	r3, r9
 8007ff4:	4937      	ldr	r1, [pc, #220]	; (80080d4 <_dtoa_r+0x644>)
 8007ff6:	2000      	movs	r0, #0
 8007ff8:	f7f8 f946 	bl	8000288 <__aeabi_dsub>
 8007ffc:	ec53 2b19 	vmov	r2, r3, d9
 8008000:	f7f8 fd6c 	bl	8000adc <__aeabi_dcmplt>
 8008004:	2800      	cmp	r0, #0
 8008006:	f040 80b6 	bne.w	8008176 <_dtoa_r+0x6e6>
 800800a:	9b02      	ldr	r3, [sp, #8]
 800800c:	429d      	cmp	r5, r3
 800800e:	f43f af7c 	beq.w	8007f0a <_dtoa_r+0x47a>
 8008012:	4b31      	ldr	r3, [pc, #196]	; (80080d8 <_dtoa_r+0x648>)
 8008014:	ec51 0b19 	vmov	r0, r1, d9
 8008018:	2200      	movs	r2, #0
 800801a:	f7f8 faed 	bl	80005f8 <__aeabi_dmul>
 800801e:	4b2e      	ldr	r3, [pc, #184]	; (80080d8 <_dtoa_r+0x648>)
 8008020:	ec41 0b19 	vmov	d9, r0, r1
 8008024:	2200      	movs	r2, #0
 8008026:	4640      	mov	r0, r8
 8008028:	4649      	mov	r1, r9
 800802a:	f7f8 fae5 	bl	80005f8 <__aeabi_dmul>
 800802e:	4680      	mov	r8, r0
 8008030:	4689      	mov	r9, r1
 8008032:	e7c5      	b.n	8007fc0 <_dtoa_r+0x530>
 8008034:	ec51 0b17 	vmov	r0, r1, d7
 8008038:	f7f8 fade 	bl	80005f8 <__aeabi_dmul>
 800803c:	9b02      	ldr	r3, [sp, #8]
 800803e:	9d00      	ldr	r5, [sp, #0]
 8008040:	930f      	str	r3, [sp, #60]	; 0x3c
 8008042:	ec41 0b19 	vmov	d9, r0, r1
 8008046:	4649      	mov	r1, r9
 8008048:	4640      	mov	r0, r8
 800804a:	f7f8 fd85 	bl	8000b58 <__aeabi_d2iz>
 800804e:	4606      	mov	r6, r0
 8008050:	f7f8 fa68 	bl	8000524 <__aeabi_i2d>
 8008054:	3630      	adds	r6, #48	; 0x30
 8008056:	4602      	mov	r2, r0
 8008058:	460b      	mov	r3, r1
 800805a:	4640      	mov	r0, r8
 800805c:	4649      	mov	r1, r9
 800805e:	f7f8 f913 	bl	8000288 <__aeabi_dsub>
 8008062:	f805 6b01 	strb.w	r6, [r5], #1
 8008066:	9b02      	ldr	r3, [sp, #8]
 8008068:	429d      	cmp	r5, r3
 800806a:	4680      	mov	r8, r0
 800806c:	4689      	mov	r9, r1
 800806e:	f04f 0200 	mov.w	r2, #0
 8008072:	d124      	bne.n	80080be <_dtoa_r+0x62e>
 8008074:	4b1b      	ldr	r3, [pc, #108]	; (80080e4 <_dtoa_r+0x654>)
 8008076:	ec51 0b19 	vmov	r0, r1, d9
 800807a:	f7f8 f907 	bl	800028c <__adddf3>
 800807e:	4602      	mov	r2, r0
 8008080:	460b      	mov	r3, r1
 8008082:	4640      	mov	r0, r8
 8008084:	4649      	mov	r1, r9
 8008086:	f7f8 fd47 	bl	8000b18 <__aeabi_dcmpgt>
 800808a:	2800      	cmp	r0, #0
 800808c:	d173      	bne.n	8008176 <_dtoa_r+0x6e6>
 800808e:	ec53 2b19 	vmov	r2, r3, d9
 8008092:	4914      	ldr	r1, [pc, #80]	; (80080e4 <_dtoa_r+0x654>)
 8008094:	2000      	movs	r0, #0
 8008096:	f7f8 f8f7 	bl	8000288 <__aeabi_dsub>
 800809a:	4602      	mov	r2, r0
 800809c:	460b      	mov	r3, r1
 800809e:	4640      	mov	r0, r8
 80080a0:	4649      	mov	r1, r9
 80080a2:	f7f8 fd1b 	bl	8000adc <__aeabi_dcmplt>
 80080a6:	2800      	cmp	r0, #0
 80080a8:	f43f af2f 	beq.w	8007f0a <_dtoa_r+0x47a>
 80080ac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80080ae:	1e6b      	subs	r3, r5, #1
 80080b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80080b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80080b6:	2b30      	cmp	r3, #48	; 0x30
 80080b8:	d0f8      	beq.n	80080ac <_dtoa_r+0x61c>
 80080ba:	46bb      	mov	fp, r7
 80080bc:	e04a      	b.n	8008154 <_dtoa_r+0x6c4>
 80080be:	4b06      	ldr	r3, [pc, #24]	; (80080d8 <_dtoa_r+0x648>)
 80080c0:	f7f8 fa9a 	bl	80005f8 <__aeabi_dmul>
 80080c4:	4680      	mov	r8, r0
 80080c6:	4689      	mov	r9, r1
 80080c8:	e7bd      	b.n	8008046 <_dtoa_r+0x5b6>
 80080ca:	bf00      	nop
 80080cc:	08009b20 	.word	0x08009b20
 80080d0:	08009af8 	.word	0x08009af8
 80080d4:	3ff00000 	.word	0x3ff00000
 80080d8:	40240000 	.word	0x40240000
 80080dc:	401c0000 	.word	0x401c0000
 80080e0:	40140000 	.word	0x40140000
 80080e4:	3fe00000 	.word	0x3fe00000
 80080e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80080ec:	9d00      	ldr	r5, [sp, #0]
 80080ee:	4642      	mov	r2, r8
 80080f0:	464b      	mov	r3, r9
 80080f2:	4630      	mov	r0, r6
 80080f4:	4639      	mov	r1, r7
 80080f6:	f7f8 fba9 	bl	800084c <__aeabi_ddiv>
 80080fa:	f7f8 fd2d 	bl	8000b58 <__aeabi_d2iz>
 80080fe:	9001      	str	r0, [sp, #4]
 8008100:	f7f8 fa10 	bl	8000524 <__aeabi_i2d>
 8008104:	4642      	mov	r2, r8
 8008106:	464b      	mov	r3, r9
 8008108:	f7f8 fa76 	bl	80005f8 <__aeabi_dmul>
 800810c:	4602      	mov	r2, r0
 800810e:	460b      	mov	r3, r1
 8008110:	4630      	mov	r0, r6
 8008112:	4639      	mov	r1, r7
 8008114:	f7f8 f8b8 	bl	8000288 <__aeabi_dsub>
 8008118:	9e01      	ldr	r6, [sp, #4]
 800811a:	9f04      	ldr	r7, [sp, #16]
 800811c:	3630      	adds	r6, #48	; 0x30
 800811e:	f805 6b01 	strb.w	r6, [r5], #1
 8008122:	9e00      	ldr	r6, [sp, #0]
 8008124:	1bae      	subs	r6, r5, r6
 8008126:	42b7      	cmp	r7, r6
 8008128:	4602      	mov	r2, r0
 800812a:	460b      	mov	r3, r1
 800812c:	d134      	bne.n	8008198 <_dtoa_r+0x708>
 800812e:	f7f8 f8ad 	bl	800028c <__adddf3>
 8008132:	4642      	mov	r2, r8
 8008134:	464b      	mov	r3, r9
 8008136:	4606      	mov	r6, r0
 8008138:	460f      	mov	r7, r1
 800813a:	f7f8 fced 	bl	8000b18 <__aeabi_dcmpgt>
 800813e:	b9c8      	cbnz	r0, 8008174 <_dtoa_r+0x6e4>
 8008140:	4642      	mov	r2, r8
 8008142:	464b      	mov	r3, r9
 8008144:	4630      	mov	r0, r6
 8008146:	4639      	mov	r1, r7
 8008148:	f7f8 fcbe 	bl	8000ac8 <__aeabi_dcmpeq>
 800814c:	b110      	cbz	r0, 8008154 <_dtoa_r+0x6c4>
 800814e:	9b01      	ldr	r3, [sp, #4]
 8008150:	07db      	lsls	r3, r3, #31
 8008152:	d40f      	bmi.n	8008174 <_dtoa_r+0x6e4>
 8008154:	4651      	mov	r1, sl
 8008156:	4620      	mov	r0, r4
 8008158:	f000 fb18 	bl	800878c <_Bfree>
 800815c:	2300      	movs	r3, #0
 800815e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008160:	702b      	strb	r3, [r5, #0]
 8008162:	f10b 0301 	add.w	r3, fp, #1
 8008166:	6013      	str	r3, [r2, #0]
 8008168:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800816a:	2b00      	cmp	r3, #0
 800816c:	f43f ace2 	beq.w	8007b34 <_dtoa_r+0xa4>
 8008170:	601d      	str	r5, [r3, #0]
 8008172:	e4df      	b.n	8007b34 <_dtoa_r+0xa4>
 8008174:	465f      	mov	r7, fp
 8008176:	462b      	mov	r3, r5
 8008178:	461d      	mov	r5, r3
 800817a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800817e:	2a39      	cmp	r2, #57	; 0x39
 8008180:	d106      	bne.n	8008190 <_dtoa_r+0x700>
 8008182:	9a00      	ldr	r2, [sp, #0]
 8008184:	429a      	cmp	r2, r3
 8008186:	d1f7      	bne.n	8008178 <_dtoa_r+0x6e8>
 8008188:	9900      	ldr	r1, [sp, #0]
 800818a:	2230      	movs	r2, #48	; 0x30
 800818c:	3701      	adds	r7, #1
 800818e:	700a      	strb	r2, [r1, #0]
 8008190:	781a      	ldrb	r2, [r3, #0]
 8008192:	3201      	adds	r2, #1
 8008194:	701a      	strb	r2, [r3, #0]
 8008196:	e790      	b.n	80080ba <_dtoa_r+0x62a>
 8008198:	4ba3      	ldr	r3, [pc, #652]	; (8008428 <_dtoa_r+0x998>)
 800819a:	2200      	movs	r2, #0
 800819c:	f7f8 fa2c 	bl	80005f8 <__aeabi_dmul>
 80081a0:	2200      	movs	r2, #0
 80081a2:	2300      	movs	r3, #0
 80081a4:	4606      	mov	r6, r0
 80081a6:	460f      	mov	r7, r1
 80081a8:	f7f8 fc8e 	bl	8000ac8 <__aeabi_dcmpeq>
 80081ac:	2800      	cmp	r0, #0
 80081ae:	d09e      	beq.n	80080ee <_dtoa_r+0x65e>
 80081b0:	e7d0      	b.n	8008154 <_dtoa_r+0x6c4>
 80081b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081b4:	2a00      	cmp	r2, #0
 80081b6:	f000 80ca 	beq.w	800834e <_dtoa_r+0x8be>
 80081ba:	9a07      	ldr	r2, [sp, #28]
 80081bc:	2a01      	cmp	r2, #1
 80081be:	f300 80ad 	bgt.w	800831c <_dtoa_r+0x88c>
 80081c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80081c4:	2a00      	cmp	r2, #0
 80081c6:	f000 80a5 	beq.w	8008314 <_dtoa_r+0x884>
 80081ca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80081ce:	9e08      	ldr	r6, [sp, #32]
 80081d0:	9d05      	ldr	r5, [sp, #20]
 80081d2:	9a05      	ldr	r2, [sp, #20]
 80081d4:	441a      	add	r2, r3
 80081d6:	9205      	str	r2, [sp, #20]
 80081d8:	9a06      	ldr	r2, [sp, #24]
 80081da:	2101      	movs	r1, #1
 80081dc:	441a      	add	r2, r3
 80081de:	4620      	mov	r0, r4
 80081e0:	9206      	str	r2, [sp, #24]
 80081e2:	f000 fb89 	bl	80088f8 <__i2b>
 80081e6:	4607      	mov	r7, r0
 80081e8:	b165      	cbz	r5, 8008204 <_dtoa_r+0x774>
 80081ea:	9b06      	ldr	r3, [sp, #24]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	dd09      	ble.n	8008204 <_dtoa_r+0x774>
 80081f0:	42ab      	cmp	r3, r5
 80081f2:	9a05      	ldr	r2, [sp, #20]
 80081f4:	bfa8      	it	ge
 80081f6:	462b      	movge	r3, r5
 80081f8:	1ad2      	subs	r2, r2, r3
 80081fa:	9205      	str	r2, [sp, #20]
 80081fc:	9a06      	ldr	r2, [sp, #24]
 80081fe:	1aed      	subs	r5, r5, r3
 8008200:	1ad3      	subs	r3, r2, r3
 8008202:	9306      	str	r3, [sp, #24]
 8008204:	9b08      	ldr	r3, [sp, #32]
 8008206:	b1f3      	cbz	r3, 8008246 <_dtoa_r+0x7b6>
 8008208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800820a:	2b00      	cmp	r3, #0
 800820c:	f000 80a3 	beq.w	8008356 <_dtoa_r+0x8c6>
 8008210:	2e00      	cmp	r6, #0
 8008212:	dd10      	ble.n	8008236 <_dtoa_r+0x7a6>
 8008214:	4639      	mov	r1, r7
 8008216:	4632      	mov	r2, r6
 8008218:	4620      	mov	r0, r4
 800821a:	f000 fc2d 	bl	8008a78 <__pow5mult>
 800821e:	4652      	mov	r2, sl
 8008220:	4601      	mov	r1, r0
 8008222:	4607      	mov	r7, r0
 8008224:	4620      	mov	r0, r4
 8008226:	f000 fb7d 	bl	8008924 <__multiply>
 800822a:	4651      	mov	r1, sl
 800822c:	4680      	mov	r8, r0
 800822e:	4620      	mov	r0, r4
 8008230:	f000 faac 	bl	800878c <_Bfree>
 8008234:	46c2      	mov	sl, r8
 8008236:	9b08      	ldr	r3, [sp, #32]
 8008238:	1b9a      	subs	r2, r3, r6
 800823a:	d004      	beq.n	8008246 <_dtoa_r+0x7b6>
 800823c:	4651      	mov	r1, sl
 800823e:	4620      	mov	r0, r4
 8008240:	f000 fc1a 	bl	8008a78 <__pow5mult>
 8008244:	4682      	mov	sl, r0
 8008246:	2101      	movs	r1, #1
 8008248:	4620      	mov	r0, r4
 800824a:	f000 fb55 	bl	80088f8 <__i2b>
 800824e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008250:	2b00      	cmp	r3, #0
 8008252:	4606      	mov	r6, r0
 8008254:	f340 8081 	ble.w	800835a <_dtoa_r+0x8ca>
 8008258:	461a      	mov	r2, r3
 800825a:	4601      	mov	r1, r0
 800825c:	4620      	mov	r0, r4
 800825e:	f000 fc0b 	bl	8008a78 <__pow5mult>
 8008262:	9b07      	ldr	r3, [sp, #28]
 8008264:	2b01      	cmp	r3, #1
 8008266:	4606      	mov	r6, r0
 8008268:	dd7a      	ble.n	8008360 <_dtoa_r+0x8d0>
 800826a:	f04f 0800 	mov.w	r8, #0
 800826e:	6933      	ldr	r3, [r6, #16]
 8008270:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008274:	6918      	ldr	r0, [r3, #16]
 8008276:	f000 faf1 	bl	800885c <__hi0bits>
 800827a:	f1c0 0020 	rsb	r0, r0, #32
 800827e:	9b06      	ldr	r3, [sp, #24]
 8008280:	4418      	add	r0, r3
 8008282:	f010 001f 	ands.w	r0, r0, #31
 8008286:	f000 8094 	beq.w	80083b2 <_dtoa_r+0x922>
 800828a:	f1c0 0320 	rsb	r3, r0, #32
 800828e:	2b04      	cmp	r3, #4
 8008290:	f340 8085 	ble.w	800839e <_dtoa_r+0x90e>
 8008294:	9b05      	ldr	r3, [sp, #20]
 8008296:	f1c0 001c 	rsb	r0, r0, #28
 800829a:	4403      	add	r3, r0
 800829c:	9305      	str	r3, [sp, #20]
 800829e:	9b06      	ldr	r3, [sp, #24]
 80082a0:	4403      	add	r3, r0
 80082a2:	4405      	add	r5, r0
 80082a4:	9306      	str	r3, [sp, #24]
 80082a6:	9b05      	ldr	r3, [sp, #20]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	dd05      	ble.n	80082b8 <_dtoa_r+0x828>
 80082ac:	4651      	mov	r1, sl
 80082ae:	461a      	mov	r2, r3
 80082b0:	4620      	mov	r0, r4
 80082b2:	f000 fc3b 	bl	8008b2c <__lshift>
 80082b6:	4682      	mov	sl, r0
 80082b8:	9b06      	ldr	r3, [sp, #24]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	dd05      	ble.n	80082ca <_dtoa_r+0x83a>
 80082be:	4631      	mov	r1, r6
 80082c0:	461a      	mov	r2, r3
 80082c2:	4620      	mov	r0, r4
 80082c4:	f000 fc32 	bl	8008b2c <__lshift>
 80082c8:	4606      	mov	r6, r0
 80082ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d072      	beq.n	80083b6 <_dtoa_r+0x926>
 80082d0:	4631      	mov	r1, r6
 80082d2:	4650      	mov	r0, sl
 80082d4:	f000 fc96 	bl	8008c04 <__mcmp>
 80082d8:	2800      	cmp	r0, #0
 80082da:	da6c      	bge.n	80083b6 <_dtoa_r+0x926>
 80082dc:	2300      	movs	r3, #0
 80082de:	4651      	mov	r1, sl
 80082e0:	220a      	movs	r2, #10
 80082e2:	4620      	mov	r0, r4
 80082e4:	f000 fa74 	bl	80087d0 <__multadd>
 80082e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 80082ee:	4682      	mov	sl, r0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	f000 81b0 	beq.w	8008656 <_dtoa_r+0xbc6>
 80082f6:	2300      	movs	r3, #0
 80082f8:	4639      	mov	r1, r7
 80082fa:	220a      	movs	r2, #10
 80082fc:	4620      	mov	r0, r4
 80082fe:	f000 fa67 	bl	80087d0 <__multadd>
 8008302:	9b01      	ldr	r3, [sp, #4]
 8008304:	2b00      	cmp	r3, #0
 8008306:	4607      	mov	r7, r0
 8008308:	f300 8096 	bgt.w	8008438 <_dtoa_r+0x9a8>
 800830c:	9b07      	ldr	r3, [sp, #28]
 800830e:	2b02      	cmp	r3, #2
 8008310:	dc59      	bgt.n	80083c6 <_dtoa_r+0x936>
 8008312:	e091      	b.n	8008438 <_dtoa_r+0x9a8>
 8008314:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008316:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800831a:	e758      	b.n	80081ce <_dtoa_r+0x73e>
 800831c:	9b04      	ldr	r3, [sp, #16]
 800831e:	1e5e      	subs	r6, r3, #1
 8008320:	9b08      	ldr	r3, [sp, #32]
 8008322:	42b3      	cmp	r3, r6
 8008324:	bfbf      	itttt	lt
 8008326:	9b08      	ldrlt	r3, [sp, #32]
 8008328:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800832a:	9608      	strlt	r6, [sp, #32]
 800832c:	1af3      	sublt	r3, r6, r3
 800832e:	bfb4      	ite	lt
 8008330:	18d2      	addlt	r2, r2, r3
 8008332:	1b9e      	subge	r6, r3, r6
 8008334:	9b04      	ldr	r3, [sp, #16]
 8008336:	bfbc      	itt	lt
 8008338:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800833a:	2600      	movlt	r6, #0
 800833c:	2b00      	cmp	r3, #0
 800833e:	bfb7      	itett	lt
 8008340:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008344:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008348:	1a9d      	sublt	r5, r3, r2
 800834a:	2300      	movlt	r3, #0
 800834c:	e741      	b.n	80081d2 <_dtoa_r+0x742>
 800834e:	9e08      	ldr	r6, [sp, #32]
 8008350:	9d05      	ldr	r5, [sp, #20]
 8008352:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008354:	e748      	b.n	80081e8 <_dtoa_r+0x758>
 8008356:	9a08      	ldr	r2, [sp, #32]
 8008358:	e770      	b.n	800823c <_dtoa_r+0x7ac>
 800835a:	9b07      	ldr	r3, [sp, #28]
 800835c:	2b01      	cmp	r3, #1
 800835e:	dc19      	bgt.n	8008394 <_dtoa_r+0x904>
 8008360:	9b02      	ldr	r3, [sp, #8]
 8008362:	b9bb      	cbnz	r3, 8008394 <_dtoa_r+0x904>
 8008364:	9b03      	ldr	r3, [sp, #12]
 8008366:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800836a:	b99b      	cbnz	r3, 8008394 <_dtoa_r+0x904>
 800836c:	9b03      	ldr	r3, [sp, #12]
 800836e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008372:	0d1b      	lsrs	r3, r3, #20
 8008374:	051b      	lsls	r3, r3, #20
 8008376:	b183      	cbz	r3, 800839a <_dtoa_r+0x90a>
 8008378:	9b05      	ldr	r3, [sp, #20]
 800837a:	3301      	adds	r3, #1
 800837c:	9305      	str	r3, [sp, #20]
 800837e:	9b06      	ldr	r3, [sp, #24]
 8008380:	3301      	adds	r3, #1
 8008382:	9306      	str	r3, [sp, #24]
 8008384:	f04f 0801 	mov.w	r8, #1
 8008388:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800838a:	2b00      	cmp	r3, #0
 800838c:	f47f af6f 	bne.w	800826e <_dtoa_r+0x7de>
 8008390:	2001      	movs	r0, #1
 8008392:	e774      	b.n	800827e <_dtoa_r+0x7ee>
 8008394:	f04f 0800 	mov.w	r8, #0
 8008398:	e7f6      	b.n	8008388 <_dtoa_r+0x8f8>
 800839a:	4698      	mov	r8, r3
 800839c:	e7f4      	b.n	8008388 <_dtoa_r+0x8f8>
 800839e:	d082      	beq.n	80082a6 <_dtoa_r+0x816>
 80083a0:	9a05      	ldr	r2, [sp, #20]
 80083a2:	331c      	adds	r3, #28
 80083a4:	441a      	add	r2, r3
 80083a6:	9205      	str	r2, [sp, #20]
 80083a8:	9a06      	ldr	r2, [sp, #24]
 80083aa:	441a      	add	r2, r3
 80083ac:	441d      	add	r5, r3
 80083ae:	9206      	str	r2, [sp, #24]
 80083b0:	e779      	b.n	80082a6 <_dtoa_r+0x816>
 80083b2:	4603      	mov	r3, r0
 80083b4:	e7f4      	b.n	80083a0 <_dtoa_r+0x910>
 80083b6:	9b04      	ldr	r3, [sp, #16]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	dc37      	bgt.n	800842c <_dtoa_r+0x99c>
 80083bc:	9b07      	ldr	r3, [sp, #28]
 80083be:	2b02      	cmp	r3, #2
 80083c0:	dd34      	ble.n	800842c <_dtoa_r+0x99c>
 80083c2:	9b04      	ldr	r3, [sp, #16]
 80083c4:	9301      	str	r3, [sp, #4]
 80083c6:	9b01      	ldr	r3, [sp, #4]
 80083c8:	b963      	cbnz	r3, 80083e4 <_dtoa_r+0x954>
 80083ca:	4631      	mov	r1, r6
 80083cc:	2205      	movs	r2, #5
 80083ce:	4620      	mov	r0, r4
 80083d0:	f000 f9fe 	bl	80087d0 <__multadd>
 80083d4:	4601      	mov	r1, r0
 80083d6:	4606      	mov	r6, r0
 80083d8:	4650      	mov	r0, sl
 80083da:	f000 fc13 	bl	8008c04 <__mcmp>
 80083de:	2800      	cmp	r0, #0
 80083e0:	f73f adbb 	bgt.w	8007f5a <_dtoa_r+0x4ca>
 80083e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083e6:	9d00      	ldr	r5, [sp, #0]
 80083e8:	ea6f 0b03 	mvn.w	fp, r3
 80083ec:	f04f 0800 	mov.w	r8, #0
 80083f0:	4631      	mov	r1, r6
 80083f2:	4620      	mov	r0, r4
 80083f4:	f000 f9ca 	bl	800878c <_Bfree>
 80083f8:	2f00      	cmp	r7, #0
 80083fa:	f43f aeab 	beq.w	8008154 <_dtoa_r+0x6c4>
 80083fe:	f1b8 0f00 	cmp.w	r8, #0
 8008402:	d005      	beq.n	8008410 <_dtoa_r+0x980>
 8008404:	45b8      	cmp	r8, r7
 8008406:	d003      	beq.n	8008410 <_dtoa_r+0x980>
 8008408:	4641      	mov	r1, r8
 800840a:	4620      	mov	r0, r4
 800840c:	f000 f9be 	bl	800878c <_Bfree>
 8008410:	4639      	mov	r1, r7
 8008412:	4620      	mov	r0, r4
 8008414:	f000 f9ba 	bl	800878c <_Bfree>
 8008418:	e69c      	b.n	8008154 <_dtoa_r+0x6c4>
 800841a:	2600      	movs	r6, #0
 800841c:	4637      	mov	r7, r6
 800841e:	e7e1      	b.n	80083e4 <_dtoa_r+0x954>
 8008420:	46bb      	mov	fp, r7
 8008422:	4637      	mov	r7, r6
 8008424:	e599      	b.n	8007f5a <_dtoa_r+0x4ca>
 8008426:	bf00      	nop
 8008428:	40240000 	.word	0x40240000
 800842c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800842e:	2b00      	cmp	r3, #0
 8008430:	f000 80c8 	beq.w	80085c4 <_dtoa_r+0xb34>
 8008434:	9b04      	ldr	r3, [sp, #16]
 8008436:	9301      	str	r3, [sp, #4]
 8008438:	2d00      	cmp	r5, #0
 800843a:	dd05      	ble.n	8008448 <_dtoa_r+0x9b8>
 800843c:	4639      	mov	r1, r7
 800843e:	462a      	mov	r2, r5
 8008440:	4620      	mov	r0, r4
 8008442:	f000 fb73 	bl	8008b2c <__lshift>
 8008446:	4607      	mov	r7, r0
 8008448:	f1b8 0f00 	cmp.w	r8, #0
 800844c:	d05b      	beq.n	8008506 <_dtoa_r+0xa76>
 800844e:	6879      	ldr	r1, [r7, #4]
 8008450:	4620      	mov	r0, r4
 8008452:	f000 f95b 	bl	800870c <_Balloc>
 8008456:	4605      	mov	r5, r0
 8008458:	b928      	cbnz	r0, 8008466 <_dtoa_r+0x9d6>
 800845a:	4b83      	ldr	r3, [pc, #524]	; (8008668 <_dtoa_r+0xbd8>)
 800845c:	4602      	mov	r2, r0
 800845e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008462:	f7ff bb2e 	b.w	8007ac2 <_dtoa_r+0x32>
 8008466:	693a      	ldr	r2, [r7, #16]
 8008468:	3202      	adds	r2, #2
 800846a:	0092      	lsls	r2, r2, #2
 800846c:	f107 010c 	add.w	r1, r7, #12
 8008470:	300c      	adds	r0, #12
 8008472:	f7ff fa77 	bl	8007964 <memcpy>
 8008476:	2201      	movs	r2, #1
 8008478:	4629      	mov	r1, r5
 800847a:	4620      	mov	r0, r4
 800847c:	f000 fb56 	bl	8008b2c <__lshift>
 8008480:	9b00      	ldr	r3, [sp, #0]
 8008482:	3301      	adds	r3, #1
 8008484:	9304      	str	r3, [sp, #16]
 8008486:	e9dd 2300 	ldrd	r2, r3, [sp]
 800848a:	4413      	add	r3, r2
 800848c:	9308      	str	r3, [sp, #32]
 800848e:	9b02      	ldr	r3, [sp, #8]
 8008490:	f003 0301 	and.w	r3, r3, #1
 8008494:	46b8      	mov	r8, r7
 8008496:	9306      	str	r3, [sp, #24]
 8008498:	4607      	mov	r7, r0
 800849a:	9b04      	ldr	r3, [sp, #16]
 800849c:	4631      	mov	r1, r6
 800849e:	3b01      	subs	r3, #1
 80084a0:	4650      	mov	r0, sl
 80084a2:	9301      	str	r3, [sp, #4]
 80084a4:	f7ff fa6c 	bl	8007980 <quorem>
 80084a8:	4641      	mov	r1, r8
 80084aa:	9002      	str	r0, [sp, #8]
 80084ac:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80084b0:	4650      	mov	r0, sl
 80084b2:	f000 fba7 	bl	8008c04 <__mcmp>
 80084b6:	463a      	mov	r2, r7
 80084b8:	9005      	str	r0, [sp, #20]
 80084ba:	4631      	mov	r1, r6
 80084bc:	4620      	mov	r0, r4
 80084be:	f000 fbbd 	bl	8008c3c <__mdiff>
 80084c2:	68c2      	ldr	r2, [r0, #12]
 80084c4:	4605      	mov	r5, r0
 80084c6:	bb02      	cbnz	r2, 800850a <_dtoa_r+0xa7a>
 80084c8:	4601      	mov	r1, r0
 80084ca:	4650      	mov	r0, sl
 80084cc:	f000 fb9a 	bl	8008c04 <__mcmp>
 80084d0:	4602      	mov	r2, r0
 80084d2:	4629      	mov	r1, r5
 80084d4:	4620      	mov	r0, r4
 80084d6:	9209      	str	r2, [sp, #36]	; 0x24
 80084d8:	f000 f958 	bl	800878c <_Bfree>
 80084dc:	9b07      	ldr	r3, [sp, #28]
 80084de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084e0:	9d04      	ldr	r5, [sp, #16]
 80084e2:	ea43 0102 	orr.w	r1, r3, r2
 80084e6:	9b06      	ldr	r3, [sp, #24]
 80084e8:	4319      	orrs	r1, r3
 80084ea:	d110      	bne.n	800850e <_dtoa_r+0xa7e>
 80084ec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80084f0:	d029      	beq.n	8008546 <_dtoa_r+0xab6>
 80084f2:	9b05      	ldr	r3, [sp, #20]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	dd02      	ble.n	80084fe <_dtoa_r+0xa6e>
 80084f8:	9b02      	ldr	r3, [sp, #8]
 80084fa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80084fe:	9b01      	ldr	r3, [sp, #4]
 8008500:	f883 9000 	strb.w	r9, [r3]
 8008504:	e774      	b.n	80083f0 <_dtoa_r+0x960>
 8008506:	4638      	mov	r0, r7
 8008508:	e7ba      	b.n	8008480 <_dtoa_r+0x9f0>
 800850a:	2201      	movs	r2, #1
 800850c:	e7e1      	b.n	80084d2 <_dtoa_r+0xa42>
 800850e:	9b05      	ldr	r3, [sp, #20]
 8008510:	2b00      	cmp	r3, #0
 8008512:	db04      	blt.n	800851e <_dtoa_r+0xa8e>
 8008514:	9907      	ldr	r1, [sp, #28]
 8008516:	430b      	orrs	r3, r1
 8008518:	9906      	ldr	r1, [sp, #24]
 800851a:	430b      	orrs	r3, r1
 800851c:	d120      	bne.n	8008560 <_dtoa_r+0xad0>
 800851e:	2a00      	cmp	r2, #0
 8008520:	dded      	ble.n	80084fe <_dtoa_r+0xa6e>
 8008522:	4651      	mov	r1, sl
 8008524:	2201      	movs	r2, #1
 8008526:	4620      	mov	r0, r4
 8008528:	f000 fb00 	bl	8008b2c <__lshift>
 800852c:	4631      	mov	r1, r6
 800852e:	4682      	mov	sl, r0
 8008530:	f000 fb68 	bl	8008c04 <__mcmp>
 8008534:	2800      	cmp	r0, #0
 8008536:	dc03      	bgt.n	8008540 <_dtoa_r+0xab0>
 8008538:	d1e1      	bne.n	80084fe <_dtoa_r+0xa6e>
 800853a:	f019 0f01 	tst.w	r9, #1
 800853e:	d0de      	beq.n	80084fe <_dtoa_r+0xa6e>
 8008540:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008544:	d1d8      	bne.n	80084f8 <_dtoa_r+0xa68>
 8008546:	9a01      	ldr	r2, [sp, #4]
 8008548:	2339      	movs	r3, #57	; 0x39
 800854a:	7013      	strb	r3, [r2, #0]
 800854c:	462b      	mov	r3, r5
 800854e:	461d      	mov	r5, r3
 8008550:	3b01      	subs	r3, #1
 8008552:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008556:	2a39      	cmp	r2, #57	; 0x39
 8008558:	d06c      	beq.n	8008634 <_dtoa_r+0xba4>
 800855a:	3201      	adds	r2, #1
 800855c:	701a      	strb	r2, [r3, #0]
 800855e:	e747      	b.n	80083f0 <_dtoa_r+0x960>
 8008560:	2a00      	cmp	r2, #0
 8008562:	dd07      	ble.n	8008574 <_dtoa_r+0xae4>
 8008564:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008568:	d0ed      	beq.n	8008546 <_dtoa_r+0xab6>
 800856a:	9a01      	ldr	r2, [sp, #4]
 800856c:	f109 0301 	add.w	r3, r9, #1
 8008570:	7013      	strb	r3, [r2, #0]
 8008572:	e73d      	b.n	80083f0 <_dtoa_r+0x960>
 8008574:	9b04      	ldr	r3, [sp, #16]
 8008576:	9a08      	ldr	r2, [sp, #32]
 8008578:	f803 9c01 	strb.w	r9, [r3, #-1]
 800857c:	4293      	cmp	r3, r2
 800857e:	d043      	beq.n	8008608 <_dtoa_r+0xb78>
 8008580:	4651      	mov	r1, sl
 8008582:	2300      	movs	r3, #0
 8008584:	220a      	movs	r2, #10
 8008586:	4620      	mov	r0, r4
 8008588:	f000 f922 	bl	80087d0 <__multadd>
 800858c:	45b8      	cmp	r8, r7
 800858e:	4682      	mov	sl, r0
 8008590:	f04f 0300 	mov.w	r3, #0
 8008594:	f04f 020a 	mov.w	r2, #10
 8008598:	4641      	mov	r1, r8
 800859a:	4620      	mov	r0, r4
 800859c:	d107      	bne.n	80085ae <_dtoa_r+0xb1e>
 800859e:	f000 f917 	bl	80087d0 <__multadd>
 80085a2:	4680      	mov	r8, r0
 80085a4:	4607      	mov	r7, r0
 80085a6:	9b04      	ldr	r3, [sp, #16]
 80085a8:	3301      	adds	r3, #1
 80085aa:	9304      	str	r3, [sp, #16]
 80085ac:	e775      	b.n	800849a <_dtoa_r+0xa0a>
 80085ae:	f000 f90f 	bl	80087d0 <__multadd>
 80085b2:	4639      	mov	r1, r7
 80085b4:	4680      	mov	r8, r0
 80085b6:	2300      	movs	r3, #0
 80085b8:	220a      	movs	r2, #10
 80085ba:	4620      	mov	r0, r4
 80085bc:	f000 f908 	bl	80087d0 <__multadd>
 80085c0:	4607      	mov	r7, r0
 80085c2:	e7f0      	b.n	80085a6 <_dtoa_r+0xb16>
 80085c4:	9b04      	ldr	r3, [sp, #16]
 80085c6:	9301      	str	r3, [sp, #4]
 80085c8:	9d00      	ldr	r5, [sp, #0]
 80085ca:	4631      	mov	r1, r6
 80085cc:	4650      	mov	r0, sl
 80085ce:	f7ff f9d7 	bl	8007980 <quorem>
 80085d2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80085d6:	9b00      	ldr	r3, [sp, #0]
 80085d8:	f805 9b01 	strb.w	r9, [r5], #1
 80085dc:	1aea      	subs	r2, r5, r3
 80085de:	9b01      	ldr	r3, [sp, #4]
 80085e0:	4293      	cmp	r3, r2
 80085e2:	dd07      	ble.n	80085f4 <_dtoa_r+0xb64>
 80085e4:	4651      	mov	r1, sl
 80085e6:	2300      	movs	r3, #0
 80085e8:	220a      	movs	r2, #10
 80085ea:	4620      	mov	r0, r4
 80085ec:	f000 f8f0 	bl	80087d0 <__multadd>
 80085f0:	4682      	mov	sl, r0
 80085f2:	e7ea      	b.n	80085ca <_dtoa_r+0xb3a>
 80085f4:	9b01      	ldr	r3, [sp, #4]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	bfc8      	it	gt
 80085fa:	461d      	movgt	r5, r3
 80085fc:	9b00      	ldr	r3, [sp, #0]
 80085fe:	bfd8      	it	le
 8008600:	2501      	movle	r5, #1
 8008602:	441d      	add	r5, r3
 8008604:	f04f 0800 	mov.w	r8, #0
 8008608:	4651      	mov	r1, sl
 800860a:	2201      	movs	r2, #1
 800860c:	4620      	mov	r0, r4
 800860e:	f000 fa8d 	bl	8008b2c <__lshift>
 8008612:	4631      	mov	r1, r6
 8008614:	4682      	mov	sl, r0
 8008616:	f000 faf5 	bl	8008c04 <__mcmp>
 800861a:	2800      	cmp	r0, #0
 800861c:	dc96      	bgt.n	800854c <_dtoa_r+0xabc>
 800861e:	d102      	bne.n	8008626 <_dtoa_r+0xb96>
 8008620:	f019 0f01 	tst.w	r9, #1
 8008624:	d192      	bne.n	800854c <_dtoa_r+0xabc>
 8008626:	462b      	mov	r3, r5
 8008628:	461d      	mov	r5, r3
 800862a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800862e:	2a30      	cmp	r2, #48	; 0x30
 8008630:	d0fa      	beq.n	8008628 <_dtoa_r+0xb98>
 8008632:	e6dd      	b.n	80083f0 <_dtoa_r+0x960>
 8008634:	9a00      	ldr	r2, [sp, #0]
 8008636:	429a      	cmp	r2, r3
 8008638:	d189      	bne.n	800854e <_dtoa_r+0xabe>
 800863a:	f10b 0b01 	add.w	fp, fp, #1
 800863e:	2331      	movs	r3, #49	; 0x31
 8008640:	e796      	b.n	8008570 <_dtoa_r+0xae0>
 8008642:	4b0a      	ldr	r3, [pc, #40]	; (800866c <_dtoa_r+0xbdc>)
 8008644:	f7ff ba99 	b.w	8007b7a <_dtoa_r+0xea>
 8008648:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800864a:	2b00      	cmp	r3, #0
 800864c:	f47f aa6d 	bne.w	8007b2a <_dtoa_r+0x9a>
 8008650:	4b07      	ldr	r3, [pc, #28]	; (8008670 <_dtoa_r+0xbe0>)
 8008652:	f7ff ba92 	b.w	8007b7a <_dtoa_r+0xea>
 8008656:	9b01      	ldr	r3, [sp, #4]
 8008658:	2b00      	cmp	r3, #0
 800865a:	dcb5      	bgt.n	80085c8 <_dtoa_r+0xb38>
 800865c:	9b07      	ldr	r3, [sp, #28]
 800865e:	2b02      	cmp	r3, #2
 8008660:	f73f aeb1 	bgt.w	80083c6 <_dtoa_r+0x936>
 8008664:	e7b0      	b.n	80085c8 <_dtoa_r+0xb38>
 8008666:	bf00      	nop
 8008668:	08009a8c 	.word	0x08009a8c
 800866c:	080099ec 	.word	0x080099ec
 8008670:	08009a10 	.word	0x08009a10

08008674 <_free_r>:
 8008674:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008676:	2900      	cmp	r1, #0
 8008678:	d044      	beq.n	8008704 <_free_r+0x90>
 800867a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800867e:	9001      	str	r0, [sp, #4]
 8008680:	2b00      	cmp	r3, #0
 8008682:	f1a1 0404 	sub.w	r4, r1, #4
 8008686:	bfb8      	it	lt
 8008688:	18e4      	addlt	r4, r4, r3
 800868a:	f7fe fb13 	bl	8006cb4 <__malloc_lock>
 800868e:	4a1e      	ldr	r2, [pc, #120]	; (8008708 <_free_r+0x94>)
 8008690:	9801      	ldr	r0, [sp, #4]
 8008692:	6813      	ldr	r3, [r2, #0]
 8008694:	b933      	cbnz	r3, 80086a4 <_free_r+0x30>
 8008696:	6063      	str	r3, [r4, #4]
 8008698:	6014      	str	r4, [r2, #0]
 800869a:	b003      	add	sp, #12
 800869c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80086a0:	f7fe bb0e 	b.w	8006cc0 <__malloc_unlock>
 80086a4:	42a3      	cmp	r3, r4
 80086a6:	d908      	bls.n	80086ba <_free_r+0x46>
 80086a8:	6825      	ldr	r5, [r4, #0]
 80086aa:	1961      	adds	r1, r4, r5
 80086ac:	428b      	cmp	r3, r1
 80086ae:	bf01      	itttt	eq
 80086b0:	6819      	ldreq	r1, [r3, #0]
 80086b2:	685b      	ldreq	r3, [r3, #4]
 80086b4:	1949      	addeq	r1, r1, r5
 80086b6:	6021      	streq	r1, [r4, #0]
 80086b8:	e7ed      	b.n	8008696 <_free_r+0x22>
 80086ba:	461a      	mov	r2, r3
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	b10b      	cbz	r3, 80086c4 <_free_r+0x50>
 80086c0:	42a3      	cmp	r3, r4
 80086c2:	d9fa      	bls.n	80086ba <_free_r+0x46>
 80086c4:	6811      	ldr	r1, [r2, #0]
 80086c6:	1855      	adds	r5, r2, r1
 80086c8:	42a5      	cmp	r5, r4
 80086ca:	d10b      	bne.n	80086e4 <_free_r+0x70>
 80086cc:	6824      	ldr	r4, [r4, #0]
 80086ce:	4421      	add	r1, r4
 80086d0:	1854      	adds	r4, r2, r1
 80086d2:	42a3      	cmp	r3, r4
 80086d4:	6011      	str	r1, [r2, #0]
 80086d6:	d1e0      	bne.n	800869a <_free_r+0x26>
 80086d8:	681c      	ldr	r4, [r3, #0]
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	6053      	str	r3, [r2, #4]
 80086de:	440c      	add	r4, r1
 80086e0:	6014      	str	r4, [r2, #0]
 80086e2:	e7da      	b.n	800869a <_free_r+0x26>
 80086e4:	d902      	bls.n	80086ec <_free_r+0x78>
 80086e6:	230c      	movs	r3, #12
 80086e8:	6003      	str	r3, [r0, #0]
 80086ea:	e7d6      	b.n	800869a <_free_r+0x26>
 80086ec:	6825      	ldr	r5, [r4, #0]
 80086ee:	1961      	adds	r1, r4, r5
 80086f0:	428b      	cmp	r3, r1
 80086f2:	bf04      	itt	eq
 80086f4:	6819      	ldreq	r1, [r3, #0]
 80086f6:	685b      	ldreq	r3, [r3, #4]
 80086f8:	6063      	str	r3, [r4, #4]
 80086fa:	bf04      	itt	eq
 80086fc:	1949      	addeq	r1, r1, r5
 80086fe:	6021      	streq	r1, [r4, #0]
 8008700:	6054      	str	r4, [r2, #4]
 8008702:	e7ca      	b.n	800869a <_free_r+0x26>
 8008704:	b003      	add	sp, #12
 8008706:	bd30      	pop	{r4, r5, pc}
 8008708:	200004c8 	.word	0x200004c8

0800870c <_Balloc>:
 800870c:	b570      	push	{r4, r5, r6, lr}
 800870e:	69c6      	ldr	r6, [r0, #28]
 8008710:	4604      	mov	r4, r0
 8008712:	460d      	mov	r5, r1
 8008714:	b976      	cbnz	r6, 8008734 <_Balloc+0x28>
 8008716:	2010      	movs	r0, #16
 8008718:	f7fe fa1c 	bl	8006b54 <malloc>
 800871c:	4602      	mov	r2, r0
 800871e:	61e0      	str	r0, [r4, #28]
 8008720:	b920      	cbnz	r0, 800872c <_Balloc+0x20>
 8008722:	4b18      	ldr	r3, [pc, #96]	; (8008784 <_Balloc+0x78>)
 8008724:	4818      	ldr	r0, [pc, #96]	; (8008788 <_Balloc+0x7c>)
 8008726:	216b      	movs	r1, #107	; 0x6b
 8008728:	f000 fd8c 	bl	8009244 <__assert_func>
 800872c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008730:	6006      	str	r6, [r0, #0]
 8008732:	60c6      	str	r6, [r0, #12]
 8008734:	69e6      	ldr	r6, [r4, #28]
 8008736:	68f3      	ldr	r3, [r6, #12]
 8008738:	b183      	cbz	r3, 800875c <_Balloc+0x50>
 800873a:	69e3      	ldr	r3, [r4, #28]
 800873c:	68db      	ldr	r3, [r3, #12]
 800873e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008742:	b9b8      	cbnz	r0, 8008774 <_Balloc+0x68>
 8008744:	2101      	movs	r1, #1
 8008746:	fa01 f605 	lsl.w	r6, r1, r5
 800874a:	1d72      	adds	r2, r6, #5
 800874c:	0092      	lsls	r2, r2, #2
 800874e:	4620      	mov	r0, r4
 8008750:	f000 fd96 	bl	8009280 <_calloc_r>
 8008754:	b160      	cbz	r0, 8008770 <_Balloc+0x64>
 8008756:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800875a:	e00e      	b.n	800877a <_Balloc+0x6e>
 800875c:	2221      	movs	r2, #33	; 0x21
 800875e:	2104      	movs	r1, #4
 8008760:	4620      	mov	r0, r4
 8008762:	f000 fd8d 	bl	8009280 <_calloc_r>
 8008766:	69e3      	ldr	r3, [r4, #28]
 8008768:	60f0      	str	r0, [r6, #12]
 800876a:	68db      	ldr	r3, [r3, #12]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d1e4      	bne.n	800873a <_Balloc+0x2e>
 8008770:	2000      	movs	r0, #0
 8008772:	bd70      	pop	{r4, r5, r6, pc}
 8008774:	6802      	ldr	r2, [r0, #0]
 8008776:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800877a:	2300      	movs	r3, #0
 800877c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008780:	e7f7      	b.n	8008772 <_Balloc+0x66>
 8008782:	bf00      	nop
 8008784:	08009a1d 	.word	0x08009a1d
 8008788:	08009a9d 	.word	0x08009a9d

0800878c <_Bfree>:
 800878c:	b570      	push	{r4, r5, r6, lr}
 800878e:	69c6      	ldr	r6, [r0, #28]
 8008790:	4605      	mov	r5, r0
 8008792:	460c      	mov	r4, r1
 8008794:	b976      	cbnz	r6, 80087b4 <_Bfree+0x28>
 8008796:	2010      	movs	r0, #16
 8008798:	f7fe f9dc 	bl	8006b54 <malloc>
 800879c:	4602      	mov	r2, r0
 800879e:	61e8      	str	r0, [r5, #28]
 80087a0:	b920      	cbnz	r0, 80087ac <_Bfree+0x20>
 80087a2:	4b09      	ldr	r3, [pc, #36]	; (80087c8 <_Bfree+0x3c>)
 80087a4:	4809      	ldr	r0, [pc, #36]	; (80087cc <_Bfree+0x40>)
 80087a6:	218f      	movs	r1, #143	; 0x8f
 80087a8:	f000 fd4c 	bl	8009244 <__assert_func>
 80087ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80087b0:	6006      	str	r6, [r0, #0]
 80087b2:	60c6      	str	r6, [r0, #12]
 80087b4:	b13c      	cbz	r4, 80087c6 <_Bfree+0x3a>
 80087b6:	69eb      	ldr	r3, [r5, #28]
 80087b8:	6862      	ldr	r2, [r4, #4]
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80087c0:	6021      	str	r1, [r4, #0]
 80087c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80087c6:	bd70      	pop	{r4, r5, r6, pc}
 80087c8:	08009a1d 	.word	0x08009a1d
 80087cc:	08009a9d 	.word	0x08009a9d

080087d0 <__multadd>:
 80087d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087d4:	690d      	ldr	r5, [r1, #16]
 80087d6:	4607      	mov	r7, r0
 80087d8:	460c      	mov	r4, r1
 80087da:	461e      	mov	r6, r3
 80087dc:	f101 0c14 	add.w	ip, r1, #20
 80087e0:	2000      	movs	r0, #0
 80087e2:	f8dc 3000 	ldr.w	r3, [ip]
 80087e6:	b299      	uxth	r1, r3
 80087e8:	fb02 6101 	mla	r1, r2, r1, r6
 80087ec:	0c1e      	lsrs	r6, r3, #16
 80087ee:	0c0b      	lsrs	r3, r1, #16
 80087f0:	fb02 3306 	mla	r3, r2, r6, r3
 80087f4:	b289      	uxth	r1, r1
 80087f6:	3001      	adds	r0, #1
 80087f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80087fc:	4285      	cmp	r5, r0
 80087fe:	f84c 1b04 	str.w	r1, [ip], #4
 8008802:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008806:	dcec      	bgt.n	80087e2 <__multadd+0x12>
 8008808:	b30e      	cbz	r6, 800884e <__multadd+0x7e>
 800880a:	68a3      	ldr	r3, [r4, #8]
 800880c:	42ab      	cmp	r3, r5
 800880e:	dc19      	bgt.n	8008844 <__multadd+0x74>
 8008810:	6861      	ldr	r1, [r4, #4]
 8008812:	4638      	mov	r0, r7
 8008814:	3101      	adds	r1, #1
 8008816:	f7ff ff79 	bl	800870c <_Balloc>
 800881a:	4680      	mov	r8, r0
 800881c:	b928      	cbnz	r0, 800882a <__multadd+0x5a>
 800881e:	4602      	mov	r2, r0
 8008820:	4b0c      	ldr	r3, [pc, #48]	; (8008854 <__multadd+0x84>)
 8008822:	480d      	ldr	r0, [pc, #52]	; (8008858 <__multadd+0x88>)
 8008824:	21ba      	movs	r1, #186	; 0xba
 8008826:	f000 fd0d 	bl	8009244 <__assert_func>
 800882a:	6922      	ldr	r2, [r4, #16]
 800882c:	3202      	adds	r2, #2
 800882e:	f104 010c 	add.w	r1, r4, #12
 8008832:	0092      	lsls	r2, r2, #2
 8008834:	300c      	adds	r0, #12
 8008836:	f7ff f895 	bl	8007964 <memcpy>
 800883a:	4621      	mov	r1, r4
 800883c:	4638      	mov	r0, r7
 800883e:	f7ff ffa5 	bl	800878c <_Bfree>
 8008842:	4644      	mov	r4, r8
 8008844:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008848:	3501      	adds	r5, #1
 800884a:	615e      	str	r6, [r3, #20]
 800884c:	6125      	str	r5, [r4, #16]
 800884e:	4620      	mov	r0, r4
 8008850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008854:	08009a8c 	.word	0x08009a8c
 8008858:	08009a9d 	.word	0x08009a9d

0800885c <__hi0bits>:
 800885c:	0c03      	lsrs	r3, r0, #16
 800885e:	041b      	lsls	r3, r3, #16
 8008860:	b9d3      	cbnz	r3, 8008898 <__hi0bits+0x3c>
 8008862:	0400      	lsls	r0, r0, #16
 8008864:	2310      	movs	r3, #16
 8008866:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800886a:	bf04      	itt	eq
 800886c:	0200      	lsleq	r0, r0, #8
 800886e:	3308      	addeq	r3, #8
 8008870:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008874:	bf04      	itt	eq
 8008876:	0100      	lsleq	r0, r0, #4
 8008878:	3304      	addeq	r3, #4
 800887a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800887e:	bf04      	itt	eq
 8008880:	0080      	lsleq	r0, r0, #2
 8008882:	3302      	addeq	r3, #2
 8008884:	2800      	cmp	r0, #0
 8008886:	db05      	blt.n	8008894 <__hi0bits+0x38>
 8008888:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800888c:	f103 0301 	add.w	r3, r3, #1
 8008890:	bf08      	it	eq
 8008892:	2320      	moveq	r3, #32
 8008894:	4618      	mov	r0, r3
 8008896:	4770      	bx	lr
 8008898:	2300      	movs	r3, #0
 800889a:	e7e4      	b.n	8008866 <__hi0bits+0xa>

0800889c <__lo0bits>:
 800889c:	6803      	ldr	r3, [r0, #0]
 800889e:	f013 0207 	ands.w	r2, r3, #7
 80088a2:	d00c      	beq.n	80088be <__lo0bits+0x22>
 80088a4:	07d9      	lsls	r1, r3, #31
 80088a6:	d422      	bmi.n	80088ee <__lo0bits+0x52>
 80088a8:	079a      	lsls	r2, r3, #30
 80088aa:	bf49      	itett	mi
 80088ac:	085b      	lsrmi	r3, r3, #1
 80088ae:	089b      	lsrpl	r3, r3, #2
 80088b0:	6003      	strmi	r3, [r0, #0]
 80088b2:	2201      	movmi	r2, #1
 80088b4:	bf5c      	itt	pl
 80088b6:	6003      	strpl	r3, [r0, #0]
 80088b8:	2202      	movpl	r2, #2
 80088ba:	4610      	mov	r0, r2
 80088bc:	4770      	bx	lr
 80088be:	b299      	uxth	r1, r3
 80088c0:	b909      	cbnz	r1, 80088c6 <__lo0bits+0x2a>
 80088c2:	0c1b      	lsrs	r3, r3, #16
 80088c4:	2210      	movs	r2, #16
 80088c6:	b2d9      	uxtb	r1, r3
 80088c8:	b909      	cbnz	r1, 80088ce <__lo0bits+0x32>
 80088ca:	3208      	adds	r2, #8
 80088cc:	0a1b      	lsrs	r3, r3, #8
 80088ce:	0719      	lsls	r1, r3, #28
 80088d0:	bf04      	itt	eq
 80088d2:	091b      	lsreq	r3, r3, #4
 80088d4:	3204      	addeq	r2, #4
 80088d6:	0799      	lsls	r1, r3, #30
 80088d8:	bf04      	itt	eq
 80088da:	089b      	lsreq	r3, r3, #2
 80088dc:	3202      	addeq	r2, #2
 80088de:	07d9      	lsls	r1, r3, #31
 80088e0:	d403      	bmi.n	80088ea <__lo0bits+0x4e>
 80088e2:	085b      	lsrs	r3, r3, #1
 80088e4:	f102 0201 	add.w	r2, r2, #1
 80088e8:	d003      	beq.n	80088f2 <__lo0bits+0x56>
 80088ea:	6003      	str	r3, [r0, #0]
 80088ec:	e7e5      	b.n	80088ba <__lo0bits+0x1e>
 80088ee:	2200      	movs	r2, #0
 80088f0:	e7e3      	b.n	80088ba <__lo0bits+0x1e>
 80088f2:	2220      	movs	r2, #32
 80088f4:	e7e1      	b.n	80088ba <__lo0bits+0x1e>
	...

080088f8 <__i2b>:
 80088f8:	b510      	push	{r4, lr}
 80088fa:	460c      	mov	r4, r1
 80088fc:	2101      	movs	r1, #1
 80088fe:	f7ff ff05 	bl	800870c <_Balloc>
 8008902:	4602      	mov	r2, r0
 8008904:	b928      	cbnz	r0, 8008912 <__i2b+0x1a>
 8008906:	4b05      	ldr	r3, [pc, #20]	; (800891c <__i2b+0x24>)
 8008908:	4805      	ldr	r0, [pc, #20]	; (8008920 <__i2b+0x28>)
 800890a:	f240 1145 	movw	r1, #325	; 0x145
 800890e:	f000 fc99 	bl	8009244 <__assert_func>
 8008912:	2301      	movs	r3, #1
 8008914:	6144      	str	r4, [r0, #20]
 8008916:	6103      	str	r3, [r0, #16]
 8008918:	bd10      	pop	{r4, pc}
 800891a:	bf00      	nop
 800891c:	08009a8c 	.word	0x08009a8c
 8008920:	08009a9d 	.word	0x08009a9d

08008924 <__multiply>:
 8008924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008928:	4691      	mov	r9, r2
 800892a:	690a      	ldr	r2, [r1, #16]
 800892c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008930:	429a      	cmp	r2, r3
 8008932:	bfb8      	it	lt
 8008934:	460b      	movlt	r3, r1
 8008936:	460c      	mov	r4, r1
 8008938:	bfbc      	itt	lt
 800893a:	464c      	movlt	r4, r9
 800893c:	4699      	movlt	r9, r3
 800893e:	6927      	ldr	r7, [r4, #16]
 8008940:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008944:	68a3      	ldr	r3, [r4, #8]
 8008946:	6861      	ldr	r1, [r4, #4]
 8008948:	eb07 060a 	add.w	r6, r7, sl
 800894c:	42b3      	cmp	r3, r6
 800894e:	b085      	sub	sp, #20
 8008950:	bfb8      	it	lt
 8008952:	3101      	addlt	r1, #1
 8008954:	f7ff feda 	bl	800870c <_Balloc>
 8008958:	b930      	cbnz	r0, 8008968 <__multiply+0x44>
 800895a:	4602      	mov	r2, r0
 800895c:	4b44      	ldr	r3, [pc, #272]	; (8008a70 <__multiply+0x14c>)
 800895e:	4845      	ldr	r0, [pc, #276]	; (8008a74 <__multiply+0x150>)
 8008960:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008964:	f000 fc6e 	bl	8009244 <__assert_func>
 8008968:	f100 0514 	add.w	r5, r0, #20
 800896c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008970:	462b      	mov	r3, r5
 8008972:	2200      	movs	r2, #0
 8008974:	4543      	cmp	r3, r8
 8008976:	d321      	bcc.n	80089bc <__multiply+0x98>
 8008978:	f104 0314 	add.w	r3, r4, #20
 800897c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008980:	f109 0314 	add.w	r3, r9, #20
 8008984:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008988:	9202      	str	r2, [sp, #8]
 800898a:	1b3a      	subs	r2, r7, r4
 800898c:	3a15      	subs	r2, #21
 800898e:	f022 0203 	bic.w	r2, r2, #3
 8008992:	3204      	adds	r2, #4
 8008994:	f104 0115 	add.w	r1, r4, #21
 8008998:	428f      	cmp	r7, r1
 800899a:	bf38      	it	cc
 800899c:	2204      	movcc	r2, #4
 800899e:	9201      	str	r2, [sp, #4]
 80089a0:	9a02      	ldr	r2, [sp, #8]
 80089a2:	9303      	str	r3, [sp, #12]
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d80c      	bhi.n	80089c2 <__multiply+0x9e>
 80089a8:	2e00      	cmp	r6, #0
 80089aa:	dd03      	ble.n	80089b4 <__multiply+0x90>
 80089ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d05b      	beq.n	8008a6c <__multiply+0x148>
 80089b4:	6106      	str	r6, [r0, #16]
 80089b6:	b005      	add	sp, #20
 80089b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089bc:	f843 2b04 	str.w	r2, [r3], #4
 80089c0:	e7d8      	b.n	8008974 <__multiply+0x50>
 80089c2:	f8b3 a000 	ldrh.w	sl, [r3]
 80089c6:	f1ba 0f00 	cmp.w	sl, #0
 80089ca:	d024      	beq.n	8008a16 <__multiply+0xf2>
 80089cc:	f104 0e14 	add.w	lr, r4, #20
 80089d0:	46a9      	mov	r9, r5
 80089d2:	f04f 0c00 	mov.w	ip, #0
 80089d6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80089da:	f8d9 1000 	ldr.w	r1, [r9]
 80089de:	fa1f fb82 	uxth.w	fp, r2
 80089e2:	b289      	uxth	r1, r1
 80089e4:	fb0a 110b 	mla	r1, sl, fp, r1
 80089e8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80089ec:	f8d9 2000 	ldr.w	r2, [r9]
 80089f0:	4461      	add	r1, ip
 80089f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80089f6:	fb0a c20b 	mla	r2, sl, fp, ip
 80089fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80089fe:	b289      	uxth	r1, r1
 8008a00:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008a04:	4577      	cmp	r7, lr
 8008a06:	f849 1b04 	str.w	r1, [r9], #4
 8008a0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008a0e:	d8e2      	bhi.n	80089d6 <__multiply+0xb2>
 8008a10:	9a01      	ldr	r2, [sp, #4]
 8008a12:	f845 c002 	str.w	ip, [r5, r2]
 8008a16:	9a03      	ldr	r2, [sp, #12]
 8008a18:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008a1c:	3304      	adds	r3, #4
 8008a1e:	f1b9 0f00 	cmp.w	r9, #0
 8008a22:	d021      	beq.n	8008a68 <__multiply+0x144>
 8008a24:	6829      	ldr	r1, [r5, #0]
 8008a26:	f104 0c14 	add.w	ip, r4, #20
 8008a2a:	46ae      	mov	lr, r5
 8008a2c:	f04f 0a00 	mov.w	sl, #0
 8008a30:	f8bc b000 	ldrh.w	fp, [ip]
 8008a34:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008a38:	fb09 220b 	mla	r2, r9, fp, r2
 8008a3c:	4452      	add	r2, sl
 8008a3e:	b289      	uxth	r1, r1
 8008a40:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008a44:	f84e 1b04 	str.w	r1, [lr], #4
 8008a48:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008a4c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008a50:	f8be 1000 	ldrh.w	r1, [lr]
 8008a54:	fb09 110a 	mla	r1, r9, sl, r1
 8008a58:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008a5c:	4567      	cmp	r7, ip
 8008a5e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008a62:	d8e5      	bhi.n	8008a30 <__multiply+0x10c>
 8008a64:	9a01      	ldr	r2, [sp, #4]
 8008a66:	50a9      	str	r1, [r5, r2]
 8008a68:	3504      	adds	r5, #4
 8008a6a:	e799      	b.n	80089a0 <__multiply+0x7c>
 8008a6c:	3e01      	subs	r6, #1
 8008a6e:	e79b      	b.n	80089a8 <__multiply+0x84>
 8008a70:	08009a8c 	.word	0x08009a8c
 8008a74:	08009a9d 	.word	0x08009a9d

08008a78 <__pow5mult>:
 8008a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a7c:	4615      	mov	r5, r2
 8008a7e:	f012 0203 	ands.w	r2, r2, #3
 8008a82:	4606      	mov	r6, r0
 8008a84:	460f      	mov	r7, r1
 8008a86:	d007      	beq.n	8008a98 <__pow5mult+0x20>
 8008a88:	4c25      	ldr	r4, [pc, #148]	; (8008b20 <__pow5mult+0xa8>)
 8008a8a:	3a01      	subs	r2, #1
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008a92:	f7ff fe9d 	bl	80087d0 <__multadd>
 8008a96:	4607      	mov	r7, r0
 8008a98:	10ad      	asrs	r5, r5, #2
 8008a9a:	d03d      	beq.n	8008b18 <__pow5mult+0xa0>
 8008a9c:	69f4      	ldr	r4, [r6, #28]
 8008a9e:	b97c      	cbnz	r4, 8008ac0 <__pow5mult+0x48>
 8008aa0:	2010      	movs	r0, #16
 8008aa2:	f7fe f857 	bl	8006b54 <malloc>
 8008aa6:	4602      	mov	r2, r0
 8008aa8:	61f0      	str	r0, [r6, #28]
 8008aaa:	b928      	cbnz	r0, 8008ab8 <__pow5mult+0x40>
 8008aac:	4b1d      	ldr	r3, [pc, #116]	; (8008b24 <__pow5mult+0xac>)
 8008aae:	481e      	ldr	r0, [pc, #120]	; (8008b28 <__pow5mult+0xb0>)
 8008ab0:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008ab4:	f000 fbc6 	bl	8009244 <__assert_func>
 8008ab8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008abc:	6004      	str	r4, [r0, #0]
 8008abe:	60c4      	str	r4, [r0, #12]
 8008ac0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008ac4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008ac8:	b94c      	cbnz	r4, 8008ade <__pow5mult+0x66>
 8008aca:	f240 2171 	movw	r1, #625	; 0x271
 8008ace:	4630      	mov	r0, r6
 8008ad0:	f7ff ff12 	bl	80088f8 <__i2b>
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	f8c8 0008 	str.w	r0, [r8, #8]
 8008ada:	4604      	mov	r4, r0
 8008adc:	6003      	str	r3, [r0, #0]
 8008ade:	f04f 0900 	mov.w	r9, #0
 8008ae2:	07eb      	lsls	r3, r5, #31
 8008ae4:	d50a      	bpl.n	8008afc <__pow5mult+0x84>
 8008ae6:	4639      	mov	r1, r7
 8008ae8:	4622      	mov	r2, r4
 8008aea:	4630      	mov	r0, r6
 8008aec:	f7ff ff1a 	bl	8008924 <__multiply>
 8008af0:	4639      	mov	r1, r7
 8008af2:	4680      	mov	r8, r0
 8008af4:	4630      	mov	r0, r6
 8008af6:	f7ff fe49 	bl	800878c <_Bfree>
 8008afa:	4647      	mov	r7, r8
 8008afc:	106d      	asrs	r5, r5, #1
 8008afe:	d00b      	beq.n	8008b18 <__pow5mult+0xa0>
 8008b00:	6820      	ldr	r0, [r4, #0]
 8008b02:	b938      	cbnz	r0, 8008b14 <__pow5mult+0x9c>
 8008b04:	4622      	mov	r2, r4
 8008b06:	4621      	mov	r1, r4
 8008b08:	4630      	mov	r0, r6
 8008b0a:	f7ff ff0b 	bl	8008924 <__multiply>
 8008b0e:	6020      	str	r0, [r4, #0]
 8008b10:	f8c0 9000 	str.w	r9, [r0]
 8008b14:	4604      	mov	r4, r0
 8008b16:	e7e4      	b.n	8008ae2 <__pow5mult+0x6a>
 8008b18:	4638      	mov	r0, r7
 8008b1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b1e:	bf00      	nop
 8008b20:	08009be8 	.word	0x08009be8
 8008b24:	08009a1d 	.word	0x08009a1d
 8008b28:	08009a9d 	.word	0x08009a9d

08008b2c <__lshift>:
 8008b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b30:	460c      	mov	r4, r1
 8008b32:	6849      	ldr	r1, [r1, #4]
 8008b34:	6923      	ldr	r3, [r4, #16]
 8008b36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008b3a:	68a3      	ldr	r3, [r4, #8]
 8008b3c:	4607      	mov	r7, r0
 8008b3e:	4691      	mov	r9, r2
 8008b40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008b44:	f108 0601 	add.w	r6, r8, #1
 8008b48:	42b3      	cmp	r3, r6
 8008b4a:	db0b      	blt.n	8008b64 <__lshift+0x38>
 8008b4c:	4638      	mov	r0, r7
 8008b4e:	f7ff fddd 	bl	800870c <_Balloc>
 8008b52:	4605      	mov	r5, r0
 8008b54:	b948      	cbnz	r0, 8008b6a <__lshift+0x3e>
 8008b56:	4602      	mov	r2, r0
 8008b58:	4b28      	ldr	r3, [pc, #160]	; (8008bfc <__lshift+0xd0>)
 8008b5a:	4829      	ldr	r0, [pc, #164]	; (8008c00 <__lshift+0xd4>)
 8008b5c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008b60:	f000 fb70 	bl	8009244 <__assert_func>
 8008b64:	3101      	adds	r1, #1
 8008b66:	005b      	lsls	r3, r3, #1
 8008b68:	e7ee      	b.n	8008b48 <__lshift+0x1c>
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	f100 0114 	add.w	r1, r0, #20
 8008b70:	f100 0210 	add.w	r2, r0, #16
 8008b74:	4618      	mov	r0, r3
 8008b76:	4553      	cmp	r3, sl
 8008b78:	db33      	blt.n	8008be2 <__lshift+0xb6>
 8008b7a:	6920      	ldr	r0, [r4, #16]
 8008b7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008b80:	f104 0314 	add.w	r3, r4, #20
 8008b84:	f019 091f 	ands.w	r9, r9, #31
 8008b88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008b8c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008b90:	d02b      	beq.n	8008bea <__lshift+0xbe>
 8008b92:	f1c9 0e20 	rsb	lr, r9, #32
 8008b96:	468a      	mov	sl, r1
 8008b98:	2200      	movs	r2, #0
 8008b9a:	6818      	ldr	r0, [r3, #0]
 8008b9c:	fa00 f009 	lsl.w	r0, r0, r9
 8008ba0:	4310      	orrs	r0, r2
 8008ba2:	f84a 0b04 	str.w	r0, [sl], #4
 8008ba6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008baa:	459c      	cmp	ip, r3
 8008bac:	fa22 f20e 	lsr.w	r2, r2, lr
 8008bb0:	d8f3      	bhi.n	8008b9a <__lshift+0x6e>
 8008bb2:	ebac 0304 	sub.w	r3, ip, r4
 8008bb6:	3b15      	subs	r3, #21
 8008bb8:	f023 0303 	bic.w	r3, r3, #3
 8008bbc:	3304      	adds	r3, #4
 8008bbe:	f104 0015 	add.w	r0, r4, #21
 8008bc2:	4584      	cmp	ip, r0
 8008bc4:	bf38      	it	cc
 8008bc6:	2304      	movcc	r3, #4
 8008bc8:	50ca      	str	r2, [r1, r3]
 8008bca:	b10a      	cbz	r2, 8008bd0 <__lshift+0xa4>
 8008bcc:	f108 0602 	add.w	r6, r8, #2
 8008bd0:	3e01      	subs	r6, #1
 8008bd2:	4638      	mov	r0, r7
 8008bd4:	612e      	str	r6, [r5, #16]
 8008bd6:	4621      	mov	r1, r4
 8008bd8:	f7ff fdd8 	bl	800878c <_Bfree>
 8008bdc:	4628      	mov	r0, r5
 8008bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008be2:	f842 0f04 	str.w	r0, [r2, #4]!
 8008be6:	3301      	adds	r3, #1
 8008be8:	e7c5      	b.n	8008b76 <__lshift+0x4a>
 8008bea:	3904      	subs	r1, #4
 8008bec:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bf0:	f841 2f04 	str.w	r2, [r1, #4]!
 8008bf4:	459c      	cmp	ip, r3
 8008bf6:	d8f9      	bhi.n	8008bec <__lshift+0xc0>
 8008bf8:	e7ea      	b.n	8008bd0 <__lshift+0xa4>
 8008bfa:	bf00      	nop
 8008bfc:	08009a8c 	.word	0x08009a8c
 8008c00:	08009a9d 	.word	0x08009a9d

08008c04 <__mcmp>:
 8008c04:	b530      	push	{r4, r5, lr}
 8008c06:	6902      	ldr	r2, [r0, #16]
 8008c08:	690c      	ldr	r4, [r1, #16]
 8008c0a:	1b12      	subs	r2, r2, r4
 8008c0c:	d10e      	bne.n	8008c2c <__mcmp+0x28>
 8008c0e:	f100 0314 	add.w	r3, r0, #20
 8008c12:	3114      	adds	r1, #20
 8008c14:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008c18:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008c1c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008c20:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008c24:	42a5      	cmp	r5, r4
 8008c26:	d003      	beq.n	8008c30 <__mcmp+0x2c>
 8008c28:	d305      	bcc.n	8008c36 <__mcmp+0x32>
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	4610      	mov	r0, r2
 8008c2e:	bd30      	pop	{r4, r5, pc}
 8008c30:	4283      	cmp	r3, r0
 8008c32:	d3f3      	bcc.n	8008c1c <__mcmp+0x18>
 8008c34:	e7fa      	b.n	8008c2c <__mcmp+0x28>
 8008c36:	f04f 32ff 	mov.w	r2, #4294967295
 8008c3a:	e7f7      	b.n	8008c2c <__mcmp+0x28>

08008c3c <__mdiff>:
 8008c3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c40:	460c      	mov	r4, r1
 8008c42:	4606      	mov	r6, r0
 8008c44:	4611      	mov	r1, r2
 8008c46:	4620      	mov	r0, r4
 8008c48:	4690      	mov	r8, r2
 8008c4a:	f7ff ffdb 	bl	8008c04 <__mcmp>
 8008c4e:	1e05      	subs	r5, r0, #0
 8008c50:	d110      	bne.n	8008c74 <__mdiff+0x38>
 8008c52:	4629      	mov	r1, r5
 8008c54:	4630      	mov	r0, r6
 8008c56:	f7ff fd59 	bl	800870c <_Balloc>
 8008c5a:	b930      	cbnz	r0, 8008c6a <__mdiff+0x2e>
 8008c5c:	4b3a      	ldr	r3, [pc, #232]	; (8008d48 <__mdiff+0x10c>)
 8008c5e:	4602      	mov	r2, r0
 8008c60:	f240 2137 	movw	r1, #567	; 0x237
 8008c64:	4839      	ldr	r0, [pc, #228]	; (8008d4c <__mdiff+0x110>)
 8008c66:	f000 faed 	bl	8009244 <__assert_func>
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008c70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c74:	bfa4      	itt	ge
 8008c76:	4643      	movge	r3, r8
 8008c78:	46a0      	movge	r8, r4
 8008c7a:	4630      	mov	r0, r6
 8008c7c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008c80:	bfa6      	itte	ge
 8008c82:	461c      	movge	r4, r3
 8008c84:	2500      	movge	r5, #0
 8008c86:	2501      	movlt	r5, #1
 8008c88:	f7ff fd40 	bl	800870c <_Balloc>
 8008c8c:	b920      	cbnz	r0, 8008c98 <__mdiff+0x5c>
 8008c8e:	4b2e      	ldr	r3, [pc, #184]	; (8008d48 <__mdiff+0x10c>)
 8008c90:	4602      	mov	r2, r0
 8008c92:	f240 2145 	movw	r1, #581	; 0x245
 8008c96:	e7e5      	b.n	8008c64 <__mdiff+0x28>
 8008c98:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008c9c:	6926      	ldr	r6, [r4, #16]
 8008c9e:	60c5      	str	r5, [r0, #12]
 8008ca0:	f104 0914 	add.w	r9, r4, #20
 8008ca4:	f108 0514 	add.w	r5, r8, #20
 8008ca8:	f100 0e14 	add.w	lr, r0, #20
 8008cac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008cb0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008cb4:	f108 0210 	add.w	r2, r8, #16
 8008cb8:	46f2      	mov	sl, lr
 8008cba:	2100      	movs	r1, #0
 8008cbc:	f859 3b04 	ldr.w	r3, [r9], #4
 8008cc0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008cc4:	fa11 f88b 	uxtah	r8, r1, fp
 8008cc8:	b299      	uxth	r1, r3
 8008cca:	0c1b      	lsrs	r3, r3, #16
 8008ccc:	eba8 0801 	sub.w	r8, r8, r1
 8008cd0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008cd4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008cd8:	fa1f f888 	uxth.w	r8, r8
 8008cdc:	1419      	asrs	r1, r3, #16
 8008cde:	454e      	cmp	r6, r9
 8008ce0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008ce4:	f84a 3b04 	str.w	r3, [sl], #4
 8008ce8:	d8e8      	bhi.n	8008cbc <__mdiff+0x80>
 8008cea:	1b33      	subs	r3, r6, r4
 8008cec:	3b15      	subs	r3, #21
 8008cee:	f023 0303 	bic.w	r3, r3, #3
 8008cf2:	3304      	adds	r3, #4
 8008cf4:	3415      	adds	r4, #21
 8008cf6:	42a6      	cmp	r6, r4
 8008cf8:	bf38      	it	cc
 8008cfa:	2304      	movcc	r3, #4
 8008cfc:	441d      	add	r5, r3
 8008cfe:	4473      	add	r3, lr
 8008d00:	469e      	mov	lr, r3
 8008d02:	462e      	mov	r6, r5
 8008d04:	4566      	cmp	r6, ip
 8008d06:	d30e      	bcc.n	8008d26 <__mdiff+0xea>
 8008d08:	f10c 0203 	add.w	r2, ip, #3
 8008d0c:	1b52      	subs	r2, r2, r5
 8008d0e:	f022 0203 	bic.w	r2, r2, #3
 8008d12:	3d03      	subs	r5, #3
 8008d14:	45ac      	cmp	ip, r5
 8008d16:	bf38      	it	cc
 8008d18:	2200      	movcc	r2, #0
 8008d1a:	4413      	add	r3, r2
 8008d1c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008d20:	b17a      	cbz	r2, 8008d42 <__mdiff+0x106>
 8008d22:	6107      	str	r7, [r0, #16]
 8008d24:	e7a4      	b.n	8008c70 <__mdiff+0x34>
 8008d26:	f856 8b04 	ldr.w	r8, [r6], #4
 8008d2a:	fa11 f288 	uxtah	r2, r1, r8
 8008d2e:	1414      	asrs	r4, r2, #16
 8008d30:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008d34:	b292      	uxth	r2, r2
 8008d36:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008d3a:	f84e 2b04 	str.w	r2, [lr], #4
 8008d3e:	1421      	asrs	r1, r4, #16
 8008d40:	e7e0      	b.n	8008d04 <__mdiff+0xc8>
 8008d42:	3f01      	subs	r7, #1
 8008d44:	e7ea      	b.n	8008d1c <__mdiff+0xe0>
 8008d46:	bf00      	nop
 8008d48:	08009a8c 	.word	0x08009a8c
 8008d4c:	08009a9d 	.word	0x08009a9d

08008d50 <__d2b>:
 8008d50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008d54:	460f      	mov	r7, r1
 8008d56:	2101      	movs	r1, #1
 8008d58:	ec59 8b10 	vmov	r8, r9, d0
 8008d5c:	4616      	mov	r6, r2
 8008d5e:	f7ff fcd5 	bl	800870c <_Balloc>
 8008d62:	4604      	mov	r4, r0
 8008d64:	b930      	cbnz	r0, 8008d74 <__d2b+0x24>
 8008d66:	4602      	mov	r2, r0
 8008d68:	4b24      	ldr	r3, [pc, #144]	; (8008dfc <__d2b+0xac>)
 8008d6a:	4825      	ldr	r0, [pc, #148]	; (8008e00 <__d2b+0xb0>)
 8008d6c:	f240 310f 	movw	r1, #783	; 0x30f
 8008d70:	f000 fa68 	bl	8009244 <__assert_func>
 8008d74:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008d78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008d7c:	bb2d      	cbnz	r5, 8008dca <__d2b+0x7a>
 8008d7e:	9301      	str	r3, [sp, #4]
 8008d80:	f1b8 0300 	subs.w	r3, r8, #0
 8008d84:	d026      	beq.n	8008dd4 <__d2b+0x84>
 8008d86:	4668      	mov	r0, sp
 8008d88:	9300      	str	r3, [sp, #0]
 8008d8a:	f7ff fd87 	bl	800889c <__lo0bits>
 8008d8e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008d92:	b1e8      	cbz	r0, 8008dd0 <__d2b+0x80>
 8008d94:	f1c0 0320 	rsb	r3, r0, #32
 8008d98:	fa02 f303 	lsl.w	r3, r2, r3
 8008d9c:	430b      	orrs	r3, r1
 8008d9e:	40c2      	lsrs	r2, r0
 8008da0:	6163      	str	r3, [r4, #20]
 8008da2:	9201      	str	r2, [sp, #4]
 8008da4:	9b01      	ldr	r3, [sp, #4]
 8008da6:	61a3      	str	r3, [r4, #24]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	bf14      	ite	ne
 8008dac:	2202      	movne	r2, #2
 8008dae:	2201      	moveq	r2, #1
 8008db0:	6122      	str	r2, [r4, #16]
 8008db2:	b1bd      	cbz	r5, 8008de4 <__d2b+0x94>
 8008db4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008db8:	4405      	add	r5, r0
 8008dba:	603d      	str	r5, [r7, #0]
 8008dbc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008dc0:	6030      	str	r0, [r6, #0]
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	b003      	add	sp, #12
 8008dc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008dca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008dce:	e7d6      	b.n	8008d7e <__d2b+0x2e>
 8008dd0:	6161      	str	r1, [r4, #20]
 8008dd2:	e7e7      	b.n	8008da4 <__d2b+0x54>
 8008dd4:	a801      	add	r0, sp, #4
 8008dd6:	f7ff fd61 	bl	800889c <__lo0bits>
 8008dda:	9b01      	ldr	r3, [sp, #4]
 8008ddc:	6163      	str	r3, [r4, #20]
 8008dde:	3020      	adds	r0, #32
 8008de0:	2201      	movs	r2, #1
 8008de2:	e7e5      	b.n	8008db0 <__d2b+0x60>
 8008de4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008de8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008dec:	6038      	str	r0, [r7, #0]
 8008dee:	6918      	ldr	r0, [r3, #16]
 8008df0:	f7ff fd34 	bl	800885c <__hi0bits>
 8008df4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008df8:	e7e2      	b.n	8008dc0 <__d2b+0x70>
 8008dfa:	bf00      	nop
 8008dfc:	08009a8c 	.word	0x08009a8c
 8008e00:	08009a9d 	.word	0x08009a9d

08008e04 <__ssputs_r>:
 8008e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e08:	688e      	ldr	r6, [r1, #8]
 8008e0a:	461f      	mov	r7, r3
 8008e0c:	42be      	cmp	r6, r7
 8008e0e:	680b      	ldr	r3, [r1, #0]
 8008e10:	4682      	mov	sl, r0
 8008e12:	460c      	mov	r4, r1
 8008e14:	4690      	mov	r8, r2
 8008e16:	d82c      	bhi.n	8008e72 <__ssputs_r+0x6e>
 8008e18:	898a      	ldrh	r2, [r1, #12]
 8008e1a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008e1e:	d026      	beq.n	8008e6e <__ssputs_r+0x6a>
 8008e20:	6965      	ldr	r5, [r4, #20]
 8008e22:	6909      	ldr	r1, [r1, #16]
 8008e24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e28:	eba3 0901 	sub.w	r9, r3, r1
 8008e2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e30:	1c7b      	adds	r3, r7, #1
 8008e32:	444b      	add	r3, r9
 8008e34:	106d      	asrs	r5, r5, #1
 8008e36:	429d      	cmp	r5, r3
 8008e38:	bf38      	it	cc
 8008e3a:	461d      	movcc	r5, r3
 8008e3c:	0553      	lsls	r3, r2, #21
 8008e3e:	d527      	bpl.n	8008e90 <__ssputs_r+0x8c>
 8008e40:	4629      	mov	r1, r5
 8008e42:	f7fd feb7 	bl	8006bb4 <_malloc_r>
 8008e46:	4606      	mov	r6, r0
 8008e48:	b360      	cbz	r0, 8008ea4 <__ssputs_r+0xa0>
 8008e4a:	6921      	ldr	r1, [r4, #16]
 8008e4c:	464a      	mov	r2, r9
 8008e4e:	f7fe fd89 	bl	8007964 <memcpy>
 8008e52:	89a3      	ldrh	r3, [r4, #12]
 8008e54:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e5c:	81a3      	strh	r3, [r4, #12]
 8008e5e:	6126      	str	r6, [r4, #16]
 8008e60:	6165      	str	r5, [r4, #20]
 8008e62:	444e      	add	r6, r9
 8008e64:	eba5 0509 	sub.w	r5, r5, r9
 8008e68:	6026      	str	r6, [r4, #0]
 8008e6a:	60a5      	str	r5, [r4, #8]
 8008e6c:	463e      	mov	r6, r7
 8008e6e:	42be      	cmp	r6, r7
 8008e70:	d900      	bls.n	8008e74 <__ssputs_r+0x70>
 8008e72:	463e      	mov	r6, r7
 8008e74:	6820      	ldr	r0, [r4, #0]
 8008e76:	4632      	mov	r2, r6
 8008e78:	4641      	mov	r1, r8
 8008e7a:	f000 f9c9 	bl	8009210 <memmove>
 8008e7e:	68a3      	ldr	r3, [r4, #8]
 8008e80:	1b9b      	subs	r3, r3, r6
 8008e82:	60a3      	str	r3, [r4, #8]
 8008e84:	6823      	ldr	r3, [r4, #0]
 8008e86:	4433      	add	r3, r6
 8008e88:	6023      	str	r3, [r4, #0]
 8008e8a:	2000      	movs	r0, #0
 8008e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e90:	462a      	mov	r2, r5
 8008e92:	f000 fa1d 	bl	80092d0 <_realloc_r>
 8008e96:	4606      	mov	r6, r0
 8008e98:	2800      	cmp	r0, #0
 8008e9a:	d1e0      	bne.n	8008e5e <__ssputs_r+0x5a>
 8008e9c:	6921      	ldr	r1, [r4, #16]
 8008e9e:	4650      	mov	r0, sl
 8008ea0:	f7ff fbe8 	bl	8008674 <_free_r>
 8008ea4:	230c      	movs	r3, #12
 8008ea6:	f8ca 3000 	str.w	r3, [sl]
 8008eaa:	89a3      	ldrh	r3, [r4, #12]
 8008eac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008eb0:	81a3      	strh	r3, [r4, #12]
 8008eb2:	f04f 30ff 	mov.w	r0, #4294967295
 8008eb6:	e7e9      	b.n	8008e8c <__ssputs_r+0x88>

08008eb8 <_svfiprintf_r>:
 8008eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ebc:	4698      	mov	r8, r3
 8008ebe:	898b      	ldrh	r3, [r1, #12]
 8008ec0:	061b      	lsls	r3, r3, #24
 8008ec2:	b09d      	sub	sp, #116	; 0x74
 8008ec4:	4607      	mov	r7, r0
 8008ec6:	460d      	mov	r5, r1
 8008ec8:	4614      	mov	r4, r2
 8008eca:	d50e      	bpl.n	8008eea <_svfiprintf_r+0x32>
 8008ecc:	690b      	ldr	r3, [r1, #16]
 8008ece:	b963      	cbnz	r3, 8008eea <_svfiprintf_r+0x32>
 8008ed0:	2140      	movs	r1, #64	; 0x40
 8008ed2:	f7fd fe6f 	bl	8006bb4 <_malloc_r>
 8008ed6:	6028      	str	r0, [r5, #0]
 8008ed8:	6128      	str	r0, [r5, #16]
 8008eda:	b920      	cbnz	r0, 8008ee6 <_svfiprintf_r+0x2e>
 8008edc:	230c      	movs	r3, #12
 8008ede:	603b      	str	r3, [r7, #0]
 8008ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ee4:	e0d0      	b.n	8009088 <_svfiprintf_r+0x1d0>
 8008ee6:	2340      	movs	r3, #64	; 0x40
 8008ee8:	616b      	str	r3, [r5, #20]
 8008eea:	2300      	movs	r3, #0
 8008eec:	9309      	str	r3, [sp, #36]	; 0x24
 8008eee:	2320      	movs	r3, #32
 8008ef0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ef4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ef8:	2330      	movs	r3, #48	; 0x30
 8008efa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80090a0 <_svfiprintf_r+0x1e8>
 8008efe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f02:	f04f 0901 	mov.w	r9, #1
 8008f06:	4623      	mov	r3, r4
 8008f08:	469a      	mov	sl, r3
 8008f0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f0e:	b10a      	cbz	r2, 8008f14 <_svfiprintf_r+0x5c>
 8008f10:	2a25      	cmp	r2, #37	; 0x25
 8008f12:	d1f9      	bne.n	8008f08 <_svfiprintf_r+0x50>
 8008f14:	ebba 0b04 	subs.w	fp, sl, r4
 8008f18:	d00b      	beq.n	8008f32 <_svfiprintf_r+0x7a>
 8008f1a:	465b      	mov	r3, fp
 8008f1c:	4622      	mov	r2, r4
 8008f1e:	4629      	mov	r1, r5
 8008f20:	4638      	mov	r0, r7
 8008f22:	f7ff ff6f 	bl	8008e04 <__ssputs_r>
 8008f26:	3001      	adds	r0, #1
 8008f28:	f000 80a9 	beq.w	800907e <_svfiprintf_r+0x1c6>
 8008f2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f2e:	445a      	add	r2, fp
 8008f30:	9209      	str	r2, [sp, #36]	; 0x24
 8008f32:	f89a 3000 	ldrb.w	r3, [sl]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	f000 80a1 	beq.w	800907e <_svfiprintf_r+0x1c6>
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8008f42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f46:	f10a 0a01 	add.w	sl, sl, #1
 8008f4a:	9304      	str	r3, [sp, #16]
 8008f4c:	9307      	str	r3, [sp, #28]
 8008f4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f52:	931a      	str	r3, [sp, #104]	; 0x68
 8008f54:	4654      	mov	r4, sl
 8008f56:	2205      	movs	r2, #5
 8008f58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f5c:	4850      	ldr	r0, [pc, #320]	; (80090a0 <_svfiprintf_r+0x1e8>)
 8008f5e:	f7f7 f937 	bl	80001d0 <memchr>
 8008f62:	9a04      	ldr	r2, [sp, #16]
 8008f64:	b9d8      	cbnz	r0, 8008f9e <_svfiprintf_r+0xe6>
 8008f66:	06d0      	lsls	r0, r2, #27
 8008f68:	bf44      	itt	mi
 8008f6a:	2320      	movmi	r3, #32
 8008f6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f70:	0711      	lsls	r1, r2, #28
 8008f72:	bf44      	itt	mi
 8008f74:	232b      	movmi	r3, #43	; 0x2b
 8008f76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f7a:	f89a 3000 	ldrb.w	r3, [sl]
 8008f7e:	2b2a      	cmp	r3, #42	; 0x2a
 8008f80:	d015      	beq.n	8008fae <_svfiprintf_r+0xf6>
 8008f82:	9a07      	ldr	r2, [sp, #28]
 8008f84:	4654      	mov	r4, sl
 8008f86:	2000      	movs	r0, #0
 8008f88:	f04f 0c0a 	mov.w	ip, #10
 8008f8c:	4621      	mov	r1, r4
 8008f8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f92:	3b30      	subs	r3, #48	; 0x30
 8008f94:	2b09      	cmp	r3, #9
 8008f96:	d94d      	bls.n	8009034 <_svfiprintf_r+0x17c>
 8008f98:	b1b0      	cbz	r0, 8008fc8 <_svfiprintf_r+0x110>
 8008f9a:	9207      	str	r2, [sp, #28]
 8008f9c:	e014      	b.n	8008fc8 <_svfiprintf_r+0x110>
 8008f9e:	eba0 0308 	sub.w	r3, r0, r8
 8008fa2:	fa09 f303 	lsl.w	r3, r9, r3
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	9304      	str	r3, [sp, #16]
 8008faa:	46a2      	mov	sl, r4
 8008fac:	e7d2      	b.n	8008f54 <_svfiprintf_r+0x9c>
 8008fae:	9b03      	ldr	r3, [sp, #12]
 8008fb0:	1d19      	adds	r1, r3, #4
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	9103      	str	r1, [sp, #12]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	bfbb      	ittet	lt
 8008fba:	425b      	neglt	r3, r3
 8008fbc:	f042 0202 	orrlt.w	r2, r2, #2
 8008fc0:	9307      	strge	r3, [sp, #28]
 8008fc2:	9307      	strlt	r3, [sp, #28]
 8008fc4:	bfb8      	it	lt
 8008fc6:	9204      	strlt	r2, [sp, #16]
 8008fc8:	7823      	ldrb	r3, [r4, #0]
 8008fca:	2b2e      	cmp	r3, #46	; 0x2e
 8008fcc:	d10c      	bne.n	8008fe8 <_svfiprintf_r+0x130>
 8008fce:	7863      	ldrb	r3, [r4, #1]
 8008fd0:	2b2a      	cmp	r3, #42	; 0x2a
 8008fd2:	d134      	bne.n	800903e <_svfiprintf_r+0x186>
 8008fd4:	9b03      	ldr	r3, [sp, #12]
 8008fd6:	1d1a      	adds	r2, r3, #4
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	9203      	str	r2, [sp, #12]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	bfb8      	it	lt
 8008fe0:	f04f 33ff 	movlt.w	r3, #4294967295
 8008fe4:	3402      	adds	r4, #2
 8008fe6:	9305      	str	r3, [sp, #20]
 8008fe8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80090b0 <_svfiprintf_r+0x1f8>
 8008fec:	7821      	ldrb	r1, [r4, #0]
 8008fee:	2203      	movs	r2, #3
 8008ff0:	4650      	mov	r0, sl
 8008ff2:	f7f7 f8ed 	bl	80001d0 <memchr>
 8008ff6:	b138      	cbz	r0, 8009008 <_svfiprintf_r+0x150>
 8008ff8:	9b04      	ldr	r3, [sp, #16]
 8008ffa:	eba0 000a 	sub.w	r0, r0, sl
 8008ffe:	2240      	movs	r2, #64	; 0x40
 8009000:	4082      	lsls	r2, r0
 8009002:	4313      	orrs	r3, r2
 8009004:	3401      	adds	r4, #1
 8009006:	9304      	str	r3, [sp, #16]
 8009008:	f814 1b01 	ldrb.w	r1, [r4], #1
 800900c:	4825      	ldr	r0, [pc, #148]	; (80090a4 <_svfiprintf_r+0x1ec>)
 800900e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009012:	2206      	movs	r2, #6
 8009014:	f7f7 f8dc 	bl	80001d0 <memchr>
 8009018:	2800      	cmp	r0, #0
 800901a:	d038      	beq.n	800908e <_svfiprintf_r+0x1d6>
 800901c:	4b22      	ldr	r3, [pc, #136]	; (80090a8 <_svfiprintf_r+0x1f0>)
 800901e:	bb1b      	cbnz	r3, 8009068 <_svfiprintf_r+0x1b0>
 8009020:	9b03      	ldr	r3, [sp, #12]
 8009022:	3307      	adds	r3, #7
 8009024:	f023 0307 	bic.w	r3, r3, #7
 8009028:	3308      	adds	r3, #8
 800902a:	9303      	str	r3, [sp, #12]
 800902c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800902e:	4433      	add	r3, r6
 8009030:	9309      	str	r3, [sp, #36]	; 0x24
 8009032:	e768      	b.n	8008f06 <_svfiprintf_r+0x4e>
 8009034:	fb0c 3202 	mla	r2, ip, r2, r3
 8009038:	460c      	mov	r4, r1
 800903a:	2001      	movs	r0, #1
 800903c:	e7a6      	b.n	8008f8c <_svfiprintf_r+0xd4>
 800903e:	2300      	movs	r3, #0
 8009040:	3401      	adds	r4, #1
 8009042:	9305      	str	r3, [sp, #20]
 8009044:	4619      	mov	r1, r3
 8009046:	f04f 0c0a 	mov.w	ip, #10
 800904a:	4620      	mov	r0, r4
 800904c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009050:	3a30      	subs	r2, #48	; 0x30
 8009052:	2a09      	cmp	r2, #9
 8009054:	d903      	bls.n	800905e <_svfiprintf_r+0x1a6>
 8009056:	2b00      	cmp	r3, #0
 8009058:	d0c6      	beq.n	8008fe8 <_svfiprintf_r+0x130>
 800905a:	9105      	str	r1, [sp, #20]
 800905c:	e7c4      	b.n	8008fe8 <_svfiprintf_r+0x130>
 800905e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009062:	4604      	mov	r4, r0
 8009064:	2301      	movs	r3, #1
 8009066:	e7f0      	b.n	800904a <_svfiprintf_r+0x192>
 8009068:	ab03      	add	r3, sp, #12
 800906a:	9300      	str	r3, [sp, #0]
 800906c:	462a      	mov	r2, r5
 800906e:	4b0f      	ldr	r3, [pc, #60]	; (80090ac <_svfiprintf_r+0x1f4>)
 8009070:	a904      	add	r1, sp, #16
 8009072:	4638      	mov	r0, r7
 8009074:	f7fd feca 	bl	8006e0c <_printf_float>
 8009078:	1c42      	adds	r2, r0, #1
 800907a:	4606      	mov	r6, r0
 800907c:	d1d6      	bne.n	800902c <_svfiprintf_r+0x174>
 800907e:	89ab      	ldrh	r3, [r5, #12]
 8009080:	065b      	lsls	r3, r3, #25
 8009082:	f53f af2d 	bmi.w	8008ee0 <_svfiprintf_r+0x28>
 8009086:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009088:	b01d      	add	sp, #116	; 0x74
 800908a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800908e:	ab03      	add	r3, sp, #12
 8009090:	9300      	str	r3, [sp, #0]
 8009092:	462a      	mov	r2, r5
 8009094:	4b05      	ldr	r3, [pc, #20]	; (80090ac <_svfiprintf_r+0x1f4>)
 8009096:	a904      	add	r1, sp, #16
 8009098:	4638      	mov	r0, r7
 800909a:	f7fe f95b 	bl	8007354 <_printf_i>
 800909e:	e7eb      	b.n	8009078 <_svfiprintf_r+0x1c0>
 80090a0:	08009bf4 	.word	0x08009bf4
 80090a4:	08009bfe 	.word	0x08009bfe
 80090a8:	08006e0d 	.word	0x08006e0d
 80090ac:	08008e05 	.word	0x08008e05
 80090b0:	08009bfa 	.word	0x08009bfa

080090b4 <__sflush_r>:
 80090b4:	898a      	ldrh	r2, [r1, #12]
 80090b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090ba:	4605      	mov	r5, r0
 80090bc:	0710      	lsls	r0, r2, #28
 80090be:	460c      	mov	r4, r1
 80090c0:	d458      	bmi.n	8009174 <__sflush_r+0xc0>
 80090c2:	684b      	ldr	r3, [r1, #4]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	dc05      	bgt.n	80090d4 <__sflush_r+0x20>
 80090c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	dc02      	bgt.n	80090d4 <__sflush_r+0x20>
 80090ce:	2000      	movs	r0, #0
 80090d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80090d6:	2e00      	cmp	r6, #0
 80090d8:	d0f9      	beq.n	80090ce <__sflush_r+0x1a>
 80090da:	2300      	movs	r3, #0
 80090dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80090e0:	682f      	ldr	r7, [r5, #0]
 80090e2:	6a21      	ldr	r1, [r4, #32]
 80090e4:	602b      	str	r3, [r5, #0]
 80090e6:	d032      	beq.n	800914e <__sflush_r+0x9a>
 80090e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80090ea:	89a3      	ldrh	r3, [r4, #12]
 80090ec:	075a      	lsls	r2, r3, #29
 80090ee:	d505      	bpl.n	80090fc <__sflush_r+0x48>
 80090f0:	6863      	ldr	r3, [r4, #4]
 80090f2:	1ac0      	subs	r0, r0, r3
 80090f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80090f6:	b10b      	cbz	r3, 80090fc <__sflush_r+0x48>
 80090f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80090fa:	1ac0      	subs	r0, r0, r3
 80090fc:	2300      	movs	r3, #0
 80090fe:	4602      	mov	r2, r0
 8009100:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009102:	6a21      	ldr	r1, [r4, #32]
 8009104:	4628      	mov	r0, r5
 8009106:	47b0      	blx	r6
 8009108:	1c43      	adds	r3, r0, #1
 800910a:	89a3      	ldrh	r3, [r4, #12]
 800910c:	d106      	bne.n	800911c <__sflush_r+0x68>
 800910e:	6829      	ldr	r1, [r5, #0]
 8009110:	291d      	cmp	r1, #29
 8009112:	d82b      	bhi.n	800916c <__sflush_r+0xb8>
 8009114:	4a29      	ldr	r2, [pc, #164]	; (80091bc <__sflush_r+0x108>)
 8009116:	410a      	asrs	r2, r1
 8009118:	07d6      	lsls	r6, r2, #31
 800911a:	d427      	bmi.n	800916c <__sflush_r+0xb8>
 800911c:	2200      	movs	r2, #0
 800911e:	6062      	str	r2, [r4, #4]
 8009120:	04d9      	lsls	r1, r3, #19
 8009122:	6922      	ldr	r2, [r4, #16]
 8009124:	6022      	str	r2, [r4, #0]
 8009126:	d504      	bpl.n	8009132 <__sflush_r+0x7e>
 8009128:	1c42      	adds	r2, r0, #1
 800912a:	d101      	bne.n	8009130 <__sflush_r+0x7c>
 800912c:	682b      	ldr	r3, [r5, #0]
 800912e:	b903      	cbnz	r3, 8009132 <__sflush_r+0x7e>
 8009130:	6560      	str	r0, [r4, #84]	; 0x54
 8009132:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009134:	602f      	str	r7, [r5, #0]
 8009136:	2900      	cmp	r1, #0
 8009138:	d0c9      	beq.n	80090ce <__sflush_r+0x1a>
 800913a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800913e:	4299      	cmp	r1, r3
 8009140:	d002      	beq.n	8009148 <__sflush_r+0x94>
 8009142:	4628      	mov	r0, r5
 8009144:	f7ff fa96 	bl	8008674 <_free_r>
 8009148:	2000      	movs	r0, #0
 800914a:	6360      	str	r0, [r4, #52]	; 0x34
 800914c:	e7c0      	b.n	80090d0 <__sflush_r+0x1c>
 800914e:	2301      	movs	r3, #1
 8009150:	4628      	mov	r0, r5
 8009152:	47b0      	blx	r6
 8009154:	1c41      	adds	r1, r0, #1
 8009156:	d1c8      	bne.n	80090ea <__sflush_r+0x36>
 8009158:	682b      	ldr	r3, [r5, #0]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d0c5      	beq.n	80090ea <__sflush_r+0x36>
 800915e:	2b1d      	cmp	r3, #29
 8009160:	d001      	beq.n	8009166 <__sflush_r+0xb2>
 8009162:	2b16      	cmp	r3, #22
 8009164:	d101      	bne.n	800916a <__sflush_r+0xb6>
 8009166:	602f      	str	r7, [r5, #0]
 8009168:	e7b1      	b.n	80090ce <__sflush_r+0x1a>
 800916a:	89a3      	ldrh	r3, [r4, #12]
 800916c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009170:	81a3      	strh	r3, [r4, #12]
 8009172:	e7ad      	b.n	80090d0 <__sflush_r+0x1c>
 8009174:	690f      	ldr	r7, [r1, #16]
 8009176:	2f00      	cmp	r7, #0
 8009178:	d0a9      	beq.n	80090ce <__sflush_r+0x1a>
 800917a:	0793      	lsls	r3, r2, #30
 800917c:	680e      	ldr	r6, [r1, #0]
 800917e:	bf08      	it	eq
 8009180:	694b      	ldreq	r3, [r1, #20]
 8009182:	600f      	str	r7, [r1, #0]
 8009184:	bf18      	it	ne
 8009186:	2300      	movne	r3, #0
 8009188:	eba6 0807 	sub.w	r8, r6, r7
 800918c:	608b      	str	r3, [r1, #8]
 800918e:	f1b8 0f00 	cmp.w	r8, #0
 8009192:	dd9c      	ble.n	80090ce <__sflush_r+0x1a>
 8009194:	6a21      	ldr	r1, [r4, #32]
 8009196:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009198:	4643      	mov	r3, r8
 800919a:	463a      	mov	r2, r7
 800919c:	4628      	mov	r0, r5
 800919e:	47b0      	blx	r6
 80091a0:	2800      	cmp	r0, #0
 80091a2:	dc06      	bgt.n	80091b2 <__sflush_r+0xfe>
 80091a4:	89a3      	ldrh	r3, [r4, #12]
 80091a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091aa:	81a3      	strh	r3, [r4, #12]
 80091ac:	f04f 30ff 	mov.w	r0, #4294967295
 80091b0:	e78e      	b.n	80090d0 <__sflush_r+0x1c>
 80091b2:	4407      	add	r7, r0
 80091b4:	eba8 0800 	sub.w	r8, r8, r0
 80091b8:	e7e9      	b.n	800918e <__sflush_r+0xda>
 80091ba:	bf00      	nop
 80091bc:	dfbffffe 	.word	0xdfbffffe

080091c0 <_fflush_r>:
 80091c0:	b538      	push	{r3, r4, r5, lr}
 80091c2:	690b      	ldr	r3, [r1, #16]
 80091c4:	4605      	mov	r5, r0
 80091c6:	460c      	mov	r4, r1
 80091c8:	b913      	cbnz	r3, 80091d0 <_fflush_r+0x10>
 80091ca:	2500      	movs	r5, #0
 80091cc:	4628      	mov	r0, r5
 80091ce:	bd38      	pop	{r3, r4, r5, pc}
 80091d0:	b118      	cbz	r0, 80091da <_fflush_r+0x1a>
 80091d2:	6a03      	ldr	r3, [r0, #32]
 80091d4:	b90b      	cbnz	r3, 80091da <_fflush_r+0x1a>
 80091d6:	f7fe fa59 	bl	800768c <__sinit>
 80091da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d0f3      	beq.n	80091ca <_fflush_r+0xa>
 80091e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80091e4:	07d0      	lsls	r0, r2, #31
 80091e6:	d404      	bmi.n	80091f2 <_fflush_r+0x32>
 80091e8:	0599      	lsls	r1, r3, #22
 80091ea:	d402      	bmi.n	80091f2 <_fflush_r+0x32>
 80091ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091ee:	f7fe fbb7 	bl	8007960 <__retarget_lock_acquire_recursive>
 80091f2:	4628      	mov	r0, r5
 80091f4:	4621      	mov	r1, r4
 80091f6:	f7ff ff5d 	bl	80090b4 <__sflush_r>
 80091fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80091fc:	07da      	lsls	r2, r3, #31
 80091fe:	4605      	mov	r5, r0
 8009200:	d4e4      	bmi.n	80091cc <_fflush_r+0xc>
 8009202:	89a3      	ldrh	r3, [r4, #12]
 8009204:	059b      	lsls	r3, r3, #22
 8009206:	d4e1      	bmi.n	80091cc <_fflush_r+0xc>
 8009208:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800920a:	f7fe fbaa 	bl	8007962 <__retarget_lock_release_recursive>
 800920e:	e7dd      	b.n	80091cc <_fflush_r+0xc>

08009210 <memmove>:
 8009210:	4288      	cmp	r0, r1
 8009212:	b510      	push	{r4, lr}
 8009214:	eb01 0402 	add.w	r4, r1, r2
 8009218:	d902      	bls.n	8009220 <memmove+0x10>
 800921a:	4284      	cmp	r4, r0
 800921c:	4623      	mov	r3, r4
 800921e:	d807      	bhi.n	8009230 <memmove+0x20>
 8009220:	1e43      	subs	r3, r0, #1
 8009222:	42a1      	cmp	r1, r4
 8009224:	d008      	beq.n	8009238 <memmove+0x28>
 8009226:	f811 2b01 	ldrb.w	r2, [r1], #1
 800922a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800922e:	e7f8      	b.n	8009222 <memmove+0x12>
 8009230:	4402      	add	r2, r0
 8009232:	4601      	mov	r1, r0
 8009234:	428a      	cmp	r2, r1
 8009236:	d100      	bne.n	800923a <memmove+0x2a>
 8009238:	bd10      	pop	{r4, pc}
 800923a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800923e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009242:	e7f7      	b.n	8009234 <memmove+0x24>

08009244 <__assert_func>:
 8009244:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009246:	4614      	mov	r4, r2
 8009248:	461a      	mov	r2, r3
 800924a:	4b09      	ldr	r3, [pc, #36]	; (8009270 <__assert_func+0x2c>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	4605      	mov	r5, r0
 8009250:	68d8      	ldr	r0, [r3, #12]
 8009252:	b14c      	cbz	r4, 8009268 <__assert_func+0x24>
 8009254:	4b07      	ldr	r3, [pc, #28]	; (8009274 <__assert_func+0x30>)
 8009256:	9100      	str	r1, [sp, #0]
 8009258:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800925c:	4906      	ldr	r1, [pc, #24]	; (8009278 <__assert_func+0x34>)
 800925e:	462b      	mov	r3, r5
 8009260:	f000 f872 	bl	8009348 <fiprintf>
 8009264:	f7fd fc6f 	bl	8006b46 <abort>
 8009268:	4b04      	ldr	r3, [pc, #16]	; (800927c <__assert_func+0x38>)
 800926a:	461c      	mov	r4, r3
 800926c:	e7f3      	b.n	8009256 <__assert_func+0x12>
 800926e:	bf00      	nop
 8009270:	20000064 	.word	0x20000064
 8009274:	08009c0f 	.word	0x08009c0f
 8009278:	08009c1c 	.word	0x08009c1c
 800927c:	08009c4a 	.word	0x08009c4a

08009280 <_calloc_r>:
 8009280:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009282:	fba1 2402 	umull	r2, r4, r1, r2
 8009286:	b94c      	cbnz	r4, 800929c <_calloc_r+0x1c>
 8009288:	4611      	mov	r1, r2
 800928a:	9201      	str	r2, [sp, #4]
 800928c:	f7fd fc92 	bl	8006bb4 <_malloc_r>
 8009290:	9a01      	ldr	r2, [sp, #4]
 8009292:	4605      	mov	r5, r0
 8009294:	b930      	cbnz	r0, 80092a4 <_calloc_r+0x24>
 8009296:	4628      	mov	r0, r5
 8009298:	b003      	add	sp, #12
 800929a:	bd30      	pop	{r4, r5, pc}
 800929c:	220c      	movs	r2, #12
 800929e:	6002      	str	r2, [r0, #0]
 80092a0:	2500      	movs	r5, #0
 80092a2:	e7f8      	b.n	8009296 <_calloc_r+0x16>
 80092a4:	4621      	mov	r1, r4
 80092a6:	f7fe fa8a 	bl	80077be <memset>
 80092aa:	e7f4      	b.n	8009296 <_calloc_r+0x16>

080092ac <__ascii_mbtowc>:
 80092ac:	b082      	sub	sp, #8
 80092ae:	b901      	cbnz	r1, 80092b2 <__ascii_mbtowc+0x6>
 80092b0:	a901      	add	r1, sp, #4
 80092b2:	b142      	cbz	r2, 80092c6 <__ascii_mbtowc+0x1a>
 80092b4:	b14b      	cbz	r3, 80092ca <__ascii_mbtowc+0x1e>
 80092b6:	7813      	ldrb	r3, [r2, #0]
 80092b8:	600b      	str	r3, [r1, #0]
 80092ba:	7812      	ldrb	r2, [r2, #0]
 80092bc:	1e10      	subs	r0, r2, #0
 80092be:	bf18      	it	ne
 80092c0:	2001      	movne	r0, #1
 80092c2:	b002      	add	sp, #8
 80092c4:	4770      	bx	lr
 80092c6:	4610      	mov	r0, r2
 80092c8:	e7fb      	b.n	80092c2 <__ascii_mbtowc+0x16>
 80092ca:	f06f 0001 	mvn.w	r0, #1
 80092ce:	e7f8      	b.n	80092c2 <__ascii_mbtowc+0x16>

080092d0 <_realloc_r>:
 80092d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092d4:	4680      	mov	r8, r0
 80092d6:	4614      	mov	r4, r2
 80092d8:	460e      	mov	r6, r1
 80092da:	b921      	cbnz	r1, 80092e6 <_realloc_r+0x16>
 80092dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092e0:	4611      	mov	r1, r2
 80092e2:	f7fd bc67 	b.w	8006bb4 <_malloc_r>
 80092e6:	b92a      	cbnz	r2, 80092f4 <_realloc_r+0x24>
 80092e8:	f7ff f9c4 	bl	8008674 <_free_r>
 80092ec:	4625      	mov	r5, r4
 80092ee:	4628      	mov	r0, r5
 80092f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092f4:	f000 f83a 	bl	800936c <_malloc_usable_size_r>
 80092f8:	4284      	cmp	r4, r0
 80092fa:	4607      	mov	r7, r0
 80092fc:	d802      	bhi.n	8009304 <_realloc_r+0x34>
 80092fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009302:	d812      	bhi.n	800932a <_realloc_r+0x5a>
 8009304:	4621      	mov	r1, r4
 8009306:	4640      	mov	r0, r8
 8009308:	f7fd fc54 	bl	8006bb4 <_malloc_r>
 800930c:	4605      	mov	r5, r0
 800930e:	2800      	cmp	r0, #0
 8009310:	d0ed      	beq.n	80092ee <_realloc_r+0x1e>
 8009312:	42bc      	cmp	r4, r7
 8009314:	4622      	mov	r2, r4
 8009316:	4631      	mov	r1, r6
 8009318:	bf28      	it	cs
 800931a:	463a      	movcs	r2, r7
 800931c:	f7fe fb22 	bl	8007964 <memcpy>
 8009320:	4631      	mov	r1, r6
 8009322:	4640      	mov	r0, r8
 8009324:	f7ff f9a6 	bl	8008674 <_free_r>
 8009328:	e7e1      	b.n	80092ee <_realloc_r+0x1e>
 800932a:	4635      	mov	r5, r6
 800932c:	e7df      	b.n	80092ee <_realloc_r+0x1e>

0800932e <__ascii_wctomb>:
 800932e:	b149      	cbz	r1, 8009344 <__ascii_wctomb+0x16>
 8009330:	2aff      	cmp	r2, #255	; 0xff
 8009332:	bf85      	ittet	hi
 8009334:	238a      	movhi	r3, #138	; 0x8a
 8009336:	6003      	strhi	r3, [r0, #0]
 8009338:	700a      	strbls	r2, [r1, #0]
 800933a:	f04f 30ff 	movhi.w	r0, #4294967295
 800933e:	bf98      	it	ls
 8009340:	2001      	movls	r0, #1
 8009342:	4770      	bx	lr
 8009344:	4608      	mov	r0, r1
 8009346:	4770      	bx	lr

08009348 <fiprintf>:
 8009348:	b40e      	push	{r1, r2, r3}
 800934a:	b503      	push	{r0, r1, lr}
 800934c:	4601      	mov	r1, r0
 800934e:	ab03      	add	r3, sp, #12
 8009350:	4805      	ldr	r0, [pc, #20]	; (8009368 <fiprintf+0x20>)
 8009352:	f853 2b04 	ldr.w	r2, [r3], #4
 8009356:	6800      	ldr	r0, [r0, #0]
 8009358:	9301      	str	r3, [sp, #4]
 800935a:	f000 f839 	bl	80093d0 <_vfiprintf_r>
 800935e:	b002      	add	sp, #8
 8009360:	f85d eb04 	ldr.w	lr, [sp], #4
 8009364:	b003      	add	sp, #12
 8009366:	4770      	bx	lr
 8009368:	20000064 	.word	0x20000064

0800936c <_malloc_usable_size_r>:
 800936c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009370:	1f18      	subs	r0, r3, #4
 8009372:	2b00      	cmp	r3, #0
 8009374:	bfbc      	itt	lt
 8009376:	580b      	ldrlt	r3, [r1, r0]
 8009378:	18c0      	addlt	r0, r0, r3
 800937a:	4770      	bx	lr

0800937c <__sfputc_r>:
 800937c:	6893      	ldr	r3, [r2, #8]
 800937e:	3b01      	subs	r3, #1
 8009380:	2b00      	cmp	r3, #0
 8009382:	b410      	push	{r4}
 8009384:	6093      	str	r3, [r2, #8]
 8009386:	da08      	bge.n	800939a <__sfputc_r+0x1e>
 8009388:	6994      	ldr	r4, [r2, #24]
 800938a:	42a3      	cmp	r3, r4
 800938c:	db01      	blt.n	8009392 <__sfputc_r+0x16>
 800938e:	290a      	cmp	r1, #10
 8009390:	d103      	bne.n	800939a <__sfputc_r+0x1e>
 8009392:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009396:	f000 b935 	b.w	8009604 <__swbuf_r>
 800939a:	6813      	ldr	r3, [r2, #0]
 800939c:	1c58      	adds	r0, r3, #1
 800939e:	6010      	str	r0, [r2, #0]
 80093a0:	7019      	strb	r1, [r3, #0]
 80093a2:	4608      	mov	r0, r1
 80093a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80093a8:	4770      	bx	lr

080093aa <__sfputs_r>:
 80093aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ac:	4606      	mov	r6, r0
 80093ae:	460f      	mov	r7, r1
 80093b0:	4614      	mov	r4, r2
 80093b2:	18d5      	adds	r5, r2, r3
 80093b4:	42ac      	cmp	r4, r5
 80093b6:	d101      	bne.n	80093bc <__sfputs_r+0x12>
 80093b8:	2000      	movs	r0, #0
 80093ba:	e007      	b.n	80093cc <__sfputs_r+0x22>
 80093bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093c0:	463a      	mov	r2, r7
 80093c2:	4630      	mov	r0, r6
 80093c4:	f7ff ffda 	bl	800937c <__sfputc_r>
 80093c8:	1c43      	adds	r3, r0, #1
 80093ca:	d1f3      	bne.n	80093b4 <__sfputs_r+0xa>
 80093cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080093d0 <_vfiprintf_r>:
 80093d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093d4:	460d      	mov	r5, r1
 80093d6:	b09d      	sub	sp, #116	; 0x74
 80093d8:	4614      	mov	r4, r2
 80093da:	4698      	mov	r8, r3
 80093dc:	4606      	mov	r6, r0
 80093de:	b118      	cbz	r0, 80093e8 <_vfiprintf_r+0x18>
 80093e0:	6a03      	ldr	r3, [r0, #32]
 80093e2:	b90b      	cbnz	r3, 80093e8 <_vfiprintf_r+0x18>
 80093e4:	f7fe f952 	bl	800768c <__sinit>
 80093e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093ea:	07d9      	lsls	r1, r3, #31
 80093ec:	d405      	bmi.n	80093fa <_vfiprintf_r+0x2a>
 80093ee:	89ab      	ldrh	r3, [r5, #12]
 80093f0:	059a      	lsls	r2, r3, #22
 80093f2:	d402      	bmi.n	80093fa <_vfiprintf_r+0x2a>
 80093f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093f6:	f7fe fab3 	bl	8007960 <__retarget_lock_acquire_recursive>
 80093fa:	89ab      	ldrh	r3, [r5, #12]
 80093fc:	071b      	lsls	r3, r3, #28
 80093fe:	d501      	bpl.n	8009404 <_vfiprintf_r+0x34>
 8009400:	692b      	ldr	r3, [r5, #16]
 8009402:	b99b      	cbnz	r3, 800942c <_vfiprintf_r+0x5c>
 8009404:	4629      	mov	r1, r5
 8009406:	4630      	mov	r0, r6
 8009408:	f000 f93a 	bl	8009680 <__swsetup_r>
 800940c:	b170      	cbz	r0, 800942c <_vfiprintf_r+0x5c>
 800940e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009410:	07dc      	lsls	r4, r3, #31
 8009412:	d504      	bpl.n	800941e <_vfiprintf_r+0x4e>
 8009414:	f04f 30ff 	mov.w	r0, #4294967295
 8009418:	b01d      	add	sp, #116	; 0x74
 800941a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800941e:	89ab      	ldrh	r3, [r5, #12]
 8009420:	0598      	lsls	r0, r3, #22
 8009422:	d4f7      	bmi.n	8009414 <_vfiprintf_r+0x44>
 8009424:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009426:	f7fe fa9c 	bl	8007962 <__retarget_lock_release_recursive>
 800942a:	e7f3      	b.n	8009414 <_vfiprintf_r+0x44>
 800942c:	2300      	movs	r3, #0
 800942e:	9309      	str	r3, [sp, #36]	; 0x24
 8009430:	2320      	movs	r3, #32
 8009432:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009436:	f8cd 800c 	str.w	r8, [sp, #12]
 800943a:	2330      	movs	r3, #48	; 0x30
 800943c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80095f0 <_vfiprintf_r+0x220>
 8009440:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009444:	f04f 0901 	mov.w	r9, #1
 8009448:	4623      	mov	r3, r4
 800944a:	469a      	mov	sl, r3
 800944c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009450:	b10a      	cbz	r2, 8009456 <_vfiprintf_r+0x86>
 8009452:	2a25      	cmp	r2, #37	; 0x25
 8009454:	d1f9      	bne.n	800944a <_vfiprintf_r+0x7a>
 8009456:	ebba 0b04 	subs.w	fp, sl, r4
 800945a:	d00b      	beq.n	8009474 <_vfiprintf_r+0xa4>
 800945c:	465b      	mov	r3, fp
 800945e:	4622      	mov	r2, r4
 8009460:	4629      	mov	r1, r5
 8009462:	4630      	mov	r0, r6
 8009464:	f7ff ffa1 	bl	80093aa <__sfputs_r>
 8009468:	3001      	adds	r0, #1
 800946a:	f000 80a9 	beq.w	80095c0 <_vfiprintf_r+0x1f0>
 800946e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009470:	445a      	add	r2, fp
 8009472:	9209      	str	r2, [sp, #36]	; 0x24
 8009474:	f89a 3000 	ldrb.w	r3, [sl]
 8009478:	2b00      	cmp	r3, #0
 800947a:	f000 80a1 	beq.w	80095c0 <_vfiprintf_r+0x1f0>
 800947e:	2300      	movs	r3, #0
 8009480:	f04f 32ff 	mov.w	r2, #4294967295
 8009484:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009488:	f10a 0a01 	add.w	sl, sl, #1
 800948c:	9304      	str	r3, [sp, #16]
 800948e:	9307      	str	r3, [sp, #28]
 8009490:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009494:	931a      	str	r3, [sp, #104]	; 0x68
 8009496:	4654      	mov	r4, sl
 8009498:	2205      	movs	r2, #5
 800949a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800949e:	4854      	ldr	r0, [pc, #336]	; (80095f0 <_vfiprintf_r+0x220>)
 80094a0:	f7f6 fe96 	bl	80001d0 <memchr>
 80094a4:	9a04      	ldr	r2, [sp, #16]
 80094a6:	b9d8      	cbnz	r0, 80094e0 <_vfiprintf_r+0x110>
 80094a8:	06d1      	lsls	r1, r2, #27
 80094aa:	bf44      	itt	mi
 80094ac:	2320      	movmi	r3, #32
 80094ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094b2:	0713      	lsls	r3, r2, #28
 80094b4:	bf44      	itt	mi
 80094b6:	232b      	movmi	r3, #43	; 0x2b
 80094b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094bc:	f89a 3000 	ldrb.w	r3, [sl]
 80094c0:	2b2a      	cmp	r3, #42	; 0x2a
 80094c2:	d015      	beq.n	80094f0 <_vfiprintf_r+0x120>
 80094c4:	9a07      	ldr	r2, [sp, #28]
 80094c6:	4654      	mov	r4, sl
 80094c8:	2000      	movs	r0, #0
 80094ca:	f04f 0c0a 	mov.w	ip, #10
 80094ce:	4621      	mov	r1, r4
 80094d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80094d4:	3b30      	subs	r3, #48	; 0x30
 80094d6:	2b09      	cmp	r3, #9
 80094d8:	d94d      	bls.n	8009576 <_vfiprintf_r+0x1a6>
 80094da:	b1b0      	cbz	r0, 800950a <_vfiprintf_r+0x13a>
 80094dc:	9207      	str	r2, [sp, #28]
 80094de:	e014      	b.n	800950a <_vfiprintf_r+0x13a>
 80094e0:	eba0 0308 	sub.w	r3, r0, r8
 80094e4:	fa09 f303 	lsl.w	r3, r9, r3
 80094e8:	4313      	orrs	r3, r2
 80094ea:	9304      	str	r3, [sp, #16]
 80094ec:	46a2      	mov	sl, r4
 80094ee:	e7d2      	b.n	8009496 <_vfiprintf_r+0xc6>
 80094f0:	9b03      	ldr	r3, [sp, #12]
 80094f2:	1d19      	adds	r1, r3, #4
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	9103      	str	r1, [sp, #12]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	bfbb      	ittet	lt
 80094fc:	425b      	neglt	r3, r3
 80094fe:	f042 0202 	orrlt.w	r2, r2, #2
 8009502:	9307      	strge	r3, [sp, #28]
 8009504:	9307      	strlt	r3, [sp, #28]
 8009506:	bfb8      	it	lt
 8009508:	9204      	strlt	r2, [sp, #16]
 800950a:	7823      	ldrb	r3, [r4, #0]
 800950c:	2b2e      	cmp	r3, #46	; 0x2e
 800950e:	d10c      	bne.n	800952a <_vfiprintf_r+0x15a>
 8009510:	7863      	ldrb	r3, [r4, #1]
 8009512:	2b2a      	cmp	r3, #42	; 0x2a
 8009514:	d134      	bne.n	8009580 <_vfiprintf_r+0x1b0>
 8009516:	9b03      	ldr	r3, [sp, #12]
 8009518:	1d1a      	adds	r2, r3, #4
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	9203      	str	r2, [sp, #12]
 800951e:	2b00      	cmp	r3, #0
 8009520:	bfb8      	it	lt
 8009522:	f04f 33ff 	movlt.w	r3, #4294967295
 8009526:	3402      	adds	r4, #2
 8009528:	9305      	str	r3, [sp, #20]
 800952a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009600 <_vfiprintf_r+0x230>
 800952e:	7821      	ldrb	r1, [r4, #0]
 8009530:	2203      	movs	r2, #3
 8009532:	4650      	mov	r0, sl
 8009534:	f7f6 fe4c 	bl	80001d0 <memchr>
 8009538:	b138      	cbz	r0, 800954a <_vfiprintf_r+0x17a>
 800953a:	9b04      	ldr	r3, [sp, #16]
 800953c:	eba0 000a 	sub.w	r0, r0, sl
 8009540:	2240      	movs	r2, #64	; 0x40
 8009542:	4082      	lsls	r2, r0
 8009544:	4313      	orrs	r3, r2
 8009546:	3401      	adds	r4, #1
 8009548:	9304      	str	r3, [sp, #16]
 800954a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800954e:	4829      	ldr	r0, [pc, #164]	; (80095f4 <_vfiprintf_r+0x224>)
 8009550:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009554:	2206      	movs	r2, #6
 8009556:	f7f6 fe3b 	bl	80001d0 <memchr>
 800955a:	2800      	cmp	r0, #0
 800955c:	d03f      	beq.n	80095de <_vfiprintf_r+0x20e>
 800955e:	4b26      	ldr	r3, [pc, #152]	; (80095f8 <_vfiprintf_r+0x228>)
 8009560:	bb1b      	cbnz	r3, 80095aa <_vfiprintf_r+0x1da>
 8009562:	9b03      	ldr	r3, [sp, #12]
 8009564:	3307      	adds	r3, #7
 8009566:	f023 0307 	bic.w	r3, r3, #7
 800956a:	3308      	adds	r3, #8
 800956c:	9303      	str	r3, [sp, #12]
 800956e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009570:	443b      	add	r3, r7
 8009572:	9309      	str	r3, [sp, #36]	; 0x24
 8009574:	e768      	b.n	8009448 <_vfiprintf_r+0x78>
 8009576:	fb0c 3202 	mla	r2, ip, r2, r3
 800957a:	460c      	mov	r4, r1
 800957c:	2001      	movs	r0, #1
 800957e:	e7a6      	b.n	80094ce <_vfiprintf_r+0xfe>
 8009580:	2300      	movs	r3, #0
 8009582:	3401      	adds	r4, #1
 8009584:	9305      	str	r3, [sp, #20]
 8009586:	4619      	mov	r1, r3
 8009588:	f04f 0c0a 	mov.w	ip, #10
 800958c:	4620      	mov	r0, r4
 800958e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009592:	3a30      	subs	r2, #48	; 0x30
 8009594:	2a09      	cmp	r2, #9
 8009596:	d903      	bls.n	80095a0 <_vfiprintf_r+0x1d0>
 8009598:	2b00      	cmp	r3, #0
 800959a:	d0c6      	beq.n	800952a <_vfiprintf_r+0x15a>
 800959c:	9105      	str	r1, [sp, #20]
 800959e:	e7c4      	b.n	800952a <_vfiprintf_r+0x15a>
 80095a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80095a4:	4604      	mov	r4, r0
 80095a6:	2301      	movs	r3, #1
 80095a8:	e7f0      	b.n	800958c <_vfiprintf_r+0x1bc>
 80095aa:	ab03      	add	r3, sp, #12
 80095ac:	9300      	str	r3, [sp, #0]
 80095ae:	462a      	mov	r2, r5
 80095b0:	4b12      	ldr	r3, [pc, #72]	; (80095fc <_vfiprintf_r+0x22c>)
 80095b2:	a904      	add	r1, sp, #16
 80095b4:	4630      	mov	r0, r6
 80095b6:	f7fd fc29 	bl	8006e0c <_printf_float>
 80095ba:	4607      	mov	r7, r0
 80095bc:	1c78      	adds	r0, r7, #1
 80095be:	d1d6      	bne.n	800956e <_vfiprintf_r+0x19e>
 80095c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095c2:	07d9      	lsls	r1, r3, #31
 80095c4:	d405      	bmi.n	80095d2 <_vfiprintf_r+0x202>
 80095c6:	89ab      	ldrh	r3, [r5, #12]
 80095c8:	059a      	lsls	r2, r3, #22
 80095ca:	d402      	bmi.n	80095d2 <_vfiprintf_r+0x202>
 80095cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095ce:	f7fe f9c8 	bl	8007962 <__retarget_lock_release_recursive>
 80095d2:	89ab      	ldrh	r3, [r5, #12]
 80095d4:	065b      	lsls	r3, r3, #25
 80095d6:	f53f af1d 	bmi.w	8009414 <_vfiprintf_r+0x44>
 80095da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80095dc:	e71c      	b.n	8009418 <_vfiprintf_r+0x48>
 80095de:	ab03      	add	r3, sp, #12
 80095e0:	9300      	str	r3, [sp, #0]
 80095e2:	462a      	mov	r2, r5
 80095e4:	4b05      	ldr	r3, [pc, #20]	; (80095fc <_vfiprintf_r+0x22c>)
 80095e6:	a904      	add	r1, sp, #16
 80095e8:	4630      	mov	r0, r6
 80095ea:	f7fd feb3 	bl	8007354 <_printf_i>
 80095ee:	e7e4      	b.n	80095ba <_vfiprintf_r+0x1ea>
 80095f0:	08009bf4 	.word	0x08009bf4
 80095f4:	08009bfe 	.word	0x08009bfe
 80095f8:	08006e0d 	.word	0x08006e0d
 80095fc:	080093ab 	.word	0x080093ab
 8009600:	08009bfa 	.word	0x08009bfa

08009604 <__swbuf_r>:
 8009604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009606:	460e      	mov	r6, r1
 8009608:	4614      	mov	r4, r2
 800960a:	4605      	mov	r5, r0
 800960c:	b118      	cbz	r0, 8009616 <__swbuf_r+0x12>
 800960e:	6a03      	ldr	r3, [r0, #32]
 8009610:	b90b      	cbnz	r3, 8009616 <__swbuf_r+0x12>
 8009612:	f7fe f83b 	bl	800768c <__sinit>
 8009616:	69a3      	ldr	r3, [r4, #24]
 8009618:	60a3      	str	r3, [r4, #8]
 800961a:	89a3      	ldrh	r3, [r4, #12]
 800961c:	071a      	lsls	r2, r3, #28
 800961e:	d525      	bpl.n	800966c <__swbuf_r+0x68>
 8009620:	6923      	ldr	r3, [r4, #16]
 8009622:	b31b      	cbz	r3, 800966c <__swbuf_r+0x68>
 8009624:	6823      	ldr	r3, [r4, #0]
 8009626:	6922      	ldr	r2, [r4, #16]
 8009628:	1a98      	subs	r0, r3, r2
 800962a:	6963      	ldr	r3, [r4, #20]
 800962c:	b2f6      	uxtb	r6, r6
 800962e:	4283      	cmp	r3, r0
 8009630:	4637      	mov	r7, r6
 8009632:	dc04      	bgt.n	800963e <__swbuf_r+0x3a>
 8009634:	4621      	mov	r1, r4
 8009636:	4628      	mov	r0, r5
 8009638:	f7ff fdc2 	bl	80091c0 <_fflush_r>
 800963c:	b9e0      	cbnz	r0, 8009678 <__swbuf_r+0x74>
 800963e:	68a3      	ldr	r3, [r4, #8]
 8009640:	3b01      	subs	r3, #1
 8009642:	60a3      	str	r3, [r4, #8]
 8009644:	6823      	ldr	r3, [r4, #0]
 8009646:	1c5a      	adds	r2, r3, #1
 8009648:	6022      	str	r2, [r4, #0]
 800964a:	701e      	strb	r6, [r3, #0]
 800964c:	6962      	ldr	r2, [r4, #20]
 800964e:	1c43      	adds	r3, r0, #1
 8009650:	429a      	cmp	r2, r3
 8009652:	d004      	beq.n	800965e <__swbuf_r+0x5a>
 8009654:	89a3      	ldrh	r3, [r4, #12]
 8009656:	07db      	lsls	r3, r3, #31
 8009658:	d506      	bpl.n	8009668 <__swbuf_r+0x64>
 800965a:	2e0a      	cmp	r6, #10
 800965c:	d104      	bne.n	8009668 <__swbuf_r+0x64>
 800965e:	4621      	mov	r1, r4
 8009660:	4628      	mov	r0, r5
 8009662:	f7ff fdad 	bl	80091c0 <_fflush_r>
 8009666:	b938      	cbnz	r0, 8009678 <__swbuf_r+0x74>
 8009668:	4638      	mov	r0, r7
 800966a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800966c:	4621      	mov	r1, r4
 800966e:	4628      	mov	r0, r5
 8009670:	f000 f806 	bl	8009680 <__swsetup_r>
 8009674:	2800      	cmp	r0, #0
 8009676:	d0d5      	beq.n	8009624 <__swbuf_r+0x20>
 8009678:	f04f 37ff 	mov.w	r7, #4294967295
 800967c:	e7f4      	b.n	8009668 <__swbuf_r+0x64>
	...

08009680 <__swsetup_r>:
 8009680:	b538      	push	{r3, r4, r5, lr}
 8009682:	4b2a      	ldr	r3, [pc, #168]	; (800972c <__swsetup_r+0xac>)
 8009684:	4605      	mov	r5, r0
 8009686:	6818      	ldr	r0, [r3, #0]
 8009688:	460c      	mov	r4, r1
 800968a:	b118      	cbz	r0, 8009694 <__swsetup_r+0x14>
 800968c:	6a03      	ldr	r3, [r0, #32]
 800968e:	b90b      	cbnz	r3, 8009694 <__swsetup_r+0x14>
 8009690:	f7fd fffc 	bl	800768c <__sinit>
 8009694:	89a3      	ldrh	r3, [r4, #12]
 8009696:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800969a:	0718      	lsls	r0, r3, #28
 800969c:	d422      	bmi.n	80096e4 <__swsetup_r+0x64>
 800969e:	06d9      	lsls	r1, r3, #27
 80096a0:	d407      	bmi.n	80096b2 <__swsetup_r+0x32>
 80096a2:	2309      	movs	r3, #9
 80096a4:	602b      	str	r3, [r5, #0]
 80096a6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80096aa:	81a3      	strh	r3, [r4, #12]
 80096ac:	f04f 30ff 	mov.w	r0, #4294967295
 80096b0:	e034      	b.n	800971c <__swsetup_r+0x9c>
 80096b2:	0758      	lsls	r0, r3, #29
 80096b4:	d512      	bpl.n	80096dc <__swsetup_r+0x5c>
 80096b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80096b8:	b141      	cbz	r1, 80096cc <__swsetup_r+0x4c>
 80096ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80096be:	4299      	cmp	r1, r3
 80096c0:	d002      	beq.n	80096c8 <__swsetup_r+0x48>
 80096c2:	4628      	mov	r0, r5
 80096c4:	f7fe ffd6 	bl	8008674 <_free_r>
 80096c8:	2300      	movs	r3, #0
 80096ca:	6363      	str	r3, [r4, #52]	; 0x34
 80096cc:	89a3      	ldrh	r3, [r4, #12]
 80096ce:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80096d2:	81a3      	strh	r3, [r4, #12]
 80096d4:	2300      	movs	r3, #0
 80096d6:	6063      	str	r3, [r4, #4]
 80096d8:	6923      	ldr	r3, [r4, #16]
 80096da:	6023      	str	r3, [r4, #0]
 80096dc:	89a3      	ldrh	r3, [r4, #12]
 80096de:	f043 0308 	orr.w	r3, r3, #8
 80096e2:	81a3      	strh	r3, [r4, #12]
 80096e4:	6923      	ldr	r3, [r4, #16]
 80096e6:	b94b      	cbnz	r3, 80096fc <__swsetup_r+0x7c>
 80096e8:	89a3      	ldrh	r3, [r4, #12]
 80096ea:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80096ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096f2:	d003      	beq.n	80096fc <__swsetup_r+0x7c>
 80096f4:	4621      	mov	r1, r4
 80096f6:	4628      	mov	r0, r5
 80096f8:	f000 f840 	bl	800977c <__smakebuf_r>
 80096fc:	89a0      	ldrh	r0, [r4, #12]
 80096fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009702:	f010 0301 	ands.w	r3, r0, #1
 8009706:	d00a      	beq.n	800971e <__swsetup_r+0x9e>
 8009708:	2300      	movs	r3, #0
 800970a:	60a3      	str	r3, [r4, #8]
 800970c:	6963      	ldr	r3, [r4, #20]
 800970e:	425b      	negs	r3, r3
 8009710:	61a3      	str	r3, [r4, #24]
 8009712:	6923      	ldr	r3, [r4, #16]
 8009714:	b943      	cbnz	r3, 8009728 <__swsetup_r+0xa8>
 8009716:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800971a:	d1c4      	bne.n	80096a6 <__swsetup_r+0x26>
 800971c:	bd38      	pop	{r3, r4, r5, pc}
 800971e:	0781      	lsls	r1, r0, #30
 8009720:	bf58      	it	pl
 8009722:	6963      	ldrpl	r3, [r4, #20]
 8009724:	60a3      	str	r3, [r4, #8]
 8009726:	e7f4      	b.n	8009712 <__swsetup_r+0x92>
 8009728:	2000      	movs	r0, #0
 800972a:	e7f7      	b.n	800971c <__swsetup_r+0x9c>
 800972c:	20000064 	.word	0x20000064

08009730 <__swhatbuf_r>:
 8009730:	b570      	push	{r4, r5, r6, lr}
 8009732:	460c      	mov	r4, r1
 8009734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009738:	2900      	cmp	r1, #0
 800973a:	b096      	sub	sp, #88	; 0x58
 800973c:	4615      	mov	r5, r2
 800973e:	461e      	mov	r6, r3
 8009740:	da0d      	bge.n	800975e <__swhatbuf_r+0x2e>
 8009742:	89a3      	ldrh	r3, [r4, #12]
 8009744:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009748:	f04f 0100 	mov.w	r1, #0
 800974c:	bf0c      	ite	eq
 800974e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009752:	2340      	movne	r3, #64	; 0x40
 8009754:	2000      	movs	r0, #0
 8009756:	6031      	str	r1, [r6, #0]
 8009758:	602b      	str	r3, [r5, #0]
 800975a:	b016      	add	sp, #88	; 0x58
 800975c:	bd70      	pop	{r4, r5, r6, pc}
 800975e:	466a      	mov	r2, sp
 8009760:	f000 f848 	bl	80097f4 <_fstat_r>
 8009764:	2800      	cmp	r0, #0
 8009766:	dbec      	blt.n	8009742 <__swhatbuf_r+0x12>
 8009768:	9901      	ldr	r1, [sp, #4]
 800976a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800976e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009772:	4259      	negs	r1, r3
 8009774:	4159      	adcs	r1, r3
 8009776:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800977a:	e7eb      	b.n	8009754 <__swhatbuf_r+0x24>

0800977c <__smakebuf_r>:
 800977c:	898b      	ldrh	r3, [r1, #12]
 800977e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009780:	079d      	lsls	r5, r3, #30
 8009782:	4606      	mov	r6, r0
 8009784:	460c      	mov	r4, r1
 8009786:	d507      	bpl.n	8009798 <__smakebuf_r+0x1c>
 8009788:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800978c:	6023      	str	r3, [r4, #0]
 800978e:	6123      	str	r3, [r4, #16]
 8009790:	2301      	movs	r3, #1
 8009792:	6163      	str	r3, [r4, #20]
 8009794:	b002      	add	sp, #8
 8009796:	bd70      	pop	{r4, r5, r6, pc}
 8009798:	ab01      	add	r3, sp, #4
 800979a:	466a      	mov	r2, sp
 800979c:	f7ff ffc8 	bl	8009730 <__swhatbuf_r>
 80097a0:	9900      	ldr	r1, [sp, #0]
 80097a2:	4605      	mov	r5, r0
 80097a4:	4630      	mov	r0, r6
 80097a6:	f7fd fa05 	bl	8006bb4 <_malloc_r>
 80097aa:	b948      	cbnz	r0, 80097c0 <__smakebuf_r+0x44>
 80097ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097b0:	059a      	lsls	r2, r3, #22
 80097b2:	d4ef      	bmi.n	8009794 <__smakebuf_r+0x18>
 80097b4:	f023 0303 	bic.w	r3, r3, #3
 80097b8:	f043 0302 	orr.w	r3, r3, #2
 80097bc:	81a3      	strh	r3, [r4, #12]
 80097be:	e7e3      	b.n	8009788 <__smakebuf_r+0xc>
 80097c0:	89a3      	ldrh	r3, [r4, #12]
 80097c2:	6020      	str	r0, [r4, #0]
 80097c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097c8:	81a3      	strh	r3, [r4, #12]
 80097ca:	9b00      	ldr	r3, [sp, #0]
 80097cc:	6163      	str	r3, [r4, #20]
 80097ce:	9b01      	ldr	r3, [sp, #4]
 80097d0:	6120      	str	r0, [r4, #16]
 80097d2:	b15b      	cbz	r3, 80097ec <__smakebuf_r+0x70>
 80097d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097d8:	4630      	mov	r0, r6
 80097da:	f000 f81d 	bl	8009818 <_isatty_r>
 80097de:	b128      	cbz	r0, 80097ec <__smakebuf_r+0x70>
 80097e0:	89a3      	ldrh	r3, [r4, #12]
 80097e2:	f023 0303 	bic.w	r3, r3, #3
 80097e6:	f043 0301 	orr.w	r3, r3, #1
 80097ea:	81a3      	strh	r3, [r4, #12]
 80097ec:	89a3      	ldrh	r3, [r4, #12]
 80097ee:	431d      	orrs	r5, r3
 80097f0:	81a5      	strh	r5, [r4, #12]
 80097f2:	e7cf      	b.n	8009794 <__smakebuf_r+0x18>

080097f4 <_fstat_r>:
 80097f4:	b538      	push	{r3, r4, r5, lr}
 80097f6:	4d07      	ldr	r5, [pc, #28]	; (8009814 <_fstat_r+0x20>)
 80097f8:	2300      	movs	r3, #0
 80097fa:	4604      	mov	r4, r0
 80097fc:	4608      	mov	r0, r1
 80097fe:	4611      	mov	r1, r2
 8009800:	602b      	str	r3, [r5, #0]
 8009802:	f7f9 fa8c 	bl	8002d1e <_fstat>
 8009806:	1c43      	adds	r3, r0, #1
 8009808:	d102      	bne.n	8009810 <_fstat_r+0x1c>
 800980a:	682b      	ldr	r3, [r5, #0]
 800980c:	b103      	cbz	r3, 8009810 <_fstat_r+0x1c>
 800980e:	6023      	str	r3, [r4, #0]
 8009810:	bd38      	pop	{r3, r4, r5, pc}
 8009812:	bf00      	nop
 8009814:	2000060c 	.word	0x2000060c

08009818 <_isatty_r>:
 8009818:	b538      	push	{r3, r4, r5, lr}
 800981a:	4d06      	ldr	r5, [pc, #24]	; (8009834 <_isatty_r+0x1c>)
 800981c:	2300      	movs	r3, #0
 800981e:	4604      	mov	r4, r0
 8009820:	4608      	mov	r0, r1
 8009822:	602b      	str	r3, [r5, #0]
 8009824:	f7f9 fa8b 	bl	8002d3e <_isatty>
 8009828:	1c43      	adds	r3, r0, #1
 800982a:	d102      	bne.n	8009832 <_isatty_r+0x1a>
 800982c:	682b      	ldr	r3, [r5, #0]
 800982e:	b103      	cbz	r3, 8009832 <_isatty_r+0x1a>
 8009830:	6023      	str	r3, [r4, #0]
 8009832:	bd38      	pop	{r3, r4, r5, pc}
 8009834:	2000060c 	.word	0x2000060c

08009838 <_init>:
 8009838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800983a:	bf00      	nop
 800983c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800983e:	bc08      	pop	{r3}
 8009840:	469e      	mov	lr, r3
 8009842:	4770      	bx	lr

08009844 <_fini>:
 8009844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009846:	bf00      	nop
 8009848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800984a:	bc08      	pop	{r3}
 800984c:	469e      	mov	lr, r3
 800984e:	4770      	bx	lr
