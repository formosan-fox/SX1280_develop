
sx1280_development.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e20  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  08007fb0  08007fb0  00017fb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083c4  080083c4  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  080083c4  080083c4  000183c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083cc  080083cc  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083cc  080083cc  000183cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083d0  080083d0  000183d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  080083d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  200001d4  080085a8  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000478  080085a8  00020478  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011031  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021e6  00000000  00000000  00031278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010d8  00000000  00000000  00033460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d38  00000000  00000000  00034538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027cf2  00000000  00000000  00035270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001380a  00000000  00000000  0005cf62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f61c6  00000000  00000000  0007076c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005918  00000000  00000000  00166934  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0016c24c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007f98 	.word	0x08007f98

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08007f98 	.word	0x08007f98

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <SPI1_TRANSCEIVER_Delay>:
static void MX_USART2_UART_Init(void);
static void MX_SPI1_Init(void);
static void MX_TIM1_Init(void);
/* USER CODE BEGIN PFP */
static void SPI1_TRANSCEIVER_Delay(uint8_t* tx, uint8_t* rx, uint8_t lengh)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af02      	add	r7, sp, #8
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2140      	movs	r1, #64	; 0x40
 8000f56:	480c      	ldr	r0, [pc, #48]	; (8000f88 <SPI1_TRANSCEIVER_Delay+0x44>)
 8000f58:	f001 f9ca 	bl	80022f0 <HAL_GPIO_WritePin>

//	for (int i = 0; i < 100; i++);
	HAL_Delay(1);
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	f000 ff13 	bl	8001d88 <HAL_Delay>
//	uint16_t temp = __HAL_TIM_GET_COUNTER(&htim1);
//	while (__HAL_TIM_GET_COUNTER(&htim1) - temp < 1000);

	HAL_SPI_TransmitReceive(&hspi1, tx, rx, lengh, 10);
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	220a      	movs	r2, #10
 8000f68:	9200      	str	r2, [sp, #0]
 8000f6a:	68ba      	ldr	r2, [r7, #8]
 8000f6c:	68f9      	ldr	r1, [r7, #12]
 8000f6e:	4807      	ldr	r0, [pc, #28]	; (8000f8c <SPI1_TRANSCEIVER_Delay+0x48>)
 8000f70:	f002 fd99 	bl	8003aa6 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8000f74:	2201      	movs	r2, #1
 8000f76:	2140      	movs	r1, #64	; 0x40
 8000f78:	4803      	ldr	r0, [pc, #12]	; (8000f88 <SPI1_TRANSCEIVER_Delay+0x44>)
 8000f7a:	f001 f9b9 	bl	80022f0 <HAL_GPIO_WritePin>
}
 8000f7e:	bf00      	nop
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	48000400 	.word	0x48000400
 8000f8c:	200001f0 	.word	0x200001f0

08000f90 <SPI1_TRANSCEIVER>:

static void SPI1_TRANSCEIVER(uint8_t* tx, uint8_t* rx, uint8_t lengh)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b088      	sub	sp, #32
 8000f94:	af02      	add	r7, sp, #8
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2140      	movs	r1, #64	; 0x40
 8000fa2:	480f      	ldr	r0, [pc, #60]	; (8000fe0 <SPI1_TRANSCEIVER+0x50>)
 8000fa4:	f001 f9a4 	bl	80022f0 <HAL_GPIO_WritePin>

	for (int i = 0; i < 100; i++);
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]
 8000fac:	e002      	b.n	8000fb4 <SPI1_TRANSCEIVER+0x24>
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	617b      	str	r3, [r7, #20]
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	2b63      	cmp	r3, #99	; 0x63
 8000fb8:	ddf9      	ble.n	8000fae <SPI1_TRANSCEIVER+0x1e>
//	HAL_Delay(1);
//	uint16_t temp = __HAL_TIM_GET_COUNTER(&htim1);
//	while (__HAL_TIM_GET_COUNTER(&htim1) - temp < 1000);

	HAL_SPI_TransmitReceive(&hspi1, tx, rx, lengh, 10);
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	220a      	movs	r2, #10
 8000fc0:	9200      	str	r2, [sp, #0]
 8000fc2:	68ba      	ldr	r2, [r7, #8]
 8000fc4:	68f9      	ldr	r1, [r7, #12]
 8000fc6:	4807      	ldr	r0, [pc, #28]	; (8000fe4 <SPI1_TRANSCEIVER+0x54>)
 8000fc8:	f002 fd6d 	bl	8003aa6 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8000fcc:	2201      	movs	r2, #1
 8000fce:	2140      	movs	r1, #64	; 0x40
 8000fd0:	4803      	ldr	r0, [pc, #12]	; (8000fe0 <SPI1_TRANSCEIVER+0x50>)
 8000fd2:	f001 f98d 	bl	80022f0 <HAL_GPIO_WritePin>
}
 8000fd6:	bf00      	nop
 8000fd8:	3718      	adds	r7, #24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	48000400 	.word	0x48000400
 8000fe4:	200001f0 	.word	0x200001f0

08000fe8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe8:	b5b0      	push	{r4, r5, r7, lr}
 8000fea:	b0c4      	sub	sp, #272	; 0x110
 8000fec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fee:	f000 fe4f 	bl	8001c90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ff2:	f000 fa99 	bl	8001528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff6:	f000 fbab 	bl	8001750 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ffa:	f000 fb79 	bl	80016f0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000ffe:	f000 fae5 	bl	80015cc <MX_SPI1_Init>
  MX_TIM1_Init();
 8001002:	f000 fb21 	bl	8001648 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8001006:	48c3      	ldr	r0, [pc, #780]	; (8001314 <main+0x32c>)
 8001008:	f003 f91c 	bl	8004244 <HAL_TIM_Base_Start>

  char uart_buf[100];
  int uart_buf_len;
  int received;

  uart_buf_len = sprintf(uart_buf, "SX1280 RX bit rate test\r\n");
 800100c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001010:	49c1      	ldr	r1, [pc, #772]	; (8001318 <main+0x330>)
 8001012:	4618      	mov	r0, r3
 8001014:	f004 fe64 	bl	8005ce0 <siprintf>
 8001018:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 800101c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001020:	b29a      	uxth	r2, r3
 8001022:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001026:	2364      	movs	r3, #100	; 0x64
 8001028:	48bc      	ldr	r0, [pc, #752]	; (800131c <main+0x334>)
 800102a:	f003 fc47 	bl	80048bc <HAL_UART_Transmit>
  //===========================================
  //===========================================
  //===========================================

  uint8_t tx[10] = {};
 800102e:	2300      	movs	r3, #0
 8001030:	677b      	str	r3, [r7, #116]	; 0x74
 8001032:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	809a      	strh	r2, [r3, #4]
  uint8_t rx[10] = {};
 800103c:	2300      	movs	r3, #0
 800103e:	66bb      	str	r3, [r7, #104]	; 0x68
 8001040:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	809a      	strh	r2, [r3, #4]

  // reset
  HAL_GPIO_WritePin(SX1280_RST_GPIO_Port, SX1280_RST_Pin, GPIO_PIN_SET);
 800104a:	2201      	movs	r2, #1
 800104c:	2180      	movs	r1, #128	; 0x80
 800104e:	48b4      	ldr	r0, [pc, #720]	; (8001320 <main+0x338>)
 8001050:	f001 f94e 	bl	80022f0 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001054:	2064      	movs	r0, #100	; 0x64
 8001056:	f000 fe97 	bl	8001d88 <HAL_Delay>
  HAL_GPIO_WritePin(SX1280_RST_GPIO_Port, SX1280_RST_Pin, GPIO_PIN_RESET);
 800105a:	2200      	movs	r2, #0
 800105c:	2180      	movs	r1, #128	; 0x80
 800105e:	48b0      	ldr	r0, [pc, #704]	; (8001320 <main+0x338>)
 8001060:	f001 f946 	bl	80022f0 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001064:	2064      	movs	r0, #100	; 0x64
 8001066:	f000 fe8f 	bl	8001d88 <HAL_Delay>
  HAL_GPIO_WritePin(SX1280_RST_GPIO_Port, SX1280_RST_Pin, GPIO_PIN_SET);
 800106a:	2201      	movs	r2, #1
 800106c:	2180      	movs	r1, #128	; 0x80
 800106e:	48ac      	ldr	r0, [pc, #688]	; (8001320 <main+0x338>)
 8001070:	f001 f93e 	bl	80022f0 <HAL_GPIO_WritePin>
  //===========================================
  // common transceiver setting for LoRa
  //===========================================

  // setstandby(stdby_xosc)
  *(uint32_t*)tx = 0x80 | 0x01 << 8;
 8001074:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001078:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800107c:	601a      	str	r2, [r3, #0]
  SPI1_TRANSCEIVER_Delay(tx, rx, 2);
 800107e:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001082:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001086:	2202      	movs	r2, #2
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff ff5b 	bl	8000f44 <SPI1_TRANSCEIVER_Delay>

  // setpackettype(packet_type_lora)
  *(uint32_t*)tx = 0x8A | 0x01 << 8; // LoRa mode
 800108e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001092:	f44f 72c5 	mov.w	r2, #394	; 0x18a
 8001096:	601a      	str	r2, [r3, #0]
  SPI1_TRANSCEIVER_Delay(tx, rx, 2);
 8001098:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800109c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80010a0:	2202      	movs	r2, #2
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff ff4e 	bl	8000f44 <SPI1_TRANSCEIVER_Delay>
  if (rx[0] != 0x65 && rx[0]!=0x64 && rx[0]!=0x54) {
 80010a8:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80010ac:	2b65      	cmp	r3, #101	; 0x65
 80010ae:	d01d      	beq.n	80010ec <main+0x104>
 80010b0:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80010b4:	2b64      	cmp	r3, #100	; 0x64
 80010b6:	d019      	beq.n	80010ec <main+0x104>
 80010b8:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80010bc:	2b54      	cmp	r3, #84	; 0x54
 80010be:	d015      	beq.n	80010ec <main+0x104>
	  uart_buf_len = sprintf(uart_buf, "Error with state %X\r\n", rx[0]);
 80010c0:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80010c4:	461a      	mov	r2, r3
 80010c6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80010ca:	4996      	ldr	r1, [pc, #600]	; (8001324 <main+0x33c>)
 80010cc:	4618      	mov	r0, r3
 80010ce:	f004 fe07 	bl	8005ce0 <siprintf>
 80010d2:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
	  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 80010d6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80010da:	b29a      	uxth	r2, r3
 80010dc:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80010e0:	2364      	movs	r3, #100	; 0x64
 80010e2:	488e      	ldr	r0, [pc, #568]	; (800131c <main+0x334>)
 80010e4:	f003 fbea 	bl	80048bc <HAL_UART_Transmit>
	  Error_Handler();
 80010e8:	f000 fbac 	bl	8001844 <Error_Handler>
  }

  // setrffrequency(rfFrequency)
  *(uint32_t*)tx = 0x86 | 0xB8 << 8 | 0x9D << 16 | 0x89 << 24;
 80010ec:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80010f0:	4a8d      	ldr	r2, [pc, #564]	; (8001328 <main+0x340>)
 80010f2:	601a      	str	r2, [r3, #0]
  SPI1_TRANSCEIVER(tx, rx, 4);
 80010f4:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80010f8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80010fc:	2204      	movs	r2, #4
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff ff46 	bl	8000f90 <SPI1_TRANSCEIVER>

  // setbufferbaseaddress()
  *(uint32_t*)tx = 0x8F | 0x80 << 8 | 0x00 << 16;
 8001104:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001108:	f248 028f 	movw	r2, #32911	; 0x808f
 800110c:	601a      	str	r2, [r3, #0]
  SPI1_TRANSCEIVER(tx, rx, 3);
 800110e:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001112:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001116:	2203      	movs	r2, #3
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ff39 	bl	8000f90 <SPI1_TRANSCEIVER>

  // setmodulationparams(modparam1, modparam2, modparam3)
  *(uint32_t*)tx = 0x8B | 0x70 << 8 | 0x18 << 16 | 0x01 << 24;
 800111e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001122:	4a82      	ldr	r2, [pc, #520]	; (800132c <main+0x344>)
 8001124:	601a      	str	r2, [r3, #0]
  SPI1_TRANSCEIVER(tx, rx, 4);
 8001126:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800112a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800112e:	2204      	movs	r2, #4
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff ff2d 	bl	8000f90 <SPI1_TRANSCEIVER>

  // setpacketparams(pktparam1, pktparam2, pktparam3, pktparam4, pktparam5)
  *(uint32_t*)tx = 0x8C | 0x0C << 8 | 0x80 << 16 | 0x08 << 24;
 8001136:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800113a:	4a7d      	ldr	r2, [pc, #500]	; (8001330 <main+0x348>)
 800113c:	601a      	str	r2, [r3, #0]
  *(uint32_t*)(tx+4) = 0x20 | 0x40 << 8 | 0x00 << 16 | 0x00 << 24;
 800113e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001142:	3304      	adds	r3, #4
 8001144:	f244 0220 	movw	r2, #16416	; 0x4020
 8001148:	601a      	str	r2, [r3, #0]
  SPI1_TRANSCEIVER(tx, rx, 8);
 800114a:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800114e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001152:	2208      	movs	r2, #8
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ff1b 	bl	8000f90 <SPI1_TRANSCEIVER>
    //===========================================
    // Rx Setting and Operations
    //===========================================

    // SetDioIrqParams(irqMask, dio1Mask, dio2Mask, dio3Mask)
    *(uint32_t*)tx = 0x8D | 0x40 << 8 | 0x23 << 16 | 0x00 << 24;
 800115a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800115e:	4a75      	ldr	r2, [pc, #468]	; (8001334 <main+0x34c>)
 8001160:	601a      	str	r2, [r3, #0]
    *(uint32_t*)(tx+4) = 0x01 | 0x00 << 8 | 0x02 << 16 | 0x40 << 24;
 8001162:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001166:	3304      	adds	r3, #4
 8001168:	4a73      	ldr	r2, [pc, #460]	; (8001338 <main+0x350>)
 800116a:	601a      	str	r2, [r3, #0]
    *(uint32_t*)(tx+8) = 0x20;
 800116c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001170:	3308      	adds	r3, #8
 8001172:	2220      	movs	r2, #32
 8001174:	601a      	str	r2, [r3, #0]
    SPI1_TRANSCEIVER(tx, rx, 9);
 8001176:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800117a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800117e:	2209      	movs	r2, #9
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff ff05 	bl	8000f90 <SPI1_TRANSCEIVER>

    // SetRx(periodBase, periodBaseCount[15:8], periodBaseCount[7:0])
    *(uint32_t*)tx = 0x82 | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
 8001186:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800118a:	2282      	movs	r2, #130	; 0x82
 800118c:	601a      	str	r2, [r3, #0]
    SPI1_TRANSCEIVER(tx, rx, 4);
 800118e:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001192:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001196:	2204      	movs	r2, #4
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff fef9 	bl	8000f90 <SPI1_TRANSCEIVER>

    // WaitIrq
    while(1)
    {
    	int temp = HAL_GetTick();
 800119e:	f000 fde7 	bl	8001d70 <HAL_GetTick>
 80011a2:	4603      	mov	r3, r0
 80011a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  	   *(uint32_t*)tx = 0x15 | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
 80011a8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80011ac:	2215      	movs	r2, #21
 80011ae:	601a      	str	r2, [r3, #0]
  	   SPI1_TRANSCEIVER(tx, rx, 4);
 80011b0:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80011b4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80011b8:	2204      	movs	r2, #4
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff fee8 	bl	8000f90 <SPI1_TRANSCEIVER>
  	   if(rx[3] & 0x02) break;
 80011c0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80011c4:	f003 0302 	and.w	r3, r3, #2
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d108      	bne.n	80011de <main+0x1f6>
  	   if(HAL_GetTick() - temp > 3) break;
 80011cc:	f000 fdd0 	bl	8001d70 <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	2b03      	cmp	r3, #3
 80011da:	d802      	bhi.n	80011e2 <main+0x1fa>
    {
 80011dc:	e7df      	b.n	800119e <main+0x1b6>
  	   if(rx[3] & 0x02) break;
 80011de:	bf00      	nop
 80011e0:	e000      	b.n	80011e4 <main+0x1fc>
  	   if(HAL_GetTick() - temp > 3) break;
 80011e2:	bf00      	nop
    }

    // GetPacketStatus()
    *(uint32_t*)tx = 0x1D | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
 80011e4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80011e8:	221d      	movs	r2, #29
 80011ea:	601a      	str	r2, [r3, #0]
    *(uint32_t*)(tx+4) = 0x00 | 0x00 << 8 | 0x00 << 16;
 80011ec:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80011f0:	3304      	adds	r3, #4
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
    SPI1_TRANSCEIVER(tx, rx, 7);
 80011f6:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80011fa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80011fe:	2207      	movs	r2, #7
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff fec5 	bl	8000f90 <SPI1_TRANSCEIVER>

    // ClrIrqStatus(irqMask)
    *(uint32_t*)tx = 0x97 | 0xFF << 8 | 0xFF << 16;
 8001206:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800120a:	4a4c      	ldr	r2, [pc, #304]	; (800133c <main+0x354>)
 800120c:	601a      	str	r2, [r3, #0]
    SPI1_TRANSCEIVER(tx, rx, 3);
 800120e:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001212:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001216:	2203      	movs	r2, #3
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff feb9 	bl	8000f90 <SPI1_TRANSCEIVER>

    // GetRxBufferStatus()
    *(uint32_t*)tx = 0x17 | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
 800121e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001222:	2217      	movs	r2, #23
 8001224:	601a      	str	r2, [r3, #0]
    SPI1_TRANSCEIVER(tx, rx, 4);
 8001226:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800122a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800122e:	2204      	movs	r2, #4
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff fead 	bl	8000f90 <SPI1_TRANSCEIVER>

    // ReadBuffer(offset, payloadLengthRx)
	 *(uint32_t*)tx = 0x1B | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
 8001236:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800123a:	221b      	movs	r2, #27
 800123c:	601a      	str	r2, [r3, #0]
	 *(uint32_t*)(tx+4) = 0x00 | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
 800123e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001242:	3304      	adds	r3, #4
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
	 *(uint32_t*)(tx+8) = 0x00 | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
 8001248:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800124c:	3308      	adds	r3, #8
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
	 SPI1_TRANSCEIVER(tx, rx, 11);
 8001252:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001256:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800125a:	220b      	movs	r2, #11
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff fe97 	bl	8000f90 <SPI1_TRANSCEIVER>

	 received = *(int*) (rx+3);
 8001262:	f8d7 306b 	ldr.w	r3, [r7, #107]	; 0x6b
 8001266:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   int time_temp = HAL_GetTick();
 800126a:	f000 fd81 	bl	8001d70 <HAL_GetTick>
 800126e:	4603      	mov	r3, r0
 8001270:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
   uint8_t received_arr[100] = {0};
 8001274:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001278:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	3304      	adds	r3, #4
 8001282:	2260      	movs	r2, #96	; 0x60
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f004 fd8d 	bl	8005da6 <memset>
   int pre_get = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
   uint8_t sum;
   float bps;
   uart_buf_len = sprintf(uart_buf, "SX1280 RX bit rate test\r\n");
 8001292:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001296:	4920      	ldr	r1, [pc, #128]	; (8001318 <main+0x330>)
 8001298:	4618      	mov	r0, r3
 800129a:	f004 fd21 	bl	8005ce0 <siprintf>
 800129e:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
   HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 80012a2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80012ac:	2364      	movs	r3, #100	; 0x64
 80012ae:	481b      	ldr	r0, [pc, #108]	; (800131c <main+0x334>)
 80012b0:	f003 fb04 	bl	80048bc <HAL_UART_Transmit>
   while (1)
   {
	      // WriteBuffer(offset, *data)
	      *(uint32_t*)tx = 0x1A | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
 80012b4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80012b8:	221a      	movs	r2, #26
 80012ba:	601a      	str	r2, [r3, #0]
	      *(uint32_t*)(tx+4) = 0x00000000;
 80012bc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80012c0:	3304      	adds	r3, #4
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
	      SPI1_TRANSCEIVER(tx, rx, 8);
 80012c6:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80012ca:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80012ce:	2208      	movs	r2, #8
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff fe5d 	bl	8000f90 <SPI1_TRANSCEIVER>
	      // SetRx(periodBase, periodBaseCount[15:8], periodBaseCount[7:0])
  	     *(uint32_t*)tx = 0x82 | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
 80012d6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80012da:	2282      	movs	r2, #130	; 0x82
 80012dc:	601a      	str	r2, [r3, #0]
  	     SPI1_TRANSCEIVER(tx, rx, 4);
 80012de:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80012e2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80012e6:	2204      	movs	r2, #4
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff fe51 	bl	8000f90 <SPI1_TRANSCEIVER>

  	     // WaitIrq
  	     while(1)
  	     {
  	  	   *(uint32_t*)tx = 0x15 | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
 80012ee:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80012f2:	2215      	movs	r2, #21
 80012f4:	601a      	str	r2, [r3, #0]
  	  	   SPI1_TRANSCEIVER(tx, rx, 4);
 80012f6:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80012fa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80012fe:	2204      	movs	r2, #4
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff fe45 	bl	8000f90 <SPI1_TRANSCEIVER>
  	  	   if(rx[3] & 0x02) break;
 8001306:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	2b00      	cmp	r3, #0
 8001310:	d116      	bne.n	8001340 <main+0x358>
  	  	   *(uint32_t*)tx = 0x15 | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
 8001312:	e7ec      	b.n	80012ee <main+0x306>
 8001314:	20000254 	.word	0x20000254
 8001318:	08007fb0 	.word	0x08007fb0
 800131c:	200002a0 	.word	0x200002a0
 8001320:	48000800 	.word	0x48000800
 8001324:	08007fcc 	.word	0x08007fcc
 8001328:	899db886 	.word	0x899db886
 800132c:	0118708b 	.word	0x0118708b
 8001330:	08800c8c 	.word	0x08800c8c
 8001334:	0023408d 	.word	0x0023408d
 8001338:	40020001 	.word	0x40020001
 800133c:	00ffff97 	.word	0x00ffff97
  	  	   if(rx[3] & 0x02) break;
 8001340:	bf00      	nop
  	     }

  	     // GetPacketStatus()
  	     *(uint32_t*)tx = 0x1D | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
 8001342:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001346:	221d      	movs	r2, #29
 8001348:	601a      	str	r2, [r3, #0]
  	     *(uint32_t*)(tx+4) = 0x00 | 0x00 << 8 | 0x00 << 16;
 800134a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800134e:	3304      	adds	r3, #4
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
  	     SPI1_TRANSCEIVER(tx, rx, 7);
 8001354:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001358:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800135c:	2207      	movs	r2, #7
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff fe16 	bl	8000f90 <SPI1_TRANSCEIVER>

  	     // ClrIrqStatus(irqMask)
  	     *(uint32_t*)tx = 0x97 | 0xFF << 8 | 0xFF << 16;
 8001364:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001368:	4a6b      	ldr	r2, [pc, #428]	; (8001518 <main+0x530>)
 800136a:	601a      	str	r2, [r3, #0]
  	     SPI1_TRANSCEIVER(tx, rx, 3);
 800136c:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001370:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001374:	2203      	movs	r2, #3
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff fe0a 	bl	8000f90 <SPI1_TRANSCEIVER>

  	    *(uint32_t*)tx = 0x15 | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
 800137c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001380:	2215      	movs	r2, #21
 8001382:	601a      	str	r2, [r3, #0]
  	     SPI1_TRANSCEIVER(tx, rx, 4);
 8001384:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001388:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800138c:	2204      	movs	r2, #4
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff fdfe 	bl	8000f90 <SPI1_TRANSCEIVER>

  	     // GetRxBufferStatus()
  	     *(uint32_t*)tx = 0x17 | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
 8001394:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001398:	2217      	movs	r2, #23
 800139a:	601a      	str	r2, [r3, #0]
  	     SPI1_TRANSCEIVER(tx, rx, 4);
 800139c:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80013a0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80013a4:	2204      	movs	r2, #4
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff fdf2 	bl	8000f90 <SPI1_TRANSCEIVER>

  	     // ReadBuffer(offset, payloadLengthRx)
  	     *(uint32_t*)tx = 0x1B | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
 80013ac:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80013b0:	221b      	movs	r2, #27
 80013b2:	601a      	str	r2, [r3, #0]
  	     *(uint32_t*)(tx+4) = 0x00 | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
 80013b4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80013b8:	3304      	adds	r3, #4
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
  	     *(uint32_t*)(tx+8) = 0x00 | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
 80013be:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80013c2:	3308      	adds	r3, #8
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
  	     SPI1_TRANSCEIVER(tx, rx, 11);
 80013c8:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80013cc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80013d0:	220b      	movs	r2, #11
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff fddc 	bl	8000f90 <SPI1_TRANSCEIVER>

  		 received = *(int*) (rx+3);
 80013d8:	f8d7 306b 	ldr.w	r3, [r7, #107]	; 0x6b
 80013dc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
//  		 uart_buf_len = sprintf(uart_buf, "received: %05d\r\n", received);
//  		 HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);

  	     // FrequencyError[Hz]
  		 if(received < 100 && received >= 0) // valid
 80013e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80013e4:	2b63      	cmp	r3, #99	; 0x63
 80013e6:	f73f af65 	bgt.w	80012b4 <main+0x2cc>
 80013ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	f6ff af60 	blt.w	80012b4 <main+0x2cc>
  		 {
  			if(pre_get > received)
 80013f4:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80013f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80013fc:	429a      	cmp	r2, r3
 80013fe:	dd7c      	ble.n	80014fa <main+0x512>
  			{
  				time_temp = HAL_GetTick() - time_temp;
 8001400:	f000 fcb6 	bl	8001d70 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  				sum = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
  				for(int i = 0; i < 100; i++)
 8001416:	2300      	movs	r3, #0
 8001418:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800141c:	e013      	b.n	8001446 <main+0x45e>
  				{
  					if(received_arr[i] == 1)
 800141e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001422:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 8001426:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800142a:	4413      	add	r3, r2
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d104      	bne.n	800143c <main+0x454>
  					{
  						sum ++;
 8001432:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 8001436:	3301      	adds	r3, #1
 8001438:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
  				for(int i = 0; i < 100; i++)
 800143c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001440:	3301      	adds	r3, #1
 8001442:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001446:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800144a:	2b63      	cmp	r3, #99	; 0x63
 800144c:	dde7      	ble.n	800141e <main+0x436>
  					}
  				}
  				bps = sum*8*8*1000./time_temp;
 800144e:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 8001452:	019b      	lsls	r3, r3, #6
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff f865 	bl	8000524 <__aeabi_i2d>
 800145a:	f04f 0200 	mov.w	r2, #0
 800145e:	4b2f      	ldr	r3, [pc, #188]	; (800151c <main+0x534>)
 8001460:	f7ff f8ca 	bl	80005f8 <__aeabi_dmul>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	4614      	mov	r4, r2
 800146a:	461d      	mov	r5, r3
 800146c:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 8001470:	f7ff f858 	bl	8000524 <__aeabi_i2d>
 8001474:	4602      	mov	r2, r0
 8001476:	460b      	mov	r3, r1
 8001478:	4620      	mov	r0, r4
 800147a:	4629      	mov	r1, r5
 800147c:	f7ff f9e6 	bl	800084c <__aeabi_ddiv>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	4610      	mov	r0, r2
 8001486:	4619      	mov	r1, r3
 8001488:	f7ff fb8e 	bl	8000ba8 <__aeabi_d2f>
 800148c:	4603      	mov	r3, r0
 800148e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  				uart_buf_len = sprintf(uart_buf, "Bit Rate: %15.5f bps, sum: %03d\r\n", bps, sum);
 8001492:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8001496:	f7ff f857 	bl	8000548 <__aeabi_f2d>
 800149a:	4602      	mov	r2, r0
 800149c:	460b      	mov	r3, r1
 800149e:	f897 10ff 	ldrb.w	r1, [r7, #255]	; 0xff
 80014a2:	f107 0080 	add.w	r0, r7, #128	; 0x80
 80014a6:	9100      	str	r1, [sp, #0]
 80014a8:	491d      	ldr	r1, [pc, #116]	; (8001520 <main+0x538>)
 80014aa:	f004 fc19 	bl	8005ce0 <siprintf>
 80014ae:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
  				HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 80014b2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80014b6:	b29a      	uxth	r2, r3
 80014b8:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80014bc:	2364      	movs	r3, #100	; 0x64
 80014be:	4819      	ldr	r0, [pc, #100]	; (8001524 <main+0x53c>)
 80014c0:	f003 f9fc 	bl	80048bc <HAL_UART_Transmit>

  				// end
				for(int i = 0; i < 100; i++)
 80014c4:	2300      	movs	r3, #0
 80014c6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80014ca:	e00d      	b.n	80014e8 <main+0x500>
				{
					received_arr[i] = 0;
 80014cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80014d0:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 80014d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80014d8:	4413      	add	r3, r2
 80014da:	2200      	movs	r2, #0
 80014dc:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < 100; i++)
 80014de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80014e2:	3301      	adds	r3, #1
 80014e4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80014e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80014ec:	2b63      	cmp	r3, #99	; 0x63
 80014ee:	dded      	ble.n	80014cc <main+0x4e4>
				}
				time_temp = HAL_GetTick();
 80014f0:	f000 fc3e 	bl	8001d70 <HAL_GetTick>
 80014f4:	4603      	mov	r3, r0
 80014f6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  			}
  			pre_get = received;
 80014fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80014fe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  			received_arr[received] = 1;
 8001502:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001506:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 800150a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800150e:	4413      	add	r3, r2
 8001510:	2201      	movs	r2, #1
 8001512:	701a      	strb	r2, [r3, #0]
	      *(uint32_t*)tx = 0x1A | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
 8001514:	e6ce      	b.n	80012b4 <main+0x2cc>
 8001516:	bf00      	nop
 8001518:	00ffff97 	.word	0x00ffff97
 800151c:	408f4000 	.word	0x408f4000
 8001520:	08007fe4 	.word	0x08007fe4
 8001524:	200002a0 	.word	0x200002a0

08001528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b096      	sub	sp, #88	; 0x58
 800152c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800152e:	f107 0314 	add.w	r3, r7, #20
 8001532:	2244      	movs	r2, #68	; 0x44
 8001534:	2100      	movs	r1, #0
 8001536:	4618      	mov	r0, r3
 8001538:	f004 fc35 	bl	8005da6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800153c:	463b      	mov	r3, r7
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]
 8001544:	609a      	str	r2, [r3, #8]
 8001546:	60da      	str	r2, [r3, #12]
 8001548:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800154a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800154e:	f000 fef5 	bl	800233c <HAL_PWREx_ControlVoltageScaling>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001558:	f000 f974 	bl	8001844 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800155c:	2302      	movs	r3, #2
 800155e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001560:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001564:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001566:	2310      	movs	r3, #16
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800156a:	2302      	movs	r3, #2
 800156c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800156e:	2302      	movs	r3, #2
 8001570:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001572:	2301      	movs	r3, #1
 8001574:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001576:	230a      	movs	r3, #10
 8001578:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800157a:	2307      	movs	r3, #7
 800157c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800157e:	2302      	movs	r3, #2
 8001580:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001582:	2302      	movs	r3, #2
 8001584:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001586:	f107 0314 	add.w	r3, r7, #20
 800158a:	4618      	mov	r0, r3
 800158c:	f000 ff2c 	bl	80023e8 <HAL_RCC_OscConfig>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001596:	f000 f955 	bl	8001844 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800159a:	230f      	movs	r3, #15
 800159c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800159e:	2303      	movs	r3, #3
 80015a0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015aa:	2300      	movs	r3, #0
 80015ac:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80015ae:	463b      	mov	r3, r7
 80015b0:	2104      	movs	r1, #4
 80015b2:	4618      	mov	r0, r3
 80015b4:	f001 faf4 	bl	8002ba0 <HAL_RCC_ClockConfig>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80015be:	f000 f941 	bl	8001844 <Error_Handler>
  }
}
 80015c2:	bf00      	nop
 80015c4:	3758      	adds	r7, #88	; 0x58
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
	...

080015cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015d0:	4b1b      	ldr	r3, [pc, #108]	; (8001640 <MX_SPI1_Init+0x74>)
 80015d2:	4a1c      	ldr	r2, [pc, #112]	; (8001644 <MX_SPI1_Init+0x78>)
 80015d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015d6:	4b1a      	ldr	r3, [pc, #104]	; (8001640 <MX_SPI1_Init+0x74>)
 80015d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015de:	4b18      	ldr	r3, [pc, #96]	; (8001640 <MX_SPI1_Init+0x74>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015e4:	4b16      	ldr	r3, [pc, #88]	; (8001640 <MX_SPI1_Init+0x74>)
 80015e6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80015ea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015ec:	4b14      	ldr	r3, [pc, #80]	; (8001640 <MX_SPI1_Init+0x74>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015f2:	4b13      	ldr	r3, [pc, #76]	; (8001640 <MX_SPI1_Init+0x74>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80015f8:	4b11      	ldr	r3, [pc, #68]	; (8001640 <MX_SPI1_Init+0x74>)
 80015fa:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80015fe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001600:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <MX_SPI1_Init+0x74>)
 8001602:	2210      	movs	r2, #16
 8001604:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001606:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <MX_SPI1_Init+0x74>)
 8001608:	2200      	movs	r2, #0
 800160a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800160c:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <MX_SPI1_Init+0x74>)
 800160e:	2200      	movs	r2, #0
 8001610:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001612:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <MX_SPI1_Init+0x74>)
 8001614:	2200      	movs	r2, #0
 8001616:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001618:	4b09      	ldr	r3, [pc, #36]	; (8001640 <MX_SPI1_Init+0x74>)
 800161a:	2207      	movs	r2, #7
 800161c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800161e:	4b08      	ldr	r3, [pc, #32]	; (8001640 <MX_SPI1_Init+0x74>)
 8001620:	2200      	movs	r2, #0
 8001622:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <MX_SPI1_Init+0x74>)
 8001626:	2200      	movs	r2, #0
 8001628:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800162a:	4805      	ldr	r0, [pc, #20]	; (8001640 <MX_SPI1_Init+0x74>)
 800162c:	f002 f998 	bl	8003960 <HAL_SPI_Init>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001636:	f000 f905 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	200001f0 	.word	0x200001f0
 8001644:	40013000 	.word	0x40013000

08001648 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b088      	sub	sp, #32
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800164e:	f107 0310 	add.w	r3, r7, #16
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]
 8001658:	609a      	str	r2, [r3, #8]
 800165a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800165c:	1d3b      	adds	r3, r7, #4
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]
 8001664:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001666:	4b20      	ldr	r3, [pc, #128]	; (80016e8 <MX_TIM1_Init+0xa0>)
 8001668:	4a20      	ldr	r2, [pc, #128]	; (80016ec <MX_TIM1_Init+0xa4>)
 800166a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 800166c:	4b1e      	ldr	r3, [pc, #120]	; (80016e8 <MX_TIM1_Init+0xa0>)
 800166e:	224f      	movs	r2, #79	; 0x4f
 8001670:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001672:	4b1d      	ldr	r3, [pc, #116]	; (80016e8 <MX_TIM1_Init+0xa0>)
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001678:	4b1b      	ldr	r3, [pc, #108]	; (80016e8 <MX_TIM1_Init+0xa0>)
 800167a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800167e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001680:	4b19      	ldr	r3, [pc, #100]	; (80016e8 <MX_TIM1_Init+0xa0>)
 8001682:	2200      	movs	r2, #0
 8001684:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001686:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <MX_TIM1_Init+0xa0>)
 8001688:	2200      	movs	r2, #0
 800168a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800168c:	4b16      	ldr	r3, [pc, #88]	; (80016e8 <MX_TIM1_Init+0xa0>)
 800168e:	2200      	movs	r2, #0
 8001690:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001692:	4815      	ldr	r0, [pc, #84]	; (80016e8 <MX_TIM1_Init+0xa0>)
 8001694:	f002 fd7e 	bl	8004194 <HAL_TIM_Base_Init>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800169e:	f000 f8d1 	bl	8001844 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016a8:	f107 0310 	add.w	r3, r7, #16
 80016ac:	4619      	mov	r1, r3
 80016ae:	480e      	ldr	r0, [pc, #56]	; (80016e8 <MX_TIM1_Init+0xa0>)
 80016b0:	f002 fe30 	bl	8004314 <HAL_TIM_ConfigClockSource>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80016ba:	f000 f8c3 	bl	8001844 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016be:	2300      	movs	r3, #0
 80016c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016c2:	2300      	movs	r3, #0
 80016c4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c6:	2300      	movs	r3, #0
 80016c8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016ca:	1d3b      	adds	r3, r7, #4
 80016cc:	4619      	mov	r1, r3
 80016ce:	4806      	ldr	r0, [pc, #24]	; (80016e8 <MX_TIM1_Init+0xa0>)
 80016d0:	f003 f81e 	bl	8004710 <HAL_TIMEx_MasterConfigSynchronization>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80016da:	f000 f8b3 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80016de:	bf00      	nop
 80016e0:	3720      	adds	r7, #32
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000254 	.word	0x20000254
 80016ec:	40012c00 	.word	0x40012c00

080016f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016f4:	4b14      	ldr	r3, [pc, #80]	; (8001748 <MX_USART2_UART_Init+0x58>)
 80016f6:	4a15      	ldr	r2, [pc, #84]	; (800174c <MX_USART2_UART_Init+0x5c>)
 80016f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 80016fa:	4b13      	ldr	r3, [pc, #76]	; (8001748 <MX_USART2_UART_Init+0x58>)
 80016fc:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001700:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001702:	4b11      	ldr	r3, [pc, #68]	; (8001748 <MX_USART2_UART_Init+0x58>)
 8001704:	2200      	movs	r2, #0
 8001706:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001708:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <MX_USART2_UART_Init+0x58>)
 800170a:	2200      	movs	r2, #0
 800170c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800170e:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <MX_USART2_UART_Init+0x58>)
 8001710:	2200      	movs	r2, #0
 8001712:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001714:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <MX_USART2_UART_Init+0x58>)
 8001716:	220c      	movs	r2, #12
 8001718:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800171a:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <MX_USART2_UART_Init+0x58>)
 800171c:	2200      	movs	r2, #0
 800171e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001720:	4b09      	ldr	r3, [pc, #36]	; (8001748 <MX_USART2_UART_Init+0x58>)
 8001722:	2200      	movs	r2, #0
 8001724:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001726:	4b08      	ldr	r3, [pc, #32]	; (8001748 <MX_USART2_UART_Init+0x58>)
 8001728:	2200      	movs	r2, #0
 800172a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800172c:	4b06      	ldr	r3, [pc, #24]	; (8001748 <MX_USART2_UART_Init+0x58>)
 800172e:	2200      	movs	r2, #0
 8001730:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001732:	4805      	ldr	r0, [pc, #20]	; (8001748 <MX_USART2_UART_Init+0x58>)
 8001734:	f003 f874 	bl	8004820 <HAL_UART_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800173e:	f000 f881 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	200002a0 	.word	0x200002a0
 800174c:	40004400 	.word	0x40004400

08001750 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b08a      	sub	sp, #40	; 0x28
 8001754:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001756:	f107 0314 	add.w	r3, r7, #20
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	605a      	str	r2, [r3, #4]
 8001760:	609a      	str	r2, [r3, #8]
 8001762:	60da      	str	r2, [r3, #12]
 8001764:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001766:	4b34      	ldr	r3, [pc, #208]	; (8001838 <MX_GPIO_Init+0xe8>)
 8001768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176a:	4a33      	ldr	r2, [pc, #204]	; (8001838 <MX_GPIO_Init+0xe8>)
 800176c:	f043 0304 	orr.w	r3, r3, #4
 8001770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001772:	4b31      	ldr	r3, [pc, #196]	; (8001838 <MX_GPIO_Init+0xe8>)
 8001774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001776:	f003 0304 	and.w	r3, r3, #4
 800177a:	613b      	str	r3, [r7, #16]
 800177c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800177e:	4b2e      	ldr	r3, [pc, #184]	; (8001838 <MX_GPIO_Init+0xe8>)
 8001780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001782:	4a2d      	ldr	r2, [pc, #180]	; (8001838 <MX_GPIO_Init+0xe8>)
 8001784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001788:	64d3      	str	r3, [r2, #76]	; 0x4c
 800178a:	4b2b      	ldr	r3, [pc, #172]	; (8001838 <MX_GPIO_Init+0xe8>)
 800178c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001796:	4b28      	ldr	r3, [pc, #160]	; (8001838 <MX_GPIO_Init+0xe8>)
 8001798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179a:	4a27      	ldr	r2, [pc, #156]	; (8001838 <MX_GPIO_Init+0xe8>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017a2:	4b25      	ldr	r3, [pc, #148]	; (8001838 <MX_GPIO_Init+0xe8>)
 80017a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	60bb      	str	r3, [r7, #8]
 80017ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ae:	4b22      	ldr	r3, [pc, #136]	; (8001838 <MX_GPIO_Init+0xe8>)
 80017b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b2:	4a21      	ldr	r2, [pc, #132]	; (8001838 <MX_GPIO_Init+0xe8>)
 80017b4:	f043 0302 	orr.w	r3, r3, #2
 80017b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ba:	4b1f      	ldr	r3, [pc, #124]	; (8001838 <MX_GPIO_Init+0xe8>)
 80017bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	607b      	str	r3, [r7, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SX1280_RST_GPIO_Port, SX1280_RST_Pin, GPIO_PIN_SET);
 80017c6:	2201      	movs	r2, #1
 80017c8:	2180      	movs	r1, #128	; 0x80
 80017ca:	481c      	ldr	r0, [pc, #112]	; (800183c <MX_GPIO_Init+0xec>)
 80017cc:	f000 fd90 	bl	80022f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 80017d0:	2201      	movs	r2, #1
 80017d2:	2140      	movs	r1, #64	; 0x40
 80017d4:	481a      	ldr	r0, [pc, #104]	; (8001840 <MX_GPIO_Init+0xf0>)
 80017d6:	f000 fd8b 	bl	80022f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017e0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80017e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017ea:	f107 0314 	add.w	r3, r7, #20
 80017ee:	4619      	mov	r1, r3
 80017f0:	4812      	ldr	r0, [pc, #72]	; (800183c <MX_GPIO_Init+0xec>)
 80017f2:	f000 fbd3 	bl	8001f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : SX1280_RST_Pin */
  GPIO_InitStruct.Pin = SX1280_RST_Pin;
 80017f6:	2380      	movs	r3, #128	; 0x80
 80017f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fa:	2301      	movs	r3, #1
 80017fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017fe:	2301      	movs	r3, #1
 8001800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001802:	2303      	movs	r3, #3
 8001804:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SX1280_RST_GPIO_Port, &GPIO_InitStruct);
 8001806:	f107 0314 	add.w	r3, r7, #20
 800180a:	4619      	mov	r1, r3
 800180c:	480b      	ldr	r0, [pc, #44]	; (800183c <MX_GPIO_Init+0xec>)
 800180e:	f000 fbc5 	bl	8001f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 8001812:	2340      	movs	r3, #64	; 0x40
 8001814:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001816:	2301      	movs	r3, #1
 8001818:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800181a:	2301      	movs	r3, #1
 800181c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181e:	2303      	movs	r3, #3
 8001820:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 8001822:	f107 0314 	add.w	r3, r7, #20
 8001826:	4619      	mov	r1, r3
 8001828:	4805      	ldr	r0, [pc, #20]	; (8001840 <MX_GPIO_Init+0xf0>)
 800182a:	f000 fbb7 	bl	8001f9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800182e:	bf00      	nop
 8001830:	3728      	adds	r7, #40	; 0x28
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40021000 	.word	0x40021000
 800183c:	48000800 	.word	0x48000800
 8001840:	48000400 	.word	0x48000400

08001844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001848:	b672      	cpsid	i
}
 800184a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800184c:	e7fe      	b.n	800184c <Error_Handler+0x8>
	...

08001850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001856:	4b0f      	ldr	r3, [pc, #60]	; (8001894 <HAL_MspInit+0x44>)
 8001858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800185a:	4a0e      	ldr	r2, [pc, #56]	; (8001894 <HAL_MspInit+0x44>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	6613      	str	r3, [r2, #96]	; 0x60
 8001862:	4b0c      	ldr	r3, [pc, #48]	; (8001894 <HAL_MspInit+0x44>)
 8001864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	607b      	str	r3, [r7, #4]
 800186c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800186e:	4b09      	ldr	r3, [pc, #36]	; (8001894 <HAL_MspInit+0x44>)
 8001870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001872:	4a08      	ldr	r2, [pc, #32]	; (8001894 <HAL_MspInit+0x44>)
 8001874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001878:	6593      	str	r3, [r2, #88]	; 0x58
 800187a:	4b06      	ldr	r3, [pc, #24]	; (8001894 <HAL_MspInit+0x44>)
 800187c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001882:	603b      	str	r3, [r7, #0]
 8001884:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	40021000 	.word	0x40021000

08001898 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b08a      	sub	sp, #40	; 0x28
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	60da      	str	r2, [r3, #12]
 80018ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a20      	ldr	r2, [pc, #128]	; (8001938 <HAL_SPI_MspInit+0xa0>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d139      	bne.n	800192e <HAL_SPI_MspInit+0x96>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018ba:	4b20      	ldr	r3, [pc, #128]	; (800193c <HAL_SPI_MspInit+0xa4>)
 80018bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018be:	4a1f      	ldr	r2, [pc, #124]	; (800193c <HAL_SPI_MspInit+0xa4>)
 80018c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018c4:	6613      	str	r3, [r2, #96]	; 0x60
 80018c6:	4b1d      	ldr	r3, [pc, #116]	; (800193c <HAL_SPI_MspInit+0xa4>)
 80018c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018ce:	613b      	str	r3, [r7, #16]
 80018d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d2:	4b1a      	ldr	r3, [pc, #104]	; (800193c <HAL_SPI_MspInit+0xa4>)
 80018d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d6:	4a19      	ldr	r2, [pc, #100]	; (800193c <HAL_SPI_MspInit+0xa4>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018de:	4b17      	ldr	r3, [pc, #92]	; (800193c <HAL_SPI_MspInit+0xa4>)
 80018e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80018ea:	2370      	movs	r3, #112	; 0x70
 80018ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ee:	2302      	movs	r3, #2
 80018f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f6:	2303      	movs	r3, #3
 80018f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018fa:	2305      	movs	r3, #5
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fe:	f107 0314 	add.w	r3, r7, #20
 8001902:	4619      	mov	r1, r3
 8001904:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001908:	f000 fb48 	bl	8001f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800190c:	2380      	movs	r3, #128	; 0x80
 800190e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001910:	2302      	movs	r3, #2
 8001912:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001914:	2302      	movs	r3, #2
 8001916:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001918:	2303      	movs	r3, #3
 800191a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800191c:	2305      	movs	r3, #5
 800191e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001920:	f107 0314 	add.w	r3, r7, #20
 8001924:	4619      	mov	r1, r3
 8001926:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800192a:	f000 fb37 	bl	8001f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800192e:	bf00      	nop
 8001930:	3728      	adds	r7, #40	; 0x28
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40013000 	.word	0x40013000
 800193c:	40021000 	.word	0x40021000

08001940 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a0a      	ldr	r2, [pc, #40]	; (8001978 <HAL_TIM_Base_MspInit+0x38>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d10b      	bne.n	800196a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001952:	4b0a      	ldr	r3, [pc, #40]	; (800197c <HAL_TIM_Base_MspInit+0x3c>)
 8001954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001956:	4a09      	ldr	r2, [pc, #36]	; (800197c <HAL_TIM_Base_MspInit+0x3c>)
 8001958:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800195c:	6613      	str	r3, [r2, #96]	; 0x60
 800195e:	4b07      	ldr	r3, [pc, #28]	; (800197c <HAL_TIM_Base_MspInit+0x3c>)
 8001960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001962:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800196a:	bf00      	nop
 800196c:	3714      	adds	r7, #20
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	40012c00 	.word	0x40012c00
 800197c:	40021000 	.word	0x40021000

08001980 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b0ac      	sub	sp, #176	; 0xb0
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001988:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001998:	f107 0314 	add.w	r3, r7, #20
 800199c:	2288      	movs	r2, #136	; 0x88
 800199e:	2100      	movs	r1, #0
 80019a0:	4618      	mov	r0, r3
 80019a2:	f004 fa00 	bl	8005da6 <memset>
  if(huart->Instance==USART2)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a21      	ldr	r2, [pc, #132]	; (8001a30 <HAL_UART_MspInit+0xb0>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d13b      	bne.n	8001a28 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80019b0:	2302      	movs	r3, #2
 80019b2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80019b4:	2300      	movs	r3, #0
 80019b6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019b8:	f107 0314 	add.w	r3, r7, #20
 80019bc:	4618      	mov	r0, r3
 80019be:	f001 fb13 	bl	8002fe8 <HAL_RCCEx_PeriphCLKConfig>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80019c8:	f7ff ff3c 	bl	8001844 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019cc:	4b19      	ldr	r3, [pc, #100]	; (8001a34 <HAL_UART_MspInit+0xb4>)
 80019ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d0:	4a18      	ldr	r2, [pc, #96]	; (8001a34 <HAL_UART_MspInit+0xb4>)
 80019d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d6:	6593      	str	r3, [r2, #88]	; 0x58
 80019d8:	4b16      	ldr	r3, [pc, #88]	; (8001a34 <HAL_UART_MspInit+0xb4>)
 80019da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e0:	613b      	str	r3, [r7, #16]
 80019e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e4:	4b13      	ldr	r3, [pc, #76]	; (8001a34 <HAL_UART_MspInit+0xb4>)
 80019e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e8:	4a12      	ldr	r2, [pc, #72]	; (8001a34 <HAL_UART_MspInit+0xb4>)
 80019ea:	f043 0301 	orr.w	r3, r3, #1
 80019ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019f0:	4b10      	ldr	r3, [pc, #64]	; (8001a34 <HAL_UART_MspInit+0xb4>)
 80019f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80019fc:	230c      	movs	r3, #12
 80019fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a02:	2302      	movs	r3, #2
 8001a04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a14:	2307      	movs	r3, #7
 8001a16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a1e:	4619      	mov	r1, r3
 8001a20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a24:	f000 faba 	bl	8001f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a28:	bf00      	nop
 8001a2a:	37b0      	adds	r7, #176	; 0xb0
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40004400 	.word	0x40004400
 8001a34:	40021000 	.word	0x40021000

08001a38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a3c:	e7fe      	b.n	8001a3c <NMI_Handler+0x4>

08001a3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a42:	e7fe      	b.n	8001a42 <HardFault_Handler+0x4>

08001a44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a48:	e7fe      	b.n	8001a48 <MemManage_Handler+0x4>

08001a4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a4e:	e7fe      	b.n	8001a4e <BusFault_Handler+0x4>

08001a50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a54:	e7fe      	b.n	8001a54 <UsageFault_Handler+0x4>

08001a56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a68:	bf00      	nop
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a72:	b480      	push	{r7}
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a84:	f000 f960 	bl	8001d48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a88:	bf00      	nop
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  return 1;
 8001a90:	2301      	movs	r3, #1
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <_kill>:

int _kill(int pid, int sig)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001aa6:	f004 f9d1 	bl	8005e4c <__errno>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2216      	movs	r2, #22
 8001aae:	601a      	str	r2, [r3, #0]
  return -1;
 8001ab0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <_exit>:

void _exit (int status)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7ff ffe7 	bl	8001a9c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ace:	e7fe      	b.n	8001ace <_exit+0x12>

08001ad0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001adc:	2300      	movs	r3, #0
 8001ade:	617b      	str	r3, [r7, #20]
 8001ae0:	e00a      	b.n	8001af8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ae2:	f3af 8000 	nop.w
 8001ae6:	4601      	mov	r1, r0
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	1c5a      	adds	r2, r3, #1
 8001aec:	60ba      	str	r2, [r7, #8]
 8001aee:	b2ca      	uxtb	r2, r1
 8001af0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	3301      	adds	r3, #1
 8001af6:	617b      	str	r3, [r7, #20]
 8001af8:	697a      	ldr	r2, [r7, #20]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	dbf0      	blt.n	8001ae2 <_read+0x12>
  }

  return len;
 8001b00:	687b      	ldr	r3, [r7, #4]
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3718      	adds	r7, #24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b086      	sub	sp, #24
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	60f8      	str	r0, [r7, #12]
 8001b12:	60b9      	str	r1, [r7, #8]
 8001b14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b16:	2300      	movs	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]
 8001b1a:	e009      	b.n	8001b30 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	1c5a      	adds	r2, r3, #1
 8001b20:	60ba      	str	r2, [r7, #8]
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	617b      	str	r3, [r7, #20]
 8001b30:	697a      	ldr	r2, [r7, #20]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	dbf1      	blt.n	8001b1c <_write+0x12>
  }
  return len;
 8001b38:	687b      	ldr	r3, [r7, #4]
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3718      	adds	r7, #24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <_close>:

int _close(int file)
{
 8001b42:	b480      	push	{r7}
 8001b44:	b083      	sub	sp, #12
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
 8001b62:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b6a:	605a      	str	r2, [r3, #4]
  return 0;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <_isatty>:

int _isatty(int file)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b82:	2301      	movs	r3, #1
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3714      	adds	r7, #20
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
	...

08001bac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bb4:	4a14      	ldr	r2, [pc, #80]	; (8001c08 <_sbrk+0x5c>)
 8001bb6:	4b15      	ldr	r3, [pc, #84]	; (8001c0c <_sbrk+0x60>)
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bc0:	4b13      	ldr	r3, [pc, #76]	; (8001c10 <_sbrk+0x64>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d102      	bne.n	8001bce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bc8:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <_sbrk+0x64>)
 8001bca:	4a12      	ldr	r2, [pc, #72]	; (8001c14 <_sbrk+0x68>)
 8001bcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bce:	4b10      	ldr	r3, [pc, #64]	; (8001c10 <_sbrk+0x64>)
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d207      	bcs.n	8001bec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bdc:	f004 f936 	bl	8005e4c <__errno>
 8001be0:	4603      	mov	r3, r0
 8001be2:	220c      	movs	r2, #12
 8001be4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001be6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bea:	e009      	b.n	8001c00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bec:	4b08      	ldr	r3, [pc, #32]	; (8001c10 <_sbrk+0x64>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bf2:	4b07      	ldr	r3, [pc, #28]	; (8001c10 <_sbrk+0x64>)
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	4a05      	ldr	r2, [pc, #20]	; (8001c10 <_sbrk+0x64>)
 8001bfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	20018000 	.word	0x20018000
 8001c0c:	00000400 	.word	0x00000400
 8001c10:	20000324 	.word	0x20000324
 8001c14:	20000478 	.word	0x20000478

08001c18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c1c:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <SystemInit+0x20>)
 8001c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c22:	4a05      	ldr	r2, [pc, #20]	; (8001c38 <SystemInit+0x20>)
 8001c24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	e000ed00 	.word	0xe000ed00

08001c3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c74 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c40:	f7ff ffea 	bl	8001c18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c44:	480c      	ldr	r0, [pc, #48]	; (8001c78 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c46:	490d      	ldr	r1, [pc, #52]	; (8001c7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c48:	4a0d      	ldr	r2, [pc, #52]	; (8001c80 <LoopForever+0xe>)
  movs r3, #0
 8001c4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c4c:	e002      	b.n	8001c54 <LoopCopyDataInit>

08001c4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c52:	3304      	adds	r3, #4

08001c54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c58:	d3f9      	bcc.n	8001c4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c5a:	4a0a      	ldr	r2, [pc, #40]	; (8001c84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c5c:	4c0a      	ldr	r4, [pc, #40]	; (8001c88 <LoopForever+0x16>)
  movs r3, #0
 8001c5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c60:	e001      	b.n	8001c66 <LoopFillZerobss>

08001c62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c64:	3204      	adds	r2, #4

08001c66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c68:	d3fb      	bcc.n	8001c62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c6a:	f004 f8f5 	bl	8005e58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c6e:	f7ff f9bb 	bl	8000fe8 <main>

08001c72 <LoopForever>:

LoopForever:
    b LoopForever
 8001c72:	e7fe      	b.n	8001c72 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c74:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001c78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c7c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001c80:	080083d4 	.word	0x080083d4
  ldr r2, =_sbss
 8001c84:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001c88:	20000478 	.word	0x20000478

08001c8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c8c:	e7fe      	b.n	8001c8c <ADC1_2_IRQHandler>
	...

08001c90 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c96:	2300      	movs	r3, #0
 8001c98:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c9a:	4b0c      	ldr	r3, [pc, #48]	; (8001ccc <HAL_Init+0x3c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a0b      	ldr	r2, [pc, #44]	; (8001ccc <HAL_Init+0x3c>)
 8001ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ca4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ca6:	2003      	movs	r0, #3
 8001ca8:	f000 f944 	bl	8001f34 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cac:	2000      	movs	r0, #0
 8001cae:	f000 f80f 	bl	8001cd0 <HAL_InitTick>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d002      	beq.n	8001cbe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	71fb      	strb	r3, [r7, #7]
 8001cbc:	e001      	b.n	8001cc2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cbe:	f7ff fdc7 	bl	8001850 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40022000 	.word	0x40022000

08001cd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001cdc:	4b17      	ldr	r3, [pc, #92]	; (8001d3c <HAL_InitTick+0x6c>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d023      	beq.n	8001d2c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ce4:	4b16      	ldr	r3, [pc, #88]	; (8001d40 <HAL_InitTick+0x70>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	4b14      	ldr	r3, [pc, #80]	; (8001d3c <HAL_InitTick+0x6c>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	4619      	mov	r1, r3
 8001cee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f000 f941 	bl	8001f82 <HAL_SYSTICK_Config>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10f      	bne.n	8001d26 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2b0f      	cmp	r3, #15
 8001d0a:	d809      	bhi.n	8001d20 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	f04f 30ff 	mov.w	r0, #4294967295
 8001d14:	f000 f919 	bl	8001f4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d18:	4a0a      	ldr	r2, [pc, #40]	; (8001d44 <HAL_InitTick+0x74>)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6013      	str	r3, [r2, #0]
 8001d1e:	e007      	b.n	8001d30 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	73fb      	strb	r3, [r7, #15]
 8001d24:	e004      	b.n	8001d30 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	73fb      	strb	r3, [r7, #15]
 8001d2a:	e001      	b.n	8001d30 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20000008 	.word	0x20000008
 8001d40:	20000000 	.word	0x20000000
 8001d44:	20000004 	.word	0x20000004

08001d48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d4c:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <HAL_IncTick+0x20>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	461a      	mov	r2, r3
 8001d52:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <HAL_IncTick+0x24>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4413      	add	r3, r2
 8001d58:	4a04      	ldr	r2, [pc, #16]	; (8001d6c <HAL_IncTick+0x24>)
 8001d5a:	6013      	str	r3, [r2, #0]
}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	20000008 	.word	0x20000008
 8001d6c:	20000328 	.word	0x20000328

08001d70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  return uwTick;
 8001d74:	4b03      	ldr	r3, [pc, #12]	; (8001d84 <HAL_GetTick+0x14>)
 8001d76:	681b      	ldr	r3, [r3, #0]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	20000328 	.word	0x20000328

08001d88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d90:	f7ff ffee 	bl	8001d70 <HAL_GetTick>
 8001d94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da0:	d005      	beq.n	8001dae <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001da2:	4b0a      	ldr	r3, [pc, #40]	; (8001dcc <HAL_Delay+0x44>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	461a      	mov	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4413      	add	r3, r2
 8001dac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dae:	bf00      	nop
 8001db0:	f7ff ffde 	bl	8001d70 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d8f7      	bhi.n	8001db0 <HAL_Delay+0x28>
  {
  }
}
 8001dc0:	bf00      	nop
 8001dc2:	bf00      	nop
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20000008 	.word	0x20000008

08001dd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f003 0307 	and.w	r3, r3, #7
 8001dde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001de0:	4b0c      	ldr	r3, [pc, #48]	; (8001e14 <__NVIC_SetPriorityGrouping+0x44>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001de6:	68ba      	ldr	r2, [r7, #8]
 8001de8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dec:	4013      	ands	r3, r2
 8001dee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001df8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e02:	4a04      	ldr	r2, [pc, #16]	; (8001e14 <__NVIC_SetPriorityGrouping+0x44>)
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	60d3      	str	r3, [r2, #12]
}
 8001e08:	bf00      	nop
 8001e0a:	3714      	adds	r7, #20
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	e000ed00 	.word	0xe000ed00

08001e18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e1c:	4b04      	ldr	r3, [pc, #16]	; (8001e30 <__NVIC_GetPriorityGrouping+0x18>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	0a1b      	lsrs	r3, r3, #8
 8001e22:	f003 0307 	and.w	r3, r3, #7
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	e000ed00 	.word	0xe000ed00

08001e34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	6039      	str	r1, [r7, #0]
 8001e3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	db0a      	blt.n	8001e5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	490c      	ldr	r1, [pc, #48]	; (8001e80 <__NVIC_SetPriority+0x4c>)
 8001e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e52:	0112      	lsls	r2, r2, #4
 8001e54:	b2d2      	uxtb	r2, r2
 8001e56:	440b      	add	r3, r1
 8001e58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e5c:	e00a      	b.n	8001e74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	b2da      	uxtb	r2, r3
 8001e62:	4908      	ldr	r1, [pc, #32]	; (8001e84 <__NVIC_SetPriority+0x50>)
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	f003 030f 	and.w	r3, r3, #15
 8001e6a:	3b04      	subs	r3, #4
 8001e6c:	0112      	lsls	r2, r2, #4
 8001e6e:	b2d2      	uxtb	r2, r2
 8001e70:	440b      	add	r3, r1
 8001e72:	761a      	strb	r2, [r3, #24]
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	e000e100 	.word	0xe000e100
 8001e84:	e000ed00 	.word	0xe000ed00

08001e88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b089      	sub	sp, #36	; 0x24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	f1c3 0307 	rsb	r3, r3, #7
 8001ea2:	2b04      	cmp	r3, #4
 8001ea4:	bf28      	it	cs
 8001ea6:	2304      	movcs	r3, #4
 8001ea8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	3304      	adds	r3, #4
 8001eae:	2b06      	cmp	r3, #6
 8001eb0:	d902      	bls.n	8001eb8 <NVIC_EncodePriority+0x30>
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	3b03      	subs	r3, #3
 8001eb6:	e000      	b.n	8001eba <NVIC_EncodePriority+0x32>
 8001eb8:	2300      	movs	r3, #0
 8001eba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	43da      	mvns	r2, r3
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	401a      	ands	r2, r3
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eda:	43d9      	mvns	r1, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee0:	4313      	orrs	r3, r2
         );
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3724      	adds	r7, #36	; 0x24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
	...

08001ef0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3b01      	subs	r3, #1
 8001efc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f00:	d301      	bcc.n	8001f06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f02:	2301      	movs	r3, #1
 8001f04:	e00f      	b.n	8001f26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f06:	4a0a      	ldr	r2, [pc, #40]	; (8001f30 <SysTick_Config+0x40>)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f0e:	210f      	movs	r1, #15
 8001f10:	f04f 30ff 	mov.w	r0, #4294967295
 8001f14:	f7ff ff8e 	bl	8001e34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f18:	4b05      	ldr	r3, [pc, #20]	; (8001f30 <SysTick_Config+0x40>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f1e:	4b04      	ldr	r3, [pc, #16]	; (8001f30 <SysTick_Config+0x40>)
 8001f20:	2207      	movs	r2, #7
 8001f22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	e000e010 	.word	0xe000e010

08001f34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f7ff ff47 	bl	8001dd0 <__NVIC_SetPriorityGrouping>
}
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b086      	sub	sp, #24
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	4603      	mov	r3, r0
 8001f52:	60b9      	str	r1, [r7, #8]
 8001f54:	607a      	str	r2, [r7, #4]
 8001f56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f5c:	f7ff ff5c 	bl	8001e18 <__NVIC_GetPriorityGrouping>
 8001f60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	68b9      	ldr	r1, [r7, #8]
 8001f66:	6978      	ldr	r0, [r7, #20]
 8001f68:	f7ff ff8e 	bl	8001e88 <NVIC_EncodePriority>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f72:	4611      	mov	r1, r2
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff ff5d 	bl	8001e34 <__NVIC_SetPriority>
}
 8001f7a:	bf00      	nop
 8001f7c:	3718      	adds	r7, #24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b082      	sub	sp, #8
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7ff ffb0 	bl	8001ef0 <SysTick_Config>
 8001f90:	4603      	mov	r3, r0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
	...

08001f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b087      	sub	sp, #28
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001faa:	e17f      	b.n	80022ac <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb8:	4013      	ands	r3, r2
 8001fba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f000 8171 	beq.w	80022a6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f003 0303 	and.w	r3, r3, #3
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d005      	beq.n	8001fdc <HAL_GPIO_Init+0x40>
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 0303 	and.w	r3, r3, #3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d130      	bne.n	800203e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	2203      	movs	r2, #3
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	43db      	mvns	r3, r3
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	68da      	ldr	r2, [r3, #12]
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	4313      	orrs	r3, r2
 8002004:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002012:	2201      	movs	r2, #1
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	43db      	mvns	r3, r3
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	4013      	ands	r3, r2
 8002020:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	091b      	lsrs	r3, r3, #4
 8002028:	f003 0201 	and.w	r2, r3, #1
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	4313      	orrs	r3, r2
 8002036:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f003 0303 	and.w	r3, r3, #3
 8002046:	2b03      	cmp	r3, #3
 8002048:	d118      	bne.n	800207c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002050:	2201      	movs	r2, #1
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	43db      	mvns	r3, r3
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	4013      	ands	r3, r2
 800205e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	08db      	lsrs	r3, r3, #3
 8002066:	f003 0201 	and.w	r2, r3, #1
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	4313      	orrs	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f003 0303 	and.w	r3, r3, #3
 8002084:	2b03      	cmp	r3, #3
 8002086:	d017      	beq.n	80020b8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	2203      	movs	r2, #3
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	43db      	mvns	r3, r3
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	4013      	ands	r3, r2
 800209e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	689a      	ldr	r2, [r3, #8]
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f003 0303 	and.w	r3, r3, #3
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d123      	bne.n	800210c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	08da      	lsrs	r2, r3, #3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3208      	adds	r2, #8
 80020cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	f003 0307 	and.w	r3, r3, #7
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	220f      	movs	r2, #15
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	4013      	ands	r3, r2
 80020e6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	691a      	ldr	r2, [r3, #16]
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	08da      	lsrs	r2, r3, #3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	3208      	adds	r2, #8
 8002106:	6939      	ldr	r1, [r7, #16]
 8002108:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	2203      	movs	r2, #3
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	43db      	mvns	r3, r3
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	4013      	ands	r3, r2
 8002122:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f003 0203 	and.w	r2, r3, #3
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	4313      	orrs	r3, r2
 8002138:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002148:	2b00      	cmp	r3, #0
 800214a:	f000 80ac 	beq.w	80022a6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800214e:	4b5f      	ldr	r3, [pc, #380]	; (80022cc <HAL_GPIO_Init+0x330>)
 8002150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002152:	4a5e      	ldr	r2, [pc, #376]	; (80022cc <HAL_GPIO_Init+0x330>)
 8002154:	f043 0301 	orr.w	r3, r3, #1
 8002158:	6613      	str	r3, [r2, #96]	; 0x60
 800215a:	4b5c      	ldr	r3, [pc, #368]	; (80022cc <HAL_GPIO_Init+0x330>)
 800215c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	60bb      	str	r3, [r7, #8]
 8002164:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002166:	4a5a      	ldr	r2, [pc, #360]	; (80022d0 <HAL_GPIO_Init+0x334>)
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	089b      	lsrs	r3, r3, #2
 800216c:	3302      	adds	r3, #2
 800216e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002172:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	f003 0303 	and.w	r3, r3, #3
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	220f      	movs	r2, #15
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	43db      	mvns	r3, r3
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	4013      	ands	r3, r2
 8002188:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002190:	d025      	beq.n	80021de <HAL_GPIO_Init+0x242>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a4f      	ldr	r2, [pc, #316]	; (80022d4 <HAL_GPIO_Init+0x338>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d01f      	beq.n	80021da <HAL_GPIO_Init+0x23e>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a4e      	ldr	r2, [pc, #312]	; (80022d8 <HAL_GPIO_Init+0x33c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d019      	beq.n	80021d6 <HAL_GPIO_Init+0x23a>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a4d      	ldr	r2, [pc, #308]	; (80022dc <HAL_GPIO_Init+0x340>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d013      	beq.n	80021d2 <HAL_GPIO_Init+0x236>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a4c      	ldr	r2, [pc, #304]	; (80022e0 <HAL_GPIO_Init+0x344>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d00d      	beq.n	80021ce <HAL_GPIO_Init+0x232>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a4b      	ldr	r2, [pc, #300]	; (80022e4 <HAL_GPIO_Init+0x348>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d007      	beq.n	80021ca <HAL_GPIO_Init+0x22e>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a4a      	ldr	r2, [pc, #296]	; (80022e8 <HAL_GPIO_Init+0x34c>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d101      	bne.n	80021c6 <HAL_GPIO_Init+0x22a>
 80021c2:	2306      	movs	r3, #6
 80021c4:	e00c      	b.n	80021e0 <HAL_GPIO_Init+0x244>
 80021c6:	2307      	movs	r3, #7
 80021c8:	e00a      	b.n	80021e0 <HAL_GPIO_Init+0x244>
 80021ca:	2305      	movs	r3, #5
 80021cc:	e008      	b.n	80021e0 <HAL_GPIO_Init+0x244>
 80021ce:	2304      	movs	r3, #4
 80021d0:	e006      	b.n	80021e0 <HAL_GPIO_Init+0x244>
 80021d2:	2303      	movs	r3, #3
 80021d4:	e004      	b.n	80021e0 <HAL_GPIO_Init+0x244>
 80021d6:	2302      	movs	r3, #2
 80021d8:	e002      	b.n	80021e0 <HAL_GPIO_Init+0x244>
 80021da:	2301      	movs	r3, #1
 80021dc:	e000      	b.n	80021e0 <HAL_GPIO_Init+0x244>
 80021de:	2300      	movs	r3, #0
 80021e0:	697a      	ldr	r2, [r7, #20]
 80021e2:	f002 0203 	and.w	r2, r2, #3
 80021e6:	0092      	lsls	r2, r2, #2
 80021e8:	4093      	lsls	r3, r2
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021f0:	4937      	ldr	r1, [pc, #220]	; (80022d0 <HAL_GPIO_Init+0x334>)
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	089b      	lsrs	r3, r3, #2
 80021f6:	3302      	adds	r3, #2
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021fe:	4b3b      	ldr	r3, [pc, #236]	; (80022ec <HAL_GPIO_Init+0x350>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	43db      	mvns	r3, r3
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	4013      	ands	r3, r2
 800220c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4313      	orrs	r3, r2
 8002220:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002222:	4a32      	ldr	r2, [pc, #200]	; (80022ec <HAL_GPIO_Init+0x350>)
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002228:	4b30      	ldr	r3, [pc, #192]	; (80022ec <HAL_GPIO_Init+0x350>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	43db      	mvns	r3, r3
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	4013      	ands	r3, r2
 8002236:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d003      	beq.n	800224c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	4313      	orrs	r3, r2
 800224a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800224c:	4a27      	ldr	r2, [pc, #156]	; (80022ec <HAL_GPIO_Init+0x350>)
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002252:	4b26      	ldr	r3, [pc, #152]	; (80022ec <HAL_GPIO_Init+0x350>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	43db      	mvns	r3, r3
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	4013      	ands	r3, r2
 8002260:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d003      	beq.n	8002276 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	4313      	orrs	r3, r2
 8002274:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002276:	4a1d      	ldr	r2, [pc, #116]	; (80022ec <HAL_GPIO_Init+0x350>)
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800227c:	4b1b      	ldr	r3, [pc, #108]	; (80022ec <HAL_GPIO_Init+0x350>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	43db      	mvns	r3, r3
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	4013      	ands	r3, r2
 800228a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d003      	beq.n	80022a0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	4313      	orrs	r3, r2
 800229e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022a0:	4a12      	ldr	r2, [pc, #72]	; (80022ec <HAL_GPIO_Init+0x350>)
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	3301      	adds	r3, #1
 80022aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	fa22 f303 	lsr.w	r3, r2, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f47f ae78 	bne.w	8001fac <HAL_GPIO_Init+0x10>
  }
}
 80022bc:	bf00      	nop
 80022be:	bf00      	nop
 80022c0:	371c      	adds	r7, #28
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	40021000 	.word	0x40021000
 80022d0:	40010000 	.word	0x40010000
 80022d4:	48000400 	.word	0x48000400
 80022d8:	48000800 	.word	0x48000800
 80022dc:	48000c00 	.word	0x48000c00
 80022e0:	48001000 	.word	0x48001000
 80022e4:	48001400 	.word	0x48001400
 80022e8:	48001800 	.word	0x48001800
 80022ec:	40010400 	.word	0x40010400

080022f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	460b      	mov	r3, r1
 80022fa:	807b      	strh	r3, [r7, #2]
 80022fc:	4613      	mov	r3, r2
 80022fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002300:	787b      	ldrb	r3, [r7, #1]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002306:	887a      	ldrh	r2, [r7, #2]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800230c:	e002      	b.n	8002314 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800230e:	887a      	ldrh	r2, [r7, #2]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002324:	4b04      	ldr	r3, [pc, #16]	; (8002338 <HAL_PWREx_GetVoltageRange+0x18>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800232c:	4618      	mov	r0, r3
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	40007000 	.word	0x40007000

0800233c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800234a:	d130      	bne.n	80023ae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800234c:	4b23      	ldr	r3, [pc, #140]	; (80023dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002354:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002358:	d038      	beq.n	80023cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800235a:	4b20      	ldr	r3, [pc, #128]	; (80023dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002362:	4a1e      	ldr	r2, [pc, #120]	; (80023dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002364:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002368:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800236a:	4b1d      	ldr	r3, [pc, #116]	; (80023e0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2232      	movs	r2, #50	; 0x32
 8002370:	fb02 f303 	mul.w	r3, r2, r3
 8002374:	4a1b      	ldr	r2, [pc, #108]	; (80023e4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002376:	fba2 2303 	umull	r2, r3, r2, r3
 800237a:	0c9b      	lsrs	r3, r3, #18
 800237c:	3301      	adds	r3, #1
 800237e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002380:	e002      	b.n	8002388 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	3b01      	subs	r3, #1
 8002386:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002388:	4b14      	ldr	r3, [pc, #80]	; (80023dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800238a:	695b      	ldr	r3, [r3, #20]
 800238c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002390:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002394:	d102      	bne.n	800239c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1f2      	bne.n	8002382 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800239c:	4b0f      	ldr	r3, [pc, #60]	; (80023dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023a8:	d110      	bne.n	80023cc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e00f      	b.n	80023ce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80023ae:	4b0b      	ldr	r3, [pc, #44]	; (80023dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ba:	d007      	beq.n	80023cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80023bc:	4b07      	ldr	r3, [pc, #28]	; (80023dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023c4:	4a05      	ldr	r2, [pc, #20]	; (80023dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023ca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3714      	adds	r7, #20
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	40007000 	.word	0x40007000
 80023e0:	20000000 	.word	0x20000000
 80023e4:	431bde83 	.word	0x431bde83

080023e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b088      	sub	sp, #32
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e3ca      	b.n	8002b90 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023fa:	4b97      	ldr	r3, [pc, #604]	; (8002658 <HAL_RCC_OscConfig+0x270>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 030c 	and.w	r3, r3, #12
 8002402:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002404:	4b94      	ldr	r3, [pc, #592]	; (8002658 <HAL_RCC_OscConfig+0x270>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	f003 0303 	and.w	r3, r3, #3
 800240c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0310 	and.w	r3, r3, #16
 8002416:	2b00      	cmp	r3, #0
 8002418:	f000 80e4 	beq.w	80025e4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d007      	beq.n	8002432 <HAL_RCC_OscConfig+0x4a>
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	2b0c      	cmp	r3, #12
 8002426:	f040 808b 	bne.w	8002540 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	2b01      	cmp	r3, #1
 800242e:	f040 8087 	bne.w	8002540 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002432:	4b89      	ldr	r3, [pc, #548]	; (8002658 <HAL_RCC_OscConfig+0x270>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d005      	beq.n	800244a <HAL_RCC_OscConfig+0x62>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e3a2      	b.n	8002b90 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a1a      	ldr	r2, [r3, #32]
 800244e:	4b82      	ldr	r3, [pc, #520]	; (8002658 <HAL_RCC_OscConfig+0x270>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0308 	and.w	r3, r3, #8
 8002456:	2b00      	cmp	r3, #0
 8002458:	d004      	beq.n	8002464 <HAL_RCC_OscConfig+0x7c>
 800245a:	4b7f      	ldr	r3, [pc, #508]	; (8002658 <HAL_RCC_OscConfig+0x270>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002462:	e005      	b.n	8002470 <HAL_RCC_OscConfig+0x88>
 8002464:	4b7c      	ldr	r3, [pc, #496]	; (8002658 <HAL_RCC_OscConfig+0x270>)
 8002466:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800246a:	091b      	lsrs	r3, r3, #4
 800246c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002470:	4293      	cmp	r3, r2
 8002472:	d223      	bcs.n	80024bc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	4618      	mov	r0, r3
 800247a:	f000 fd55 	bl	8002f28 <RCC_SetFlashLatencyFromMSIRange>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e383      	b.n	8002b90 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002488:	4b73      	ldr	r3, [pc, #460]	; (8002658 <HAL_RCC_OscConfig+0x270>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a72      	ldr	r2, [pc, #456]	; (8002658 <HAL_RCC_OscConfig+0x270>)
 800248e:	f043 0308 	orr.w	r3, r3, #8
 8002492:	6013      	str	r3, [r2, #0]
 8002494:	4b70      	ldr	r3, [pc, #448]	; (8002658 <HAL_RCC_OscConfig+0x270>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a1b      	ldr	r3, [r3, #32]
 80024a0:	496d      	ldr	r1, [pc, #436]	; (8002658 <HAL_RCC_OscConfig+0x270>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024a6:	4b6c      	ldr	r3, [pc, #432]	; (8002658 <HAL_RCC_OscConfig+0x270>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	021b      	lsls	r3, r3, #8
 80024b4:	4968      	ldr	r1, [pc, #416]	; (8002658 <HAL_RCC_OscConfig+0x270>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	604b      	str	r3, [r1, #4]
 80024ba:	e025      	b.n	8002508 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024bc:	4b66      	ldr	r3, [pc, #408]	; (8002658 <HAL_RCC_OscConfig+0x270>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a65      	ldr	r2, [pc, #404]	; (8002658 <HAL_RCC_OscConfig+0x270>)
 80024c2:	f043 0308 	orr.w	r3, r3, #8
 80024c6:	6013      	str	r3, [r2, #0]
 80024c8:	4b63      	ldr	r3, [pc, #396]	; (8002658 <HAL_RCC_OscConfig+0x270>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	4960      	ldr	r1, [pc, #384]	; (8002658 <HAL_RCC_OscConfig+0x270>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024da:	4b5f      	ldr	r3, [pc, #380]	; (8002658 <HAL_RCC_OscConfig+0x270>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	021b      	lsls	r3, r3, #8
 80024e8:	495b      	ldr	r1, [pc, #364]	; (8002658 <HAL_RCC_OscConfig+0x270>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d109      	bne.n	8002508 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f000 fd15 	bl	8002f28 <RCC_SetFlashLatencyFromMSIRange>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e343      	b.n	8002b90 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002508:	f000 fc4a 	bl	8002da0 <HAL_RCC_GetSysClockFreq>
 800250c:	4602      	mov	r2, r0
 800250e:	4b52      	ldr	r3, [pc, #328]	; (8002658 <HAL_RCC_OscConfig+0x270>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	091b      	lsrs	r3, r3, #4
 8002514:	f003 030f 	and.w	r3, r3, #15
 8002518:	4950      	ldr	r1, [pc, #320]	; (800265c <HAL_RCC_OscConfig+0x274>)
 800251a:	5ccb      	ldrb	r3, [r1, r3]
 800251c:	f003 031f 	and.w	r3, r3, #31
 8002520:	fa22 f303 	lsr.w	r3, r2, r3
 8002524:	4a4e      	ldr	r2, [pc, #312]	; (8002660 <HAL_RCC_OscConfig+0x278>)
 8002526:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002528:	4b4e      	ldr	r3, [pc, #312]	; (8002664 <HAL_RCC_OscConfig+0x27c>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff fbcf 	bl	8001cd0 <HAL_InitTick>
 8002532:	4603      	mov	r3, r0
 8002534:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002536:	7bfb      	ldrb	r3, [r7, #15]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d052      	beq.n	80025e2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800253c:	7bfb      	ldrb	r3, [r7, #15]
 800253e:	e327      	b.n	8002b90 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d032      	beq.n	80025ae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002548:	4b43      	ldr	r3, [pc, #268]	; (8002658 <HAL_RCC_OscConfig+0x270>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a42      	ldr	r2, [pc, #264]	; (8002658 <HAL_RCC_OscConfig+0x270>)
 800254e:	f043 0301 	orr.w	r3, r3, #1
 8002552:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002554:	f7ff fc0c 	bl	8001d70 <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800255c:	f7ff fc08 	bl	8001d70 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e310      	b.n	8002b90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800256e:	4b3a      	ldr	r3, [pc, #232]	; (8002658 <HAL_RCC_OscConfig+0x270>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d0f0      	beq.n	800255c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800257a:	4b37      	ldr	r3, [pc, #220]	; (8002658 <HAL_RCC_OscConfig+0x270>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a36      	ldr	r2, [pc, #216]	; (8002658 <HAL_RCC_OscConfig+0x270>)
 8002580:	f043 0308 	orr.w	r3, r3, #8
 8002584:	6013      	str	r3, [r2, #0]
 8002586:	4b34      	ldr	r3, [pc, #208]	; (8002658 <HAL_RCC_OscConfig+0x270>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	4931      	ldr	r1, [pc, #196]	; (8002658 <HAL_RCC_OscConfig+0x270>)
 8002594:	4313      	orrs	r3, r2
 8002596:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002598:	4b2f      	ldr	r3, [pc, #188]	; (8002658 <HAL_RCC_OscConfig+0x270>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	69db      	ldr	r3, [r3, #28]
 80025a4:	021b      	lsls	r3, r3, #8
 80025a6:	492c      	ldr	r1, [pc, #176]	; (8002658 <HAL_RCC_OscConfig+0x270>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	604b      	str	r3, [r1, #4]
 80025ac:	e01a      	b.n	80025e4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80025ae:	4b2a      	ldr	r3, [pc, #168]	; (8002658 <HAL_RCC_OscConfig+0x270>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a29      	ldr	r2, [pc, #164]	; (8002658 <HAL_RCC_OscConfig+0x270>)
 80025b4:	f023 0301 	bic.w	r3, r3, #1
 80025b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025ba:	f7ff fbd9 	bl	8001d70 <HAL_GetTick>
 80025be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025c0:	e008      	b.n	80025d4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025c2:	f7ff fbd5 	bl	8001d70 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e2dd      	b.n	8002b90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025d4:	4b20      	ldr	r3, [pc, #128]	; (8002658 <HAL_RCC_OscConfig+0x270>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1f0      	bne.n	80025c2 <HAL_RCC_OscConfig+0x1da>
 80025e0:	e000      	b.n	80025e4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025e2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d074      	beq.n	80026da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	2b08      	cmp	r3, #8
 80025f4:	d005      	beq.n	8002602 <HAL_RCC_OscConfig+0x21a>
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	2b0c      	cmp	r3, #12
 80025fa:	d10e      	bne.n	800261a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	2b03      	cmp	r3, #3
 8002600:	d10b      	bne.n	800261a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002602:	4b15      	ldr	r3, [pc, #84]	; (8002658 <HAL_RCC_OscConfig+0x270>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d064      	beq.n	80026d8 <HAL_RCC_OscConfig+0x2f0>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d160      	bne.n	80026d8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e2ba      	b.n	8002b90 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002622:	d106      	bne.n	8002632 <HAL_RCC_OscConfig+0x24a>
 8002624:	4b0c      	ldr	r3, [pc, #48]	; (8002658 <HAL_RCC_OscConfig+0x270>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a0b      	ldr	r2, [pc, #44]	; (8002658 <HAL_RCC_OscConfig+0x270>)
 800262a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800262e:	6013      	str	r3, [r2, #0]
 8002630:	e026      	b.n	8002680 <HAL_RCC_OscConfig+0x298>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800263a:	d115      	bne.n	8002668 <HAL_RCC_OscConfig+0x280>
 800263c:	4b06      	ldr	r3, [pc, #24]	; (8002658 <HAL_RCC_OscConfig+0x270>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a05      	ldr	r2, [pc, #20]	; (8002658 <HAL_RCC_OscConfig+0x270>)
 8002642:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002646:	6013      	str	r3, [r2, #0]
 8002648:	4b03      	ldr	r3, [pc, #12]	; (8002658 <HAL_RCC_OscConfig+0x270>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a02      	ldr	r2, [pc, #8]	; (8002658 <HAL_RCC_OscConfig+0x270>)
 800264e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002652:	6013      	str	r3, [r2, #0]
 8002654:	e014      	b.n	8002680 <HAL_RCC_OscConfig+0x298>
 8002656:	bf00      	nop
 8002658:	40021000 	.word	0x40021000
 800265c:	08008008 	.word	0x08008008
 8002660:	20000000 	.word	0x20000000
 8002664:	20000004 	.word	0x20000004
 8002668:	4ba0      	ldr	r3, [pc, #640]	; (80028ec <HAL_RCC_OscConfig+0x504>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a9f      	ldr	r2, [pc, #636]	; (80028ec <HAL_RCC_OscConfig+0x504>)
 800266e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002672:	6013      	str	r3, [r2, #0]
 8002674:	4b9d      	ldr	r3, [pc, #628]	; (80028ec <HAL_RCC_OscConfig+0x504>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a9c      	ldr	r2, [pc, #624]	; (80028ec <HAL_RCC_OscConfig+0x504>)
 800267a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800267e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d013      	beq.n	80026b0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002688:	f7ff fb72 	bl	8001d70 <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002690:	f7ff fb6e 	bl	8001d70 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b64      	cmp	r3, #100	; 0x64
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e276      	b.n	8002b90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026a2:	4b92      	ldr	r3, [pc, #584]	; (80028ec <HAL_RCC_OscConfig+0x504>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d0f0      	beq.n	8002690 <HAL_RCC_OscConfig+0x2a8>
 80026ae:	e014      	b.n	80026da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b0:	f7ff fb5e 	bl	8001d70 <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026b8:	f7ff fb5a 	bl	8001d70 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b64      	cmp	r3, #100	; 0x64
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e262      	b.n	8002b90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026ca:	4b88      	ldr	r3, [pc, #544]	; (80028ec <HAL_RCC_OscConfig+0x504>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1f0      	bne.n	80026b8 <HAL_RCC_OscConfig+0x2d0>
 80026d6:	e000      	b.n	80026da <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d060      	beq.n	80027a8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	2b04      	cmp	r3, #4
 80026ea:	d005      	beq.n	80026f8 <HAL_RCC_OscConfig+0x310>
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	2b0c      	cmp	r3, #12
 80026f0:	d119      	bne.n	8002726 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d116      	bne.n	8002726 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026f8:	4b7c      	ldr	r3, [pc, #496]	; (80028ec <HAL_RCC_OscConfig+0x504>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002700:	2b00      	cmp	r3, #0
 8002702:	d005      	beq.n	8002710 <HAL_RCC_OscConfig+0x328>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d101      	bne.n	8002710 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e23f      	b.n	8002b90 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002710:	4b76      	ldr	r3, [pc, #472]	; (80028ec <HAL_RCC_OscConfig+0x504>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	061b      	lsls	r3, r3, #24
 800271e:	4973      	ldr	r1, [pc, #460]	; (80028ec <HAL_RCC_OscConfig+0x504>)
 8002720:	4313      	orrs	r3, r2
 8002722:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002724:	e040      	b.n	80027a8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d023      	beq.n	8002776 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800272e:	4b6f      	ldr	r3, [pc, #444]	; (80028ec <HAL_RCC_OscConfig+0x504>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a6e      	ldr	r2, [pc, #440]	; (80028ec <HAL_RCC_OscConfig+0x504>)
 8002734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002738:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800273a:	f7ff fb19 	bl	8001d70 <HAL_GetTick>
 800273e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002740:	e008      	b.n	8002754 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002742:	f7ff fb15 	bl	8001d70 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e21d      	b.n	8002b90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002754:	4b65      	ldr	r3, [pc, #404]	; (80028ec <HAL_RCC_OscConfig+0x504>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800275c:	2b00      	cmp	r3, #0
 800275e:	d0f0      	beq.n	8002742 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002760:	4b62      	ldr	r3, [pc, #392]	; (80028ec <HAL_RCC_OscConfig+0x504>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	061b      	lsls	r3, r3, #24
 800276e:	495f      	ldr	r1, [pc, #380]	; (80028ec <HAL_RCC_OscConfig+0x504>)
 8002770:	4313      	orrs	r3, r2
 8002772:	604b      	str	r3, [r1, #4]
 8002774:	e018      	b.n	80027a8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002776:	4b5d      	ldr	r3, [pc, #372]	; (80028ec <HAL_RCC_OscConfig+0x504>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a5c      	ldr	r2, [pc, #368]	; (80028ec <HAL_RCC_OscConfig+0x504>)
 800277c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002780:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002782:	f7ff faf5 	bl	8001d70 <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002788:	e008      	b.n	800279c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800278a:	f7ff faf1 	bl	8001d70 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e1f9      	b.n	8002b90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800279c:	4b53      	ldr	r3, [pc, #332]	; (80028ec <HAL_RCC_OscConfig+0x504>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d1f0      	bne.n	800278a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0308 	and.w	r3, r3, #8
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d03c      	beq.n	800282e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d01c      	beq.n	80027f6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027bc:	4b4b      	ldr	r3, [pc, #300]	; (80028ec <HAL_RCC_OscConfig+0x504>)
 80027be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027c2:	4a4a      	ldr	r2, [pc, #296]	; (80028ec <HAL_RCC_OscConfig+0x504>)
 80027c4:	f043 0301 	orr.w	r3, r3, #1
 80027c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027cc:	f7ff fad0 	bl	8001d70 <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027d4:	f7ff facc 	bl	8001d70 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e1d4      	b.n	8002b90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027e6:	4b41      	ldr	r3, [pc, #260]	; (80028ec <HAL_RCC_OscConfig+0x504>)
 80027e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d0ef      	beq.n	80027d4 <HAL_RCC_OscConfig+0x3ec>
 80027f4:	e01b      	b.n	800282e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027f6:	4b3d      	ldr	r3, [pc, #244]	; (80028ec <HAL_RCC_OscConfig+0x504>)
 80027f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027fc:	4a3b      	ldr	r2, [pc, #236]	; (80028ec <HAL_RCC_OscConfig+0x504>)
 80027fe:	f023 0301 	bic.w	r3, r3, #1
 8002802:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002806:	f7ff fab3 	bl	8001d70 <HAL_GetTick>
 800280a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800280c:	e008      	b.n	8002820 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800280e:	f7ff faaf 	bl	8001d70 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d901      	bls.n	8002820 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e1b7      	b.n	8002b90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002820:	4b32      	ldr	r3, [pc, #200]	; (80028ec <HAL_RCC_OscConfig+0x504>)
 8002822:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1ef      	bne.n	800280e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0304 	and.w	r3, r3, #4
 8002836:	2b00      	cmp	r3, #0
 8002838:	f000 80a6 	beq.w	8002988 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800283c:	2300      	movs	r3, #0
 800283e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002840:	4b2a      	ldr	r3, [pc, #168]	; (80028ec <HAL_RCC_OscConfig+0x504>)
 8002842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10d      	bne.n	8002868 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800284c:	4b27      	ldr	r3, [pc, #156]	; (80028ec <HAL_RCC_OscConfig+0x504>)
 800284e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002850:	4a26      	ldr	r2, [pc, #152]	; (80028ec <HAL_RCC_OscConfig+0x504>)
 8002852:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002856:	6593      	str	r3, [r2, #88]	; 0x58
 8002858:	4b24      	ldr	r3, [pc, #144]	; (80028ec <HAL_RCC_OscConfig+0x504>)
 800285a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800285c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002860:	60bb      	str	r3, [r7, #8]
 8002862:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002864:	2301      	movs	r3, #1
 8002866:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002868:	4b21      	ldr	r3, [pc, #132]	; (80028f0 <HAL_RCC_OscConfig+0x508>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002870:	2b00      	cmp	r3, #0
 8002872:	d118      	bne.n	80028a6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002874:	4b1e      	ldr	r3, [pc, #120]	; (80028f0 <HAL_RCC_OscConfig+0x508>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a1d      	ldr	r2, [pc, #116]	; (80028f0 <HAL_RCC_OscConfig+0x508>)
 800287a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800287e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002880:	f7ff fa76 	bl	8001d70 <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002888:	f7ff fa72 	bl	8001d70 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e17a      	b.n	8002b90 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800289a:	4b15      	ldr	r3, [pc, #84]	; (80028f0 <HAL_RCC_OscConfig+0x508>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d0f0      	beq.n	8002888 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d108      	bne.n	80028c0 <HAL_RCC_OscConfig+0x4d8>
 80028ae:	4b0f      	ldr	r3, [pc, #60]	; (80028ec <HAL_RCC_OscConfig+0x504>)
 80028b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b4:	4a0d      	ldr	r2, [pc, #52]	; (80028ec <HAL_RCC_OscConfig+0x504>)
 80028b6:	f043 0301 	orr.w	r3, r3, #1
 80028ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028be:	e029      	b.n	8002914 <HAL_RCC_OscConfig+0x52c>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	2b05      	cmp	r3, #5
 80028c6:	d115      	bne.n	80028f4 <HAL_RCC_OscConfig+0x50c>
 80028c8:	4b08      	ldr	r3, [pc, #32]	; (80028ec <HAL_RCC_OscConfig+0x504>)
 80028ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ce:	4a07      	ldr	r2, [pc, #28]	; (80028ec <HAL_RCC_OscConfig+0x504>)
 80028d0:	f043 0304 	orr.w	r3, r3, #4
 80028d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028d8:	4b04      	ldr	r3, [pc, #16]	; (80028ec <HAL_RCC_OscConfig+0x504>)
 80028da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028de:	4a03      	ldr	r2, [pc, #12]	; (80028ec <HAL_RCC_OscConfig+0x504>)
 80028e0:	f043 0301 	orr.w	r3, r3, #1
 80028e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028e8:	e014      	b.n	8002914 <HAL_RCC_OscConfig+0x52c>
 80028ea:	bf00      	nop
 80028ec:	40021000 	.word	0x40021000
 80028f0:	40007000 	.word	0x40007000
 80028f4:	4b9c      	ldr	r3, [pc, #624]	; (8002b68 <HAL_RCC_OscConfig+0x780>)
 80028f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028fa:	4a9b      	ldr	r2, [pc, #620]	; (8002b68 <HAL_RCC_OscConfig+0x780>)
 80028fc:	f023 0301 	bic.w	r3, r3, #1
 8002900:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002904:	4b98      	ldr	r3, [pc, #608]	; (8002b68 <HAL_RCC_OscConfig+0x780>)
 8002906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800290a:	4a97      	ldr	r2, [pc, #604]	; (8002b68 <HAL_RCC_OscConfig+0x780>)
 800290c:	f023 0304 	bic.w	r3, r3, #4
 8002910:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d016      	beq.n	800294a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800291c:	f7ff fa28 	bl	8001d70 <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002922:	e00a      	b.n	800293a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002924:	f7ff fa24 	bl	8001d70 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002932:	4293      	cmp	r3, r2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e12a      	b.n	8002b90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800293a:	4b8b      	ldr	r3, [pc, #556]	; (8002b68 <HAL_RCC_OscConfig+0x780>)
 800293c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d0ed      	beq.n	8002924 <HAL_RCC_OscConfig+0x53c>
 8002948:	e015      	b.n	8002976 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800294a:	f7ff fa11 	bl	8001d70 <HAL_GetTick>
 800294e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002950:	e00a      	b.n	8002968 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002952:	f7ff fa0d 	bl	8001d70 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002960:	4293      	cmp	r3, r2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e113      	b.n	8002b90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002968:	4b7f      	ldr	r3, [pc, #508]	; (8002b68 <HAL_RCC_OscConfig+0x780>)
 800296a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1ed      	bne.n	8002952 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002976:	7ffb      	ldrb	r3, [r7, #31]
 8002978:	2b01      	cmp	r3, #1
 800297a:	d105      	bne.n	8002988 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800297c:	4b7a      	ldr	r3, [pc, #488]	; (8002b68 <HAL_RCC_OscConfig+0x780>)
 800297e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002980:	4a79      	ldr	r2, [pc, #484]	; (8002b68 <HAL_RCC_OscConfig+0x780>)
 8002982:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002986:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298c:	2b00      	cmp	r3, #0
 800298e:	f000 80fe 	beq.w	8002b8e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002996:	2b02      	cmp	r3, #2
 8002998:	f040 80d0 	bne.w	8002b3c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800299c:	4b72      	ldr	r3, [pc, #456]	; (8002b68 <HAL_RCC_OscConfig+0x780>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f003 0203 	and.w	r2, r3, #3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d130      	bne.n	8002a12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ba:	3b01      	subs	r3, #1
 80029bc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029be:	429a      	cmp	r2, r3
 80029c0:	d127      	bne.n	8002a12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029cc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d11f      	bne.n	8002a12 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029dc:	2a07      	cmp	r2, #7
 80029de:	bf14      	ite	ne
 80029e0:	2201      	movne	r2, #1
 80029e2:	2200      	moveq	r2, #0
 80029e4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d113      	bne.n	8002a12 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f4:	085b      	lsrs	r3, r3, #1
 80029f6:	3b01      	subs	r3, #1
 80029f8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d109      	bne.n	8002a12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a08:	085b      	lsrs	r3, r3, #1
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d06e      	beq.n	8002af0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	2b0c      	cmp	r3, #12
 8002a16:	d069      	beq.n	8002aec <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a18:	4b53      	ldr	r3, [pc, #332]	; (8002b68 <HAL_RCC_OscConfig+0x780>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d105      	bne.n	8002a30 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002a24:	4b50      	ldr	r3, [pc, #320]	; (8002b68 <HAL_RCC_OscConfig+0x780>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e0ad      	b.n	8002b90 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a34:	4b4c      	ldr	r3, [pc, #304]	; (8002b68 <HAL_RCC_OscConfig+0x780>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a4b      	ldr	r2, [pc, #300]	; (8002b68 <HAL_RCC_OscConfig+0x780>)
 8002a3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a3e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a40:	f7ff f996 	bl	8001d70 <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a48:	f7ff f992 	bl	8001d70 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e09a      	b.n	8002b90 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a5a:	4b43      	ldr	r3, [pc, #268]	; (8002b68 <HAL_RCC_OscConfig+0x780>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1f0      	bne.n	8002a48 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a66:	4b40      	ldr	r3, [pc, #256]	; (8002b68 <HAL_RCC_OscConfig+0x780>)
 8002a68:	68da      	ldr	r2, [r3, #12]
 8002a6a:	4b40      	ldr	r3, [pc, #256]	; (8002b6c <HAL_RCC_OscConfig+0x784>)
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a76:	3a01      	subs	r2, #1
 8002a78:	0112      	lsls	r2, r2, #4
 8002a7a:	4311      	orrs	r1, r2
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a80:	0212      	lsls	r2, r2, #8
 8002a82:	4311      	orrs	r1, r2
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a88:	0852      	lsrs	r2, r2, #1
 8002a8a:	3a01      	subs	r2, #1
 8002a8c:	0552      	lsls	r2, r2, #21
 8002a8e:	4311      	orrs	r1, r2
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a94:	0852      	lsrs	r2, r2, #1
 8002a96:	3a01      	subs	r2, #1
 8002a98:	0652      	lsls	r2, r2, #25
 8002a9a:	4311      	orrs	r1, r2
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002aa0:	0912      	lsrs	r2, r2, #4
 8002aa2:	0452      	lsls	r2, r2, #17
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	4930      	ldr	r1, [pc, #192]	; (8002b68 <HAL_RCC_OscConfig+0x780>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002aac:	4b2e      	ldr	r3, [pc, #184]	; (8002b68 <HAL_RCC_OscConfig+0x780>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a2d      	ldr	r2, [pc, #180]	; (8002b68 <HAL_RCC_OscConfig+0x780>)
 8002ab2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ab6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ab8:	4b2b      	ldr	r3, [pc, #172]	; (8002b68 <HAL_RCC_OscConfig+0x780>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	4a2a      	ldr	r2, [pc, #168]	; (8002b68 <HAL_RCC_OscConfig+0x780>)
 8002abe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ac2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ac4:	f7ff f954 	bl	8001d70 <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002acc:	f7ff f950 	bl	8001d70 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e058      	b.n	8002b90 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ade:	4b22      	ldr	r3, [pc, #136]	; (8002b68 <HAL_RCC_OscConfig+0x780>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d0f0      	beq.n	8002acc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002aea:	e050      	b.n	8002b8e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e04f      	b.n	8002b90 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002af0:	4b1d      	ldr	r3, [pc, #116]	; (8002b68 <HAL_RCC_OscConfig+0x780>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d148      	bne.n	8002b8e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002afc:	4b1a      	ldr	r3, [pc, #104]	; (8002b68 <HAL_RCC_OscConfig+0x780>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a19      	ldr	r2, [pc, #100]	; (8002b68 <HAL_RCC_OscConfig+0x780>)
 8002b02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b06:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b08:	4b17      	ldr	r3, [pc, #92]	; (8002b68 <HAL_RCC_OscConfig+0x780>)
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	4a16      	ldr	r2, [pc, #88]	; (8002b68 <HAL_RCC_OscConfig+0x780>)
 8002b0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b12:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b14:	f7ff f92c 	bl	8001d70 <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b1c:	f7ff f928 	bl	8001d70 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e030      	b.n	8002b90 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b2e:	4b0e      	ldr	r3, [pc, #56]	; (8002b68 <HAL_RCC_OscConfig+0x780>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d0f0      	beq.n	8002b1c <HAL_RCC_OscConfig+0x734>
 8002b3a:	e028      	b.n	8002b8e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	2b0c      	cmp	r3, #12
 8002b40:	d023      	beq.n	8002b8a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b42:	4b09      	ldr	r3, [pc, #36]	; (8002b68 <HAL_RCC_OscConfig+0x780>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a08      	ldr	r2, [pc, #32]	; (8002b68 <HAL_RCC_OscConfig+0x780>)
 8002b48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b4e:	f7ff f90f 	bl	8001d70 <HAL_GetTick>
 8002b52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b54:	e00c      	b.n	8002b70 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b56:	f7ff f90b 	bl	8001d70 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d905      	bls.n	8002b70 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e013      	b.n	8002b90 <HAL_RCC_OscConfig+0x7a8>
 8002b68:	40021000 	.word	0x40021000
 8002b6c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b70:	4b09      	ldr	r3, [pc, #36]	; (8002b98 <HAL_RCC_OscConfig+0x7b0>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1ec      	bne.n	8002b56 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b7c:	4b06      	ldr	r3, [pc, #24]	; (8002b98 <HAL_RCC_OscConfig+0x7b0>)
 8002b7e:	68da      	ldr	r2, [r3, #12]
 8002b80:	4905      	ldr	r1, [pc, #20]	; (8002b98 <HAL_RCC_OscConfig+0x7b0>)
 8002b82:	4b06      	ldr	r3, [pc, #24]	; (8002b9c <HAL_RCC_OscConfig+0x7b4>)
 8002b84:	4013      	ands	r3, r2
 8002b86:	60cb      	str	r3, [r1, #12]
 8002b88:	e001      	b.n	8002b8e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e000      	b.n	8002b90 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3720      	adds	r7, #32
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	feeefffc 	.word	0xfeeefffc

08002ba0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d101      	bne.n	8002bb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e0e7      	b.n	8002d84 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bb4:	4b75      	ldr	r3, [pc, #468]	; (8002d8c <HAL_RCC_ClockConfig+0x1ec>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0307 	and.w	r3, r3, #7
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d910      	bls.n	8002be4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bc2:	4b72      	ldr	r3, [pc, #456]	; (8002d8c <HAL_RCC_ClockConfig+0x1ec>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f023 0207 	bic.w	r2, r3, #7
 8002bca:	4970      	ldr	r1, [pc, #448]	; (8002d8c <HAL_RCC_ClockConfig+0x1ec>)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bd2:	4b6e      	ldr	r3, [pc, #440]	; (8002d8c <HAL_RCC_ClockConfig+0x1ec>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d001      	beq.n	8002be4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e0cf      	b.n	8002d84 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d010      	beq.n	8002c12 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	4b66      	ldr	r3, [pc, #408]	; (8002d90 <HAL_RCC_ClockConfig+0x1f0>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d908      	bls.n	8002c12 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c00:	4b63      	ldr	r3, [pc, #396]	; (8002d90 <HAL_RCC_ClockConfig+0x1f0>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	4960      	ldr	r1, [pc, #384]	; (8002d90 <HAL_RCC_ClockConfig+0x1f0>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d04c      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2b03      	cmp	r3, #3
 8002c24:	d107      	bne.n	8002c36 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c26:	4b5a      	ldr	r3, [pc, #360]	; (8002d90 <HAL_RCC_ClockConfig+0x1f0>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d121      	bne.n	8002c76 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e0a6      	b.n	8002d84 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d107      	bne.n	8002c4e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c3e:	4b54      	ldr	r3, [pc, #336]	; (8002d90 <HAL_RCC_ClockConfig+0x1f0>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d115      	bne.n	8002c76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e09a      	b.n	8002d84 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d107      	bne.n	8002c66 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c56:	4b4e      	ldr	r3, [pc, #312]	; (8002d90 <HAL_RCC_ClockConfig+0x1f0>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d109      	bne.n	8002c76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e08e      	b.n	8002d84 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c66:	4b4a      	ldr	r3, [pc, #296]	; (8002d90 <HAL_RCC_ClockConfig+0x1f0>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e086      	b.n	8002d84 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c76:	4b46      	ldr	r3, [pc, #280]	; (8002d90 <HAL_RCC_ClockConfig+0x1f0>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f023 0203 	bic.w	r2, r3, #3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	4943      	ldr	r1, [pc, #268]	; (8002d90 <HAL_RCC_ClockConfig+0x1f0>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c88:	f7ff f872 	bl	8001d70 <HAL_GetTick>
 8002c8c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c8e:	e00a      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c90:	f7ff f86e 	bl	8001d70 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e06e      	b.n	8002d84 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ca6:	4b3a      	ldr	r3, [pc, #232]	; (8002d90 <HAL_RCC_ClockConfig+0x1f0>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 020c 	and.w	r2, r3, #12
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d1eb      	bne.n	8002c90 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d010      	beq.n	8002ce6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	4b31      	ldr	r3, [pc, #196]	; (8002d90 <HAL_RCC_ClockConfig+0x1f0>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d208      	bcs.n	8002ce6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cd4:	4b2e      	ldr	r3, [pc, #184]	; (8002d90 <HAL_RCC_ClockConfig+0x1f0>)
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	492b      	ldr	r1, [pc, #172]	; (8002d90 <HAL_RCC_ClockConfig+0x1f0>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ce6:	4b29      	ldr	r3, [pc, #164]	; (8002d8c <HAL_RCC_ClockConfig+0x1ec>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0307 	and.w	r3, r3, #7
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d210      	bcs.n	8002d16 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cf4:	4b25      	ldr	r3, [pc, #148]	; (8002d8c <HAL_RCC_ClockConfig+0x1ec>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f023 0207 	bic.w	r2, r3, #7
 8002cfc:	4923      	ldr	r1, [pc, #140]	; (8002d8c <HAL_RCC_ClockConfig+0x1ec>)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d04:	4b21      	ldr	r3, [pc, #132]	; (8002d8c <HAL_RCC_ClockConfig+0x1ec>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d001      	beq.n	8002d16 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e036      	b.n	8002d84 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0304 	and.w	r3, r3, #4
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d008      	beq.n	8002d34 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d22:	4b1b      	ldr	r3, [pc, #108]	; (8002d90 <HAL_RCC_ClockConfig+0x1f0>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	4918      	ldr	r1, [pc, #96]	; (8002d90 <HAL_RCC_ClockConfig+0x1f0>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0308 	and.w	r3, r3, #8
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d009      	beq.n	8002d54 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d40:	4b13      	ldr	r3, [pc, #76]	; (8002d90 <HAL_RCC_ClockConfig+0x1f0>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	4910      	ldr	r1, [pc, #64]	; (8002d90 <HAL_RCC_ClockConfig+0x1f0>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d54:	f000 f824 	bl	8002da0 <HAL_RCC_GetSysClockFreq>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	4b0d      	ldr	r3, [pc, #52]	; (8002d90 <HAL_RCC_ClockConfig+0x1f0>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	091b      	lsrs	r3, r3, #4
 8002d60:	f003 030f 	and.w	r3, r3, #15
 8002d64:	490b      	ldr	r1, [pc, #44]	; (8002d94 <HAL_RCC_ClockConfig+0x1f4>)
 8002d66:	5ccb      	ldrb	r3, [r1, r3]
 8002d68:	f003 031f 	and.w	r3, r3, #31
 8002d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d70:	4a09      	ldr	r2, [pc, #36]	; (8002d98 <HAL_RCC_ClockConfig+0x1f8>)
 8002d72:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d74:	4b09      	ldr	r3, [pc, #36]	; (8002d9c <HAL_RCC_ClockConfig+0x1fc>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7fe ffa9 	bl	8001cd0 <HAL_InitTick>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d82:	7afb      	ldrb	r3, [r7, #11]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3710      	adds	r7, #16
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	40022000 	.word	0x40022000
 8002d90:	40021000 	.word	0x40021000
 8002d94:	08008008 	.word	0x08008008
 8002d98:	20000000 	.word	0x20000000
 8002d9c:	20000004 	.word	0x20000004

08002da0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b089      	sub	sp, #36	; 0x24
 8002da4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002da6:	2300      	movs	r3, #0
 8002da8:	61fb      	str	r3, [r7, #28]
 8002daa:	2300      	movs	r3, #0
 8002dac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dae:	4b3e      	ldr	r3, [pc, #248]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 030c 	and.w	r3, r3, #12
 8002db6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002db8:	4b3b      	ldr	r3, [pc, #236]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	f003 0303 	and.w	r3, r3, #3
 8002dc0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d005      	beq.n	8002dd4 <HAL_RCC_GetSysClockFreq+0x34>
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	2b0c      	cmp	r3, #12
 8002dcc:	d121      	bne.n	8002e12 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d11e      	bne.n	8002e12 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002dd4:	4b34      	ldr	r3, [pc, #208]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0308 	and.w	r3, r3, #8
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d107      	bne.n	8002df0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002de0:	4b31      	ldr	r3, [pc, #196]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002de2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002de6:	0a1b      	lsrs	r3, r3, #8
 8002de8:	f003 030f 	and.w	r3, r3, #15
 8002dec:	61fb      	str	r3, [r7, #28]
 8002dee:	e005      	b.n	8002dfc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002df0:	4b2d      	ldr	r3, [pc, #180]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	091b      	lsrs	r3, r3, #4
 8002df6:	f003 030f 	and.w	r3, r3, #15
 8002dfa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002dfc:	4a2b      	ldr	r2, [pc, #172]	; (8002eac <HAL_RCC_GetSysClockFreq+0x10c>)
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e04:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d10d      	bne.n	8002e28 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e10:	e00a      	b.n	8002e28 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	2b04      	cmp	r3, #4
 8002e16:	d102      	bne.n	8002e1e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e18:	4b25      	ldr	r3, [pc, #148]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e1a:	61bb      	str	r3, [r7, #24]
 8002e1c:	e004      	b.n	8002e28 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	2b08      	cmp	r3, #8
 8002e22:	d101      	bne.n	8002e28 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e24:	4b23      	ldr	r3, [pc, #140]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e26:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	2b0c      	cmp	r3, #12
 8002e2c:	d134      	bne.n	8002e98 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e2e:	4b1e      	ldr	r3, [pc, #120]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	f003 0303 	and.w	r3, r3, #3
 8002e36:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d003      	beq.n	8002e46 <HAL_RCC_GetSysClockFreq+0xa6>
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	2b03      	cmp	r3, #3
 8002e42:	d003      	beq.n	8002e4c <HAL_RCC_GetSysClockFreq+0xac>
 8002e44:	e005      	b.n	8002e52 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e46:	4b1a      	ldr	r3, [pc, #104]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e48:	617b      	str	r3, [r7, #20]
      break;
 8002e4a:	e005      	b.n	8002e58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e4c:	4b19      	ldr	r3, [pc, #100]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e4e:	617b      	str	r3, [r7, #20]
      break;
 8002e50:	e002      	b.n	8002e58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	617b      	str	r3, [r7, #20]
      break;
 8002e56:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e58:	4b13      	ldr	r3, [pc, #76]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	091b      	lsrs	r3, r3, #4
 8002e5e:	f003 0307 	and.w	r3, r3, #7
 8002e62:	3301      	adds	r3, #1
 8002e64:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e66:	4b10      	ldr	r3, [pc, #64]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	0a1b      	lsrs	r3, r3, #8
 8002e6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	fb03 f202 	mul.w	r2, r3, r2
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e7c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	0e5b      	lsrs	r3, r3, #25
 8002e84:	f003 0303 	and.w	r3, r3, #3
 8002e88:	3301      	adds	r3, #1
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e96:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e98:	69bb      	ldr	r3, [r7, #24]
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3724      	adds	r7, #36	; 0x24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	40021000 	.word	0x40021000
 8002eac:	08008020 	.word	0x08008020
 8002eb0:	00f42400 	.word	0x00f42400
 8002eb4:	007a1200 	.word	0x007a1200

08002eb8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ebc:	4b03      	ldr	r3, [pc, #12]	; (8002ecc <HAL_RCC_GetHCLKFreq+0x14>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	20000000 	.word	0x20000000

08002ed0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ed4:	f7ff fff0 	bl	8002eb8 <HAL_RCC_GetHCLKFreq>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	4b06      	ldr	r3, [pc, #24]	; (8002ef4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	0a1b      	lsrs	r3, r3, #8
 8002ee0:	f003 0307 	and.w	r3, r3, #7
 8002ee4:	4904      	ldr	r1, [pc, #16]	; (8002ef8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ee6:	5ccb      	ldrb	r3, [r1, r3]
 8002ee8:	f003 031f 	and.w	r3, r3, #31
 8002eec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40021000 	.word	0x40021000
 8002ef8:	08008018 	.word	0x08008018

08002efc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002f00:	f7ff ffda 	bl	8002eb8 <HAL_RCC_GetHCLKFreq>
 8002f04:	4602      	mov	r2, r0
 8002f06:	4b06      	ldr	r3, [pc, #24]	; (8002f20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	0adb      	lsrs	r3, r3, #11
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	4904      	ldr	r1, [pc, #16]	; (8002f24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f12:	5ccb      	ldrb	r3, [r1, r3]
 8002f14:	f003 031f 	and.w	r3, r3, #31
 8002f18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40021000 	.word	0x40021000
 8002f24:	08008018 	.word	0x08008018

08002f28 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f30:	2300      	movs	r3, #0
 8002f32:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f34:	4b2a      	ldr	r3, [pc, #168]	; (8002fe0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d003      	beq.n	8002f48 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f40:	f7ff f9ee 	bl	8002320 <HAL_PWREx_GetVoltageRange>
 8002f44:	6178      	str	r0, [r7, #20]
 8002f46:	e014      	b.n	8002f72 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f48:	4b25      	ldr	r3, [pc, #148]	; (8002fe0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f4c:	4a24      	ldr	r2, [pc, #144]	; (8002fe0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f52:	6593      	str	r3, [r2, #88]	; 0x58
 8002f54:	4b22      	ldr	r3, [pc, #136]	; (8002fe0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f5c:	60fb      	str	r3, [r7, #12]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f60:	f7ff f9de 	bl	8002320 <HAL_PWREx_GetVoltageRange>
 8002f64:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f66:	4b1e      	ldr	r3, [pc, #120]	; (8002fe0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f6a:	4a1d      	ldr	r2, [pc, #116]	; (8002fe0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f70:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f78:	d10b      	bne.n	8002f92 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2b80      	cmp	r3, #128	; 0x80
 8002f7e:	d919      	bls.n	8002fb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2ba0      	cmp	r3, #160	; 0xa0
 8002f84:	d902      	bls.n	8002f8c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f86:	2302      	movs	r3, #2
 8002f88:	613b      	str	r3, [r7, #16]
 8002f8a:	e013      	b.n	8002fb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	613b      	str	r3, [r7, #16]
 8002f90:	e010      	b.n	8002fb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b80      	cmp	r3, #128	; 0x80
 8002f96:	d902      	bls.n	8002f9e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002f98:	2303      	movs	r3, #3
 8002f9a:	613b      	str	r3, [r7, #16]
 8002f9c:	e00a      	b.n	8002fb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2b80      	cmp	r3, #128	; 0x80
 8002fa2:	d102      	bne.n	8002faa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	613b      	str	r3, [r7, #16]
 8002fa8:	e004      	b.n	8002fb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2b70      	cmp	r3, #112	; 0x70
 8002fae:	d101      	bne.n	8002fb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002fb4:	4b0b      	ldr	r3, [pc, #44]	; (8002fe4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f023 0207 	bic.w	r2, r3, #7
 8002fbc:	4909      	ldr	r1, [pc, #36]	; (8002fe4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002fc4:	4b07      	ldr	r3, [pc, #28]	; (8002fe4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0307 	and.w	r3, r3, #7
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d001      	beq.n	8002fd6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e000      	b.n	8002fd8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3718      	adds	r7, #24
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	40022000 	.word	0x40022000

08002fe8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003000:	2b00      	cmp	r3, #0
 8003002:	d041      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003008:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800300c:	d02a      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800300e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003012:	d824      	bhi.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003014:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003018:	d008      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800301a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800301e:	d81e      	bhi.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00a      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003024:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003028:	d010      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800302a:	e018      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800302c:	4b86      	ldr	r3, [pc, #536]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	4a85      	ldr	r2, [pc, #532]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003032:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003036:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003038:	e015      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	3304      	adds	r3, #4
 800303e:	2100      	movs	r1, #0
 8003040:	4618      	mov	r0, r3
 8003042:	f000 fabb 	bl	80035bc <RCCEx_PLLSAI1_Config>
 8003046:	4603      	mov	r3, r0
 8003048:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800304a:	e00c      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	3320      	adds	r3, #32
 8003050:	2100      	movs	r1, #0
 8003052:	4618      	mov	r0, r3
 8003054:	f000 fba6 	bl	80037a4 <RCCEx_PLLSAI2_Config>
 8003058:	4603      	mov	r3, r0
 800305a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800305c:	e003      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	74fb      	strb	r3, [r7, #19]
      break;
 8003062:	e000      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003064:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003066:	7cfb      	ldrb	r3, [r7, #19]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d10b      	bne.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800306c:	4b76      	ldr	r3, [pc, #472]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800306e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003072:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800307a:	4973      	ldr	r1, [pc, #460]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800307c:	4313      	orrs	r3, r2
 800307e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003082:	e001      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003084:	7cfb      	ldrb	r3, [r7, #19]
 8003086:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d041      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003098:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800309c:	d02a      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800309e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80030a2:	d824      	bhi.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80030a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030a8:	d008      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80030aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030ae:	d81e      	bhi.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00a      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80030b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030b8:	d010      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80030ba:	e018      	b.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80030bc:	4b62      	ldr	r3, [pc, #392]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	4a61      	ldr	r2, [pc, #388]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030c6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030c8:	e015      	b.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	3304      	adds	r3, #4
 80030ce:	2100      	movs	r1, #0
 80030d0:	4618      	mov	r0, r3
 80030d2:	f000 fa73 	bl	80035bc <RCCEx_PLLSAI1_Config>
 80030d6:	4603      	mov	r3, r0
 80030d8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030da:	e00c      	b.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	3320      	adds	r3, #32
 80030e0:	2100      	movs	r1, #0
 80030e2:	4618      	mov	r0, r3
 80030e4:	f000 fb5e 	bl	80037a4 <RCCEx_PLLSAI2_Config>
 80030e8:	4603      	mov	r3, r0
 80030ea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030ec:	e003      	b.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	74fb      	strb	r3, [r7, #19]
      break;
 80030f2:	e000      	b.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80030f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030f6:	7cfb      	ldrb	r3, [r7, #19]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10b      	bne.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80030fc:	4b52      	ldr	r3, [pc, #328]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003102:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800310a:	494f      	ldr	r1, [pc, #316]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800310c:	4313      	orrs	r3, r2
 800310e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003112:	e001      	b.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003114:	7cfb      	ldrb	r3, [r7, #19]
 8003116:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 80a0 	beq.w	8003266 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003126:	2300      	movs	r3, #0
 8003128:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800312a:	4b47      	ldr	r3, [pc, #284]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800312c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800312e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003136:	2301      	movs	r3, #1
 8003138:	e000      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800313a:	2300      	movs	r3, #0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00d      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003140:	4b41      	ldr	r3, [pc, #260]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003144:	4a40      	ldr	r2, [pc, #256]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800314a:	6593      	str	r3, [r2, #88]	; 0x58
 800314c:	4b3e      	ldr	r3, [pc, #248]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800314e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003154:	60bb      	str	r3, [r7, #8]
 8003156:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003158:	2301      	movs	r3, #1
 800315a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800315c:	4b3b      	ldr	r3, [pc, #236]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a3a      	ldr	r2, [pc, #232]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003162:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003166:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003168:	f7fe fe02 	bl	8001d70 <HAL_GetTick>
 800316c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800316e:	e009      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003170:	f7fe fdfe 	bl	8001d70 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d902      	bls.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	74fb      	strb	r3, [r7, #19]
        break;
 8003182:	e005      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003184:	4b31      	ldr	r3, [pc, #196]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800318c:	2b00      	cmp	r3, #0
 800318e:	d0ef      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003190:	7cfb      	ldrb	r3, [r7, #19]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d15c      	bne.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003196:	4b2c      	ldr	r3, [pc, #176]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800319c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031a0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d01f      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d019      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80031b4:	4b24      	ldr	r3, [pc, #144]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80031c0:	4b21      	ldr	r3, [pc, #132]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c6:	4a20      	ldr	r2, [pc, #128]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031d0:	4b1d      	ldr	r3, [pc, #116]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d6:	4a1c      	ldr	r2, [pc, #112]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80031e0:	4a19      	ldr	r2, [pc, #100]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d016      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f2:	f7fe fdbd 	bl	8001d70 <HAL_GetTick>
 80031f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031f8:	e00b      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031fa:	f7fe fdb9 	bl	8001d70 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	f241 3288 	movw	r2, #5000	; 0x1388
 8003208:	4293      	cmp	r3, r2
 800320a:	d902      	bls.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	74fb      	strb	r3, [r7, #19]
            break;
 8003210:	e006      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003212:	4b0d      	ldr	r3, [pc, #52]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d0ec      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003220:	7cfb      	ldrb	r3, [r7, #19]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10c      	bne.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003226:	4b08      	ldr	r3, [pc, #32]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800322c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003236:	4904      	ldr	r1, [pc, #16]	; (8003248 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003238:	4313      	orrs	r3, r2
 800323a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800323e:	e009      	b.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003240:	7cfb      	ldrb	r3, [r7, #19]
 8003242:	74bb      	strb	r3, [r7, #18]
 8003244:	e006      	b.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003246:	bf00      	nop
 8003248:	40021000 	.word	0x40021000
 800324c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003250:	7cfb      	ldrb	r3, [r7, #19]
 8003252:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003254:	7c7b      	ldrb	r3, [r7, #17]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d105      	bne.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800325a:	4b9e      	ldr	r3, [pc, #632]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800325c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800325e:	4a9d      	ldr	r2, [pc, #628]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003260:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003264:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00a      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003272:	4b98      	ldr	r3, [pc, #608]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003278:	f023 0203 	bic.w	r2, r3, #3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003280:	4994      	ldr	r1, [pc, #592]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003282:	4313      	orrs	r3, r2
 8003284:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00a      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003294:	4b8f      	ldr	r3, [pc, #572]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800329a:	f023 020c 	bic.w	r2, r3, #12
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a2:	498c      	ldr	r1, [pc, #560]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0304 	and.w	r3, r3, #4
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00a      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032b6:	4b87      	ldr	r3, [pc, #540]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c4:	4983      	ldr	r1, [pc, #524]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0308 	and.w	r3, r3, #8
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00a      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80032d8:	4b7e      	ldr	r3, [pc, #504]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e6:	497b      	ldr	r1, [pc, #492]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0310 	and.w	r3, r3, #16
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00a      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80032fa:	4b76      	ldr	r3, [pc, #472]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003300:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003308:	4972      	ldr	r1, [pc, #456]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800330a:	4313      	orrs	r3, r2
 800330c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0320 	and.w	r3, r3, #32
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00a      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800331c:	4b6d      	ldr	r3, [pc, #436]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800331e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003322:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800332a:	496a      	ldr	r1, [pc, #424]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800332c:	4313      	orrs	r3, r2
 800332e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00a      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800333e:	4b65      	ldr	r3, [pc, #404]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003344:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800334c:	4961      	ldr	r1, [pc, #388]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800334e:	4313      	orrs	r3, r2
 8003350:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00a      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003360:	4b5c      	ldr	r3, [pc, #368]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003366:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800336e:	4959      	ldr	r1, [pc, #356]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003370:	4313      	orrs	r3, r2
 8003372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00a      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003382:	4b54      	ldr	r3, [pc, #336]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003388:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003390:	4950      	ldr	r1, [pc, #320]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003392:	4313      	orrs	r3, r2
 8003394:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00a      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033a4:	4b4b      	ldr	r3, [pc, #300]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033aa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b2:	4948      	ldr	r1, [pc, #288]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00a      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033c6:	4b43      	ldr	r3, [pc, #268]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d4:	493f      	ldr	r1, [pc, #252]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d028      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033e8:	4b3a      	ldr	r3, [pc, #232]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033f6:	4937      	ldr	r1, [pc, #220]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003402:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003406:	d106      	bne.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003408:	4b32      	ldr	r3, [pc, #200]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	4a31      	ldr	r2, [pc, #196]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800340e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003412:	60d3      	str	r3, [r2, #12]
 8003414:	e011      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800341a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800341e:	d10c      	bne.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	3304      	adds	r3, #4
 8003424:	2101      	movs	r1, #1
 8003426:	4618      	mov	r0, r3
 8003428:	f000 f8c8 	bl	80035bc <RCCEx_PLLSAI1_Config>
 800342c:	4603      	mov	r3, r0
 800342e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003430:	7cfb      	ldrb	r3, [r7, #19]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d001      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003436:	7cfb      	ldrb	r3, [r7, #19]
 8003438:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d028      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003446:	4b23      	ldr	r3, [pc, #140]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800344c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003454:	491f      	ldr	r1, [pc, #124]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003456:	4313      	orrs	r3, r2
 8003458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003460:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003464:	d106      	bne.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003466:	4b1b      	ldr	r3, [pc, #108]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	4a1a      	ldr	r2, [pc, #104]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800346c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003470:	60d3      	str	r3, [r2, #12]
 8003472:	e011      	b.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003478:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800347c:	d10c      	bne.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	3304      	adds	r3, #4
 8003482:	2101      	movs	r1, #1
 8003484:	4618      	mov	r0, r3
 8003486:	f000 f899 	bl	80035bc <RCCEx_PLLSAI1_Config>
 800348a:	4603      	mov	r3, r0
 800348c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800348e:	7cfb      	ldrb	r3, [r7, #19]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d001      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003494:	7cfb      	ldrb	r3, [r7, #19]
 8003496:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d02b      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034a4:	4b0b      	ldr	r3, [pc, #44]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034b2:	4908      	ldr	r1, [pc, #32]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034c2:	d109      	bne.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034c4:	4b03      	ldr	r3, [pc, #12]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	4a02      	ldr	r2, [pc, #8]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034ce:	60d3      	str	r3, [r2, #12]
 80034d0:	e014      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80034d2:	bf00      	nop
 80034d4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034e0:	d10c      	bne.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	3304      	adds	r3, #4
 80034e6:	2101      	movs	r1, #1
 80034e8:	4618      	mov	r0, r3
 80034ea:	f000 f867 	bl	80035bc <RCCEx_PLLSAI1_Config>
 80034ee:	4603      	mov	r3, r0
 80034f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034f2:	7cfb      	ldrb	r3, [r7, #19]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d001      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80034f8:	7cfb      	ldrb	r3, [r7, #19]
 80034fa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d02f      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003508:	4b2b      	ldr	r3, [pc, #172]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800350a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800350e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003516:	4928      	ldr	r1, [pc, #160]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003518:	4313      	orrs	r3, r2
 800351a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003522:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003526:	d10d      	bne.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	3304      	adds	r3, #4
 800352c:	2102      	movs	r1, #2
 800352e:	4618      	mov	r0, r3
 8003530:	f000 f844 	bl	80035bc <RCCEx_PLLSAI1_Config>
 8003534:	4603      	mov	r3, r0
 8003536:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003538:	7cfb      	ldrb	r3, [r7, #19]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d014      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800353e:	7cfb      	ldrb	r3, [r7, #19]
 8003540:	74bb      	strb	r3, [r7, #18]
 8003542:	e011      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003548:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800354c:	d10c      	bne.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	3320      	adds	r3, #32
 8003552:	2102      	movs	r1, #2
 8003554:	4618      	mov	r0, r3
 8003556:	f000 f925 	bl	80037a4 <RCCEx_PLLSAI2_Config>
 800355a:	4603      	mov	r3, r0
 800355c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800355e:	7cfb      	ldrb	r3, [r7, #19]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d001      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003564:	7cfb      	ldrb	r3, [r7, #19]
 8003566:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00a      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003574:	4b10      	ldr	r3, [pc, #64]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800357a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003582:	490d      	ldr	r1, [pc, #52]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003584:	4313      	orrs	r3, r2
 8003586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00b      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003596:	4b08      	ldr	r3, [pc, #32]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035a6:	4904      	ldr	r1, [pc, #16]	; (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80035ae:	7cbb      	ldrb	r3, [r7, #18]
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3718      	adds	r7, #24
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	40021000 	.word	0x40021000

080035bc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035c6:	2300      	movs	r3, #0
 80035c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035ca:	4b75      	ldr	r3, [pc, #468]	; (80037a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	f003 0303 	and.w	r3, r3, #3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d018      	beq.n	8003608 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80035d6:	4b72      	ldr	r3, [pc, #456]	; (80037a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	f003 0203 	and.w	r2, r3, #3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d10d      	bne.n	8003602 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
       ||
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d009      	beq.n	8003602 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80035ee:	4b6c      	ldr	r3, [pc, #432]	; (80037a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	091b      	lsrs	r3, r3, #4
 80035f4:	f003 0307 	and.w	r3, r3, #7
 80035f8:	1c5a      	adds	r2, r3, #1
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
       ||
 80035fe:	429a      	cmp	r2, r3
 8003600:	d047      	beq.n	8003692 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	73fb      	strb	r3, [r7, #15]
 8003606:	e044      	b.n	8003692 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2b03      	cmp	r3, #3
 800360e:	d018      	beq.n	8003642 <RCCEx_PLLSAI1_Config+0x86>
 8003610:	2b03      	cmp	r3, #3
 8003612:	d825      	bhi.n	8003660 <RCCEx_PLLSAI1_Config+0xa4>
 8003614:	2b01      	cmp	r3, #1
 8003616:	d002      	beq.n	800361e <RCCEx_PLLSAI1_Config+0x62>
 8003618:	2b02      	cmp	r3, #2
 800361a:	d009      	beq.n	8003630 <RCCEx_PLLSAI1_Config+0x74>
 800361c:	e020      	b.n	8003660 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800361e:	4b60      	ldr	r3, [pc, #384]	; (80037a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d11d      	bne.n	8003666 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800362e:	e01a      	b.n	8003666 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003630:	4b5b      	ldr	r3, [pc, #364]	; (80037a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003638:	2b00      	cmp	r3, #0
 800363a:	d116      	bne.n	800366a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003640:	e013      	b.n	800366a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003642:	4b57      	ldr	r3, [pc, #348]	; (80037a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10f      	bne.n	800366e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800364e:	4b54      	ldr	r3, [pc, #336]	; (80037a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d109      	bne.n	800366e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800365e:	e006      	b.n	800366e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	73fb      	strb	r3, [r7, #15]
      break;
 8003664:	e004      	b.n	8003670 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003666:	bf00      	nop
 8003668:	e002      	b.n	8003670 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800366a:	bf00      	nop
 800366c:	e000      	b.n	8003670 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800366e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003670:	7bfb      	ldrb	r3, [r7, #15]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d10d      	bne.n	8003692 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003676:	4b4a      	ldr	r3, [pc, #296]	; (80037a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6819      	ldr	r1, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	3b01      	subs	r3, #1
 8003688:	011b      	lsls	r3, r3, #4
 800368a:	430b      	orrs	r3, r1
 800368c:	4944      	ldr	r1, [pc, #272]	; (80037a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800368e:	4313      	orrs	r3, r2
 8003690:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003692:	7bfb      	ldrb	r3, [r7, #15]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d17d      	bne.n	8003794 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003698:	4b41      	ldr	r3, [pc, #260]	; (80037a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a40      	ldr	r2, [pc, #256]	; (80037a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800369e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80036a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036a4:	f7fe fb64 	bl	8001d70 <HAL_GetTick>
 80036a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036aa:	e009      	b.n	80036c0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036ac:	f7fe fb60 	bl	8001d70 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d902      	bls.n	80036c0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	73fb      	strb	r3, [r7, #15]
        break;
 80036be:	e005      	b.n	80036cc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036c0:	4b37      	ldr	r3, [pc, #220]	; (80037a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1ef      	bne.n	80036ac <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80036cc:	7bfb      	ldrb	r3, [r7, #15]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d160      	bne.n	8003794 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d111      	bne.n	80036fc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036d8:	4b31      	ldr	r3, [pc, #196]	; (80037a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80036e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	6892      	ldr	r2, [r2, #8]
 80036e8:	0211      	lsls	r1, r2, #8
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	68d2      	ldr	r2, [r2, #12]
 80036ee:	0912      	lsrs	r2, r2, #4
 80036f0:	0452      	lsls	r2, r2, #17
 80036f2:	430a      	orrs	r2, r1
 80036f4:	492a      	ldr	r1, [pc, #168]	; (80037a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	610b      	str	r3, [r1, #16]
 80036fa:	e027      	b.n	800374c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d112      	bne.n	8003728 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003702:	4b27      	ldr	r3, [pc, #156]	; (80037a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800370a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	6892      	ldr	r2, [r2, #8]
 8003712:	0211      	lsls	r1, r2, #8
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	6912      	ldr	r2, [r2, #16]
 8003718:	0852      	lsrs	r2, r2, #1
 800371a:	3a01      	subs	r2, #1
 800371c:	0552      	lsls	r2, r2, #21
 800371e:	430a      	orrs	r2, r1
 8003720:	491f      	ldr	r1, [pc, #124]	; (80037a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003722:	4313      	orrs	r3, r2
 8003724:	610b      	str	r3, [r1, #16]
 8003726:	e011      	b.n	800374c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003728:	4b1d      	ldr	r3, [pc, #116]	; (80037a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003730:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	6892      	ldr	r2, [r2, #8]
 8003738:	0211      	lsls	r1, r2, #8
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	6952      	ldr	r2, [r2, #20]
 800373e:	0852      	lsrs	r2, r2, #1
 8003740:	3a01      	subs	r2, #1
 8003742:	0652      	lsls	r2, r2, #25
 8003744:	430a      	orrs	r2, r1
 8003746:	4916      	ldr	r1, [pc, #88]	; (80037a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003748:	4313      	orrs	r3, r2
 800374a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800374c:	4b14      	ldr	r3, [pc, #80]	; (80037a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a13      	ldr	r2, [pc, #76]	; (80037a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003752:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003756:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003758:	f7fe fb0a 	bl	8001d70 <HAL_GetTick>
 800375c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800375e:	e009      	b.n	8003774 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003760:	f7fe fb06 	bl	8001d70 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b02      	cmp	r3, #2
 800376c:	d902      	bls.n	8003774 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	73fb      	strb	r3, [r7, #15]
          break;
 8003772:	e005      	b.n	8003780 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003774:	4b0a      	ldr	r3, [pc, #40]	; (80037a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d0ef      	beq.n	8003760 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003780:	7bfb      	ldrb	r3, [r7, #15]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d106      	bne.n	8003794 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003786:	4b06      	ldr	r3, [pc, #24]	; (80037a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003788:	691a      	ldr	r2, [r3, #16]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	4904      	ldr	r1, [pc, #16]	; (80037a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003790:	4313      	orrs	r3, r2
 8003792:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003794:	7bfb      	ldrb	r3, [r7, #15]
}
 8003796:	4618      	mov	r0, r3
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	40021000 	.word	0x40021000

080037a4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037ae:	2300      	movs	r3, #0
 80037b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037b2:	4b6a      	ldr	r3, [pc, #424]	; (800395c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	f003 0303 	and.w	r3, r3, #3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d018      	beq.n	80037f0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80037be:	4b67      	ldr	r3, [pc, #412]	; (800395c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	f003 0203 	and.w	r2, r3, #3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d10d      	bne.n	80037ea <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
       ||
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d009      	beq.n	80037ea <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80037d6:	4b61      	ldr	r3, [pc, #388]	; (800395c <RCCEx_PLLSAI2_Config+0x1b8>)
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	091b      	lsrs	r3, r3, #4
 80037dc:	f003 0307 	and.w	r3, r3, #7
 80037e0:	1c5a      	adds	r2, r3, #1
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
       ||
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d047      	beq.n	800387a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	73fb      	strb	r3, [r7, #15]
 80037ee:	e044      	b.n	800387a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2b03      	cmp	r3, #3
 80037f6:	d018      	beq.n	800382a <RCCEx_PLLSAI2_Config+0x86>
 80037f8:	2b03      	cmp	r3, #3
 80037fa:	d825      	bhi.n	8003848 <RCCEx_PLLSAI2_Config+0xa4>
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d002      	beq.n	8003806 <RCCEx_PLLSAI2_Config+0x62>
 8003800:	2b02      	cmp	r3, #2
 8003802:	d009      	beq.n	8003818 <RCCEx_PLLSAI2_Config+0x74>
 8003804:	e020      	b.n	8003848 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003806:	4b55      	ldr	r3, [pc, #340]	; (800395c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d11d      	bne.n	800384e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003816:	e01a      	b.n	800384e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003818:	4b50      	ldr	r3, [pc, #320]	; (800395c <RCCEx_PLLSAI2_Config+0x1b8>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003820:	2b00      	cmp	r3, #0
 8003822:	d116      	bne.n	8003852 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003828:	e013      	b.n	8003852 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800382a:	4b4c      	ldr	r3, [pc, #304]	; (800395c <RCCEx_PLLSAI2_Config+0x1b8>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10f      	bne.n	8003856 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003836:	4b49      	ldr	r3, [pc, #292]	; (800395c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d109      	bne.n	8003856 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003846:	e006      	b.n	8003856 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	73fb      	strb	r3, [r7, #15]
      break;
 800384c:	e004      	b.n	8003858 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800384e:	bf00      	nop
 8003850:	e002      	b.n	8003858 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003852:	bf00      	nop
 8003854:	e000      	b.n	8003858 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003856:	bf00      	nop
    }

    if(status == HAL_OK)
 8003858:	7bfb      	ldrb	r3, [r7, #15]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10d      	bne.n	800387a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800385e:	4b3f      	ldr	r3, [pc, #252]	; (800395c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6819      	ldr	r1, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	3b01      	subs	r3, #1
 8003870:	011b      	lsls	r3, r3, #4
 8003872:	430b      	orrs	r3, r1
 8003874:	4939      	ldr	r1, [pc, #228]	; (800395c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003876:	4313      	orrs	r3, r2
 8003878:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800387a:	7bfb      	ldrb	r3, [r7, #15]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d167      	bne.n	8003950 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003880:	4b36      	ldr	r3, [pc, #216]	; (800395c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a35      	ldr	r2, [pc, #212]	; (800395c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003886:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800388a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800388c:	f7fe fa70 	bl	8001d70 <HAL_GetTick>
 8003890:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003892:	e009      	b.n	80038a8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003894:	f7fe fa6c 	bl	8001d70 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d902      	bls.n	80038a8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	73fb      	strb	r3, [r7, #15]
        break;
 80038a6:	e005      	b.n	80038b4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80038a8:	4b2c      	ldr	r3, [pc, #176]	; (800395c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d1ef      	bne.n	8003894 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80038b4:	7bfb      	ldrb	r3, [r7, #15]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d14a      	bne.n	8003950 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d111      	bne.n	80038e4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038c0:	4b26      	ldr	r3, [pc, #152]	; (800395c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80038c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	6892      	ldr	r2, [r2, #8]
 80038d0:	0211      	lsls	r1, r2, #8
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	68d2      	ldr	r2, [r2, #12]
 80038d6:	0912      	lsrs	r2, r2, #4
 80038d8:	0452      	lsls	r2, r2, #17
 80038da:	430a      	orrs	r2, r1
 80038dc:	491f      	ldr	r1, [pc, #124]	; (800395c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	614b      	str	r3, [r1, #20]
 80038e2:	e011      	b.n	8003908 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038e4:	4b1d      	ldr	r3, [pc, #116]	; (800395c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80038ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	6892      	ldr	r2, [r2, #8]
 80038f4:	0211      	lsls	r1, r2, #8
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	6912      	ldr	r2, [r2, #16]
 80038fa:	0852      	lsrs	r2, r2, #1
 80038fc:	3a01      	subs	r2, #1
 80038fe:	0652      	lsls	r2, r2, #25
 8003900:	430a      	orrs	r2, r1
 8003902:	4916      	ldr	r1, [pc, #88]	; (800395c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003904:	4313      	orrs	r3, r2
 8003906:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003908:	4b14      	ldr	r3, [pc, #80]	; (800395c <RCCEx_PLLSAI2_Config+0x1b8>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a13      	ldr	r2, [pc, #76]	; (800395c <RCCEx_PLLSAI2_Config+0x1b8>)
 800390e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003912:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003914:	f7fe fa2c 	bl	8001d70 <HAL_GetTick>
 8003918:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800391a:	e009      	b.n	8003930 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800391c:	f7fe fa28 	bl	8001d70 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d902      	bls.n	8003930 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	73fb      	strb	r3, [r7, #15]
          break;
 800392e:	e005      	b.n	800393c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003930:	4b0a      	ldr	r3, [pc, #40]	; (800395c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d0ef      	beq.n	800391c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800393c:	7bfb      	ldrb	r3, [r7, #15]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d106      	bne.n	8003950 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003942:	4b06      	ldr	r3, [pc, #24]	; (800395c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003944:	695a      	ldr	r2, [r3, #20]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	4904      	ldr	r1, [pc, #16]	; (800395c <RCCEx_PLLSAI2_Config+0x1b8>)
 800394c:	4313      	orrs	r3, r2
 800394e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003950:	7bfb      	ldrb	r3, [r7, #15]
}
 8003952:	4618      	mov	r0, r3
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	40021000 	.word	0x40021000

08003960 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e095      	b.n	8003a9e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003976:	2b00      	cmp	r3, #0
 8003978:	d108      	bne.n	800398c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003982:	d009      	beq.n	8003998 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	61da      	str	r2, [r3, #28]
 800398a:	e005      	b.n	8003998 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d106      	bne.n	80039b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7fd ff70 	bl	8001898 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2202      	movs	r2, #2
 80039bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039ce:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039d8:	d902      	bls.n	80039e0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80039da:	2300      	movs	r3, #0
 80039dc:	60fb      	str	r3, [r7, #12]
 80039de:	e002      	b.n	80039e6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80039e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039e4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80039ee:	d007      	beq.n	8003a00 <HAL_SPI_Init+0xa0>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039f8:	d002      	beq.n	8003a00 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003a10:	431a      	orrs	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	695b      	ldr	r3, [r3, #20]
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	431a      	orrs	r2, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	69db      	ldr	r3, [r3, #28]
 8003a34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a38:	431a      	orrs	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a42:	ea42 0103 	orr.w	r1, r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	430a      	orrs	r2, r1
 8003a54:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	0c1b      	lsrs	r3, r3, #16
 8003a5c:	f003 0204 	and.w	r2, r3, #4
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a64:	f003 0310 	and.w	r3, r3, #16
 8003a68:	431a      	orrs	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a6e:	f003 0308 	and.w	r3, r3, #8
 8003a72:	431a      	orrs	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003a7c:	ea42 0103 	orr.w	r1, r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b08a      	sub	sp, #40	; 0x28
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	60f8      	str	r0, [r7, #12]
 8003aae:	60b9      	str	r1, [r7, #8]
 8003ab0:	607a      	str	r2, [r7, #4]
 8003ab2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d101      	bne.n	8003acc <HAL_SPI_TransmitReceive+0x26>
 8003ac8:	2302      	movs	r3, #2
 8003aca:	e1fb      	b.n	8003ec4 <HAL_SPI_TransmitReceive+0x41e>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ad4:	f7fe f94c 	bl	8001d70 <HAL_GetTick>
 8003ad8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ae0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003ae8:	887b      	ldrh	r3, [r7, #2]
 8003aea:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003aec:	887b      	ldrh	r3, [r7, #2]
 8003aee:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003af0:	7efb      	ldrb	r3, [r7, #27]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d00e      	beq.n	8003b14 <HAL_SPI_TransmitReceive+0x6e>
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003afc:	d106      	bne.n	8003b0c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d102      	bne.n	8003b0c <HAL_SPI_TransmitReceive+0x66>
 8003b06:	7efb      	ldrb	r3, [r7, #27]
 8003b08:	2b04      	cmp	r3, #4
 8003b0a:	d003      	beq.n	8003b14 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003b12:	e1cd      	b.n	8003eb0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d005      	beq.n	8003b26 <HAL_SPI_TransmitReceive+0x80>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d002      	beq.n	8003b26 <HAL_SPI_TransmitReceive+0x80>
 8003b20:	887b      	ldrh	r3, [r7, #2]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d103      	bne.n	8003b2e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003b2c:	e1c0      	b.n	8003eb0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b04      	cmp	r3, #4
 8003b38:	d003      	beq.n	8003b42 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2205      	movs	r2, #5
 8003b3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	887a      	ldrh	r2, [r7, #2]
 8003b52:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	887a      	ldrh	r2, [r7, #2]
 8003b5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	68ba      	ldr	r2, [r7, #8]
 8003b62:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	887a      	ldrh	r2, [r7, #2]
 8003b68:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	887a      	ldrh	r2, [r7, #2]
 8003b6e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b84:	d802      	bhi.n	8003b8c <HAL_SPI_TransmitReceive+0xe6>
 8003b86:	8a3b      	ldrh	r3, [r7, #16]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d908      	bls.n	8003b9e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	685a      	ldr	r2, [r3, #4]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b9a:	605a      	str	r2, [r3, #4]
 8003b9c:	e007      	b.n	8003bae <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	685a      	ldr	r2, [r3, #4]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003bac:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb8:	2b40      	cmp	r3, #64	; 0x40
 8003bba:	d007      	beq.n	8003bcc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bd4:	d97c      	bls.n	8003cd0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d002      	beq.n	8003be4 <HAL_SPI_TransmitReceive+0x13e>
 8003bde:	8a7b      	ldrh	r3, [r7, #18]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d169      	bne.n	8003cb8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be8:	881a      	ldrh	r2, [r3, #0]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf4:	1c9a      	adds	r2, r3, #2
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	3b01      	subs	r3, #1
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c08:	e056      	b.n	8003cb8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f003 0302 	and.w	r3, r3, #2
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d11b      	bne.n	8003c50 <HAL_SPI_TransmitReceive+0x1aa>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d016      	beq.n	8003c50 <HAL_SPI_TransmitReceive+0x1aa>
 8003c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d113      	bne.n	8003c50 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c2c:	881a      	ldrh	r2, [r3, #0]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c38:	1c9a      	adds	r2, r3, #2
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	3b01      	subs	r3, #1
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d11c      	bne.n	8003c98 <HAL_SPI_TransmitReceive+0x1f2>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d016      	beq.n	8003c98 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68da      	ldr	r2, [r3, #12]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c74:	b292      	uxth	r2, r2
 8003c76:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7c:	1c9a      	adds	r2, r3, #2
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	b29a      	uxth	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c94:	2301      	movs	r3, #1
 8003c96:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003c98:	f7fe f86a 	bl	8001d70 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d807      	bhi.n	8003cb8 <HAL_SPI_TransmitReceive+0x212>
 8003ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cae:	d003      	beq.n	8003cb8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003cb6:	e0fb      	b.n	8003eb0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1a3      	bne.n	8003c0a <HAL_SPI_TransmitReceive+0x164>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d19d      	bne.n	8003c0a <HAL_SPI_TransmitReceive+0x164>
 8003cce:	e0df      	b.n	8003e90 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d003      	beq.n	8003ce0 <HAL_SPI_TransmitReceive+0x23a>
 8003cd8:	8a7b      	ldrh	r3, [r7, #18]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	f040 80cb 	bne.w	8003e76 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d912      	bls.n	8003d10 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cee:	881a      	ldrh	r2, [r3, #0]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfa:	1c9a      	adds	r2, r3, #2
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	3b02      	subs	r3, #2
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d0e:	e0b2      	b.n	8003e76 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	330c      	adds	r3, #12
 8003d1a:	7812      	ldrb	r2, [r2, #0]
 8003d1c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d22:	1c5a      	adds	r2, r3, #1
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	b29a      	uxth	r2, r3
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d36:	e09e      	b.n	8003e76 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d134      	bne.n	8003db0 <HAL_SPI_TransmitReceive+0x30a>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d02f      	beq.n	8003db0 <HAL_SPI_TransmitReceive+0x30a>
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d12c      	bne.n	8003db0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d912      	bls.n	8003d86 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d64:	881a      	ldrh	r2, [r3, #0]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d70:	1c9a      	adds	r2, r3, #2
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	3b02      	subs	r3, #2
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d84:	e012      	b.n	8003dac <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	330c      	adds	r3, #12
 8003d90:	7812      	ldrb	r2, [r2, #0]
 8003d92:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d98:	1c5a      	adds	r2, r3, #1
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	3b01      	subs	r3, #1
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003dac:	2300      	movs	r3, #0
 8003dae:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d148      	bne.n	8003e50 <HAL_SPI_TransmitReceive+0x3aa>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d042      	beq.n	8003e50 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d923      	bls.n	8003e1e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68da      	ldr	r2, [r3, #12]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de0:	b292      	uxth	r2, r2
 8003de2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de8:	1c9a      	adds	r2, r3, #2
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	3b02      	subs	r3, #2
 8003df8:	b29a      	uxth	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d81f      	bhi.n	8003e4c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	685a      	ldr	r2, [r3, #4]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e1a:	605a      	str	r2, [r3, #4]
 8003e1c:	e016      	b.n	8003e4c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f103 020c 	add.w	r2, r3, #12
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2a:	7812      	ldrb	r2, [r2, #0]
 8003e2c:	b2d2      	uxtb	r2, r2
 8003e2e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e34:	1c5a      	adds	r2, r3, #1
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	3b01      	subs	r3, #1
 8003e44:	b29a      	uxth	r2, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003e50:	f7fd ff8e 	bl	8001d70 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d803      	bhi.n	8003e68 <HAL_SPI_TransmitReceive+0x3c2>
 8003e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e66:	d102      	bne.n	8003e6e <HAL_SPI_TransmitReceive+0x3c8>
 8003e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d103      	bne.n	8003e76 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003e74:	e01c      	b.n	8003eb0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	f47f af5b 	bne.w	8003d38 <HAL_SPI_TransmitReceive+0x292>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f47f af54 	bne.w	8003d38 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e90:	69fa      	ldr	r2, [r7, #28]
 8003e92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	f000 f937 	bl	8004108 <SPI_EndRxTxTransaction>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d006      	beq.n	8003eae <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2220      	movs	r2, #32
 8003eaa:	661a      	str	r2, [r3, #96]	; 0x60
 8003eac:	e000      	b.n	8003eb0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003eae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003ec0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3728      	adds	r7, #40	; 0x28
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b088      	sub	sp, #32
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	603b      	str	r3, [r7, #0]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003edc:	f7fd ff48 	bl	8001d70 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee4:	1a9b      	subs	r3, r3, r2
 8003ee6:	683a      	ldr	r2, [r7, #0]
 8003ee8:	4413      	add	r3, r2
 8003eea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003eec:	f7fd ff40 	bl	8001d70 <HAL_GetTick>
 8003ef0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ef2:	4b39      	ldr	r3, [pc, #228]	; (8003fd8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	015b      	lsls	r3, r3, #5
 8003ef8:	0d1b      	lsrs	r3, r3, #20
 8003efa:	69fa      	ldr	r2, [r7, #28]
 8003efc:	fb02 f303 	mul.w	r3, r2, r3
 8003f00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f02:	e054      	b.n	8003fae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f0a:	d050      	beq.n	8003fae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f0c:	f7fd ff30 	bl	8001d70 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	69fa      	ldr	r2, [r7, #28]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d902      	bls.n	8003f22 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d13d      	bne.n	8003f9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	685a      	ldr	r2, [r3, #4]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f3a:	d111      	bne.n	8003f60 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f44:	d004      	beq.n	8003f50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f4e:	d107      	bne.n	8003f60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f68:	d10f      	bne.n	8003f8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f78:	601a      	str	r2, [r3, #0]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e017      	b.n	8003fce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d101      	bne.n	8003fa8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	3b01      	subs	r3, #1
 8003fac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	689a      	ldr	r2, [r3, #8]
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	68ba      	ldr	r2, [r7, #8]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	bf0c      	ite	eq
 8003fbe:	2301      	moveq	r3, #1
 8003fc0:	2300      	movne	r3, #0
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	79fb      	ldrb	r3, [r7, #7]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d19b      	bne.n	8003f04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3720      	adds	r7, #32
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	20000000 	.word	0x20000000

08003fdc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b08a      	sub	sp, #40	; 0x28
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
 8003fe8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003fea:	2300      	movs	r3, #0
 8003fec:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003fee:	f7fd febf 	bl	8001d70 <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff6:	1a9b      	subs	r3, r3, r2
 8003ff8:	683a      	ldr	r2, [r7, #0]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003ffe:	f7fd feb7 	bl	8001d70 <HAL_GetTick>
 8004002:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	330c      	adds	r3, #12
 800400a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800400c:	4b3d      	ldr	r3, [pc, #244]	; (8004104 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	4613      	mov	r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	4413      	add	r3, r2
 8004016:	00da      	lsls	r2, r3, #3
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	0d1b      	lsrs	r3, r3, #20
 800401c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800401e:	fb02 f303 	mul.w	r3, r2, r3
 8004022:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004024:	e060      	b.n	80040e8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800402c:	d107      	bne.n	800403e <SPI_WaitFifoStateUntilTimeout+0x62>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d104      	bne.n	800403e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	b2db      	uxtb	r3, r3
 800403a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800403c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004044:	d050      	beq.n	80040e8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004046:	f7fd fe93 	bl	8001d70 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	6a3b      	ldr	r3, [r7, #32]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004052:	429a      	cmp	r2, r3
 8004054:	d902      	bls.n	800405c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004058:	2b00      	cmp	r3, #0
 800405a:	d13d      	bne.n	80040d8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800406a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004074:	d111      	bne.n	800409a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800407e:	d004      	beq.n	800408a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004088:	d107      	bne.n	800409a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004098:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040a2:	d10f      	bne.n	80040c4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040b2:	601a      	str	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040c2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e010      	b.n	80040fa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80040de:	2300      	movs	r3, #0
 80040e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	3b01      	subs	r3, #1
 80040e6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689a      	ldr	r2, [r3, #8]
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	4013      	ands	r3, r2
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d196      	bne.n	8004026 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3728      	adds	r7, #40	; 0x28
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	20000000 	.word	0x20000000

08004108 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af02      	add	r7, sp, #8
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	9300      	str	r3, [sp, #0]
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	2200      	movs	r2, #0
 800411c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004120:	68f8      	ldr	r0, [r7, #12]
 8004122:	f7ff ff5b 	bl	8003fdc <SPI_WaitFifoStateUntilTimeout>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d007      	beq.n	800413c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004130:	f043 0220 	orr.w	r2, r3, #32
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e027      	b.n	800418c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	9300      	str	r3, [sp, #0]
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	2200      	movs	r2, #0
 8004144:	2180      	movs	r1, #128	; 0x80
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	f7ff fec0 	bl	8003ecc <SPI_WaitFlagStateUntilTimeout>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d007      	beq.n	8004162 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004156:	f043 0220 	orr.w	r2, r3, #32
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e014      	b.n	800418c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	9300      	str	r3, [sp, #0]
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	2200      	movs	r2, #0
 800416a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f7ff ff34 	bl	8003fdc <SPI_WaitFifoStateUntilTimeout>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d007      	beq.n	800418a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800417e:	f043 0220 	orr.w	r2, r3, #32
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e000      	b.n	800418c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	3710      	adds	r7, #16
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d101      	bne.n	80041a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e049      	b.n	800423a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d106      	bne.n	80041c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f7fd fbc0 	bl	8001940 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2202      	movs	r2, #2
 80041c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	3304      	adds	r3, #4
 80041d0:	4619      	mov	r1, r3
 80041d2:	4610      	mov	r0, r2
 80041d4:	f000 f968 	bl	80044a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3708      	adds	r7, #8
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
	...

08004244 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b01      	cmp	r3, #1
 8004256:	d001      	beq.n	800425c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e047      	b.n	80042ec <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2202      	movs	r2, #2
 8004260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a23      	ldr	r2, [pc, #140]	; (80042f8 <HAL_TIM_Base_Start+0xb4>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d01d      	beq.n	80042aa <HAL_TIM_Base_Start+0x66>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004276:	d018      	beq.n	80042aa <HAL_TIM_Base_Start+0x66>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a1f      	ldr	r2, [pc, #124]	; (80042fc <HAL_TIM_Base_Start+0xb8>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d013      	beq.n	80042aa <HAL_TIM_Base_Start+0x66>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a1e      	ldr	r2, [pc, #120]	; (8004300 <HAL_TIM_Base_Start+0xbc>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d00e      	beq.n	80042aa <HAL_TIM_Base_Start+0x66>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a1c      	ldr	r2, [pc, #112]	; (8004304 <HAL_TIM_Base_Start+0xc0>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d009      	beq.n	80042aa <HAL_TIM_Base_Start+0x66>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a1b      	ldr	r2, [pc, #108]	; (8004308 <HAL_TIM_Base_Start+0xc4>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d004      	beq.n	80042aa <HAL_TIM_Base_Start+0x66>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a19      	ldr	r2, [pc, #100]	; (800430c <HAL_TIM_Base_Start+0xc8>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d115      	bne.n	80042d6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	689a      	ldr	r2, [r3, #8]
 80042b0:	4b17      	ldr	r3, [pc, #92]	; (8004310 <HAL_TIM_Base_Start+0xcc>)
 80042b2:	4013      	ands	r3, r2
 80042b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2b06      	cmp	r3, #6
 80042ba:	d015      	beq.n	80042e8 <HAL_TIM_Base_Start+0xa4>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042c2:	d011      	beq.n	80042e8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f042 0201 	orr.w	r2, r2, #1
 80042d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042d4:	e008      	b.n	80042e8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f042 0201 	orr.w	r2, r2, #1
 80042e4:	601a      	str	r2, [r3, #0]
 80042e6:	e000      	b.n	80042ea <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042e8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3714      	adds	r7, #20
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr
 80042f8:	40012c00 	.word	0x40012c00
 80042fc:	40000400 	.word	0x40000400
 8004300:	40000800 	.word	0x40000800
 8004304:	40000c00 	.word	0x40000c00
 8004308:	40013400 	.word	0x40013400
 800430c:	40014000 	.word	0x40014000
 8004310:	00010007 	.word	0x00010007

08004314 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800431e:	2300      	movs	r3, #0
 8004320:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004328:	2b01      	cmp	r3, #1
 800432a:	d101      	bne.n	8004330 <HAL_TIM_ConfigClockSource+0x1c>
 800432c:	2302      	movs	r3, #2
 800432e:	e0b6      	b.n	800449e <HAL_TIM_ConfigClockSource+0x18a>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2202      	movs	r2, #2
 800433c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800434e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004352:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800435a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68ba      	ldr	r2, [r7, #8]
 8004362:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800436c:	d03e      	beq.n	80043ec <HAL_TIM_ConfigClockSource+0xd8>
 800436e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004372:	f200 8087 	bhi.w	8004484 <HAL_TIM_ConfigClockSource+0x170>
 8004376:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800437a:	f000 8086 	beq.w	800448a <HAL_TIM_ConfigClockSource+0x176>
 800437e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004382:	d87f      	bhi.n	8004484 <HAL_TIM_ConfigClockSource+0x170>
 8004384:	2b70      	cmp	r3, #112	; 0x70
 8004386:	d01a      	beq.n	80043be <HAL_TIM_ConfigClockSource+0xaa>
 8004388:	2b70      	cmp	r3, #112	; 0x70
 800438a:	d87b      	bhi.n	8004484 <HAL_TIM_ConfigClockSource+0x170>
 800438c:	2b60      	cmp	r3, #96	; 0x60
 800438e:	d050      	beq.n	8004432 <HAL_TIM_ConfigClockSource+0x11e>
 8004390:	2b60      	cmp	r3, #96	; 0x60
 8004392:	d877      	bhi.n	8004484 <HAL_TIM_ConfigClockSource+0x170>
 8004394:	2b50      	cmp	r3, #80	; 0x50
 8004396:	d03c      	beq.n	8004412 <HAL_TIM_ConfigClockSource+0xfe>
 8004398:	2b50      	cmp	r3, #80	; 0x50
 800439a:	d873      	bhi.n	8004484 <HAL_TIM_ConfigClockSource+0x170>
 800439c:	2b40      	cmp	r3, #64	; 0x40
 800439e:	d058      	beq.n	8004452 <HAL_TIM_ConfigClockSource+0x13e>
 80043a0:	2b40      	cmp	r3, #64	; 0x40
 80043a2:	d86f      	bhi.n	8004484 <HAL_TIM_ConfigClockSource+0x170>
 80043a4:	2b30      	cmp	r3, #48	; 0x30
 80043a6:	d064      	beq.n	8004472 <HAL_TIM_ConfigClockSource+0x15e>
 80043a8:	2b30      	cmp	r3, #48	; 0x30
 80043aa:	d86b      	bhi.n	8004484 <HAL_TIM_ConfigClockSource+0x170>
 80043ac:	2b20      	cmp	r3, #32
 80043ae:	d060      	beq.n	8004472 <HAL_TIM_ConfigClockSource+0x15e>
 80043b0:	2b20      	cmp	r3, #32
 80043b2:	d867      	bhi.n	8004484 <HAL_TIM_ConfigClockSource+0x170>
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d05c      	beq.n	8004472 <HAL_TIM_ConfigClockSource+0x15e>
 80043b8:	2b10      	cmp	r3, #16
 80043ba:	d05a      	beq.n	8004472 <HAL_TIM_ConfigClockSource+0x15e>
 80043bc:	e062      	b.n	8004484 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043ce:	f000 f97f 	bl	80046d0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80043e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	609a      	str	r2, [r3, #8]
      break;
 80043ea:	e04f      	b.n	800448c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043fc:	f000 f968 	bl	80046d0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	689a      	ldr	r2, [r3, #8]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800440e:	609a      	str	r2, [r3, #8]
      break;
 8004410:	e03c      	b.n	800448c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800441e:	461a      	mov	r2, r3
 8004420:	f000 f8dc 	bl	80045dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2150      	movs	r1, #80	; 0x50
 800442a:	4618      	mov	r0, r3
 800442c:	f000 f935 	bl	800469a <TIM_ITRx_SetConfig>
      break;
 8004430:	e02c      	b.n	800448c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800443e:	461a      	mov	r2, r3
 8004440:	f000 f8fb 	bl	800463a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2160      	movs	r1, #96	; 0x60
 800444a:	4618      	mov	r0, r3
 800444c:	f000 f925 	bl	800469a <TIM_ITRx_SetConfig>
      break;
 8004450:	e01c      	b.n	800448c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800445e:	461a      	mov	r2, r3
 8004460:	f000 f8bc 	bl	80045dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2140      	movs	r1, #64	; 0x40
 800446a:	4618      	mov	r0, r3
 800446c:	f000 f915 	bl	800469a <TIM_ITRx_SetConfig>
      break;
 8004470:	e00c      	b.n	800448c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4619      	mov	r1, r3
 800447c:	4610      	mov	r0, r2
 800447e:	f000 f90c 	bl	800469a <TIM_ITRx_SetConfig>
      break;
 8004482:	e003      	b.n	800448c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	73fb      	strb	r3, [r7, #15]
      break;
 8004488:	e000      	b.n	800448c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800448a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800449c:	7bfb      	ldrb	r3, [r7, #15]
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
	...

080044a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a40      	ldr	r2, [pc, #256]	; (80045bc <TIM_Base_SetConfig+0x114>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d013      	beq.n	80044e8 <TIM_Base_SetConfig+0x40>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044c6:	d00f      	beq.n	80044e8 <TIM_Base_SetConfig+0x40>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a3d      	ldr	r2, [pc, #244]	; (80045c0 <TIM_Base_SetConfig+0x118>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d00b      	beq.n	80044e8 <TIM_Base_SetConfig+0x40>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a3c      	ldr	r2, [pc, #240]	; (80045c4 <TIM_Base_SetConfig+0x11c>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d007      	beq.n	80044e8 <TIM_Base_SetConfig+0x40>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a3b      	ldr	r2, [pc, #236]	; (80045c8 <TIM_Base_SetConfig+0x120>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d003      	beq.n	80044e8 <TIM_Base_SetConfig+0x40>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a3a      	ldr	r2, [pc, #232]	; (80045cc <TIM_Base_SetConfig+0x124>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d108      	bne.n	80044fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a2f      	ldr	r2, [pc, #188]	; (80045bc <TIM_Base_SetConfig+0x114>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d01f      	beq.n	8004542 <TIM_Base_SetConfig+0x9a>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004508:	d01b      	beq.n	8004542 <TIM_Base_SetConfig+0x9a>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a2c      	ldr	r2, [pc, #176]	; (80045c0 <TIM_Base_SetConfig+0x118>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d017      	beq.n	8004542 <TIM_Base_SetConfig+0x9a>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a2b      	ldr	r2, [pc, #172]	; (80045c4 <TIM_Base_SetConfig+0x11c>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d013      	beq.n	8004542 <TIM_Base_SetConfig+0x9a>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a2a      	ldr	r2, [pc, #168]	; (80045c8 <TIM_Base_SetConfig+0x120>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d00f      	beq.n	8004542 <TIM_Base_SetConfig+0x9a>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a29      	ldr	r2, [pc, #164]	; (80045cc <TIM_Base_SetConfig+0x124>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d00b      	beq.n	8004542 <TIM_Base_SetConfig+0x9a>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a28      	ldr	r2, [pc, #160]	; (80045d0 <TIM_Base_SetConfig+0x128>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d007      	beq.n	8004542 <TIM_Base_SetConfig+0x9a>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a27      	ldr	r2, [pc, #156]	; (80045d4 <TIM_Base_SetConfig+0x12c>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d003      	beq.n	8004542 <TIM_Base_SetConfig+0x9a>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a26      	ldr	r2, [pc, #152]	; (80045d8 <TIM_Base_SetConfig+0x130>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d108      	bne.n	8004554 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004548:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	4313      	orrs	r3, r2
 8004552:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	4313      	orrs	r3, r2
 8004560:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	689a      	ldr	r2, [r3, #8]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a10      	ldr	r2, [pc, #64]	; (80045bc <TIM_Base_SetConfig+0x114>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d00f      	beq.n	80045a0 <TIM_Base_SetConfig+0xf8>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a12      	ldr	r2, [pc, #72]	; (80045cc <TIM_Base_SetConfig+0x124>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d00b      	beq.n	80045a0 <TIM_Base_SetConfig+0xf8>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a11      	ldr	r2, [pc, #68]	; (80045d0 <TIM_Base_SetConfig+0x128>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d007      	beq.n	80045a0 <TIM_Base_SetConfig+0xf8>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a10      	ldr	r2, [pc, #64]	; (80045d4 <TIM_Base_SetConfig+0x12c>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d003      	beq.n	80045a0 <TIM_Base_SetConfig+0xf8>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a0f      	ldr	r2, [pc, #60]	; (80045d8 <TIM_Base_SetConfig+0x130>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d103      	bne.n	80045a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	691a      	ldr	r2, [r3, #16]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	615a      	str	r2, [r3, #20]
}
 80045ae:	bf00      	nop
 80045b0:	3714      	adds	r7, #20
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	40012c00 	.word	0x40012c00
 80045c0:	40000400 	.word	0x40000400
 80045c4:	40000800 	.word	0x40000800
 80045c8:	40000c00 	.word	0x40000c00
 80045cc:	40013400 	.word	0x40013400
 80045d0:	40014000 	.word	0x40014000
 80045d4:	40014400 	.word	0x40014400
 80045d8:	40014800 	.word	0x40014800

080045dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045dc:	b480      	push	{r7}
 80045de:	b087      	sub	sp, #28
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6a1b      	ldr	r3, [r3, #32]
 80045ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6a1b      	ldr	r3, [r3, #32]
 80045f2:	f023 0201 	bic.w	r2, r3, #1
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004606:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	011b      	lsls	r3, r3, #4
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	4313      	orrs	r3, r2
 8004610:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	f023 030a 	bic.w	r3, r3, #10
 8004618:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	4313      	orrs	r3, r2
 8004620:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	693a      	ldr	r2, [r7, #16]
 8004626:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	621a      	str	r2, [r3, #32]
}
 800462e:	bf00      	nop
 8004630:	371c      	adds	r7, #28
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr

0800463a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800463a:	b480      	push	{r7}
 800463c:	b087      	sub	sp, #28
 800463e:	af00      	add	r7, sp, #0
 8004640:	60f8      	str	r0, [r7, #12]
 8004642:	60b9      	str	r1, [r7, #8]
 8004644:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	f023 0210 	bic.w	r2, r3, #16
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6a1b      	ldr	r3, [r3, #32]
 800465c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004664:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	031b      	lsls	r3, r3, #12
 800466a:	697a      	ldr	r2, [r7, #20]
 800466c:	4313      	orrs	r3, r2
 800466e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004676:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	011b      	lsls	r3, r3, #4
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	4313      	orrs	r3, r2
 8004680:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	621a      	str	r2, [r3, #32]
}
 800468e:	bf00      	nop
 8004690:	371c      	adds	r7, #28
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr

0800469a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800469a:	b480      	push	{r7}
 800469c:	b085      	sub	sp, #20
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
 80046a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046b2:	683a      	ldr	r2, [r7, #0]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	f043 0307 	orr.w	r3, r3, #7
 80046bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	609a      	str	r2, [r3, #8]
}
 80046c4:	bf00      	nop
 80046c6:	3714      	adds	r7, #20
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b087      	sub	sp, #28
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]
 80046dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	021a      	lsls	r2, r3, #8
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	431a      	orrs	r2, r3
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	697a      	ldr	r2, [r7, #20]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	697a      	ldr	r2, [r7, #20]
 8004702:	609a      	str	r2, [r3, #8]
}
 8004704:	bf00      	nop
 8004706:	371c      	adds	r7, #28
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004720:	2b01      	cmp	r3, #1
 8004722:	d101      	bne.n	8004728 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004724:	2302      	movs	r3, #2
 8004726:	e068      	b.n	80047fa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2202      	movs	r2, #2
 8004734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a2e      	ldr	r2, [pc, #184]	; (8004808 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d004      	beq.n	800475c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a2d      	ldr	r2, [pc, #180]	; (800480c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d108      	bne.n	800476e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004762:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	4313      	orrs	r3, r2
 800476c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004774:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	4313      	orrs	r3, r2
 800477e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68fa      	ldr	r2, [r7, #12]
 8004786:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a1e      	ldr	r2, [pc, #120]	; (8004808 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d01d      	beq.n	80047ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800479a:	d018      	beq.n	80047ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a1b      	ldr	r2, [pc, #108]	; (8004810 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d013      	beq.n	80047ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a1a      	ldr	r2, [pc, #104]	; (8004814 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d00e      	beq.n	80047ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a18      	ldr	r2, [pc, #96]	; (8004818 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d009      	beq.n	80047ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a13      	ldr	r2, [pc, #76]	; (800480c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d004      	beq.n	80047ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a14      	ldr	r2, [pc, #80]	; (800481c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d10c      	bne.n	80047e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	68ba      	ldr	r2, [r7, #8]
 80047dc:	4313      	orrs	r3, r2
 80047de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68ba      	ldr	r2, [r7, #8]
 80047e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3714      	adds	r7, #20
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	40012c00 	.word	0x40012c00
 800480c:	40013400 	.word	0x40013400
 8004810:	40000400 	.word	0x40000400
 8004814:	40000800 	.word	0x40000800
 8004818:	40000c00 	.word	0x40000c00
 800481c:	40014000 	.word	0x40014000

08004820 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e040      	b.n	80048b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004836:	2b00      	cmp	r3, #0
 8004838:	d106      	bne.n	8004848 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f7fd f89c 	bl	8001980 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2224      	movs	r2, #36	; 0x24
 800484c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f022 0201 	bic.w	r2, r2, #1
 800485c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 f8c0 	bl	80049e4 <UART_SetConfig>
 8004864:	4603      	mov	r3, r0
 8004866:	2b01      	cmp	r3, #1
 8004868:	d101      	bne.n	800486e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e022      	b.n	80048b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004872:	2b00      	cmp	r3, #0
 8004874:	d002      	beq.n	800487c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 fb6c 	bl	8004f54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	685a      	ldr	r2, [r3, #4]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800488a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	689a      	ldr	r2, [r3, #8]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800489a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f042 0201 	orr.w	r2, r2, #1
 80048aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f000 fbf3 	bl	8005098 <UART_CheckIdleState>
 80048b2:	4603      	mov	r3, r0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3708      	adds	r7, #8
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b08a      	sub	sp, #40	; 0x28
 80048c0:	af02      	add	r7, sp, #8
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	603b      	str	r3, [r7, #0]
 80048c8:	4613      	mov	r3, r2
 80048ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048d0:	2b20      	cmp	r3, #32
 80048d2:	f040 8082 	bne.w	80049da <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d002      	beq.n	80048e2 <HAL_UART_Transmit+0x26>
 80048dc:	88fb      	ldrh	r3, [r7, #6]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d101      	bne.n	80048e6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e07a      	b.n	80049dc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d101      	bne.n	80048f4 <HAL_UART_Transmit+0x38>
 80048f0:	2302      	movs	r3, #2
 80048f2:	e073      	b.n	80049dc <HAL_UART_Transmit+0x120>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2221      	movs	r2, #33	; 0x21
 8004908:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800490a:	f7fd fa31 	bl	8001d70 <HAL_GetTick>
 800490e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	88fa      	ldrh	r2, [r7, #6]
 8004914:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	88fa      	ldrh	r2, [r7, #6]
 800491c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004928:	d108      	bne.n	800493c <HAL_UART_Transmit+0x80>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d104      	bne.n	800493c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004932:	2300      	movs	r3, #0
 8004934:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	61bb      	str	r3, [r7, #24]
 800493a:	e003      	b.n	8004944 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004940:	2300      	movs	r3, #0
 8004942:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800494c:	e02d      	b.n	80049aa <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	9300      	str	r3, [sp, #0]
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	2200      	movs	r2, #0
 8004956:	2180      	movs	r1, #128	; 0x80
 8004958:	68f8      	ldr	r0, [r7, #12]
 800495a:	f000 fbe6 	bl	800512a <UART_WaitOnFlagUntilTimeout>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d001      	beq.n	8004968 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e039      	b.n	80049dc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10b      	bne.n	8004986 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	881a      	ldrh	r2, [r3, #0]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800497a:	b292      	uxth	r2, r2
 800497c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	3302      	adds	r3, #2
 8004982:	61bb      	str	r3, [r7, #24]
 8004984:	e008      	b.n	8004998 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	781a      	ldrb	r2, [r3, #0]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	b292      	uxth	r2, r2
 8004990:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	3301      	adds	r3, #1
 8004996:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800499e:	b29b      	uxth	r3, r3
 80049a0:	3b01      	subs	r3, #1
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1cb      	bne.n	800494e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	9300      	str	r3, [sp, #0]
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	2200      	movs	r2, #0
 80049be:	2140      	movs	r1, #64	; 0x40
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f000 fbb2 	bl	800512a <UART_WaitOnFlagUntilTimeout>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d001      	beq.n	80049d0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e005      	b.n	80049dc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2220      	movs	r2, #32
 80049d4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80049d6:	2300      	movs	r3, #0
 80049d8:	e000      	b.n	80049dc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80049da:	2302      	movs	r3, #2
  }
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3720      	adds	r7, #32
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049e8:	b08a      	sub	sp, #40	; 0x28
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80049ee:	2300      	movs	r3, #0
 80049f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	689a      	ldr	r2, [r3, #8]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	431a      	orrs	r2, r3
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	431a      	orrs	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	69db      	ldr	r3, [r3, #28]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	4ba4      	ldr	r3, [pc, #656]	; (8004ca4 <UART_SetConfig+0x2c0>)
 8004a14:	4013      	ands	r3, r2
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	6812      	ldr	r2, [r2, #0]
 8004a1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a1c:	430b      	orrs	r3, r1
 8004a1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	68da      	ldr	r2, [r3, #12]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	430a      	orrs	r2, r1
 8004a34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a99      	ldr	r2, [pc, #612]	; (8004ca8 <UART_SetConfig+0x2c4>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d004      	beq.n	8004a50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6a1b      	ldr	r3, [r3, #32]
 8004a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a60:	430a      	orrs	r2, r1
 8004a62:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a90      	ldr	r2, [pc, #576]	; (8004cac <UART_SetConfig+0x2c8>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d126      	bne.n	8004abc <UART_SetConfig+0xd8>
 8004a6e:	4b90      	ldr	r3, [pc, #576]	; (8004cb0 <UART_SetConfig+0x2cc>)
 8004a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a74:	f003 0303 	and.w	r3, r3, #3
 8004a78:	2b03      	cmp	r3, #3
 8004a7a:	d81b      	bhi.n	8004ab4 <UART_SetConfig+0xd0>
 8004a7c:	a201      	add	r2, pc, #4	; (adr r2, 8004a84 <UART_SetConfig+0xa0>)
 8004a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a82:	bf00      	nop
 8004a84:	08004a95 	.word	0x08004a95
 8004a88:	08004aa5 	.word	0x08004aa5
 8004a8c:	08004a9d 	.word	0x08004a9d
 8004a90:	08004aad 	.word	0x08004aad
 8004a94:	2301      	movs	r3, #1
 8004a96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a9a:	e116      	b.n	8004cca <UART_SetConfig+0x2e6>
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aa2:	e112      	b.n	8004cca <UART_SetConfig+0x2e6>
 8004aa4:	2304      	movs	r3, #4
 8004aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aaa:	e10e      	b.n	8004cca <UART_SetConfig+0x2e6>
 8004aac:	2308      	movs	r3, #8
 8004aae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ab2:	e10a      	b.n	8004cca <UART_SetConfig+0x2e6>
 8004ab4:	2310      	movs	r3, #16
 8004ab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aba:	e106      	b.n	8004cca <UART_SetConfig+0x2e6>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a7c      	ldr	r2, [pc, #496]	; (8004cb4 <UART_SetConfig+0x2d0>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d138      	bne.n	8004b38 <UART_SetConfig+0x154>
 8004ac6:	4b7a      	ldr	r3, [pc, #488]	; (8004cb0 <UART_SetConfig+0x2cc>)
 8004ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004acc:	f003 030c 	and.w	r3, r3, #12
 8004ad0:	2b0c      	cmp	r3, #12
 8004ad2:	d82d      	bhi.n	8004b30 <UART_SetConfig+0x14c>
 8004ad4:	a201      	add	r2, pc, #4	; (adr r2, 8004adc <UART_SetConfig+0xf8>)
 8004ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ada:	bf00      	nop
 8004adc:	08004b11 	.word	0x08004b11
 8004ae0:	08004b31 	.word	0x08004b31
 8004ae4:	08004b31 	.word	0x08004b31
 8004ae8:	08004b31 	.word	0x08004b31
 8004aec:	08004b21 	.word	0x08004b21
 8004af0:	08004b31 	.word	0x08004b31
 8004af4:	08004b31 	.word	0x08004b31
 8004af8:	08004b31 	.word	0x08004b31
 8004afc:	08004b19 	.word	0x08004b19
 8004b00:	08004b31 	.word	0x08004b31
 8004b04:	08004b31 	.word	0x08004b31
 8004b08:	08004b31 	.word	0x08004b31
 8004b0c:	08004b29 	.word	0x08004b29
 8004b10:	2300      	movs	r3, #0
 8004b12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b16:	e0d8      	b.n	8004cca <UART_SetConfig+0x2e6>
 8004b18:	2302      	movs	r3, #2
 8004b1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b1e:	e0d4      	b.n	8004cca <UART_SetConfig+0x2e6>
 8004b20:	2304      	movs	r3, #4
 8004b22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b26:	e0d0      	b.n	8004cca <UART_SetConfig+0x2e6>
 8004b28:	2308      	movs	r3, #8
 8004b2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b2e:	e0cc      	b.n	8004cca <UART_SetConfig+0x2e6>
 8004b30:	2310      	movs	r3, #16
 8004b32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b36:	e0c8      	b.n	8004cca <UART_SetConfig+0x2e6>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a5e      	ldr	r2, [pc, #376]	; (8004cb8 <UART_SetConfig+0x2d4>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d125      	bne.n	8004b8e <UART_SetConfig+0x1aa>
 8004b42:	4b5b      	ldr	r3, [pc, #364]	; (8004cb0 <UART_SetConfig+0x2cc>)
 8004b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b48:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004b4c:	2b30      	cmp	r3, #48	; 0x30
 8004b4e:	d016      	beq.n	8004b7e <UART_SetConfig+0x19a>
 8004b50:	2b30      	cmp	r3, #48	; 0x30
 8004b52:	d818      	bhi.n	8004b86 <UART_SetConfig+0x1a2>
 8004b54:	2b20      	cmp	r3, #32
 8004b56:	d00a      	beq.n	8004b6e <UART_SetConfig+0x18a>
 8004b58:	2b20      	cmp	r3, #32
 8004b5a:	d814      	bhi.n	8004b86 <UART_SetConfig+0x1a2>
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d002      	beq.n	8004b66 <UART_SetConfig+0x182>
 8004b60:	2b10      	cmp	r3, #16
 8004b62:	d008      	beq.n	8004b76 <UART_SetConfig+0x192>
 8004b64:	e00f      	b.n	8004b86 <UART_SetConfig+0x1a2>
 8004b66:	2300      	movs	r3, #0
 8004b68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b6c:	e0ad      	b.n	8004cca <UART_SetConfig+0x2e6>
 8004b6e:	2302      	movs	r3, #2
 8004b70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b74:	e0a9      	b.n	8004cca <UART_SetConfig+0x2e6>
 8004b76:	2304      	movs	r3, #4
 8004b78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b7c:	e0a5      	b.n	8004cca <UART_SetConfig+0x2e6>
 8004b7e:	2308      	movs	r3, #8
 8004b80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b84:	e0a1      	b.n	8004cca <UART_SetConfig+0x2e6>
 8004b86:	2310      	movs	r3, #16
 8004b88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b8c:	e09d      	b.n	8004cca <UART_SetConfig+0x2e6>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a4a      	ldr	r2, [pc, #296]	; (8004cbc <UART_SetConfig+0x2d8>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d125      	bne.n	8004be4 <UART_SetConfig+0x200>
 8004b98:	4b45      	ldr	r3, [pc, #276]	; (8004cb0 <UART_SetConfig+0x2cc>)
 8004b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b9e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004ba2:	2bc0      	cmp	r3, #192	; 0xc0
 8004ba4:	d016      	beq.n	8004bd4 <UART_SetConfig+0x1f0>
 8004ba6:	2bc0      	cmp	r3, #192	; 0xc0
 8004ba8:	d818      	bhi.n	8004bdc <UART_SetConfig+0x1f8>
 8004baa:	2b80      	cmp	r3, #128	; 0x80
 8004bac:	d00a      	beq.n	8004bc4 <UART_SetConfig+0x1e0>
 8004bae:	2b80      	cmp	r3, #128	; 0x80
 8004bb0:	d814      	bhi.n	8004bdc <UART_SetConfig+0x1f8>
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d002      	beq.n	8004bbc <UART_SetConfig+0x1d8>
 8004bb6:	2b40      	cmp	r3, #64	; 0x40
 8004bb8:	d008      	beq.n	8004bcc <UART_SetConfig+0x1e8>
 8004bba:	e00f      	b.n	8004bdc <UART_SetConfig+0x1f8>
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bc2:	e082      	b.n	8004cca <UART_SetConfig+0x2e6>
 8004bc4:	2302      	movs	r3, #2
 8004bc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bca:	e07e      	b.n	8004cca <UART_SetConfig+0x2e6>
 8004bcc:	2304      	movs	r3, #4
 8004bce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bd2:	e07a      	b.n	8004cca <UART_SetConfig+0x2e6>
 8004bd4:	2308      	movs	r3, #8
 8004bd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bda:	e076      	b.n	8004cca <UART_SetConfig+0x2e6>
 8004bdc:	2310      	movs	r3, #16
 8004bde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004be2:	e072      	b.n	8004cca <UART_SetConfig+0x2e6>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a35      	ldr	r2, [pc, #212]	; (8004cc0 <UART_SetConfig+0x2dc>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d12a      	bne.n	8004c44 <UART_SetConfig+0x260>
 8004bee:	4b30      	ldr	r3, [pc, #192]	; (8004cb0 <UART_SetConfig+0x2cc>)
 8004bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bf8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bfc:	d01a      	beq.n	8004c34 <UART_SetConfig+0x250>
 8004bfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c02:	d81b      	bhi.n	8004c3c <UART_SetConfig+0x258>
 8004c04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c08:	d00c      	beq.n	8004c24 <UART_SetConfig+0x240>
 8004c0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c0e:	d815      	bhi.n	8004c3c <UART_SetConfig+0x258>
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d003      	beq.n	8004c1c <UART_SetConfig+0x238>
 8004c14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c18:	d008      	beq.n	8004c2c <UART_SetConfig+0x248>
 8004c1a:	e00f      	b.n	8004c3c <UART_SetConfig+0x258>
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c22:	e052      	b.n	8004cca <UART_SetConfig+0x2e6>
 8004c24:	2302      	movs	r3, #2
 8004c26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c2a:	e04e      	b.n	8004cca <UART_SetConfig+0x2e6>
 8004c2c:	2304      	movs	r3, #4
 8004c2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c32:	e04a      	b.n	8004cca <UART_SetConfig+0x2e6>
 8004c34:	2308      	movs	r3, #8
 8004c36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c3a:	e046      	b.n	8004cca <UART_SetConfig+0x2e6>
 8004c3c:	2310      	movs	r3, #16
 8004c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c42:	e042      	b.n	8004cca <UART_SetConfig+0x2e6>
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a17      	ldr	r2, [pc, #92]	; (8004ca8 <UART_SetConfig+0x2c4>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d13a      	bne.n	8004cc4 <UART_SetConfig+0x2e0>
 8004c4e:	4b18      	ldr	r3, [pc, #96]	; (8004cb0 <UART_SetConfig+0x2cc>)
 8004c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c54:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c5c:	d01a      	beq.n	8004c94 <UART_SetConfig+0x2b0>
 8004c5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c62:	d81b      	bhi.n	8004c9c <UART_SetConfig+0x2b8>
 8004c64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c68:	d00c      	beq.n	8004c84 <UART_SetConfig+0x2a0>
 8004c6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c6e:	d815      	bhi.n	8004c9c <UART_SetConfig+0x2b8>
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d003      	beq.n	8004c7c <UART_SetConfig+0x298>
 8004c74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c78:	d008      	beq.n	8004c8c <UART_SetConfig+0x2a8>
 8004c7a:	e00f      	b.n	8004c9c <UART_SetConfig+0x2b8>
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c82:	e022      	b.n	8004cca <UART_SetConfig+0x2e6>
 8004c84:	2302      	movs	r3, #2
 8004c86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c8a:	e01e      	b.n	8004cca <UART_SetConfig+0x2e6>
 8004c8c:	2304      	movs	r3, #4
 8004c8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c92:	e01a      	b.n	8004cca <UART_SetConfig+0x2e6>
 8004c94:	2308      	movs	r3, #8
 8004c96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c9a:	e016      	b.n	8004cca <UART_SetConfig+0x2e6>
 8004c9c:	2310      	movs	r3, #16
 8004c9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ca2:	e012      	b.n	8004cca <UART_SetConfig+0x2e6>
 8004ca4:	efff69f3 	.word	0xefff69f3
 8004ca8:	40008000 	.word	0x40008000
 8004cac:	40013800 	.word	0x40013800
 8004cb0:	40021000 	.word	0x40021000
 8004cb4:	40004400 	.word	0x40004400
 8004cb8:	40004800 	.word	0x40004800
 8004cbc:	40004c00 	.word	0x40004c00
 8004cc0:	40005000 	.word	0x40005000
 8004cc4:	2310      	movs	r3, #16
 8004cc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a9f      	ldr	r2, [pc, #636]	; (8004f4c <UART_SetConfig+0x568>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d17a      	bne.n	8004dca <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004cd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004cd8:	2b08      	cmp	r3, #8
 8004cda:	d824      	bhi.n	8004d26 <UART_SetConfig+0x342>
 8004cdc:	a201      	add	r2, pc, #4	; (adr r2, 8004ce4 <UART_SetConfig+0x300>)
 8004cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce2:	bf00      	nop
 8004ce4:	08004d09 	.word	0x08004d09
 8004ce8:	08004d27 	.word	0x08004d27
 8004cec:	08004d11 	.word	0x08004d11
 8004cf0:	08004d27 	.word	0x08004d27
 8004cf4:	08004d17 	.word	0x08004d17
 8004cf8:	08004d27 	.word	0x08004d27
 8004cfc:	08004d27 	.word	0x08004d27
 8004d00:	08004d27 	.word	0x08004d27
 8004d04:	08004d1f 	.word	0x08004d1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d08:	f7fe f8e2 	bl	8002ed0 <HAL_RCC_GetPCLK1Freq>
 8004d0c:	61f8      	str	r0, [r7, #28]
        break;
 8004d0e:	e010      	b.n	8004d32 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d10:	4b8f      	ldr	r3, [pc, #572]	; (8004f50 <UART_SetConfig+0x56c>)
 8004d12:	61fb      	str	r3, [r7, #28]
        break;
 8004d14:	e00d      	b.n	8004d32 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d16:	f7fe f843 	bl	8002da0 <HAL_RCC_GetSysClockFreq>
 8004d1a:	61f8      	str	r0, [r7, #28]
        break;
 8004d1c:	e009      	b.n	8004d32 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d22:	61fb      	str	r3, [r7, #28]
        break;
 8004d24:	e005      	b.n	8004d32 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004d26:	2300      	movs	r3, #0
 8004d28:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004d30:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f000 80fb 	beq.w	8004f30 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	685a      	ldr	r2, [r3, #4]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	005b      	lsls	r3, r3, #1
 8004d42:	4413      	add	r3, r2
 8004d44:	69fa      	ldr	r2, [r7, #28]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d305      	bcc.n	8004d56 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d50:	69fa      	ldr	r2, [r7, #28]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d903      	bls.n	8004d5e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004d5c:	e0e8      	b.n	8004f30 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	2200      	movs	r2, #0
 8004d62:	461c      	mov	r4, r3
 8004d64:	4615      	mov	r5, r2
 8004d66:	f04f 0200 	mov.w	r2, #0
 8004d6a:	f04f 0300 	mov.w	r3, #0
 8004d6e:	022b      	lsls	r3, r5, #8
 8004d70:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004d74:	0222      	lsls	r2, r4, #8
 8004d76:	68f9      	ldr	r1, [r7, #12]
 8004d78:	6849      	ldr	r1, [r1, #4]
 8004d7a:	0849      	lsrs	r1, r1, #1
 8004d7c:	2000      	movs	r0, #0
 8004d7e:	4688      	mov	r8, r1
 8004d80:	4681      	mov	r9, r0
 8004d82:	eb12 0a08 	adds.w	sl, r2, r8
 8004d86:	eb43 0b09 	adc.w	fp, r3, r9
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	603b      	str	r3, [r7, #0]
 8004d92:	607a      	str	r2, [r7, #4]
 8004d94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d98:	4650      	mov	r0, sl
 8004d9a:	4659      	mov	r1, fp
 8004d9c:	f7fb ff54 	bl	8000c48 <__aeabi_uldivmod>
 8004da0:	4602      	mov	r2, r0
 8004da2:	460b      	mov	r3, r1
 8004da4:	4613      	mov	r3, r2
 8004da6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dae:	d308      	bcc.n	8004dc2 <UART_SetConfig+0x3de>
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004db6:	d204      	bcs.n	8004dc2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	69ba      	ldr	r2, [r7, #24]
 8004dbe:	60da      	str	r2, [r3, #12]
 8004dc0:	e0b6      	b.n	8004f30 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004dc8:	e0b2      	b.n	8004f30 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	69db      	ldr	r3, [r3, #28]
 8004dce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dd2:	d15e      	bne.n	8004e92 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004dd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004dd8:	2b08      	cmp	r3, #8
 8004dda:	d828      	bhi.n	8004e2e <UART_SetConfig+0x44a>
 8004ddc:	a201      	add	r2, pc, #4	; (adr r2, 8004de4 <UART_SetConfig+0x400>)
 8004dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de2:	bf00      	nop
 8004de4:	08004e09 	.word	0x08004e09
 8004de8:	08004e11 	.word	0x08004e11
 8004dec:	08004e19 	.word	0x08004e19
 8004df0:	08004e2f 	.word	0x08004e2f
 8004df4:	08004e1f 	.word	0x08004e1f
 8004df8:	08004e2f 	.word	0x08004e2f
 8004dfc:	08004e2f 	.word	0x08004e2f
 8004e00:	08004e2f 	.word	0x08004e2f
 8004e04:	08004e27 	.word	0x08004e27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e08:	f7fe f862 	bl	8002ed0 <HAL_RCC_GetPCLK1Freq>
 8004e0c:	61f8      	str	r0, [r7, #28]
        break;
 8004e0e:	e014      	b.n	8004e3a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e10:	f7fe f874 	bl	8002efc <HAL_RCC_GetPCLK2Freq>
 8004e14:	61f8      	str	r0, [r7, #28]
        break;
 8004e16:	e010      	b.n	8004e3a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e18:	4b4d      	ldr	r3, [pc, #308]	; (8004f50 <UART_SetConfig+0x56c>)
 8004e1a:	61fb      	str	r3, [r7, #28]
        break;
 8004e1c:	e00d      	b.n	8004e3a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e1e:	f7fd ffbf 	bl	8002da0 <HAL_RCC_GetSysClockFreq>
 8004e22:	61f8      	str	r0, [r7, #28]
        break;
 8004e24:	e009      	b.n	8004e3a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e2a:	61fb      	str	r3, [r7, #28]
        break;
 8004e2c:	e005      	b.n	8004e3a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004e38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d077      	beq.n	8004f30 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	005a      	lsls	r2, r3, #1
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	085b      	lsrs	r3, r3, #1
 8004e4a:	441a      	add	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e54:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	2b0f      	cmp	r3, #15
 8004e5a:	d916      	bls.n	8004e8a <UART_SetConfig+0x4a6>
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e62:	d212      	bcs.n	8004e8a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	f023 030f 	bic.w	r3, r3, #15
 8004e6c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	085b      	lsrs	r3, r3, #1
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	f003 0307 	and.w	r3, r3, #7
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	8afb      	ldrh	r3, [r7, #22]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	8afa      	ldrh	r2, [r7, #22]
 8004e86:	60da      	str	r2, [r3, #12]
 8004e88:	e052      	b.n	8004f30 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004e90:	e04e      	b.n	8004f30 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e96:	2b08      	cmp	r3, #8
 8004e98:	d827      	bhi.n	8004eea <UART_SetConfig+0x506>
 8004e9a:	a201      	add	r2, pc, #4	; (adr r2, 8004ea0 <UART_SetConfig+0x4bc>)
 8004e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea0:	08004ec5 	.word	0x08004ec5
 8004ea4:	08004ecd 	.word	0x08004ecd
 8004ea8:	08004ed5 	.word	0x08004ed5
 8004eac:	08004eeb 	.word	0x08004eeb
 8004eb0:	08004edb 	.word	0x08004edb
 8004eb4:	08004eeb 	.word	0x08004eeb
 8004eb8:	08004eeb 	.word	0x08004eeb
 8004ebc:	08004eeb 	.word	0x08004eeb
 8004ec0:	08004ee3 	.word	0x08004ee3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ec4:	f7fe f804 	bl	8002ed0 <HAL_RCC_GetPCLK1Freq>
 8004ec8:	61f8      	str	r0, [r7, #28]
        break;
 8004eca:	e014      	b.n	8004ef6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ecc:	f7fe f816 	bl	8002efc <HAL_RCC_GetPCLK2Freq>
 8004ed0:	61f8      	str	r0, [r7, #28]
        break;
 8004ed2:	e010      	b.n	8004ef6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ed4:	4b1e      	ldr	r3, [pc, #120]	; (8004f50 <UART_SetConfig+0x56c>)
 8004ed6:	61fb      	str	r3, [r7, #28]
        break;
 8004ed8:	e00d      	b.n	8004ef6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eda:	f7fd ff61 	bl	8002da0 <HAL_RCC_GetSysClockFreq>
 8004ede:	61f8      	str	r0, [r7, #28]
        break;
 8004ee0:	e009      	b.n	8004ef6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ee2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ee6:	61fb      	str	r3, [r7, #28]
        break;
 8004ee8:	e005      	b.n	8004ef6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004eea:	2300      	movs	r3, #0
 8004eec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004ef4:	bf00      	nop
    }

    if (pclk != 0U)
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d019      	beq.n	8004f30 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	085a      	lsrs	r2, r3, #1
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	441a      	add	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f0e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	2b0f      	cmp	r3, #15
 8004f14:	d909      	bls.n	8004f2a <UART_SetConfig+0x546>
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f1c:	d205      	bcs.n	8004f2a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	b29a      	uxth	r2, r3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	60da      	str	r2, [r3, #12]
 8004f28:	e002      	b.n	8004f30 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004f3c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3728      	adds	r7, #40	; 0x28
 8004f44:	46bd      	mov	sp, r7
 8004f46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f4a:	bf00      	nop
 8004f4c:	40008000 	.word	0x40008000
 8004f50:	00f42400 	.word	0x00f42400

08004f54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f60:	f003 0301 	and.w	r3, r3, #1
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d00a      	beq.n	8004f7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	430a      	orrs	r2, r1
 8004f7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f82:	f003 0302 	and.w	r3, r3, #2
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00a      	beq.n	8004fa0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	430a      	orrs	r2, r1
 8004f9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa4:	f003 0304 	and.w	r3, r3, #4
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00a      	beq.n	8004fc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc6:	f003 0308 	and.w	r3, r3, #8
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00a      	beq.n	8004fe4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe8:	f003 0310 	and.w	r3, r3, #16
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d00a      	beq.n	8005006 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	430a      	orrs	r2, r1
 8005004:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500a:	f003 0320 	and.w	r3, r3, #32
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00a      	beq.n	8005028 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	430a      	orrs	r2, r1
 8005026:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005030:	2b00      	cmp	r3, #0
 8005032:	d01a      	beq.n	800506a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	430a      	orrs	r2, r1
 8005048:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005052:	d10a      	bne.n	800506a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	430a      	orrs	r2, r1
 8005068:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00a      	beq.n	800508c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	430a      	orrs	r2, r1
 800508a:	605a      	str	r2, [r3, #4]
  }
}
 800508c:	bf00      	nop
 800508e:	370c      	adds	r7, #12
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b086      	sub	sp, #24
 800509c:	af02      	add	r7, sp, #8
 800509e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050a8:	f7fc fe62 	bl	8001d70 <HAL_GetTick>
 80050ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0308 	and.w	r3, r3, #8
 80050b8:	2b08      	cmp	r3, #8
 80050ba:	d10e      	bne.n	80050da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050c0:	9300      	str	r3, [sp, #0]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 f82d 	bl	800512a <UART_WaitOnFlagUntilTimeout>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d001      	beq.n	80050da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e023      	b.n	8005122 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0304 	and.w	r3, r3, #4
 80050e4:	2b04      	cmp	r3, #4
 80050e6:	d10e      	bne.n	8005106 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050ec:	9300      	str	r3, [sp, #0]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 f817 	bl	800512a <UART_WaitOnFlagUntilTimeout>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d001      	beq.n	8005106 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e00d      	b.n	8005122 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2220      	movs	r2, #32
 800510a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2220      	movs	r2, #32
 8005110:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3710      	adds	r7, #16
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}

0800512a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800512a:	b580      	push	{r7, lr}
 800512c:	b09c      	sub	sp, #112	; 0x70
 800512e:	af00      	add	r7, sp, #0
 8005130:	60f8      	str	r0, [r7, #12]
 8005132:	60b9      	str	r1, [r7, #8]
 8005134:	603b      	str	r3, [r7, #0]
 8005136:	4613      	mov	r3, r2
 8005138:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800513a:	e0a5      	b.n	8005288 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800513c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800513e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005142:	f000 80a1 	beq.w	8005288 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005146:	f7fc fe13 	bl	8001d70 <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005152:	429a      	cmp	r2, r3
 8005154:	d302      	bcc.n	800515c <UART_WaitOnFlagUntilTimeout+0x32>
 8005156:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005158:	2b00      	cmp	r3, #0
 800515a:	d13e      	bne.n	80051da <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005164:	e853 3f00 	ldrex	r3, [r3]
 8005168:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800516a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800516c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005170:	667b      	str	r3, [r7, #100]	; 0x64
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	461a      	mov	r2, r3
 8005178:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800517a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800517c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005180:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005182:	e841 2300 	strex	r3, r2, [r1]
 8005186:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005188:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800518a:	2b00      	cmp	r3, #0
 800518c:	d1e6      	bne.n	800515c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	3308      	adds	r3, #8
 8005194:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005198:	e853 3f00 	ldrex	r3, [r3]
 800519c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800519e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a0:	f023 0301 	bic.w	r3, r3, #1
 80051a4:	663b      	str	r3, [r7, #96]	; 0x60
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	3308      	adds	r3, #8
 80051ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80051ae:	64ba      	str	r2, [r7, #72]	; 0x48
 80051b0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80051b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051b6:	e841 2300 	strex	r3, r2, [r1]
 80051ba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80051bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1e5      	bne.n	800518e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2220      	movs	r2, #32
 80051c6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2220      	movs	r2, #32
 80051cc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e067      	b.n	80052aa <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0304 	and.w	r3, r3, #4
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d04f      	beq.n	8005288 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	69db      	ldr	r3, [r3, #28]
 80051ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051f6:	d147      	bne.n	8005288 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005200:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520a:	e853 3f00 	ldrex	r3, [r3]
 800520e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005216:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	461a      	mov	r2, r3
 800521e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005220:	637b      	str	r3, [r7, #52]	; 0x34
 8005222:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005224:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005226:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005228:	e841 2300 	strex	r3, r2, [r1]
 800522c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800522e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005230:	2b00      	cmp	r3, #0
 8005232:	d1e6      	bne.n	8005202 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	3308      	adds	r3, #8
 800523a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	e853 3f00 	ldrex	r3, [r3]
 8005242:	613b      	str	r3, [r7, #16]
   return(result);
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	f023 0301 	bic.w	r3, r3, #1
 800524a:	66bb      	str	r3, [r7, #104]	; 0x68
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	3308      	adds	r3, #8
 8005252:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005254:	623a      	str	r2, [r7, #32]
 8005256:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005258:	69f9      	ldr	r1, [r7, #28]
 800525a:	6a3a      	ldr	r2, [r7, #32]
 800525c:	e841 2300 	strex	r3, r2, [r1]
 8005260:	61bb      	str	r3, [r7, #24]
   return(result);
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d1e5      	bne.n	8005234 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2220      	movs	r2, #32
 800526c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2220      	movs	r2, #32
 8005272:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2220      	movs	r2, #32
 8005278:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	e010      	b.n	80052aa <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	69da      	ldr	r2, [r3, #28]
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	4013      	ands	r3, r2
 8005292:	68ba      	ldr	r2, [r7, #8]
 8005294:	429a      	cmp	r2, r3
 8005296:	bf0c      	ite	eq
 8005298:	2301      	moveq	r3, #1
 800529a:	2300      	movne	r3, #0
 800529c:	b2db      	uxtb	r3, r3
 800529e:	461a      	mov	r2, r3
 80052a0:	79fb      	ldrb	r3, [r7, #7]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	f43f af4a 	beq.w	800513c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3770      	adds	r7, #112	; 0x70
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <__cvt>:
 80052b2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052b6:	ec55 4b10 	vmov	r4, r5, d0
 80052ba:	2d00      	cmp	r5, #0
 80052bc:	460e      	mov	r6, r1
 80052be:	4619      	mov	r1, r3
 80052c0:	462b      	mov	r3, r5
 80052c2:	bfbb      	ittet	lt
 80052c4:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80052c8:	461d      	movlt	r5, r3
 80052ca:	2300      	movge	r3, #0
 80052cc:	232d      	movlt	r3, #45	; 0x2d
 80052ce:	700b      	strb	r3, [r1, #0]
 80052d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80052d2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80052d6:	4691      	mov	r9, r2
 80052d8:	f023 0820 	bic.w	r8, r3, #32
 80052dc:	bfbc      	itt	lt
 80052de:	4622      	movlt	r2, r4
 80052e0:	4614      	movlt	r4, r2
 80052e2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80052e6:	d005      	beq.n	80052f4 <__cvt+0x42>
 80052e8:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80052ec:	d100      	bne.n	80052f0 <__cvt+0x3e>
 80052ee:	3601      	adds	r6, #1
 80052f0:	2102      	movs	r1, #2
 80052f2:	e000      	b.n	80052f6 <__cvt+0x44>
 80052f4:	2103      	movs	r1, #3
 80052f6:	ab03      	add	r3, sp, #12
 80052f8:	9301      	str	r3, [sp, #4]
 80052fa:	ab02      	add	r3, sp, #8
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	ec45 4b10 	vmov	d0, r4, r5
 8005302:	4653      	mov	r3, sl
 8005304:	4632      	mov	r2, r6
 8005306:	f000 fe57 	bl	8005fb8 <_dtoa_r>
 800530a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800530e:	4607      	mov	r7, r0
 8005310:	d102      	bne.n	8005318 <__cvt+0x66>
 8005312:	f019 0f01 	tst.w	r9, #1
 8005316:	d022      	beq.n	800535e <__cvt+0xac>
 8005318:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800531c:	eb07 0906 	add.w	r9, r7, r6
 8005320:	d110      	bne.n	8005344 <__cvt+0x92>
 8005322:	783b      	ldrb	r3, [r7, #0]
 8005324:	2b30      	cmp	r3, #48	; 0x30
 8005326:	d10a      	bne.n	800533e <__cvt+0x8c>
 8005328:	2200      	movs	r2, #0
 800532a:	2300      	movs	r3, #0
 800532c:	4620      	mov	r0, r4
 800532e:	4629      	mov	r1, r5
 8005330:	f7fb fbca 	bl	8000ac8 <__aeabi_dcmpeq>
 8005334:	b918      	cbnz	r0, 800533e <__cvt+0x8c>
 8005336:	f1c6 0601 	rsb	r6, r6, #1
 800533a:	f8ca 6000 	str.w	r6, [sl]
 800533e:	f8da 3000 	ldr.w	r3, [sl]
 8005342:	4499      	add	r9, r3
 8005344:	2200      	movs	r2, #0
 8005346:	2300      	movs	r3, #0
 8005348:	4620      	mov	r0, r4
 800534a:	4629      	mov	r1, r5
 800534c:	f7fb fbbc 	bl	8000ac8 <__aeabi_dcmpeq>
 8005350:	b108      	cbz	r0, 8005356 <__cvt+0xa4>
 8005352:	f8cd 900c 	str.w	r9, [sp, #12]
 8005356:	2230      	movs	r2, #48	; 0x30
 8005358:	9b03      	ldr	r3, [sp, #12]
 800535a:	454b      	cmp	r3, r9
 800535c:	d307      	bcc.n	800536e <__cvt+0xbc>
 800535e:	9b03      	ldr	r3, [sp, #12]
 8005360:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005362:	1bdb      	subs	r3, r3, r7
 8005364:	4638      	mov	r0, r7
 8005366:	6013      	str	r3, [r2, #0]
 8005368:	b004      	add	sp, #16
 800536a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800536e:	1c59      	adds	r1, r3, #1
 8005370:	9103      	str	r1, [sp, #12]
 8005372:	701a      	strb	r2, [r3, #0]
 8005374:	e7f0      	b.n	8005358 <__cvt+0xa6>

08005376 <__exponent>:
 8005376:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005378:	4603      	mov	r3, r0
 800537a:	2900      	cmp	r1, #0
 800537c:	bfb8      	it	lt
 800537e:	4249      	neglt	r1, r1
 8005380:	f803 2b02 	strb.w	r2, [r3], #2
 8005384:	bfb4      	ite	lt
 8005386:	222d      	movlt	r2, #45	; 0x2d
 8005388:	222b      	movge	r2, #43	; 0x2b
 800538a:	2909      	cmp	r1, #9
 800538c:	7042      	strb	r2, [r0, #1]
 800538e:	dd2a      	ble.n	80053e6 <__exponent+0x70>
 8005390:	f10d 0207 	add.w	r2, sp, #7
 8005394:	4617      	mov	r7, r2
 8005396:	260a      	movs	r6, #10
 8005398:	4694      	mov	ip, r2
 800539a:	fb91 f5f6 	sdiv	r5, r1, r6
 800539e:	fb06 1415 	mls	r4, r6, r5, r1
 80053a2:	3430      	adds	r4, #48	; 0x30
 80053a4:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80053a8:	460c      	mov	r4, r1
 80053aa:	2c63      	cmp	r4, #99	; 0x63
 80053ac:	f102 32ff 	add.w	r2, r2, #4294967295
 80053b0:	4629      	mov	r1, r5
 80053b2:	dcf1      	bgt.n	8005398 <__exponent+0x22>
 80053b4:	3130      	adds	r1, #48	; 0x30
 80053b6:	f1ac 0402 	sub.w	r4, ip, #2
 80053ba:	f802 1c01 	strb.w	r1, [r2, #-1]
 80053be:	1c41      	adds	r1, r0, #1
 80053c0:	4622      	mov	r2, r4
 80053c2:	42ba      	cmp	r2, r7
 80053c4:	d30a      	bcc.n	80053dc <__exponent+0x66>
 80053c6:	f10d 0209 	add.w	r2, sp, #9
 80053ca:	eba2 020c 	sub.w	r2, r2, ip
 80053ce:	42bc      	cmp	r4, r7
 80053d0:	bf88      	it	hi
 80053d2:	2200      	movhi	r2, #0
 80053d4:	4413      	add	r3, r2
 80053d6:	1a18      	subs	r0, r3, r0
 80053d8:	b003      	add	sp, #12
 80053da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053dc:	f812 5b01 	ldrb.w	r5, [r2], #1
 80053e0:	f801 5f01 	strb.w	r5, [r1, #1]!
 80053e4:	e7ed      	b.n	80053c2 <__exponent+0x4c>
 80053e6:	2330      	movs	r3, #48	; 0x30
 80053e8:	3130      	adds	r1, #48	; 0x30
 80053ea:	7083      	strb	r3, [r0, #2]
 80053ec:	70c1      	strb	r1, [r0, #3]
 80053ee:	1d03      	adds	r3, r0, #4
 80053f0:	e7f1      	b.n	80053d6 <__exponent+0x60>
	...

080053f4 <_printf_float>:
 80053f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053f8:	ed2d 8b02 	vpush	{d8}
 80053fc:	b08d      	sub	sp, #52	; 0x34
 80053fe:	460c      	mov	r4, r1
 8005400:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005404:	4616      	mov	r6, r2
 8005406:	461f      	mov	r7, r3
 8005408:	4605      	mov	r5, r0
 800540a:	f000 fcd5 	bl	8005db8 <_localeconv_r>
 800540e:	f8d0 a000 	ldr.w	sl, [r0]
 8005412:	4650      	mov	r0, sl
 8005414:	f7fa ff2c 	bl	8000270 <strlen>
 8005418:	2300      	movs	r3, #0
 800541a:	930a      	str	r3, [sp, #40]	; 0x28
 800541c:	6823      	ldr	r3, [r4, #0]
 800541e:	9305      	str	r3, [sp, #20]
 8005420:	f8d8 3000 	ldr.w	r3, [r8]
 8005424:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005428:	3307      	adds	r3, #7
 800542a:	f023 0307 	bic.w	r3, r3, #7
 800542e:	f103 0208 	add.w	r2, r3, #8
 8005432:	f8c8 2000 	str.w	r2, [r8]
 8005436:	e9d3 8900 	ldrd	r8, r9, [r3]
 800543a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800543e:	9307      	str	r3, [sp, #28]
 8005440:	f8cd 8018 	str.w	r8, [sp, #24]
 8005444:	ee08 0a10 	vmov	s16, r0
 8005448:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800544c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005450:	4b9e      	ldr	r3, [pc, #632]	; (80056cc <_printf_float+0x2d8>)
 8005452:	f04f 32ff 	mov.w	r2, #4294967295
 8005456:	f7fb fb69 	bl	8000b2c <__aeabi_dcmpun>
 800545a:	bb88      	cbnz	r0, 80054c0 <_printf_float+0xcc>
 800545c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005460:	4b9a      	ldr	r3, [pc, #616]	; (80056cc <_printf_float+0x2d8>)
 8005462:	f04f 32ff 	mov.w	r2, #4294967295
 8005466:	f7fb fb43 	bl	8000af0 <__aeabi_dcmple>
 800546a:	bb48      	cbnz	r0, 80054c0 <_printf_float+0xcc>
 800546c:	2200      	movs	r2, #0
 800546e:	2300      	movs	r3, #0
 8005470:	4640      	mov	r0, r8
 8005472:	4649      	mov	r1, r9
 8005474:	f7fb fb32 	bl	8000adc <__aeabi_dcmplt>
 8005478:	b110      	cbz	r0, 8005480 <_printf_float+0x8c>
 800547a:	232d      	movs	r3, #45	; 0x2d
 800547c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005480:	4a93      	ldr	r2, [pc, #588]	; (80056d0 <_printf_float+0x2dc>)
 8005482:	4b94      	ldr	r3, [pc, #592]	; (80056d4 <_printf_float+0x2e0>)
 8005484:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005488:	bf94      	ite	ls
 800548a:	4690      	movls	r8, r2
 800548c:	4698      	movhi	r8, r3
 800548e:	2303      	movs	r3, #3
 8005490:	6123      	str	r3, [r4, #16]
 8005492:	9b05      	ldr	r3, [sp, #20]
 8005494:	f023 0304 	bic.w	r3, r3, #4
 8005498:	6023      	str	r3, [r4, #0]
 800549a:	f04f 0900 	mov.w	r9, #0
 800549e:	9700      	str	r7, [sp, #0]
 80054a0:	4633      	mov	r3, r6
 80054a2:	aa0b      	add	r2, sp, #44	; 0x2c
 80054a4:	4621      	mov	r1, r4
 80054a6:	4628      	mov	r0, r5
 80054a8:	f000 f9da 	bl	8005860 <_printf_common>
 80054ac:	3001      	adds	r0, #1
 80054ae:	f040 8090 	bne.w	80055d2 <_printf_float+0x1de>
 80054b2:	f04f 30ff 	mov.w	r0, #4294967295
 80054b6:	b00d      	add	sp, #52	; 0x34
 80054b8:	ecbd 8b02 	vpop	{d8}
 80054bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054c0:	4642      	mov	r2, r8
 80054c2:	464b      	mov	r3, r9
 80054c4:	4640      	mov	r0, r8
 80054c6:	4649      	mov	r1, r9
 80054c8:	f7fb fb30 	bl	8000b2c <__aeabi_dcmpun>
 80054cc:	b140      	cbz	r0, 80054e0 <_printf_float+0xec>
 80054ce:	464b      	mov	r3, r9
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	bfbc      	itt	lt
 80054d4:	232d      	movlt	r3, #45	; 0x2d
 80054d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80054da:	4a7f      	ldr	r2, [pc, #508]	; (80056d8 <_printf_float+0x2e4>)
 80054dc:	4b7f      	ldr	r3, [pc, #508]	; (80056dc <_printf_float+0x2e8>)
 80054de:	e7d1      	b.n	8005484 <_printf_float+0x90>
 80054e0:	6863      	ldr	r3, [r4, #4]
 80054e2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80054e6:	9206      	str	r2, [sp, #24]
 80054e8:	1c5a      	adds	r2, r3, #1
 80054ea:	d13f      	bne.n	800556c <_printf_float+0x178>
 80054ec:	2306      	movs	r3, #6
 80054ee:	6063      	str	r3, [r4, #4]
 80054f0:	9b05      	ldr	r3, [sp, #20]
 80054f2:	6861      	ldr	r1, [r4, #4]
 80054f4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80054f8:	2300      	movs	r3, #0
 80054fa:	9303      	str	r3, [sp, #12]
 80054fc:	ab0a      	add	r3, sp, #40	; 0x28
 80054fe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005502:	ab09      	add	r3, sp, #36	; 0x24
 8005504:	ec49 8b10 	vmov	d0, r8, r9
 8005508:	9300      	str	r3, [sp, #0]
 800550a:	6022      	str	r2, [r4, #0]
 800550c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005510:	4628      	mov	r0, r5
 8005512:	f7ff fece 	bl	80052b2 <__cvt>
 8005516:	9b06      	ldr	r3, [sp, #24]
 8005518:	9909      	ldr	r1, [sp, #36]	; 0x24
 800551a:	2b47      	cmp	r3, #71	; 0x47
 800551c:	4680      	mov	r8, r0
 800551e:	d108      	bne.n	8005532 <_printf_float+0x13e>
 8005520:	1cc8      	adds	r0, r1, #3
 8005522:	db02      	blt.n	800552a <_printf_float+0x136>
 8005524:	6863      	ldr	r3, [r4, #4]
 8005526:	4299      	cmp	r1, r3
 8005528:	dd41      	ble.n	80055ae <_printf_float+0x1ba>
 800552a:	f1ab 0302 	sub.w	r3, fp, #2
 800552e:	fa5f fb83 	uxtb.w	fp, r3
 8005532:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005536:	d820      	bhi.n	800557a <_printf_float+0x186>
 8005538:	3901      	subs	r1, #1
 800553a:	465a      	mov	r2, fp
 800553c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005540:	9109      	str	r1, [sp, #36]	; 0x24
 8005542:	f7ff ff18 	bl	8005376 <__exponent>
 8005546:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005548:	1813      	adds	r3, r2, r0
 800554a:	2a01      	cmp	r2, #1
 800554c:	4681      	mov	r9, r0
 800554e:	6123      	str	r3, [r4, #16]
 8005550:	dc02      	bgt.n	8005558 <_printf_float+0x164>
 8005552:	6822      	ldr	r2, [r4, #0]
 8005554:	07d2      	lsls	r2, r2, #31
 8005556:	d501      	bpl.n	800555c <_printf_float+0x168>
 8005558:	3301      	adds	r3, #1
 800555a:	6123      	str	r3, [r4, #16]
 800555c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005560:	2b00      	cmp	r3, #0
 8005562:	d09c      	beq.n	800549e <_printf_float+0xaa>
 8005564:	232d      	movs	r3, #45	; 0x2d
 8005566:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800556a:	e798      	b.n	800549e <_printf_float+0xaa>
 800556c:	9a06      	ldr	r2, [sp, #24]
 800556e:	2a47      	cmp	r2, #71	; 0x47
 8005570:	d1be      	bne.n	80054f0 <_printf_float+0xfc>
 8005572:	2b00      	cmp	r3, #0
 8005574:	d1bc      	bne.n	80054f0 <_printf_float+0xfc>
 8005576:	2301      	movs	r3, #1
 8005578:	e7b9      	b.n	80054ee <_printf_float+0xfa>
 800557a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800557e:	d118      	bne.n	80055b2 <_printf_float+0x1be>
 8005580:	2900      	cmp	r1, #0
 8005582:	6863      	ldr	r3, [r4, #4]
 8005584:	dd0b      	ble.n	800559e <_printf_float+0x1aa>
 8005586:	6121      	str	r1, [r4, #16]
 8005588:	b913      	cbnz	r3, 8005590 <_printf_float+0x19c>
 800558a:	6822      	ldr	r2, [r4, #0]
 800558c:	07d0      	lsls	r0, r2, #31
 800558e:	d502      	bpl.n	8005596 <_printf_float+0x1a2>
 8005590:	3301      	adds	r3, #1
 8005592:	440b      	add	r3, r1
 8005594:	6123      	str	r3, [r4, #16]
 8005596:	65a1      	str	r1, [r4, #88]	; 0x58
 8005598:	f04f 0900 	mov.w	r9, #0
 800559c:	e7de      	b.n	800555c <_printf_float+0x168>
 800559e:	b913      	cbnz	r3, 80055a6 <_printf_float+0x1b2>
 80055a0:	6822      	ldr	r2, [r4, #0]
 80055a2:	07d2      	lsls	r2, r2, #31
 80055a4:	d501      	bpl.n	80055aa <_printf_float+0x1b6>
 80055a6:	3302      	adds	r3, #2
 80055a8:	e7f4      	b.n	8005594 <_printf_float+0x1a0>
 80055aa:	2301      	movs	r3, #1
 80055ac:	e7f2      	b.n	8005594 <_printf_float+0x1a0>
 80055ae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80055b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055b4:	4299      	cmp	r1, r3
 80055b6:	db05      	blt.n	80055c4 <_printf_float+0x1d0>
 80055b8:	6823      	ldr	r3, [r4, #0]
 80055ba:	6121      	str	r1, [r4, #16]
 80055bc:	07d8      	lsls	r0, r3, #31
 80055be:	d5ea      	bpl.n	8005596 <_printf_float+0x1a2>
 80055c0:	1c4b      	adds	r3, r1, #1
 80055c2:	e7e7      	b.n	8005594 <_printf_float+0x1a0>
 80055c4:	2900      	cmp	r1, #0
 80055c6:	bfd4      	ite	le
 80055c8:	f1c1 0202 	rsble	r2, r1, #2
 80055cc:	2201      	movgt	r2, #1
 80055ce:	4413      	add	r3, r2
 80055d0:	e7e0      	b.n	8005594 <_printf_float+0x1a0>
 80055d2:	6823      	ldr	r3, [r4, #0]
 80055d4:	055a      	lsls	r2, r3, #21
 80055d6:	d407      	bmi.n	80055e8 <_printf_float+0x1f4>
 80055d8:	6923      	ldr	r3, [r4, #16]
 80055da:	4642      	mov	r2, r8
 80055dc:	4631      	mov	r1, r6
 80055de:	4628      	mov	r0, r5
 80055e0:	47b8      	blx	r7
 80055e2:	3001      	adds	r0, #1
 80055e4:	d12c      	bne.n	8005640 <_printf_float+0x24c>
 80055e6:	e764      	b.n	80054b2 <_printf_float+0xbe>
 80055e8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80055ec:	f240 80e0 	bls.w	80057b0 <_printf_float+0x3bc>
 80055f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80055f4:	2200      	movs	r2, #0
 80055f6:	2300      	movs	r3, #0
 80055f8:	f7fb fa66 	bl	8000ac8 <__aeabi_dcmpeq>
 80055fc:	2800      	cmp	r0, #0
 80055fe:	d034      	beq.n	800566a <_printf_float+0x276>
 8005600:	4a37      	ldr	r2, [pc, #220]	; (80056e0 <_printf_float+0x2ec>)
 8005602:	2301      	movs	r3, #1
 8005604:	4631      	mov	r1, r6
 8005606:	4628      	mov	r0, r5
 8005608:	47b8      	blx	r7
 800560a:	3001      	adds	r0, #1
 800560c:	f43f af51 	beq.w	80054b2 <_printf_float+0xbe>
 8005610:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005614:	429a      	cmp	r2, r3
 8005616:	db02      	blt.n	800561e <_printf_float+0x22a>
 8005618:	6823      	ldr	r3, [r4, #0]
 800561a:	07d8      	lsls	r0, r3, #31
 800561c:	d510      	bpl.n	8005640 <_printf_float+0x24c>
 800561e:	ee18 3a10 	vmov	r3, s16
 8005622:	4652      	mov	r2, sl
 8005624:	4631      	mov	r1, r6
 8005626:	4628      	mov	r0, r5
 8005628:	47b8      	blx	r7
 800562a:	3001      	adds	r0, #1
 800562c:	f43f af41 	beq.w	80054b2 <_printf_float+0xbe>
 8005630:	f04f 0800 	mov.w	r8, #0
 8005634:	f104 091a 	add.w	r9, r4, #26
 8005638:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800563a:	3b01      	subs	r3, #1
 800563c:	4543      	cmp	r3, r8
 800563e:	dc09      	bgt.n	8005654 <_printf_float+0x260>
 8005640:	6823      	ldr	r3, [r4, #0]
 8005642:	079b      	lsls	r3, r3, #30
 8005644:	f100 8107 	bmi.w	8005856 <_printf_float+0x462>
 8005648:	68e0      	ldr	r0, [r4, #12]
 800564a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800564c:	4298      	cmp	r0, r3
 800564e:	bfb8      	it	lt
 8005650:	4618      	movlt	r0, r3
 8005652:	e730      	b.n	80054b6 <_printf_float+0xc2>
 8005654:	2301      	movs	r3, #1
 8005656:	464a      	mov	r2, r9
 8005658:	4631      	mov	r1, r6
 800565a:	4628      	mov	r0, r5
 800565c:	47b8      	blx	r7
 800565e:	3001      	adds	r0, #1
 8005660:	f43f af27 	beq.w	80054b2 <_printf_float+0xbe>
 8005664:	f108 0801 	add.w	r8, r8, #1
 8005668:	e7e6      	b.n	8005638 <_printf_float+0x244>
 800566a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800566c:	2b00      	cmp	r3, #0
 800566e:	dc39      	bgt.n	80056e4 <_printf_float+0x2f0>
 8005670:	4a1b      	ldr	r2, [pc, #108]	; (80056e0 <_printf_float+0x2ec>)
 8005672:	2301      	movs	r3, #1
 8005674:	4631      	mov	r1, r6
 8005676:	4628      	mov	r0, r5
 8005678:	47b8      	blx	r7
 800567a:	3001      	adds	r0, #1
 800567c:	f43f af19 	beq.w	80054b2 <_printf_float+0xbe>
 8005680:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005684:	4313      	orrs	r3, r2
 8005686:	d102      	bne.n	800568e <_printf_float+0x29a>
 8005688:	6823      	ldr	r3, [r4, #0]
 800568a:	07d9      	lsls	r1, r3, #31
 800568c:	d5d8      	bpl.n	8005640 <_printf_float+0x24c>
 800568e:	ee18 3a10 	vmov	r3, s16
 8005692:	4652      	mov	r2, sl
 8005694:	4631      	mov	r1, r6
 8005696:	4628      	mov	r0, r5
 8005698:	47b8      	blx	r7
 800569a:	3001      	adds	r0, #1
 800569c:	f43f af09 	beq.w	80054b2 <_printf_float+0xbe>
 80056a0:	f04f 0900 	mov.w	r9, #0
 80056a4:	f104 0a1a 	add.w	sl, r4, #26
 80056a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056aa:	425b      	negs	r3, r3
 80056ac:	454b      	cmp	r3, r9
 80056ae:	dc01      	bgt.n	80056b4 <_printf_float+0x2c0>
 80056b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056b2:	e792      	b.n	80055da <_printf_float+0x1e6>
 80056b4:	2301      	movs	r3, #1
 80056b6:	4652      	mov	r2, sl
 80056b8:	4631      	mov	r1, r6
 80056ba:	4628      	mov	r0, r5
 80056bc:	47b8      	blx	r7
 80056be:	3001      	adds	r0, #1
 80056c0:	f43f aef7 	beq.w	80054b2 <_printf_float+0xbe>
 80056c4:	f109 0901 	add.w	r9, r9, #1
 80056c8:	e7ee      	b.n	80056a8 <_printf_float+0x2b4>
 80056ca:	bf00      	nop
 80056cc:	7fefffff 	.word	0x7fefffff
 80056d0:	08008050 	.word	0x08008050
 80056d4:	08008054 	.word	0x08008054
 80056d8:	08008058 	.word	0x08008058
 80056dc:	0800805c 	.word	0x0800805c
 80056e0:	08008060 	.word	0x08008060
 80056e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80056e8:	429a      	cmp	r2, r3
 80056ea:	bfa8      	it	ge
 80056ec:	461a      	movge	r2, r3
 80056ee:	2a00      	cmp	r2, #0
 80056f0:	4691      	mov	r9, r2
 80056f2:	dc37      	bgt.n	8005764 <_printf_float+0x370>
 80056f4:	f04f 0b00 	mov.w	fp, #0
 80056f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056fc:	f104 021a 	add.w	r2, r4, #26
 8005700:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005702:	9305      	str	r3, [sp, #20]
 8005704:	eba3 0309 	sub.w	r3, r3, r9
 8005708:	455b      	cmp	r3, fp
 800570a:	dc33      	bgt.n	8005774 <_printf_float+0x380>
 800570c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005710:	429a      	cmp	r2, r3
 8005712:	db3b      	blt.n	800578c <_printf_float+0x398>
 8005714:	6823      	ldr	r3, [r4, #0]
 8005716:	07da      	lsls	r2, r3, #31
 8005718:	d438      	bmi.n	800578c <_printf_float+0x398>
 800571a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800571e:	eba2 0903 	sub.w	r9, r2, r3
 8005722:	9b05      	ldr	r3, [sp, #20]
 8005724:	1ad2      	subs	r2, r2, r3
 8005726:	4591      	cmp	r9, r2
 8005728:	bfa8      	it	ge
 800572a:	4691      	movge	r9, r2
 800572c:	f1b9 0f00 	cmp.w	r9, #0
 8005730:	dc35      	bgt.n	800579e <_printf_float+0x3aa>
 8005732:	f04f 0800 	mov.w	r8, #0
 8005736:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800573a:	f104 0a1a 	add.w	sl, r4, #26
 800573e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005742:	1a9b      	subs	r3, r3, r2
 8005744:	eba3 0309 	sub.w	r3, r3, r9
 8005748:	4543      	cmp	r3, r8
 800574a:	f77f af79 	ble.w	8005640 <_printf_float+0x24c>
 800574e:	2301      	movs	r3, #1
 8005750:	4652      	mov	r2, sl
 8005752:	4631      	mov	r1, r6
 8005754:	4628      	mov	r0, r5
 8005756:	47b8      	blx	r7
 8005758:	3001      	adds	r0, #1
 800575a:	f43f aeaa 	beq.w	80054b2 <_printf_float+0xbe>
 800575e:	f108 0801 	add.w	r8, r8, #1
 8005762:	e7ec      	b.n	800573e <_printf_float+0x34a>
 8005764:	4613      	mov	r3, r2
 8005766:	4631      	mov	r1, r6
 8005768:	4642      	mov	r2, r8
 800576a:	4628      	mov	r0, r5
 800576c:	47b8      	blx	r7
 800576e:	3001      	adds	r0, #1
 8005770:	d1c0      	bne.n	80056f4 <_printf_float+0x300>
 8005772:	e69e      	b.n	80054b2 <_printf_float+0xbe>
 8005774:	2301      	movs	r3, #1
 8005776:	4631      	mov	r1, r6
 8005778:	4628      	mov	r0, r5
 800577a:	9205      	str	r2, [sp, #20]
 800577c:	47b8      	blx	r7
 800577e:	3001      	adds	r0, #1
 8005780:	f43f ae97 	beq.w	80054b2 <_printf_float+0xbe>
 8005784:	9a05      	ldr	r2, [sp, #20]
 8005786:	f10b 0b01 	add.w	fp, fp, #1
 800578a:	e7b9      	b.n	8005700 <_printf_float+0x30c>
 800578c:	ee18 3a10 	vmov	r3, s16
 8005790:	4652      	mov	r2, sl
 8005792:	4631      	mov	r1, r6
 8005794:	4628      	mov	r0, r5
 8005796:	47b8      	blx	r7
 8005798:	3001      	adds	r0, #1
 800579a:	d1be      	bne.n	800571a <_printf_float+0x326>
 800579c:	e689      	b.n	80054b2 <_printf_float+0xbe>
 800579e:	9a05      	ldr	r2, [sp, #20]
 80057a0:	464b      	mov	r3, r9
 80057a2:	4442      	add	r2, r8
 80057a4:	4631      	mov	r1, r6
 80057a6:	4628      	mov	r0, r5
 80057a8:	47b8      	blx	r7
 80057aa:	3001      	adds	r0, #1
 80057ac:	d1c1      	bne.n	8005732 <_printf_float+0x33e>
 80057ae:	e680      	b.n	80054b2 <_printf_float+0xbe>
 80057b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057b2:	2a01      	cmp	r2, #1
 80057b4:	dc01      	bgt.n	80057ba <_printf_float+0x3c6>
 80057b6:	07db      	lsls	r3, r3, #31
 80057b8:	d53a      	bpl.n	8005830 <_printf_float+0x43c>
 80057ba:	2301      	movs	r3, #1
 80057bc:	4642      	mov	r2, r8
 80057be:	4631      	mov	r1, r6
 80057c0:	4628      	mov	r0, r5
 80057c2:	47b8      	blx	r7
 80057c4:	3001      	adds	r0, #1
 80057c6:	f43f ae74 	beq.w	80054b2 <_printf_float+0xbe>
 80057ca:	ee18 3a10 	vmov	r3, s16
 80057ce:	4652      	mov	r2, sl
 80057d0:	4631      	mov	r1, r6
 80057d2:	4628      	mov	r0, r5
 80057d4:	47b8      	blx	r7
 80057d6:	3001      	adds	r0, #1
 80057d8:	f43f ae6b 	beq.w	80054b2 <_printf_float+0xbe>
 80057dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80057e0:	2200      	movs	r2, #0
 80057e2:	2300      	movs	r3, #0
 80057e4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80057e8:	f7fb f96e 	bl	8000ac8 <__aeabi_dcmpeq>
 80057ec:	b9d8      	cbnz	r0, 8005826 <_printf_float+0x432>
 80057ee:	f10a 33ff 	add.w	r3, sl, #4294967295
 80057f2:	f108 0201 	add.w	r2, r8, #1
 80057f6:	4631      	mov	r1, r6
 80057f8:	4628      	mov	r0, r5
 80057fa:	47b8      	blx	r7
 80057fc:	3001      	adds	r0, #1
 80057fe:	d10e      	bne.n	800581e <_printf_float+0x42a>
 8005800:	e657      	b.n	80054b2 <_printf_float+0xbe>
 8005802:	2301      	movs	r3, #1
 8005804:	4652      	mov	r2, sl
 8005806:	4631      	mov	r1, r6
 8005808:	4628      	mov	r0, r5
 800580a:	47b8      	blx	r7
 800580c:	3001      	adds	r0, #1
 800580e:	f43f ae50 	beq.w	80054b2 <_printf_float+0xbe>
 8005812:	f108 0801 	add.w	r8, r8, #1
 8005816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005818:	3b01      	subs	r3, #1
 800581a:	4543      	cmp	r3, r8
 800581c:	dcf1      	bgt.n	8005802 <_printf_float+0x40e>
 800581e:	464b      	mov	r3, r9
 8005820:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005824:	e6da      	b.n	80055dc <_printf_float+0x1e8>
 8005826:	f04f 0800 	mov.w	r8, #0
 800582a:	f104 0a1a 	add.w	sl, r4, #26
 800582e:	e7f2      	b.n	8005816 <_printf_float+0x422>
 8005830:	2301      	movs	r3, #1
 8005832:	4642      	mov	r2, r8
 8005834:	e7df      	b.n	80057f6 <_printf_float+0x402>
 8005836:	2301      	movs	r3, #1
 8005838:	464a      	mov	r2, r9
 800583a:	4631      	mov	r1, r6
 800583c:	4628      	mov	r0, r5
 800583e:	47b8      	blx	r7
 8005840:	3001      	adds	r0, #1
 8005842:	f43f ae36 	beq.w	80054b2 <_printf_float+0xbe>
 8005846:	f108 0801 	add.w	r8, r8, #1
 800584a:	68e3      	ldr	r3, [r4, #12]
 800584c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800584e:	1a5b      	subs	r3, r3, r1
 8005850:	4543      	cmp	r3, r8
 8005852:	dcf0      	bgt.n	8005836 <_printf_float+0x442>
 8005854:	e6f8      	b.n	8005648 <_printf_float+0x254>
 8005856:	f04f 0800 	mov.w	r8, #0
 800585a:	f104 0919 	add.w	r9, r4, #25
 800585e:	e7f4      	b.n	800584a <_printf_float+0x456>

08005860 <_printf_common>:
 8005860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005864:	4616      	mov	r6, r2
 8005866:	4699      	mov	r9, r3
 8005868:	688a      	ldr	r2, [r1, #8]
 800586a:	690b      	ldr	r3, [r1, #16]
 800586c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005870:	4293      	cmp	r3, r2
 8005872:	bfb8      	it	lt
 8005874:	4613      	movlt	r3, r2
 8005876:	6033      	str	r3, [r6, #0]
 8005878:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800587c:	4607      	mov	r7, r0
 800587e:	460c      	mov	r4, r1
 8005880:	b10a      	cbz	r2, 8005886 <_printf_common+0x26>
 8005882:	3301      	adds	r3, #1
 8005884:	6033      	str	r3, [r6, #0]
 8005886:	6823      	ldr	r3, [r4, #0]
 8005888:	0699      	lsls	r1, r3, #26
 800588a:	bf42      	ittt	mi
 800588c:	6833      	ldrmi	r3, [r6, #0]
 800588e:	3302      	addmi	r3, #2
 8005890:	6033      	strmi	r3, [r6, #0]
 8005892:	6825      	ldr	r5, [r4, #0]
 8005894:	f015 0506 	ands.w	r5, r5, #6
 8005898:	d106      	bne.n	80058a8 <_printf_common+0x48>
 800589a:	f104 0a19 	add.w	sl, r4, #25
 800589e:	68e3      	ldr	r3, [r4, #12]
 80058a0:	6832      	ldr	r2, [r6, #0]
 80058a2:	1a9b      	subs	r3, r3, r2
 80058a4:	42ab      	cmp	r3, r5
 80058a6:	dc26      	bgt.n	80058f6 <_printf_common+0x96>
 80058a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80058ac:	1e13      	subs	r3, r2, #0
 80058ae:	6822      	ldr	r2, [r4, #0]
 80058b0:	bf18      	it	ne
 80058b2:	2301      	movne	r3, #1
 80058b4:	0692      	lsls	r2, r2, #26
 80058b6:	d42b      	bmi.n	8005910 <_printf_common+0xb0>
 80058b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058bc:	4649      	mov	r1, r9
 80058be:	4638      	mov	r0, r7
 80058c0:	47c0      	blx	r8
 80058c2:	3001      	adds	r0, #1
 80058c4:	d01e      	beq.n	8005904 <_printf_common+0xa4>
 80058c6:	6823      	ldr	r3, [r4, #0]
 80058c8:	6922      	ldr	r2, [r4, #16]
 80058ca:	f003 0306 	and.w	r3, r3, #6
 80058ce:	2b04      	cmp	r3, #4
 80058d0:	bf02      	ittt	eq
 80058d2:	68e5      	ldreq	r5, [r4, #12]
 80058d4:	6833      	ldreq	r3, [r6, #0]
 80058d6:	1aed      	subeq	r5, r5, r3
 80058d8:	68a3      	ldr	r3, [r4, #8]
 80058da:	bf0c      	ite	eq
 80058dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058e0:	2500      	movne	r5, #0
 80058e2:	4293      	cmp	r3, r2
 80058e4:	bfc4      	itt	gt
 80058e6:	1a9b      	subgt	r3, r3, r2
 80058e8:	18ed      	addgt	r5, r5, r3
 80058ea:	2600      	movs	r6, #0
 80058ec:	341a      	adds	r4, #26
 80058ee:	42b5      	cmp	r5, r6
 80058f0:	d11a      	bne.n	8005928 <_printf_common+0xc8>
 80058f2:	2000      	movs	r0, #0
 80058f4:	e008      	b.n	8005908 <_printf_common+0xa8>
 80058f6:	2301      	movs	r3, #1
 80058f8:	4652      	mov	r2, sl
 80058fa:	4649      	mov	r1, r9
 80058fc:	4638      	mov	r0, r7
 80058fe:	47c0      	blx	r8
 8005900:	3001      	adds	r0, #1
 8005902:	d103      	bne.n	800590c <_printf_common+0xac>
 8005904:	f04f 30ff 	mov.w	r0, #4294967295
 8005908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800590c:	3501      	adds	r5, #1
 800590e:	e7c6      	b.n	800589e <_printf_common+0x3e>
 8005910:	18e1      	adds	r1, r4, r3
 8005912:	1c5a      	adds	r2, r3, #1
 8005914:	2030      	movs	r0, #48	; 0x30
 8005916:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800591a:	4422      	add	r2, r4
 800591c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005920:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005924:	3302      	adds	r3, #2
 8005926:	e7c7      	b.n	80058b8 <_printf_common+0x58>
 8005928:	2301      	movs	r3, #1
 800592a:	4622      	mov	r2, r4
 800592c:	4649      	mov	r1, r9
 800592e:	4638      	mov	r0, r7
 8005930:	47c0      	blx	r8
 8005932:	3001      	adds	r0, #1
 8005934:	d0e6      	beq.n	8005904 <_printf_common+0xa4>
 8005936:	3601      	adds	r6, #1
 8005938:	e7d9      	b.n	80058ee <_printf_common+0x8e>
	...

0800593c <_printf_i>:
 800593c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005940:	7e0f      	ldrb	r7, [r1, #24]
 8005942:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005944:	2f78      	cmp	r7, #120	; 0x78
 8005946:	4691      	mov	r9, r2
 8005948:	4680      	mov	r8, r0
 800594a:	460c      	mov	r4, r1
 800594c:	469a      	mov	sl, r3
 800594e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005952:	d807      	bhi.n	8005964 <_printf_i+0x28>
 8005954:	2f62      	cmp	r7, #98	; 0x62
 8005956:	d80a      	bhi.n	800596e <_printf_i+0x32>
 8005958:	2f00      	cmp	r7, #0
 800595a:	f000 80d4 	beq.w	8005b06 <_printf_i+0x1ca>
 800595e:	2f58      	cmp	r7, #88	; 0x58
 8005960:	f000 80c0 	beq.w	8005ae4 <_printf_i+0x1a8>
 8005964:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005968:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800596c:	e03a      	b.n	80059e4 <_printf_i+0xa8>
 800596e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005972:	2b15      	cmp	r3, #21
 8005974:	d8f6      	bhi.n	8005964 <_printf_i+0x28>
 8005976:	a101      	add	r1, pc, #4	; (adr r1, 800597c <_printf_i+0x40>)
 8005978:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800597c:	080059d5 	.word	0x080059d5
 8005980:	080059e9 	.word	0x080059e9
 8005984:	08005965 	.word	0x08005965
 8005988:	08005965 	.word	0x08005965
 800598c:	08005965 	.word	0x08005965
 8005990:	08005965 	.word	0x08005965
 8005994:	080059e9 	.word	0x080059e9
 8005998:	08005965 	.word	0x08005965
 800599c:	08005965 	.word	0x08005965
 80059a0:	08005965 	.word	0x08005965
 80059a4:	08005965 	.word	0x08005965
 80059a8:	08005aed 	.word	0x08005aed
 80059ac:	08005a15 	.word	0x08005a15
 80059b0:	08005aa7 	.word	0x08005aa7
 80059b4:	08005965 	.word	0x08005965
 80059b8:	08005965 	.word	0x08005965
 80059bc:	08005b0f 	.word	0x08005b0f
 80059c0:	08005965 	.word	0x08005965
 80059c4:	08005a15 	.word	0x08005a15
 80059c8:	08005965 	.word	0x08005965
 80059cc:	08005965 	.word	0x08005965
 80059d0:	08005aaf 	.word	0x08005aaf
 80059d4:	682b      	ldr	r3, [r5, #0]
 80059d6:	1d1a      	adds	r2, r3, #4
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	602a      	str	r2, [r5, #0]
 80059dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059e4:	2301      	movs	r3, #1
 80059e6:	e09f      	b.n	8005b28 <_printf_i+0x1ec>
 80059e8:	6820      	ldr	r0, [r4, #0]
 80059ea:	682b      	ldr	r3, [r5, #0]
 80059ec:	0607      	lsls	r7, r0, #24
 80059ee:	f103 0104 	add.w	r1, r3, #4
 80059f2:	6029      	str	r1, [r5, #0]
 80059f4:	d501      	bpl.n	80059fa <_printf_i+0xbe>
 80059f6:	681e      	ldr	r6, [r3, #0]
 80059f8:	e003      	b.n	8005a02 <_printf_i+0xc6>
 80059fa:	0646      	lsls	r6, r0, #25
 80059fc:	d5fb      	bpl.n	80059f6 <_printf_i+0xba>
 80059fe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005a02:	2e00      	cmp	r6, #0
 8005a04:	da03      	bge.n	8005a0e <_printf_i+0xd2>
 8005a06:	232d      	movs	r3, #45	; 0x2d
 8005a08:	4276      	negs	r6, r6
 8005a0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a0e:	485a      	ldr	r0, [pc, #360]	; (8005b78 <_printf_i+0x23c>)
 8005a10:	230a      	movs	r3, #10
 8005a12:	e012      	b.n	8005a3a <_printf_i+0xfe>
 8005a14:	682b      	ldr	r3, [r5, #0]
 8005a16:	6820      	ldr	r0, [r4, #0]
 8005a18:	1d19      	adds	r1, r3, #4
 8005a1a:	6029      	str	r1, [r5, #0]
 8005a1c:	0605      	lsls	r5, r0, #24
 8005a1e:	d501      	bpl.n	8005a24 <_printf_i+0xe8>
 8005a20:	681e      	ldr	r6, [r3, #0]
 8005a22:	e002      	b.n	8005a2a <_printf_i+0xee>
 8005a24:	0641      	lsls	r1, r0, #25
 8005a26:	d5fb      	bpl.n	8005a20 <_printf_i+0xe4>
 8005a28:	881e      	ldrh	r6, [r3, #0]
 8005a2a:	4853      	ldr	r0, [pc, #332]	; (8005b78 <_printf_i+0x23c>)
 8005a2c:	2f6f      	cmp	r7, #111	; 0x6f
 8005a2e:	bf0c      	ite	eq
 8005a30:	2308      	moveq	r3, #8
 8005a32:	230a      	movne	r3, #10
 8005a34:	2100      	movs	r1, #0
 8005a36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a3a:	6865      	ldr	r5, [r4, #4]
 8005a3c:	60a5      	str	r5, [r4, #8]
 8005a3e:	2d00      	cmp	r5, #0
 8005a40:	bfa2      	ittt	ge
 8005a42:	6821      	ldrge	r1, [r4, #0]
 8005a44:	f021 0104 	bicge.w	r1, r1, #4
 8005a48:	6021      	strge	r1, [r4, #0]
 8005a4a:	b90e      	cbnz	r6, 8005a50 <_printf_i+0x114>
 8005a4c:	2d00      	cmp	r5, #0
 8005a4e:	d04b      	beq.n	8005ae8 <_printf_i+0x1ac>
 8005a50:	4615      	mov	r5, r2
 8005a52:	fbb6 f1f3 	udiv	r1, r6, r3
 8005a56:	fb03 6711 	mls	r7, r3, r1, r6
 8005a5a:	5dc7      	ldrb	r7, [r0, r7]
 8005a5c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a60:	4637      	mov	r7, r6
 8005a62:	42bb      	cmp	r3, r7
 8005a64:	460e      	mov	r6, r1
 8005a66:	d9f4      	bls.n	8005a52 <_printf_i+0x116>
 8005a68:	2b08      	cmp	r3, #8
 8005a6a:	d10b      	bne.n	8005a84 <_printf_i+0x148>
 8005a6c:	6823      	ldr	r3, [r4, #0]
 8005a6e:	07de      	lsls	r6, r3, #31
 8005a70:	d508      	bpl.n	8005a84 <_printf_i+0x148>
 8005a72:	6923      	ldr	r3, [r4, #16]
 8005a74:	6861      	ldr	r1, [r4, #4]
 8005a76:	4299      	cmp	r1, r3
 8005a78:	bfde      	ittt	le
 8005a7a:	2330      	movle	r3, #48	; 0x30
 8005a7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a80:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a84:	1b52      	subs	r2, r2, r5
 8005a86:	6122      	str	r2, [r4, #16]
 8005a88:	f8cd a000 	str.w	sl, [sp]
 8005a8c:	464b      	mov	r3, r9
 8005a8e:	aa03      	add	r2, sp, #12
 8005a90:	4621      	mov	r1, r4
 8005a92:	4640      	mov	r0, r8
 8005a94:	f7ff fee4 	bl	8005860 <_printf_common>
 8005a98:	3001      	adds	r0, #1
 8005a9a:	d14a      	bne.n	8005b32 <_printf_i+0x1f6>
 8005a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005aa0:	b004      	add	sp, #16
 8005aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aa6:	6823      	ldr	r3, [r4, #0]
 8005aa8:	f043 0320 	orr.w	r3, r3, #32
 8005aac:	6023      	str	r3, [r4, #0]
 8005aae:	4833      	ldr	r0, [pc, #204]	; (8005b7c <_printf_i+0x240>)
 8005ab0:	2778      	movs	r7, #120	; 0x78
 8005ab2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005ab6:	6823      	ldr	r3, [r4, #0]
 8005ab8:	6829      	ldr	r1, [r5, #0]
 8005aba:	061f      	lsls	r7, r3, #24
 8005abc:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ac0:	d402      	bmi.n	8005ac8 <_printf_i+0x18c>
 8005ac2:	065f      	lsls	r7, r3, #25
 8005ac4:	bf48      	it	mi
 8005ac6:	b2b6      	uxthmi	r6, r6
 8005ac8:	07df      	lsls	r7, r3, #31
 8005aca:	bf48      	it	mi
 8005acc:	f043 0320 	orrmi.w	r3, r3, #32
 8005ad0:	6029      	str	r1, [r5, #0]
 8005ad2:	bf48      	it	mi
 8005ad4:	6023      	strmi	r3, [r4, #0]
 8005ad6:	b91e      	cbnz	r6, 8005ae0 <_printf_i+0x1a4>
 8005ad8:	6823      	ldr	r3, [r4, #0]
 8005ada:	f023 0320 	bic.w	r3, r3, #32
 8005ade:	6023      	str	r3, [r4, #0]
 8005ae0:	2310      	movs	r3, #16
 8005ae2:	e7a7      	b.n	8005a34 <_printf_i+0xf8>
 8005ae4:	4824      	ldr	r0, [pc, #144]	; (8005b78 <_printf_i+0x23c>)
 8005ae6:	e7e4      	b.n	8005ab2 <_printf_i+0x176>
 8005ae8:	4615      	mov	r5, r2
 8005aea:	e7bd      	b.n	8005a68 <_printf_i+0x12c>
 8005aec:	682b      	ldr	r3, [r5, #0]
 8005aee:	6826      	ldr	r6, [r4, #0]
 8005af0:	6961      	ldr	r1, [r4, #20]
 8005af2:	1d18      	adds	r0, r3, #4
 8005af4:	6028      	str	r0, [r5, #0]
 8005af6:	0635      	lsls	r5, r6, #24
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	d501      	bpl.n	8005b00 <_printf_i+0x1c4>
 8005afc:	6019      	str	r1, [r3, #0]
 8005afe:	e002      	b.n	8005b06 <_printf_i+0x1ca>
 8005b00:	0670      	lsls	r0, r6, #25
 8005b02:	d5fb      	bpl.n	8005afc <_printf_i+0x1c0>
 8005b04:	8019      	strh	r1, [r3, #0]
 8005b06:	2300      	movs	r3, #0
 8005b08:	6123      	str	r3, [r4, #16]
 8005b0a:	4615      	mov	r5, r2
 8005b0c:	e7bc      	b.n	8005a88 <_printf_i+0x14c>
 8005b0e:	682b      	ldr	r3, [r5, #0]
 8005b10:	1d1a      	adds	r2, r3, #4
 8005b12:	602a      	str	r2, [r5, #0]
 8005b14:	681d      	ldr	r5, [r3, #0]
 8005b16:	6862      	ldr	r2, [r4, #4]
 8005b18:	2100      	movs	r1, #0
 8005b1a:	4628      	mov	r0, r5
 8005b1c:	f7fa fb58 	bl	80001d0 <memchr>
 8005b20:	b108      	cbz	r0, 8005b26 <_printf_i+0x1ea>
 8005b22:	1b40      	subs	r0, r0, r5
 8005b24:	6060      	str	r0, [r4, #4]
 8005b26:	6863      	ldr	r3, [r4, #4]
 8005b28:	6123      	str	r3, [r4, #16]
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b30:	e7aa      	b.n	8005a88 <_printf_i+0x14c>
 8005b32:	6923      	ldr	r3, [r4, #16]
 8005b34:	462a      	mov	r2, r5
 8005b36:	4649      	mov	r1, r9
 8005b38:	4640      	mov	r0, r8
 8005b3a:	47d0      	blx	sl
 8005b3c:	3001      	adds	r0, #1
 8005b3e:	d0ad      	beq.n	8005a9c <_printf_i+0x160>
 8005b40:	6823      	ldr	r3, [r4, #0]
 8005b42:	079b      	lsls	r3, r3, #30
 8005b44:	d413      	bmi.n	8005b6e <_printf_i+0x232>
 8005b46:	68e0      	ldr	r0, [r4, #12]
 8005b48:	9b03      	ldr	r3, [sp, #12]
 8005b4a:	4298      	cmp	r0, r3
 8005b4c:	bfb8      	it	lt
 8005b4e:	4618      	movlt	r0, r3
 8005b50:	e7a6      	b.n	8005aa0 <_printf_i+0x164>
 8005b52:	2301      	movs	r3, #1
 8005b54:	4632      	mov	r2, r6
 8005b56:	4649      	mov	r1, r9
 8005b58:	4640      	mov	r0, r8
 8005b5a:	47d0      	blx	sl
 8005b5c:	3001      	adds	r0, #1
 8005b5e:	d09d      	beq.n	8005a9c <_printf_i+0x160>
 8005b60:	3501      	adds	r5, #1
 8005b62:	68e3      	ldr	r3, [r4, #12]
 8005b64:	9903      	ldr	r1, [sp, #12]
 8005b66:	1a5b      	subs	r3, r3, r1
 8005b68:	42ab      	cmp	r3, r5
 8005b6a:	dcf2      	bgt.n	8005b52 <_printf_i+0x216>
 8005b6c:	e7eb      	b.n	8005b46 <_printf_i+0x20a>
 8005b6e:	2500      	movs	r5, #0
 8005b70:	f104 0619 	add.w	r6, r4, #25
 8005b74:	e7f5      	b.n	8005b62 <_printf_i+0x226>
 8005b76:	bf00      	nop
 8005b78:	08008062 	.word	0x08008062
 8005b7c:	08008073 	.word	0x08008073

08005b80 <std>:
 8005b80:	2300      	movs	r3, #0
 8005b82:	b510      	push	{r4, lr}
 8005b84:	4604      	mov	r4, r0
 8005b86:	e9c0 3300 	strd	r3, r3, [r0]
 8005b8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b8e:	6083      	str	r3, [r0, #8]
 8005b90:	8181      	strh	r1, [r0, #12]
 8005b92:	6643      	str	r3, [r0, #100]	; 0x64
 8005b94:	81c2      	strh	r2, [r0, #14]
 8005b96:	6183      	str	r3, [r0, #24]
 8005b98:	4619      	mov	r1, r3
 8005b9a:	2208      	movs	r2, #8
 8005b9c:	305c      	adds	r0, #92	; 0x5c
 8005b9e:	f000 f902 	bl	8005da6 <memset>
 8005ba2:	4b05      	ldr	r3, [pc, #20]	; (8005bb8 <std+0x38>)
 8005ba4:	6263      	str	r3, [r4, #36]	; 0x24
 8005ba6:	4b05      	ldr	r3, [pc, #20]	; (8005bbc <std+0x3c>)
 8005ba8:	62a3      	str	r3, [r4, #40]	; 0x28
 8005baa:	4b05      	ldr	r3, [pc, #20]	; (8005bc0 <std+0x40>)
 8005bac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005bae:	4b05      	ldr	r3, [pc, #20]	; (8005bc4 <std+0x44>)
 8005bb0:	6224      	str	r4, [r4, #32]
 8005bb2:	6323      	str	r3, [r4, #48]	; 0x30
 8005bb4:	bd10      	pop	{r4, pc}
 8005bb6:	bf00      	nop
 8005bb8:	08005d21 	.word	0x08005d21
 8005bbc:	08005d43 	.word	0x08005d43
 8005bc0:	08005d7b 	.word	0x08005d7b
 8005bc4:	08005d9f 	.word	0x08005d9f

08005bc8 <stdio_exit_handler>:
 8005bc8:	4a02      	ldr	r2, [pc, #8]	; (8005bd4 <stdio_exit_handler+0xc>)
 8005bca:	4903      	ldr	r1, [pc, #12]	; (8005bd8 <stdio_exit_handler+0x10>)
 8005bcc:	4803      	ldr	r0, [pc, #12]	; (8005bdc <stdio_exit_handler+0x14>)
 8005bce:	f000 b869 	b.w	8005ca4 <_fwalk_sglue>
 8005bd2:	bf00      	nop
 8005bd4:	2000000c 	.word	0x2000000c
 8005bd8:	08007851 	.word	0x08007851
 8005bdc:	20000018 	.word	0x20000018

08005be0 <cleanup_stdio>:
 8005be0:	6841      	ldr	r1, [r0, #4]
 8005be2:	4b0c      	ldr	r3, [pc, #48]	; (8005c14 <cleanup_stdio+0x34>)
 8005be4:	4299      	cmp	r1, r3
 8005be6:	b510      	push	{r4, lr}
 8005be8:	4604      	mov	r4, r0
 8005bea:	d001      	beq.n	8005bf0 <cleanup_stdio+0x10>
 8005bec:	f001 fe30 	bl	8007850 <_fflush_r>
 8005bf0:	68a1      	ldr	r1, [r4, #8]
 8005bf2:	4b09      	ldr	r3, [pc, #36]	; (8005c18 <cleanup_stdio+0x38>)
 8005bf4:	4299      	cmp	r1, r3
 8005bf6:	d002      	beq.n	8005bfe <cleanup_stdio+0x1e>
 8005bf8:	4620      	mov	r0, r4
 8005bfa:	f001 fe29 	bl	8007850 <_fflush_r>
 8005bfe:	68e1      	ldr	r1, [r4, #12]
 8005c00:	4b06      	ldr	r3, [pc, #24]	; (8005c1c <cleanup_stdio+0x3c>)
 8005c02:	4299      	cmp	r1, r3
 8005c04:	d004      	beq.n	8005c10 <cleanup_stdio+0x30>
 8005c06:	4620      	mov	r0, r4
 8005c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c0c:	f001 be20 	b.w	8007850 <_fflush_r>
 8005c10:	bd10      	pop	{r4, pc}
 8005c12:	bf00      	nop
 8005c14:	2000032c 	.word	0x2000032c
 8005c18:	20000394 	.word	0x20000394
 8005c1c:	200003fc 	.word	0x200003fc

08005c20 <global_stdio_init.part.0>:
 8005c20:	b510      	push	{r4, lr}
 8005c22:	4b0b      	ldr	r3, [pc, #44]	; (8005c50 <global_stdio_init.part.0+0x30>)
 8005c24:	4c0b      	ldr	r4, [pc, #44]	; (8005c54 <global_stdio_init.part.0+0x34>)
 8005c26:	4a0c      	ldr	r2, [pc, #48]	; (8005c58 <global_stdio_init.part.0+0x38>)
 8005c28:	601a      	str	r2, [r3, #0]
 8005c2a:	4620      	mov	r0, r4
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	2104      	movs	r1, #4
 8005c30:	f7ff ffa6 	bl	8005b80 <std>
 8005c34:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005c38:	2201      	movs	r2, #1
 8005c3a:	2109      	movs	r1, #9
 8005c3c:	f7ff ffa0 	bl	8005b80 <std>
 8005c40:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005c44:	2202      	movs	r2, #2
 8005c46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c4a:	2112      	movs	r1, #18
 8005c4c:	f7ff bf98 	b.w	8005b80 <std>
 8005c50:	20000464 	.word	0x20000464
 8005c54:	2000032c 	.word	0x2000032c
 8005c58:	08005bc9 	.word	0x08005bc9

08005c5c <__sfp_lock_acquire>:
 8005c5c:	4801      	ldr	r0, [pc, #4]	; (8005c64 <__sfp_lock_acquire+0x8>)
 8005c5e:	f000 b91f 	b.w	8005ea0 <__retarget_lock_acquire_recursive>
 8005c62:	bf00      	nop
 8005c64:	2000046d 	.word	0x2000046d

08005c68 <__sfp_lock_release>:
 8005c68:	4801      	ldr	r0, [pc, #4]	; (8005c70 <__sfp_lock_release+0x8>)
 8005c6a:	f000 b91a 	b.w	8005ea2 <__retarget_lock_release_recursive>
 8005c6e:	bf00      	nop
 8005c70:	2000046d 	.word	0x2000046d

08005c74 <__sinit>:
 8005c74:	b510      	push	{r4, lr}
 8005c76:	4604      	mov	r4, r0
 8005c78:	f7ff fff0 	bl	8005c5c <__sfp_lock_acquire>
 8005c7c:	6a23      	ldr	r3, [r4, #32]
 8005c7e:	b11b      	cbz	r3, 8005c88 <__sinit+0x14>
 8005c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c84:	f7ff bff0 	b.w	8005c68 <__sfp_lock_release>
 8005c88:	4b04      	ldr	r3, [pc, #16]	; (8005c9c <__sinit+0x28>)
 8005c8a:	6223      	str	r3, [r4, #32]
 8005c8c:	4b04      	ldr	r3, [pc, #16]	; (8005ca0 <__sinit+0x2c>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d1f5      	bne.n	8005c80 <__sinit+0xc>
 8005c94:	f7ff ffc4 	bl	8005c20 <global_stdio_init.part.0>
 8005c98:	e7f2      	b.n	8005c80 <__sinit+0xc>
 8005c9a:	bf00      	nop
 8005c9c:	08005be1 	.word	0x08005be1
 8005ca0:	20000464 	.word	0x20000464

08005ca4 <_fwalk_sglue>:
 8005ca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ca8:	4607      	mov	r7, r0
 8005caa:	4688      	mov	r8, r1
 8005cac:	4614      	mov	r4, r2
 8005cae:	2600      	movs	r6, #0
 8005cb0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005cb4:	f1b9 0901 	subs.w	r9, r9, #1
 8005cb8:	d505      	bpl.n	8005cc6 <_fwalk_sglue+0x22>
 8005cba:	6824      	ldr	r4, [r4, #0]
 8005cbc:	2c00      	cmp	r4, #0
 8005cbe:	d1f7      	bne.n	8005cb0 <_fwalk_sglue+0xc>
 8005cc0:	4630      	mov	r0, r6
 8005cc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cc6:	89ab      	ldrh	r3, [r5, #12]
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d907      	bls.n	8005cdc <_fwalk_sglue+0x38>
 8005ccc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	d003      	beq.n	8005cdc <_fwalk_sglue+0x38>
 8005cd4:	4629      	mov	r1, r5
 8005cd6:	4638      	mov	r0, r7
 8005cd8:	47c0      	blx	r8
 8005cda:	4306      	orrs	r6, r0
 8005cdc:	3568      	adds	r5, #104	; 0x68
 8005cde:	e7e9      	b.n	8005cb4 <_fwalk_sglue+0x10>

08005ce0 <siprintf>:
 8005ce0:	b40e      	push	{r1, r2, r3}
 8005ce2:	b500      	push	{lr}
 8005ce4:	b09c      	sub	sp, #112	; 0x70
 8005ce6:	ab1d      	add	r3, sp, #116	; 0x74
 8005ce8:	9002      	str	r0, [sp, #8]
 8005cea:	9006      	str	r0, [sp, #24]
 8005cec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005cf0:	4809      	ldr	r0, [pc, #36]	; (8005d18 <siprintf+0x38>)
 8005cf2:	9107      	str	r1, [sp, #28]
 8005cf4:	9104      	str	r1, [sp, #16]
 8005cf6:	4909      	ldr	r1, [pc, #36]	; (8005d1c <siprintf+0x3c>)
 8005cf8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cfc:	9105      	str	r1, [sp, #20]
 8005cfe:	6800      	ldr	r0, [r0, #0]
 8005d00:	9301      	str	r3, [sp, #4]
 8005d02:	a902      	add	r1, sp, #8
 8005d04:	f001 fc20 	bl	8007548 <_svfiprintf_r>
 8005d08:	9b02      	ldr	r3, [sp, #8]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	701a      	strb	r2, [r3, #0]
 8005d0e:	b01c      	add	sp, #112	; 0x70
 8005d10:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d14:	b003      	add	sp, #12
 8005d16:	4770      	bx	lr
 8005d18:	20000064 	.word	0x20000064
 8005d1c:	ffff0208 	.word	0xffff0208

08005d20 <__sread>:
 8005d20:	b510      	push	{r4, lr}
 8005d22:	460c      	mov	r4, r1
 8005d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d28:	f000 f86c 	bl	8005e04 <_read_r>
 8005d2c:	2800      	cmp	r0, #0
 8005d2e:	bfab      	itete	ge
 8005d30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005d32:	89a3      	ldrhlt	r3, [r4, #12]
 8005d34:	181b      	addge	r3, r3, r0
 8005d36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005d3a:	bfac      	ite	ge
 8005d3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005d3e:	81a3      	strhlt	r3, [r4, #12]
 8005d40:	bd10      	pop	{r4, pc}

08005d42 <__swrite>:
 8005d42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d46:	461f      	mov	r7, r3
 8005d48:	898b      	ldrh	r3, [r1, #12]
 8005d4a:	05db      	lsls	r3, r3, #23
 8005d4c:	4605      	mov	r5, r0
 8005d4e:	460c      	mov	r4, r1
 8005d50:	4616      	mov	r6, r2
 8005d52:	d505      	bpl.n	8005d60 <__swrite+0x1e>
 8005d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d58:	2302      	movs	r3, #2
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f000 f840 	bl	8005de0 <_lseek_r>
 8005d60:	89a3      	ldrh	r3, [r4, #12]
 8005d62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d6a:	81a3      	strh	r3, [r4, #12]
 8005d6c:	4632      	mov	r2, r6
 8005d6e:	463b      	mov	r3, r7
 8005d70:	4628      	mov	r0, r5
 8005d72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d76:	f000 b857 	b.w	8005e28 <_write_r>

08005d7a <__sseek>:
 8005d7a:	b510      	push	{r4, lr}
 8005d7c:	460c      	mov	r4, r1
 8005d7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d82:	f000 f82d 	bl	8005de0 <_lseek_r>
 8005d86:	1c43      	adds	r3, r0, #1
 8005d88:	89a3      	ldrh	r3, [r4, #12]
 8005d8a:	bf15      	itete	ne
 8005d8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005d8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005d92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005d96:	81a3      	strheq	r3, [r4, #12]
 8005d98:	bf18      	it	ne
 8005d9a:	81a3      	strhne	r3, [r4, #12]
 8005d9c:	bd10      	pop	{r4, pc}

08005d9e <__sclose>:
 8005d9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005da2:	f000 b80d 	b.w	8005dc0 <_close_r>

08005da6 <memset>:
 8005da6:	4402      	add	r2, r0
 8005da8:	4603      	mov	r3, r0
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d100      	bne.n	8005db0 <memset+0xa>
 8005dae:	4770      	bx	lr
 8005db0:	f803 1b01 	strb.w	r1, [r3], #1
 8005db4:	e7f9      	b.n	8005daa <memset+0x4>
	...

08005db8 <_localeconv_r>:
 8005db8:	4800      	ldr	r0, [pc, #0]	; (8005dbc <_localeconv_r+0x4>)
 8005dba:	4770      	bx	lr
 8005dbc:	20000158 	.word	0x20000158

08005dc0 <_close_r>:
 8005dc0:	b538      	push	{r3, r4, r5, lr}
 8005dc2:	4d06      	ldr	r5, [pc, #24]	; (8005ddc <_close_r+0x1c>)
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	4604      	mov	r4, r0
 8005dc8:	4608      	mov	r0, r1
 8005dca:	602b      	str	r3, [r5, #0]
 8005dcc:	f7fb feb9 	bl	8001b42 <_close>
 8005dd0:	1c43      	adds	r3, r0, #1
 8005dd2:	d102      	bne.n	8005dda <_close_r+0x1a>
 8005dd4:	682b      	ldr	r3, [r5, #0]
 8005dd6:	b103      	cbz	r3, 8005dda <_close_r+0x1a>
 8005dd8:	6023      	str	r3, [r4, #0]
 8005dda:	bd38      	pop	{r3, r4, r5, pc}
 8005ddc:	20000468 	.word	0x20000468

08005de0 <_lseek_r>:
 8005de0:	b538      	push	{r3, r4, r5, lr}
 8005de2:	4d07      	ldr	r5, [pc, #28]	; (8005e00 <_lseek_r+0x20>)
 8005de4:	4604      	mov	r4, r0
 8005de6:	4608      	mov	r0, r1
 8005de8:	4611      	mov	r1, r2
 8005dea:	2200      	movs	r2, #0
 8005dec:	602a      	str	r2, [r5, #0]
 8005dee:	461a      	mov	r2, r3
 8005df0:	f7fb fece 	bl	8001b90 <_lseek>
 8005df4:	1c43      	adds	r3, r0, #1
 8005df6:	d102      	bne.n	8005dfe <_lseek_r+0x1e>
 8005df8:	682b      	ldr	r3, [r5, #0]
 8005dfa:	b103      	cbz	r3, 8005dfe <_lseek_r+0x1e>
 8005dfc:	6023      	str	r3, [r4, #0]
 8005dfe:	bd38      	pop	{r3, r4, r5, pc}
 8005e00:	20000468 	.word	0x20000468

08005e04 <_read_r>:
 8005e04:	b538      	push	{r3, r4, r5, lr}
 8005e06:	4d07      	ldr	r5, [pc, #28]	; (8005e24 <_read_r+0x20>)
 8005e08:	4604      	mov	r4, r0
 8005e0a:	4608      	mov	r0, r1
 8005e0c:	4611      	mov	r1, r2
 8005e0e:	2200      	movs	r2, #0
 8005e10:	602a      	str	r2, [r5, #0]
 8005e12:	461a      	mov	r2, r3
 8005e14:	f7fb fe5c 	bl	8001ad0 <_read>
 8005e18:	1c43      	adds	r3, r0, #1
 8005e1a:	d102      	bne.n	8005e22 <_read_r+0x1e>
 8005e1c:	682b      	ldr	r3, [r5, #0]
 8005e1e:	b103      	cbz	r3, 8005e22 <_read_r+0x1e>
 8005e20:	6023      	str	r3, [r4, #0]
 8005e22:	bd38      	pop	{r3, r4, r5, pc}
 8005e24:	20000468 	.word	0x20000468

08005e28 <_write_r>:
 8005e28:	b538      	push	{r3, r4, r5, lr}
 8005e2a:	4d07      	ldr	r5, [pc, #28]	; (8005e48 <_write_r+0x20>)
 8005e2c:	4604      	mov	r4, r0
 8005e2e:	4608      	mov	r0, r1
 8005e30:	4611      	mov	r1, r2
 8005e32:	2200      	movs	r2, #0
 8005e34:	602a      	str	r2, [r5, #0]
 8005e36:	461a      	mov	r2, r3
 8005e38:	f7fb fe67 	bl	8001b0a <_write>
 8005e3c:	1c43      	adds	r3, r0, #1
 8005e3e:	d102      	bne.n	8005e46 <_write_r+0x1e>
 8005e40:	682b      	ldr	r3, [r5, #0]
 8005e42:	b103      	cbz	r3, 8005e46 <_write_r+0x1e>
 8005e44:	6023      	str	r3, [r4, #0]
 8005e46:	bd38      	pop	{r3, r4, r5, pc}
 8005e48:	20000468 	.word	0x20000468

08005e4c <__errno>:
 8005e4c:	4b01      	ldr	r3, [pc, #4]	; (8005e54 <__errno+0x8>)
 8005e4e:	6818      	ldr	r0, [r3, #0]
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	20000064 	.word	0x20000064

08005e58 <__libc_init_array>:
 8005e58:	b570      	push	{r4, r5, r6, lr}
 8005e5a:	4d0d      	ldr	r5, [pc, #52]	; (8005e90 <__libc_init_array+0x38>)
 8005e5c:	4c0d      	ldr	r4, [pc, #52]	; (8005e94 <__libc_init_array+0x3c>)
 8005e5e:	1b64      	subs	r4, r4, r5
 8005e60:	10a4      	asrs	r4, r4, #2
 8005e62:	2600      	movs	r6, #0
 8005e64:	42a6      	cmp	r6, r4
 8005e66:	d109      	bne.n	8005e7c <__libc_init_array+0x24>
 8005e68:	4d0b      	ldr	r5, [pc, #44]	; (8005e98 <__libc_init_array+0x40>)
 8005e6a:	4c0c      	ldr	r4, [pc, #48]	; (8005e9c <__libc_init_array+0x44>)
 8005e6c:	f002 f894 	bl	8007f98 <_init>
 8005e70:	1b64      	subs	r4, r4, r5
 8005e72:	10a4      	asrs	r4, r4, #2
 8005e74:	2600      	movs	r6, #0
 8005e76:	42a6      	cmp	r6, r4
 8005e78:	d105      	bne.n	8005e86 <__libc_init_array+0x2e>
 8005e7a:	bd70      	pop	{r4, r5, r6, pc}
 8005e7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e80:	4798      	blx	r3
 8005e82:	3601      	adds	r6, #1
 8005e84:	e7ee      	b.n	8005e64 <__libc_init_array+0xc>
 8005e86:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e8a:	4798      	blx	r3
 8005e8c:	3601      	adds	r6, #1
 8005e8e:	e7f2      	b.n	8005e76 <__libc_init_array+0x1e>
 8005e90:	080083cc 	.word	0x080083cc
 8005e94:	080083cc 	.word	0x080083cc
 8005e98:	080083cc 	.word	0x080083cc
 8005e9c:	080083d0 	.word	0x080083d0

08005ea0 <__retarget_lock_acquire_recursive>:
 8005ea0:	4770      	bx	lr

08005ea2 <__retarget_lock_release_recursive>:
 8005ea2:	4770      	bx	lr

08005ea4 <quorem>:
 8005ea4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ea8:	6903      	ldr	r3, [r0, #16]
 8005eaa:	690c      	ldr	r4, [r1, #16]
 8005eac:	42a3      	cmp	r3, r4
 8005eae:	4607      	mov	r7, r0
 8005eb0:	db7e      	blt.n	8005fb0 <quorem+0x10c>
 8005eb2:	3c01      	subs	r4, #1
 8005eb4:	f101 0814 	add.w	r8, r1, #20
 8005eb8:	f100 0514 	add.w	r5, r0, #20
 8005ebc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ec0:	9301      	str	r3, [sp, #4]
 8005ec2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005ec6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005eca:	3301      	adds	r3, #1
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005ed2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005ed6:	fbb2 f6f3 	udiv	r6, r2, r3
 8005eda:	d331      	bcc.n	8005f40 <quorem+0x9c>
 8005edc:	f04f 0e00 	mov.w	lr, #0
 8005ee0:	4640      	mov	r0, r8
 8005ee2:	46ac      	mov	ip, r5
 8005ee4:	46f2      	mov	sl, lr
 8005ee6:	f850 2b04 	ldr.w	r2, [r0], #4
 8005eea:	b293      	uxth	r3, r2
 8005eec:	fb06 e303 	mla	r3, r6, r3, lr
 8005ef0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005ef4:	0c1a      	lsrs	r2, r3, #16
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	ebaa 0303 	sub.w	r3, sl, r3
 8005efc:	f8dc a000 	ldr.w	sl, [ip]
 8005f00:	fa13 f38a 	uxtah	r3, r3, sl
 8005f04:	fb06 220e 	mla	r2, r6, lr, r2
 8005f08:	9300      	str	r3, [sp, #0]
 8005f0a:	9b00      	ldr	r3, [sp, #0]
 8005f0c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005f10:	b292      	uxth	r2, r2
 8005f12:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005f16:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f1a:	f8bd 3000 	ldrh.w	r3, [sp]
 8005f1e:	4581      	cmp	r9, r0
 8005f20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f24:	f84c 3b04 	str.w	r3, [ip], #4
 8005f28:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005f2c:	d2db      	bcs.n	8005ee6 <quorem+0x42>
 8005f2e:	f855 300b 	ldr.w	r3, [r5, fp]
 8005f32:	b92b      	cbnz	r3, 8005f40 <quorem+0x9c>
 8005f34:	9b01      	ldr	r3, [sp, #4]
 8005f36:	3b04      	subs	r3, #4
 8005f38:	429d      	cmp	r5, r3
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	d32c      	bcc.n	8005f98 <quorem+0xf4>
 8005f3e:	613c      	str	r4, [r7, #16]
 8005f40:	4638      	mov	r0, r7
 8005f42:	f001 f9a7 	bl	8007294 <__mcmp>
 8005f46:	2800      	cmp	r0, #0
 8005f48:	db22      	blt.n	8005f90 <quorem+0xec>
 8005f4a:	3601      	adds	r6, #1
 8005f4c:	4629      	mov	r1, r5
 8005f4e:	2000      	movs	r0, #0
 8005f50:	f858 2b04 	ldr.w	r2, [r8], #4
 8005f54:	f8d1 c000 	ldr.w	ip, [r1]
 8005f58:	b293      	uxth	r3, r2
 8005f5a:	1ac3      	subs	r3, r0, r3
 8005f5c:	0c12      	lsrs	r2, r2, #16
 8005f5e:	fa13 f38c 	uxtah	r3, r3, ip
 8005f62:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005f66:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f70:	45c1      	cmp	r9, r8
 8005f72:	f841 3b04 	str.w	r3, [r1], #4
 8005f76:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005f7a:	d2e9      	bcs.n	8005f50 <quorem+0xac>
 8005f7c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f80:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f84:	b922      	cbnz	r2, 8005f90 <quorem+0xec>
 8005f86:	3b04      	subs	r3, #4
 8005f88:	429d      	cmp	r5, r3
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	d30a      	bcc.n	8005fa4 <quorem+0x100>
 8005f8e:	613c      	str	r4, [r7, #16]
 8005f90:	4630      	mov	r0, r6
 8005f92:	b003      	add	sp, #12
 8005f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f98:	6812      	ldr	r2, [r2, #0]
 8005f9a:	3b04      	subs	r3, #4
 8005f9c:	2a00      	cmp	r2, #0
 8005f9e:	d1ce      	bne.n	8005f3e <quorem+0x9a>
 8005fa0:	3c01      	subs	r4, #1
 8005fa2:	e7c9      	b.n	8005f38 <quorem+0x94>
 8005fa4:	6812      	ldr	r2, [r2, #0]
 8005fa6:	3b04      	subs	r3, #4
 8005fa8:	2a00      	cmp	r2, #0
 8005faa:	d1f0      	bne.n	8005f8e <quorem+0xea>
 8005fac:	3c01      	subs	r4, #1
 8005fae:	e7eb      	b.n	8005f88 <quorem+0xe4>
 8005fb0:	2000      	movs	r0, #0
 8005fb2:	e7ee      	b.n	8005f92 <quorem+0xee>
 8005fb4:	0000      	movs	r0, r0
	...

08005fb8 <_dtoa_r>:
 8005fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fbc:	ed2d 8b04 	vpush	{d8-d9}
 8005fc0:	69c5      	ldr	r5, [r0, #28]
 8005fc2:	b093      	sub	sp, #76	; 0x4c
 8005fc4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005fc8:	ec57 6b10 	vmov	r6, r7, d0
 8005fcc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005fd0:	9107      	str	r1, [sp, #28]
 8005fd2:	4604      	mov	r4, r0
 8005fd4:	920a      	str	r2, [sp, #40]	; 0x28
 8005fd6:	930d      	str	r3, [sp, #52]	; 0x34
 8005fd8:	b975      	cbnz	r5, 8005ff8 <_dtoa_r+0x40>
 8005fda:	2010      	movs	r0, #16
 8005fdc:	f000 fe2a 	bl	8006c34 <malloc>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	61e0      	str	r0, [r4, #28]
 8005fe4:	b920      	cbnz	r0, 8005ff0 <_dtoa_r+0x38>
 8005fe6:	4bae      	ldr	r3, [pc, #696]	; (80062a0 <_dtoa_r+0x2e8>)
 8005fe8:	21ef      	movs	r1, #239	; 0xef
 8005fea:	48ae      	ldr	r0, [pc, #696]	; (80062a4 <_dtoa_r+0x2ec>)
 8005fec:	f001 fc90 	bl	8007910 <__assert_func>
 8005ff0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005ff4:	6005      	str	r5, [r0, #0]
 8005ff6:	60c5      	str	r5, [r0, #12]
 8005ff8:	69e3      	ldr	r3, [r4, #28]
 8005ffa:	6819      	ldr	r1, [r3, #0]
 8005ffc:	b151      	cbz	r1, 8006014 <_dtoa_r+0x5c>
 8005ffe:	685a      	ldr	r2, [r3, #4]
 8006000:	604a      	str	r2, [r1, #4]
 8006002:	2301      	movs	r3, #1
 8006004:	4093      	lsls	r3, r2
 8006006:	608b      	str	r3, [r1, #8]
 8006008:	4620      	mov	r0, r4
 800600a:	f000 ff07 	bl	8006e1c <_Bfree>
 800600e:	69e3      	ldr	r3, [r4, #28]
 8006010:	2200      	movs	r2, #0
 8006012:	601a      	str	r2, [r3, #0]
 8006014:	1e3b      	subs	r3, r7, #0
 8006016:	bfbb      	ittet	lt
 8006018:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800601c:	9303      	strlt	r3, [sp, #12]
 800601e:	2300      	movge	r3, #0
 8006020:	2201      	movlt	r2, #1
 8006022:	bfac      	ite	ge
 8006024:	f8c8 3000 	strge.w	r3, [r8]
 8006028:	f8c8 2000 	strlt.w	r2, [r8]
 800602c:	4b9e      	ldr	r3, [pc, #632]	; (80062a8 <_dtoa_r+0x2f0>)
 800602e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006032:	ea33 0308 	bics.w	r3, r3, r8
 8006036:	d11b      	bne.n	8006070 <_dtoa_r+0xb8>
 8006038:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800603a:	f242 730f 	movw	r3, #9999	; 0x270f
 800603e:	6013      	str	r3, [r2, #0]
 8006040:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006044:	4333      	orrs	r3, r6
 8006046:	f000 8593 	beq.w	8006b70 <_dtoa_r+0xbb8>
 800604a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800604c:	b963      	cbnz	r3, 8006068 <_dtoa_r+0xb0>
 800604e:	4b97      	ldr	r3, [pc, #604]	; (80062ac <_dtoa_r+0x2f4>)
 8006050:	e027      	b.n	80060a2 <_dtoa_r+0xea>
 8006052:	4b97      	ldr	r3, [pc, #604]	; (80062b0 <_dtoa_r+0x2f8>)
 8006054:	9300      	str	r3, [sp, #0]
 8006056:	3308      	adds	r3, #8
 8006058:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800605a:	6013      	str	r3, [r2, #0]
 800605c:	9800      	ldr	r0, [sp, #0]
 800605e:	b013      	add	sp, #76	; 0x4c
 8006060:	ecbd 8b04 	vpop	{d8-d9}
 8006064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006068:	4b90      	ldr	r3, [pc, #576]	; (80062ac <_dtoa_r+0x2f4>)
 800606a:	9300      	str	r3, [sp, #0]
 800606c:	3303      	adds	r3, #3
 800606e:	e7f3      	b.n	8006058 <_dtoa_r+0xa0>
 8006070:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006074:	2200      	movs	r2, #0
 8006076:	ec51 0b17 	vmov	r0, r1, d7
 800607a:	eeb0 8a47 	vmov.f32	s16, s14
 800607e:	eef0 8a67 	vmov.f32	s17, s15
 8006082:	2300      	movs	r3, #0
 8006084:	f7fa fd20 	bl	8000ac8 <__aeabi_dcmpeq>
 8006088:	4681      	mov	r9, r0
 800608a:	b160      	cbz	r0, 80060a6 <_dtoa_r+0xee>
 800608c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800608e:	2301      	movs	r3, #1
 8006090:	6013      	str	r3, [r2, #0]
 8006092:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006094:	2b00      	cmp	r3, #0
 8006096:	f000 8568 	beq.w	8006b6a <_dtoa_r+0xbb2>
 800609a:	4b86      	ldr	r3, [pc, #536]	; (80062b4 <_dtoa_r+0x2fc>)
 800609c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800609e:	6013      	str	r3, [r2, #0]
 80060a0:	3b01      	subs	r3, #1
 80060a2:	9300      	str	r3, [sp, #0]
 80060a4:	e7da      	b.n	800605c <_dtoa_r+0xa4>
 80060a6:	aa10      	add	r2, sp, #64	; 0x40
 80060a8:	a911      	add	r1, sp, #68	; 0x44
 80060aa:	4620      	mov	r0, r4
 80060ac:	eeb0 0a48 	vmov.f32	s0, s16
 80060b0:	eef0 0a68 	vmov.f32	s1, s17
 80060b4:	f001 f994 	bl	80073e0 <__d2b>
 80060b8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80060bc:	4682      	mov	sl, r0
 80060be:	2d00      	cmp	r5, #0
 80060c0:	d07f      	beq.n	80061c2 <_dtoa_r+0x20a>
 80060c2:	ee18 3a90 	vmov	r3, s17
 80060c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060ca:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80060ce:	ec51 0b18 	vmov	r0, r1, d8
 80060d2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80060d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80060da:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80060de:	4619      	mov	r1, r3
 80060e0:	2200      	movs	r2, #0
 80060e2:	4b75      	ldr	r3, [pc, #468]	; (80062b8 <_dtoa_r+0x300>)
 80060e4:	f7fa f8d0 	bl	8000288 <__aeabi_dsub>
 80060e8:	a367      	add	r3, pc, #412	; (adr r3, 8006288 <_dtoa_r+0x2d0>)
 80060ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ee:	f7fa fa83 	bl	80005f8 <__aeabi_dmul>
 80060f2:	a367      	add	r3, pc, #412	; (adr r3, 8006290 <_dtoa_r+0x2d8>)
 80060f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f8:	f7fa f8c8 	bl	800028c <__adddf3>
 80060fc:	4606      	mov	r6, r0
 80060fe:	4628      	mov	r0, r5
 8006100:	460f      	mov	r7, r1
 8006102:	f7fa fa0f 	bl	8000524 <__aeabi_i2d>
 8006106:	a364      	add	r3, pc, #400	; (adr r3, 8006298 <_dtoa_r+0x2e0>)
 8006108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800610c:	f7fa fa74 	bl	80005f8 <__aeabi_dmul>
 8006110:	4602      	mov	r2, r0
 8006112:	460b      	mov	r3, r1
 8006114:	4630      	mov	r0, r6
 8006116:	4639      	mov	r1, r7
 8006118:	f7fa f8b8 	bl	800028c <__adddf3>
 800611c:	4606      	mov	r6, r0
 800611e:	460f      	mov	r7, r1
 8006120:	f7fa fd1a 	bl	8000b58 <__aeabi_d2iz>
 8006124:	2200      	movs	r2, #0
 8006126:	4683      	mov	fp, r0
 8006128:	2300      	movs	r3, #0
 800612a:	4630      	mov	r0, r6
 800612c:	4639      	mov	r1, r7
 800612e:	f7fa fcd5 	bl	8000adc <__aeabi_dcmplt>
 8006132:	b148      	cbz	r0, 8006148 <_dtoa_r+0x190>
 8006134:	4658      	mov	r0, fp
 8006136:	f7fa f9f5 	bl	8000524 <__aeabi_i2d>
 800613a:	4632      	mov	r2, r6
 800613c:	463b      	mov	r3, r7
 800613e:	f7fa fcc3 	bl	8000ac8 <__aeabi_dcmpeq>
 8006142:	b908      	cbnz	r0, 8006148 <_dtoa_r+0x190>
 8006144:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006148:	f1bb 0f16 	cmp.w	fp, #22
 800614c:	d857      	bhi.n	80061fe <_dtoa_r+0x246>
 800614e:	4b5b      	ldr	r3, [pc, #364]	; (80062bc <_dtoa_r+0x304>)
 8006150:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006158:	ec51 0b18 	vmov	r0, r1, d8
 800615c:	f7fa fcbe 	bl	8000adc <__aeabi_dcmplt>
 8006160:	2800      	cmp	r0, #0
 8006162:	d04e      	beq.n	8006202 <_dtoa_r+0x24a>
 8006164:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006168:	2300      	movs	r3, #0
 800616a:	930c      	str	r3, [sp, #48]	; 0x30
 800616c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800616e:	1b5b      	subs	r3, r3, r5
 8006170:	1e5a      	subs	r2, r3, #1
 8006172:	bf45      	ittet	mi
 8006174:	f1c3 0301 	rsbmi	r3, r3, #1
 8006178:	9305      	strmi	r3, [sp, #20]
 800617a:	2300      	movpl	r3, #0
 800617c:	2300      	movmi	r3, #0
 800617e:	9206      	str	r2, [sp, #24]
 8006180:	bf54      	ite	pl
 8006182:	9305      	strpl	r3, [sp, #20]
 8006184:	9306      	strmi	r3, [sp, #24]
 8006186:	f1bb 0f00 	cmp.w	fp, #0
 800618a:	db3c      	blt.n	8006206 <_dtoa_r+0x24e>
 800618c:	9b06      	ldr	r3, [sp, #24]
 800618e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006192:	445b      	add	r3, fp
 8006194:	9306      	str	r3, [sp, #24]
 8006196:	2300      	movs	r3, #0
 8006198:	9308      	str	r3, [sp, #32]
 800619a:	9b07      	ldr	r3, [sp, #28]
 800619c:	2b09      	cmp	r3, #9
 800619e:	d868      	bhi.n	8006272 <_dtoa_r+0x2ba>
 80061a0:	2b05      	cmp	r3, #5
 80061a2:	bfc4      	itt	gt
 80061a4:	3b04      	subgt	r3, #4
 80061a6:	9307      	strgt	r3, [sp, #28]
 80061a8:	9b07      	ldr	r3, [sp, #28]
 80061aa:	f1a3 0302 	sub.w	r3, r3, #2
 80061ae:	bfcc      	ite	gt
 80061b0:	2500      	movgt	r5, #0
 80061b2:	2501      	movle	r5, #1
 80061b4:	2b03      	cmp	r3, #3
 80061b6:	f200 8085 	bhi.w	80062c4 <_dtoa_r+0x30c>
 80061ba:	e8df f003 	tbb	[pc, r3]
 80061be:	3b2e      	.short	0x3b2e
 80061c0:	5839      	.short	0x5839
 80061c2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80061c6:	441d      	add	r5, r3
 80061c8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80061cc:	2b20      	cmp	r3, #32
 80061ce:	bfc1      	itttt	gt
 80061d0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80061d4:	fa08 f803 	lslgt.w	r8, r8, r3
 80061d8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80061dc:	fa26 f303 	lsrgt.w	r3, r6, r3
 80061e0:	bfd6      	itet	le
 80061e2:	f1c3 0320 	rsble	r3, r3, #32
 80061e6:	ea48 0003 	orrgt.w	r0, r8, r3
 80061ea:	fa06 f003 	lslle.w	r0, r6, r3
 80061ee:	f7fa f989 	bl	8000504 <__aeabi_ui2d>
 80061f2:	2201      	movs	r2, #1
 80061f4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80061f8:	3d01      	subs	r5, #1
 80061fa:	920e      	str	r2, [sp, #56]	; 0x38
 80061fc:	e76f      	b.n	80060de <_dtoa_r+0x126>
 80061fe:	2301      	movs	r3, #1
 8006200:	e7b3      	b.n	800616a <_dtoa_r+0x1b2>
 8006202:	900c      	str	r0, [sp, #48]	; 0x30
 8006204:	e7b2      	b.n	800616c <_dtoa_r+0x1b4>
 8006206:	9b05      	ldr	r3, [sp, #20]
 8006208:	eba3 030b 	sub.w	r3, r3, fp
 800620c:	9305      	str	r3, [sp, #20]
 800620e:	f1cb 0300 	rsb	r3, fp, #0
 8006212:	9308      	str	r3, [sp, #32]
 8006214:	2300      	movs	r3, #0
 8006216:	930b      	str	r3, [sp, #44]	; 0x2c
 8006218:	e7bf      	b.n	800619a <_dtoa_r+0x1e2>
 800621a:	2300      	movs	r3, #0
 800621c:	9309      	str	r3, [sp, #36]	; 0x24
 800621e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006220:	2b00      	cmp	r3, #0
 8006222:	dc52      	bgt.n	80062ca <_dtoa_r+0x312>
 8006224:	2301      	movs	r3, #1
 8006226:	9301      	str	r3, [sp, #4]
 8006228:	9304      	str	r3, [sp, #16]
 800622a:	461a      	mov	r2, r3
 800622c:	920a      	str	r2, [sp, #40]	; 0x28
 800622e:	e00b      	b.n	8006248 <_dtoa_r+0x290>
 8006230:	2301      	movs	r3, #1
 8006232:	e7f3      	b.n	800621c <_dtoa_r+0x264>
 8006234:	2300      	movs	r3, #0
 8006236:	9309      	str	r3, [sp, #36]	; 0x24
 8006238:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800623a:	445b      	add	r3, fp
 800623c:	9301      	str	r3, [sp, #4]
 800623e:	3301      	adds	r3, #1
 8006240:	2b01      	cmp	r3, #1
 8006242:	9304      	str	r3, [sp, #16]
 8006244:	bfb8      	it	lt
 8006246:	2301      	movlt	r3, #1
 8006248:	69e0      	ldr	r0, [r4, #28]
 800624a:	2100      	movs	r1, #0
 800624c:	2204      	movs	r2, #4
 800624e:	f102 0614 	add.w	r6, r2, #20
 8006252:	429e      	cmp	r6, r3
 8006254:	d93d      	bls.n	80062d2 <_dtoa_r+0x31a>
 8006256:	6041      	str	r1, [r0, #4]
 8006258:	4620      	mov	r0, r4
 800625a:	f000 fd9f 	bl	8006d9c <_Balloc>
 800625e:	9000      	str	r0, [sp, #0]
 8006260:	2800      	cmp	r0, #0
 8006262:	d139      	bne.n	80062d8 <_dtoa_r+0x320>
 8006264:	4b16      	ldr	r3, [pc, #88]	; (80062c0 <_dtoa_r+0x308>)
 8006266:	4602      	mov	r2, r0
 8006268:	f240 11af 	movw	r1, #431	; 0x1af
 800626c:	e6bd      	b.n	8005fea <_dtoa_r+0x32>
 800626e:	2301      	movs	r3, #1
 8006270:	e7e1      	b.n	8006236 <_dtoa_r+0x27e>
 8006272:	2501      	movs	r5, #1
 8006274:	2300      	movs	r3, #0
 8006276:	9307      	str	r3, [sp, #28]
 8006278:	9509      	str	r5, [sp, #36]	; 0x24
 800627a:	f04f 33ff 	mov.w	r3, #4294967295
 800627e:	9301      	str	r3, [sp, #4]
 8006280:	9304      	str	r3, [sp, #16]
 8006282:	2200      	movs	r2, #0
 8006284:	2312      	movs	r3, #18
 8006286:	e7d1      	b.n	800622c <_dtoa_r+0x274>
 8006288:	636f4361 	.word	0x636f4361
 800628c:	3fd287a7 	.word	0x3fd287a7
 8006290:	8b60c8b3 	.word	0x8b60c8b3
 8006294:	3fc68a28 	.word	0x3fc68a28
 8006298:	509f79fb 	.word	0x509f79fb
 800629c:	3fd34413 	.word	0x3fd34413
 80062a0:	08008091 	.word	0x08008091
 80062a4:	080080a8 	.word	0x080080a8
 80062a8:	7ff00000 	.word	0x7ff00000
 80062ac:	0800808d 	.word	0x0800808d
 80062b0:	08008084 	.word	0x08008084
 80062b4:	08008061 	.word	0x08008061
 80062b8:	3ff80000 	.word	0x3ff80000
 80062bc:	08008198 	.word	0x08008198
 80062c0:	08008100 	.word	0x08008100
 80062c4:	2301      	movs	r3, #1
 80062c6:	9309      	str	r3, [sp, #36]	; 0x24
 80062c8:	e7d7      	b.n	800627a <_dtoa_r+0x2c2>
 80062ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062cc:	9301      	str	r3, [sp, #4]
 80062ce:	9304      	str	r3, [sp, #16]
 80062d0:	e7ba      	b.n	8006248 <_dtoa_r+0x290>
 80062d2:	3101      	adds	r1, #1
 80062d4:	0052      	lsls	r2, r2, #1
 80062d6:	e7ba      	b.n	800624e <_dtoa_r+0x296>
 80062d8:	69e3      	ldr	r3, [r4, #28]
 80062da:	9a00      	ldr	r2, [sp, #0]
 80062dc:	601a      	str	r2, [r3, #0]
 80062de:	9b04      	ldr	r3, [sp, #16]
 80062e0:	2b0e      	cmp	r3, #14
 80062e2:	f200 80a8 	bhi.w	8006436 <_dtoa_r+0x47e>
 80062e6:	2d00      	cmp	r5, #0
 80062e8:	f000 80a5 	beq.w	8006436 <_dtoa_r+0x47e>
 80062ec:	f1bb 0f00 	cmp.w	fp, #0
 80062f0:	dd38      	ble.n	8006364 <_dtoa_r+0x3ac>
 80062f2:	4bc0      	ldr	r3, [pc, #768]	; (80065f4 <_dtoa_r+0x63c>)
 80062f4:	f00b 020f 	and.w	r2, fp, #15
 80062f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062fc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006300:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006304:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006308:	d019      	beq.n	800633e <_dtoa_r+0x386>
 800630a:	4bbb      	ldr	r3, [pc, #748]	; (80065f8 <_dtoa_r+0x640>)
 800630c:	ec51 0b18 	vmov	r0, r1, d8
 8006310:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006314:	f7fa fa9a 	bl	800084c <__aeabi_ddiv>
 8006318:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800631c:	f008 080f 	and.w	r8, r8, #15
 8006320:	2503      	movs	r5, #3
 8006322:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80065f8 <_dtoa_r+0x640>
 8006326:	f1b8 0f00 	cmp.w	r8, #0
 800632a:	d10a      	bne.n	8006342 <_dtoa_r+0x38a>
 800632c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006330:	4632      	mov	r2, r6
 8006332:	463b      	mov	r3, r7
 8006334:	f7fa fa8a 	bl	800084c <__aeabi_ddiv>
 8006338:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800633c:	e02b      	b.n	8006396 <_dtoa_r+0x3de>
 800633e:	2502      	movs	r5, #2
 8006340:	e7ef      	b.n	8006322 <_dtoa_r+0x36a>
 8006342:	f018 0f01 	tst.w	r8, #1
 8006346:	d008      	beq.n	800635a <_dtoa_r+0x3a2>
 8006348:	4630      	mov	r0, r6
 800634a:	4639      	mov	r1, r7
 800634c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006350:	f7fa f952 	bl	80005f8 <__aeabi_dmul>
 8006354:	3501      	adds	r5, #1
 8006356:	4606      	mov	r6, r0
 8006358:	460f      	mov	r7, r1
 800635a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800635e:	f109 0908 	add.w	r9, r9, #8
 8006362:	e7e0      	b.n	8006326 <_dtoa_r+0x36e>
 8006364:	f000 809f 	beq.w	80064a6 <_dtoa_r+0x4ee>
 8006368:	f1cb 0600 	rsb	r6, fp, #0
 800636c:	4ba1      	ldr	r3, [pc, #644]	; (80065f4 <_dtoa_r+0x63c>)
 800636e:	4fa2      	ldr	r7, [pc, #648]	; (80065f8 <_dtoa_r+0x640>)
 8006370:	f006 020f 	and.w	r2, r6, #15
 8006374:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637c:	ec51 0b18 	vmov	r0, r1, d8
 8006380:	f7fa f93a 	bl	80005f8 <__aeabi_dmul>
 8006384:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006388:	1136      	asrs	r6, r6, #4
 800638a:	2300      	movs	r3, #0
 800638c:	2502      	movs	r5, #2
 800638e:	2e00      	cmp	r6, #0
 8006390:	d17e      	bne.n	8006490 <_dtoa_r+0x4d8>
 8006392:	2b00      	cmp	r3, #0
 8006394:	d1d0      	bne.n	8006338 <_dtoa_r+0x380>
 8006396:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006398:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800639c:	2b00      	cmp	r3, #0
 800639e:	f000 8084 	beq.w	80064aa <_dtoa_r+0x4f2>
 80063a2:	4b96      	ldr	r3, [pc, #600]	; (80065fc <_dtoa_r+0x644>)
 80063a4:	2200      	movs	r2, #0
 80063a6:	4640      	mov	r0, r8
 80063a8:	4649      	mov	r1, r9
 80063aa:	f7fa fb97 	bl	8000adc <__aeabi_dcmplt>
 80063ae:	2800      	cmp	r0, #0
 80063b0:	d07b      	beq.n	80064aa <_dtoa_r+0x4f2>
 80063b2:	9b04      	ldr	r3, [sp, #16]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d078      	beq.n	80064aa <_dtoa_r+0x4f2>
 80063b8:	9b01      	ldr	r3, [sp, #4]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	dd39      	ble.n	8006432 <_dtoa_r+0x47a>
 80063be:	4b90      	ldr	r3, [pc, #576]	; (8006600 <_dtoa_r+0x648>)
 80063c0:	2200      	movs	r2, #0
 80063c2:	4640      	mov	r0, r8
 80063c4:	4649      	mov	r1, r9
 80063c6:	f7fa f917 	bl	80005f8 <__aeabi_dmul>
 80063ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063ce:	9e01      	ldr	r6, [sp, #4]
 80063d0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80063d4:	3501      	adds	r5, #1
 80063d6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80063da:	4628      	mov	r0, r5
 80063dc:	f7fa f8a2 	bl	8000524 <__aeabi_i2d>
 80063e0:	4642      	mov	r2, r8
 80063e2:	464b      	mov	r3, r9
 80063e4:	f7fa f908 	bl	80005f8 <__aeabi_dmul>
 80063e8:	4b86      	ldr	r3, [pc, #536]	; (8006604 <_dtoa_r+0x64c>)
 80063ea:	2200      	movs	r2, #0
 80063ec:	f7f9 ff4e 	bl	800028c <__adddf3>
 80063f0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80063f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063f8:	9303      	str	r3, [sp, #12]
 80063fa:	2e00      	cmp	r6, #0
 80063fc:	d158      	bne.n	80064b0 <_dtoa_r+0x4f8>
 80063fe:	4b82      	ldr	r3, [pc, #520]	; (8006608 <_dtoa_r+0x650>)
 8006400:	2200      	movs	r2, #0
 8006402:	4640      	mov	r0, r8
 8006404:	4649      	mov	r1, r9
 8006406:	f7f9 ff3f 	bl	8000288 <__aeabi_dsub>
 800640a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800640e:	4680      	mov	r8, r0
 8006410:	4689      	mov	r9, r1
 8006412:	f7fa fb81 	bl	8000b18 <__aeabi_dcmpgt>
 8006416:	2800      	cmp	r0, #0
 8006418:	f040 8296 	bne.w	8006948 <_dtoa_r+0x990>
 800641c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006420:	4640      	mov	r0, r8
 8006422:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006426:	4649      	mov	r1, r9
 8006428:	f7fa fb58 	bl	8000adc <__aeabi_dcmplt>
 800642c:	2800      	cmp	r0, #0
 800642e:	f040 8289 	bne.w	8006944 <_dtoa_r+0x98c>
 8006432:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006436:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006438:	2b00      	cmp	r3, #0
 800643a:	f2c0 814e 	blt.w	80066da <_dtoa_r+0x722>
 800643e:	f1bb 0f0e 	cmp.w	fp, #14
 8006442:	f300 814a 	bgt.w	80066da <_dtoa_r+0x722>
 8006446:	4b6b      	ldr	r3, [pc, #428]	; (80065f4 <_dtoa_r+0x63c>)
 8006448:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800644c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006452:	2b00      	cmp	r3, #0
 8006454:	f280 80dc 	bge.w	8006610 <_dtoa_r+0x658>
 8006458:	9b04      	ldr	r3, [sp, #16]
 800645a:	2b00      	cmp	r3, #0
 800645c:	f300 80d8 	bgt.w	8006610 <_dtoa_r+0x658>
 8006460:	f040 826f 	bne.w	8006942 <_dtoa_r+0x98a>
 8006464:	4b68      	ldr	r3, [pc, #416]	; (8006608 <_dtoa_r+0x650>)
 8006466:	2200      	movs	r2, #0
 8006468:	4640      	mov	r0, r8
 800646a:	4649      	mov	r1, r9
 800646c:	f7fa f8c4 	bl	80005f8 <__aeabi_dmul>
 8006470:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006474:	f7fa fb46 	bl	8000b04 <__aeabi_dcmpge>
 8006478:	9e04      	ldr	r6, [sp, #16]
 800647a:	4637      	mov	r7, r6
 800647c:	2800      	cmp	r0, #0
 800647e:	f040 8245 	bne.w	800690c <_dtoa_r+0x954>
 8006482:	9d00      	ldr	r5, [sp, #0]
 8006484:	2331      	movs	r3, #49	; 0x31
 8006486:	f805 3b01 	strb.w	r3, [r5], #1
 800648a:	f10b 0b01 	add.w	fp, fp, #1
 800648e:	e241      	b.n	8006914 <_dtoa_r+0x95c>
 8006490:	07f2      	lsls	r2, r6, #31
 8006492:	d505      	bpl.n	80064a0 <_dtoa_r+0x4e8>
 8006494:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006498:	f7fa f8ae 	bl	80005f8 <__aeabi_dmul>
 800649c:	3501      	adds	r5, #1
 800649e:	2301      	movs	r3, #1
 80064a0:	1076      	asrs	r6, r6, #1
 80064a2:	3708      	adds	r7, #8
 80064a4:	e773      	b.n	800638e <_dtoa_r+0x3d6>
 80064a6:	2502      	movs	r5, #2
 80064a8:	e775      	b.n	8006396 <_dtoa_r+0x3de>
 80064aa:	9e04      	ldr	r6, [sp, #16]
 80064ac:	465f      	mov	r7, fp
 80064ae:	e792      	b.n	80063d6 <_dtoa_r+0x41e>
 80064b0:	9900      	ldr	r1, [sp, #0]
 80064b2:	4b50      	ldr	r3, [pc, #320]	; (80065f4 <_dtoa_r+0x63c>)
 80064b4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80064b8:	4431      	add	r1, r6
 80064ba:	9102      	str	r1, [sp, #8]
 80064bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80064be:	eeb0 9a47 	vmov.f32	s18, s14
 80064c2:	eef0 9a67 	vmov.f32	s19, s15
 80064c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80064ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80064ce:	2900      	cmp	r1, #0
 80064d0:	d044      	beq.n	800655c <_dtoa_r+0x5a4>
 80064d2:	494e      	ldr	r1, [pc, #312]	; (800660c <_dtoa_r+0x654>)
 80064d4:	2000      	movs	r0, #0
 80064d6:	f7fa f9b9 	bl	800084c <__aeabi_ddiv>
 80064da:	ec53 2b19 	vmov	r2, r3, d9
 80064de:	f7f9 fed3 	bl	8000288 <__aeabi_dsub>
 80064e2:	9d00      	ldr	r5, [sp, #0]
 80064e4:	ec41 0b19 	vmov	d9, r0, r1
 80064e8:	4649      	mov	r1, r9
 80064ea:	4640      	mov	r0, r8
 80064ec:	f7fa fb34 	bl	8000b58 <__aeabi_d2iz>
 80064f0:	4606      	mov	r6, r0
 80064f2:	f7fa f817 	bl	8000524 <__aeabi_i2d>
 80064f6:	4602      	mov	r2, r0
 80064f8:	460b      	mov	r3, r1
 80064fa:	4640      	mov	r0, r8
 80064fc:	4649      	mov	r1, r9
 80064fe:	f7f9 fec3 	bl	8000288 <__aeabi_dsub>
 8006502:	3630      	adds	r6, #48	; 0x30
 8006504:	f805 6b01 	strb.w	r6, [r5], #1
 8006508:	ec53 2b19 	vmov	r2, r3, d9
 800650c:	4680      	mov	r8, r0
 800650e:	4689      	mov	r9, r1
 8006510:	f7fa fae4 	bl	8000adc <__aeabi_dcmplt>
 8006514:	2800      	cmp	r0, #0
 8006516:	d164      	bne.n	80065e2 <_dtoa_r+0x62a>
 8006518:	4642      	mov	r2, r8
 800651a:	464b      	mov	r3, r9
 800651c:	4937      	ldr	r1, [pc, #220]	; (80065fc <_dtoa_r+0x644>)
 800651e:	2000      	movs	r0, #0
 8006520:	f7f9 feb2 	bl	8000288 <__aeabi_dsub>
 8006524:	ec53 2b19 	vmov	r2, r3, d9
 8006528:	f7fa fad8 	bl	8000adc <__aeabi_dcmplt>
 800652c:	2800      	cmp	r0, #0
 800652e:	f040 80b6 	bne.w	800669e <_dtoa_r+0x6e6>
 8006532:	9b02      	ldr	r3, [sp, #8]
 8006534:	429d      	cmp	r5, r3
 8006536:	f43f af7c 	beq.w	8006432 <_dtoa_r+0x47a>
 800653a:	4b31      	ldr	r3, [pc, #196]	; (8006600 <_dtoa_r+0x648>)
 800653c:	ec51 0b19 	vmov	r0, r1, d9
 8006540:	2200      	movs	r2, #0
 8006542:	f7fa f859 	bl	80005f8 <__aeabi_dmul>
 8006546:	4b2e      	ldr	r3, [pc, #184]	; (8006600 <_dtoa_r+0x648>)
 8006548:	ec41 0b19 	vmov	d9, r0, r1
 800654c:	2200      	movs	r2, #0
 800654e:	4640      	mov	r0, r8
 8006550:	4649      	mov	r1, r9
 8006552:	f7fa f851 	bl	80005f8 <__aeabi_dmul>
 8006556:	4680      	mov	r8, r0
 8006558:	4689      	mov	r9, r1
 800655a:	e7c5      	b.n	80064e8 <_dtoa_r+0x530>
 800655c:	ec51 0b17 	vmov	r0, r1, d7
 8006560:	f7fa f84a 	bl	80005f8 <__aeabi_dmul>
 8006564:	9b02      	ldr	r3, [sp, #8]
 8006566:	9d00      	ldr	r5, [sp, #0]
 8006568:	930f      	str	r3, [sp, #60]	; 0x3c
 800656a:	ec41 0b19 	vmov	d9, r0, r1
 800656e:	4649      	mov	r1, r9
 8006570:	4640      	mov	r0, r8
 8006572:	f7fa faf1 	bl	8000b58 <__aeabi_d2iz>
 8006576:	4606      	mov	r6, r0
 8006578:	f7f9 ffd4 	bl	8000524 <__aeabi_i2d>
 800657c:	3630      	adds	r6, #48	; 0x30
 800657e:	4602      	mov	r2, r0
 8006580:	460b      	mov	r3, r1
 8006582:	4640      	mov	r0, r8
 8006584:	4649      	mov	r1, r9
 8006586:	f7f9 fe7f 	bl	8000288 <__aeabi_dsub>
 800658a:	f805 6b01 	strb.w	r6, [r5], #1
 800658e:	9b02      	ldr	r3, [sp, #8]
 8006590:	429d      	cmp	r5, r3
 8006592:	4680      	mov	r8, r0
 8006594:	4689      	mov	r9, r1
 8006596:	f04f 0200 	mov.w	r2, #0
 800659a:	d124      	bne.n	80065e6 <_dtoa_r+0x62e>
 800659c:	4b1b      	ldr	r3, [pc, #108]	; (800660c <_dtoa_r+0x654>)
 800659e:	ec51 0b19 	vmov	r0, r1, d9
 80065a2:	f7f9 fe73 	bl	800028c <__adddf3>
 80065a6:	4602      	mov	r2, r0
 80065a8:	460b      	mov	r3, r1
 80065aa:	4640      	mov	r0, r8
 80065ac:	4649      	mov	r1, r9
 80065ae:	f7fa fab3 	bl	8000b18 <__aeabi_dcmpgt>
 80065b2:	2800      	cmp	r0, #0
 80065b4:	d173      	bne.n	800669e <_dtoa_r+0x6e6>
 80065b6:	ec53 2b19 	vmov	r2, r3, d9
 80065ba:	4914      	ldr	r1, [pc, #80]	; (800660c <_dtoa_r+0x654>)
 80065bc:	2000      	movs	r0, #0
 80065be:	f7f9 fe63 	bl	8000288 <__aeabi_dsub>
 80065c2:	4602      	mov	r2, r0
 80065c4:	460b      	mov	r3, r1
 80065c6:	4640      	mov	r0, r8
 80065c8:	4649      	mov	r1, r9
 80065ca:	f7fa fa87 	bl	8000adc <__aeabi_dcmplt>
 80065ce:	2800      	cmp	r0, #0
 80065d0:	f43f af2f 	beq.w	8006432 <_dtoa_r+0x47a>
 80065d4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80065d6:	1e6b      	subs	r3, r5, #1
 80065d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80065da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80065de:	2b30      	cmp	r3, #48	; 0x30
 80065e0:	d0f8      	beq.n	80065d4 <_dtoa_r+0x61c>
 80065e2:	46bb      	mov	fp, r7
 80065e4:	e04a      	b.n	800667c <_dtoa_r+0x6c4>
 80065e6:	4b06      	ldr	r3, [pc, #24]	; (8006600 <_dtoa_r+0x648>)
 80065e8:	f7fa f806 	bl	80005f8 <__aeabi_dmul>
 80065ec:	4680      	mov	r8, r0
 80065ee:	4689      	mov	r9, r1
 80065f0:	e7bd      	b.n	800656e <_dtoa_r+0x5b6>
 80065f2:	bf00      	nop
 80065f4:	08008198 	.word	0x08008198
 80065f8:	08008170 	.word	0x08008170
 80065fc:	3ff00000 	.word	0x3ff00000
 8006600:	40240000 	.word	0x40240000
 8006604:	401c0000 	.word	0x401c0000
 8006608:	40140000 	.word	0x40140000
 800660c:	3fe00000 	.word	0x3fe00000
 8006610:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006614:	9d00      	ldr	r5, [sp, #0]
 8006616:	4642      	mov	r2, r8
 8006618:	464b      	mov	r3, r9
 800661a:	4630      	mov	r0, r6
 800661c:	4639      	mov	r1, r7
 800661e:	f7fa f915 	bl	800084c <__aeabi_ddiv>
 8006622:	f7fa fa99 	bl	8000b58 <__aeabi_d2iz>
 8006626:	9001      	str	r0, [sp, #4]
 8006628:	f7f9 ff7c 	bl	8000524 <__aeabi_i2d>
 800662c:	4642      	mov	r2, r8
 800662e:	464b      	mov	r3, r9
 8006630:	f7f9 ffe2 	bl	80005f8 <__aeabi_dmul>
 8006634:	4602      	mov	r2, r0
 8006636:	460b      	mov	r3, r1
 8006638:	4630      	mov	r0, r6
 800663a:	4639      	mov	r1, r7
 800663c:	f7f9 fe24 	bl	8000288 <__aeabi_dsub>
 8006640:	9e01      	ldr	r6, [sp, #4]
 8006642:	9f04      	ldr	r7, [sp, #16]
 8006644:	3630      	adds	r6, #48	; 0x30
 8006646:	f805 6b01 	strb.w	r6, [r5], #1
 800664a:	9e00      	ldr	r6, [sp, #0]
 800664c:	1bae      	subs	r6, r5, r6
 800664e:	42b7      	cmp	r7, r6
 8006650:	4602      	mov	r2, r0
 8006652:	460b      	mov	r3, r1
 8006654:	d134      	bne.n	80066c0 <_dtoa_r+0x708>
 8006656:	f7f9 fe19 	bl	800028c <__adddf3>
 800665a:	4642      	mov	r2, r8
 800665c:	464b      	mov	r3, r9
 800665e:	4606      	mov	r6, r0
 8006660:	460f      	mov	r7, r1
 8006662:	f7fa fa59 	bl	8000b18 <__aeabi_dcmpgt>
 8006666:	b9c8      	cbnz	r0, 800669c <_dtoa_r+0x6e4>
 8006668:	4642      	mov	r2, r8
 800666a:	464b      	mov	r3, r9
 800666c:	4630      	mov	r0, r6
 800666e:	4639      	mov	r1, r7
 8006670:	f7fa fa2a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006674:	b110      	cbz	r0, 800667c <_dtoa_r+0x6c4>
 8006676:	9b01      	ldr	r3, [sp, #4]
 8006678:	07db      	lsls	r3, r3, #31
 800667a:	d40f      	bmi.n	800669c <_dtoa_r+0x6e4>
 800667c:	4651      	mov	r1, sl
 800667e:	4620      	mov	r0, r4
 8006680:	f000 fbcc 	bl	8006e1c <_Bfree>
 8006684:	2300      	movs	r3, #0
 8006686:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006688:	702b      	strb	r3, [r5, #0]
 800668a:	f10b 0301 	add.w	r3, fp, #1
 800668e:	6013      	str	r3, [r2, #0]
 8006690:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006692:	2b00      	cmp	r3, #0
 8006694:	f43f ace2 	beq.w	800605c <_dtoa_r+0xa4>
 8006698:	601d      	str	r5, [r3, #0]
 800669a:	e4df      	b.n	800605c <_dtoa_r+0xa4>
 800669c:	465f      	mov	r7, fp
 800669e:	462b      	mov	r3, r5
 80066a0:	461d      	mov	r5, r3
 80066a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80066a6:	2a39      	cmp	r2, #57	; 0x39
 80066a8:	d106      	bne.n	80066b8 <_dtoa_r+0x700>
 80066aa:	9a00      	ldr	r2, [sp, #0]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d1f7      	bne.n	80066a0 <_dtoa_r+0x6e8>
 80066b0:	9900      	ldr	r1, [sp, #0]
 80066b2:	2230      	movs	r2, #48	; 0x30
 80066b4:	3701      	adds	r7, #1
 80066b6:	700a      	strb	r2, [r1, #0]
 80066b8:	781a      	ldrb	r2, [r3, #0]
 80066ba:	3201      	adds	r2, #1
 80066bc:	701a      	strb	r2, [r3, #0]
 80066be:	e790      	b.n	80065e2 <_dtoa_r+0x62a>
 80066c0:	4ba3      	ldr	r3, [pc, #652]	; (8006950 <_dtoa_r+0x998>)
 80066c2:	2200      	movs	r2, #0
 80066c4:	f7f9 ff98 	bl	80005f8 <__aeabi_dmul>
 80066c8:	2200      	movs	r2, #0
 80066ca:	2300      	movs	r3, #0
 80066cc:	4606      	mov	r6, r0
 80066ce:	460f      	mov	r7, r1
 80066d0:	f7fa f9fa 	bl	8000ac8 <__aeabi_dcmpeq>
 80066d4:	2800      	cmp	r0, #0
 80066d6:	d09e      	beq.n	8006616 <_dtoa_r+0x65e>
 80066d8:	e7d0      	b.n	800667c <_dtoa_r+0x6c4>
 80066da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066dc:	2a00      	cmp	r2, #0
 80066de:	f000 80ca 	beq.w	8006876 <_dtoa_r+0x8be>
 80066e2:	9a07      	ldr	r2, [sp, #28]
 80066e4:	2a01      	cmp	r2, #1
 80066e6:	f300 80ad 	bgt.w	8006844 <_dtoa_r+0x88c>
 80066ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80066ec:	2a00      	cmp	r2, #0
 80066ee:	f000 80a5 	beq.w	800683c <_dtoa_r+0x884>
 80066f2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80066f6:	9e08      	ldr	r6, [sp, #32]
 80066f8:	9d05      	ldr	r5, [sp, #20]
 80066fa:	9a05      	ldr	r2, [sp, #20]
 80066fc:	441a      	add	r2, r3
 80066fe:	9205      	str	r2, [sp, #20]
 8006700:	9a06      	ldr	r2, [sp, #24]
 8006702:	2101      	movs	r1, #1
 8006704:	441a      	add	r2, r3
 8006706:	4620      	mov	r0, r4
 8006708:	9206      	str	r2, [sp, #24]
 800670a:	f000 fc3d 	bl	8006f88 <__i2b>
 800670e:	4607      	mov	r7, r0
 8006710:	b165      	cbz	r5, 800672c <_dtoa_r+0x774>
 8006712:	9b06      	ldr	r3, [sp, #24]
 8006714:	2b00      	cmp	r3, #0
 8006716:	dd09      	ble.n	800672c <_dtoa_r+0x774>
 8006718:	42ab      	cmp	r3, r5
 800671a:	9a05      	ldr	r2, [sp, #20]
 800671c:	bfa8      	it	ge
 800671e:	462b      	movge	r3, r5
 8006720:	1ad2      	subs	r2, r2, r3
 8006722:	9205      	str	r2, [sp, #20]
 8006724:	9a06      	ldr	r2, [sp, #24]
 8006726:	1aed      	subs	r5, r5, r3
 8006728:	1ad3      	subs	r3, r2, r3
 800672a:	9306      	str	r3, [sp, #24]
 800672c:	9b08      	ldr	r3, [sp, #32]
 800672e:	b1f3      	cbz	r3, 800676e <_dtoa_r+0x7b6>
 8006730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006732:	2b00      	cmp	r3, #0
 8006734:	f000 80a3 	beq.w	800687e <_dtoa_r+0x8c6>
 8006738:	2e00      	cmp	r6, #0
 800673a:	dd10      	ble.n	800675e <_dtoa_r+0x7a6>
 800673c:	4639      	mov	r1, r7
 800673e:	4632      	mov	r2, r6
 8006740:	4620      	mov	r0, r4
 8006742:	f000 fce1 	bl	8007108 <__pow5mult>
 8006746:	4652      	mov	r2, sl
 8006748:	4601      	mov	r1, r0
 800674a:	4607      	mov	r7, r0
 800674c:	4620      	mov	r0, r4
 800674e:	f000 fc31 	bl	8006fb4 <__multiply>
 8006752:	4651      	mov	r1, sl
 8006754:	4680      	mov	r8, r0
 8006756:	4620      	mov	r0, r4
 8006758:	f000 fb60 	bl	8006e1c <_Bfree>
 800675c:	46c2      	mov	sl, r8
 800675e:	9b08      	ldr	r3, [sp, #32]
 8006760:	1b9a      	subs	r2, r3, r6
 8006762:	d004      	beq.n	800676e <_dtoa_r+0x7b6>
 8006764:	4651      	mov	r1, sl
 8006766:	4620      	mov	r0, r4
 8006768:	f000 fcce 	bl	8007108 <__pow5mult>
 800676c:	4682      	mov	sl, r0
 800676e:	2101      	movs	r1, #1
 8006770:	4620      	mov	r0, r4
 8006772:	f000 fc09 	bl	8006f88 <__i2b>
 8006776:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006778:	2b00      	cmp	r3, #0
 800677a:	4606      	mov	r6, r0
 800677c:	f340 8081 	ble.w	8006882 <_dtoa_r+0x8ca>
 8006780:	461a      	mov	r2, r3
 8006782:	4601      	mov	r1, r0
 8006784:	4620      	mov	r0, r4
 8006786:	f000 fcbf 	bl	8007108 <__pow5mult>
 800678a:	9b07      	ldr	r3, [sp, #28]
 800678c:	2b01      	cmp	r3, #1
 800678e:	4606      	mov	r6, r0
 8006790:	dd7a      	ble.n	8006888 <_dtoa_r+0x8d0>
 8006792:	f04f 0800 	mov.w	r8, #0
 8006796:	6933      	ldr	r3, [r6, #16]
 8006798:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800679c:	6918      	ldr	r0, [r3, #16]
 800679e:	f000 fba5 	bl	8006eec <__hi0bits>
 80067a2:	f1c0 0020 	rsb	r0, r0, #32
 80067a6:	9b06      	ldr	r3, [sp, #24]
 80067a8:	4418      	add	r0, r3
 80067aa:	f010 001f 	ands.w	r0, r0, #31
 80067ae:	f000 8094 	beq.w	80068da <_dtoa_r+0x922>
 80067b2:	f1c0 0320 	rsb	r3, r0, #32
 80067b6:	2b04      	cmp	r3, #4
 80067b8:	f340 8085 	ble.w	80068c6 <_dtoa_r+0x90e>
 80067bc:	9b05      	ldr	r3, [sp, #20]
 80067be:	f1c0 001c 	rsb	r0, r0, #28
 80067c2:	4403      	add	r3, r0
 80067c4:	9305      	str	r3, [sp, #20]
 80067c6:	9b06      	ldr	r3, [sp, #24]
 80067c8:	4403      	add	r3, r0
 80067ca:	4405      	add	r5, r0
 80067cc:	9306      	str	r3, [sp, #24]
 80067ce:	9b05      	ldr	r3, [sp, #20]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	dd05      	ble.n	80067e0 <_dtoa_r+0x828>
 80067d4:	4651      	mov	r1, sl
 80067d6:	461a      	mov	r2, r3
 80067d8:	4620      	mov	r0, r4
 80067da:	f000 fcef 	bl	80071bc <__lshift>
 80067de:	4682      	mov	sl, r0
 80067e0:	9b06      	ldr	r3, [sp, #24]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	dd05      	ble.n	80067f2 <_dtoa_r+0x83a>
 80067e6:	4631      	mov	r1, r6
 80067e8:	461a      	mov	r2, r3
 80067ea:	4620      	mov	r0, r4
 80067ec:	f000 fce6 	bl	80071bc <__lshift>
 80067f0:	4606      	mov	r6, r0
 80067f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d072      	beq.n	80068de <_dtoa_r+0x926>
 80067f8:	4631      	mov	r1, r6
 80067fa:	4650      	mov	r0, sl
 80067fc:	f000 fd4a 	bl	8007294 <__mcmp>
 8006800:	2800      	cmp	r0, #0
 8006802:	da6c      	bge.n	80068de <_dtoa_r+0x926>
 8006804:	2300      	movs	r3, #0
 8006806:	4651      	mov	r1, sl
 8006808:	220a      	movs	r2, #10
 800680a:	4620      	mov	r0, r4
 800680c:	f000 fb28 	bl	8006e60 <__multadd>
 8006810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006812:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006816:	4682      	mov	sl, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	f000 81b0 	beq.w	8006b7e <_dtoa_r+0xbc6>
 800681e:	2300      	movs	r3, #0
 8006820:	4639      	mov	r1, r7
 8006822:	220a      	movs	r2, #10
 8006824:	4620      	mov	r0, r4
 8006826:	f000 fb1b 	bl	8006e60 <__multadd>
 800682a:	9b01      	ldr	r3, [sp, #4]
 800682c:	2b00      	cmp	r3, #0
 800682e:	4607      	mov	r7, r0
 8006830:	f300 8096 	bgt.w	8006960 <_dtoa_r+0x9a8>
 8006834:	9b07      	ldr	r3, [sp, #28]
 8006836:	2b02      	cmp	r3, #2
 8006838:	dc59      	bgt.n	80068ee <_dtoa_r+0x936>
 800683a:	e091      	b.n	8006960 <_dtoa_r+0x9a8>
 800683c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800683e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006842:	e758      	b.n	80066f6 <_dtoa_r+0x73e>
 8006844:	9b04      	ldr	r3, [sp, #16]
 8006846:	1e5e      	subs	r6, r3, #1
 8006848:	9b08      	ldr	r3, [sp, #32]
 800684a:	42b3      	cmp	r3, r6
 800684c:	bfbf      	itttt	lt
 800684e:	9b08      	ldrlt	r3, [sp, #32]
 8006850:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006852:	9608      	strlt	r6, [sp, #32]
 8006854:	1af3      	sublt	r3, r6, r3
 8006856:	bfb4      	ite	lt
 8006858:	18d2      	addlt	r2, r2, r3
 800685a:	1b9e      	subge	r6, r3, r6
 800685c:	9b04      	ldr	r3, [sp, #16]
 800685e:	bfbc      	itt	lt
 8006860:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006862:	2600      	movlt	r6, #0
 8006864:	2b00      	cmp	r3, #0
 8006866:	bfb7      	itett	lt
 8006868:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800686c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006870:	1a9d      	sublt	r5, r3, r2
 8006872:	2300      	movlt	r3, #0
 8006874:	e741      	b.n	80066fa <_dtoa_r+0x742>
 8006876:	9e08      	ldr	r6, [sp, #32]
 8006878:	9d05      	ldr	r5, [sp, #20]
 800687a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800687c:	e748      	b.n	8006710 <_dtoa_r+0x758>
 800687e:	9a08      	ldr	r2, [sp, #32]
 8006880:	e770      	b.n	8006764 <_dtoa_r+0x7ac>
 8006882:	9b07      	ldr	r3, [sp, #28]
 8006884:	2b01      	cmp	r3, #1
 8006886:	dc19      	bgt.n	80068bc <_dtoa_r+0x904>
 8006888:	9b02      	ldr	r3, [sp, #8]
 800688a:	b9bb      	cbnz	r3, 80068bc <_dtoa_r+0x904>
 800688c:	9b03      	ldr	r3, [sp, #12]
 800688e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006892:	b99b      	cbnz	r3, 80068bc <_dtoa_r+0x904>
 8006894:	9b03      	ldr	r3, [sp, #12]
 8006896:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800689a:	0d1b      	lsrs	r3, r3, #20
 800689c:	051b      	lsls	r3, r3, #20
 800689e:	b183      	cbz	r3, 80068c2 <_dtoa_r+0x90a>
 80068a0:	9b05      	ldr	r3, [sp, #20]
 80068a2:	3301      	adds	r3, #1
 80068a4:	9305      	str	r3, [sp, #20]
 80068a6:	9b06      	ldr	r3, [sp, #24]
 80068a8:	3301      	adds	r3, #1
 80068aa:	9306      	str	r3, [sp, #24]
 80068ac:	f04f 0801 	mov.w	r8, #1
 80068b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	f47f af6f 	bne.w	8006796 <_dtoa_r+0x7de>
 80068b8:	2001      	movs	r0, #1
 80068ba:	e774      	b.n	80067a6 <_dtoa_r+0x7ee>
 80068bc:	f04f 0800 	mov.w	r8, #0
 80068c0:	e7f6      	b.n	80068b0 <_dtoa_r+0x8f8>
 80068c2:	4698      	mov	r8, r3
 80068c4:	e7f4      	b.n	80068b0 <_dtoa_r+0x8f8>
 80068c6:	d082      	beq.n	80067ce <_dtoa_r+0x816>
 80068c8:	9a05      	ldr	r2, [sp, #20]
 80068ca:	331c      	adds	r3, #28
 80068cc:	441a      	add	r2, r3
 80068ce:	9205      	str	r2, [sp, #20]
 80068d0:	9a06      	ldr	r2, [sp, #24]
 80068d2:	441a      	add	r2, r3
 80068d4:	441d      	add	r5, r3
 80068d6:	9206      	str	r2, [sp, #24]
 80068d8:	e779      	b.n	80067ce <_dtoa_r+0x816>
 80068da:	4603      	mov	r3, r0
 80068dc:	e7f4      	b.n	80068c8 <_dtoa_r+0x910>
 80068de:	9b04      	ldr	r3, [sp, #16]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	dc37      	bgt.n	8006954 <_dtoa_r+0x99c>
 80068e4:	9b07      	ldr	r3, [sp, #28]
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	dd34      	ble.n	8006954 <_dtoa_r+0x99c>
 80068ea:	9b04      	ldr	r3, [sp, #16]
 80068ec:	9301      	str	r3, [sp, #4]
 80068ee:	9b01      	ldr	r3, [sp, #4]
 80068f0:	b963      	cbnz	r3, 800690c <_dtoa_r+0x954>
 80068f2:	4631      	mov	r1, r6
 80068f4:	2205      	movs	r2, #5
 80068f6:	4620      	mov	r0, r4
 80068f8:	f000 fab2 	bl	8006e60 <__multadd>
 80068fc:	4601      	mov	r1, r0
 80068fe:	4606      	mov	r6, r0
 8006900:	4650      	mov	r0, sl
 8006902:	f000 fcc7 	bl	8007294 <__mcmp>
 8006906:	2800      	cmp	r0, #0
 8006908:	f73f adbb 	bgt.w	8006482 <_dtoa_r+0x4ca>
 800690c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800690e:	9d00      	ldr	r5, [sp, #0]
 8006910:	ea6f 0b03 	mvn.w	fp, r3
 8006914:	f04f 0800 	mov.w	r8, #0
 8006918:	4631      	mov	r1, r6
 800691a:	4620      	mov	r0, r4
 800691c:	f000 fa7e 	bl	8006e1c <_Bfree>
 8006920:	2f00      	cmp	r7, #0
 8006922:	f43f aeab 	beq.w	800667c <_dtoa_r+0x6c4>
 8006926:	f1b8 0f00 	cmp.w	r8, #0
 800692a:	d005      	beq.n	8006938 <_dtoa_r+0x980>
 800692c:	45b8      	cmp	r8, r7
 800692e:	d003      	beq.n	8006938 <_dtoa_r+0x980>
 8006930:	4641      	mov	r1, r8
 8006932:	4620      	mov	r0, r4
 8006934:	f000 fa72 	bl	8006e1c <_Bfree>
 8006938:	4639      	mov	r1, r7
 800693a:	4620      	mov	r0, r4
 800693c:	f000 fa6e 	bl	8006e1c <_Bfree>
 8006940:	e69c      	b.n	800667c <_dtoa_r+0x6c4>
 8006942:	2600      	movs	r6, #0
 8006944:	4637      	mov	r7, r6
 8006946:	e7e1      	b.n	800690c <_dtoa_r+0x954>
 8006948:	46bb      	mov	fp, r7
 800694a:	4637      	mov	r7, r6
 800694c:	e599      	b.n	8006482 <_dtoa_r+0x4ca>
 800694e:	bf00      	nop
 8006950:	40240000 	.word	0x40240000
 8006954:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006956:	2b00      	cmp	r3, #0
 8006958:	f000 80c8 	beq.w	8006aec <_dtoa_r+0xb34>
 800695c:	9b04      	ldr	r3, [sp, #16]
 800695e:	9301      	str	r3, [sp, #4]
 8006960:	2d00      	cmp	r5, #0
 8006962:	dd05      	ble.n	8006970 <_dtoa_r+0x9b8>
 8006964:	4639      	mov	r1, r7
 8006966:	462a      	mov	r2, r5
 8006968:	4620      	mov	r0, r4
 800696a:	f000 fc27 	bl	80071bc <__lshift>
 800696e:	4607      	mov	r7, r0
 8006970:	f1b8 0f00 	cmp.w	r8, #0
 8006974:	d05b      	beq.n	8006a2e <_dtoa_r+0xa76>
 8006976:	6879      	ldr	r1, [r7, #4]
 8006978:	4620      	mov	r0, r4
 800697a:	f000 fa0f 	bl	8006d9c <_Balloc>
 800697e:	4605      	mov	r5, r0
 8006980:	b928      	cbnz	r0, 800698e <_dtoa_r+0x9d6>
 8006982:	4b83      	ldr	r3, [pc, #524]	; (8006b90 <_dtoa_r+0xbd8>)
 8006984:	4602      	mov	r2, r0
 8006986:	f240 21ef 	movw	r1, #751	; 0x2ef
 800698a:	f7ff bb2e 	b.w	8005fea <_dtoa_r+0x32>
 800698e:	693a      	ldr	r2, [r7, #16]
 8006990:	3202      	adds	r2, #2
 8006992:	0092      	lsls	r2, r2, #2
 8006994:	f107 010c 	add.w	r1, r7, #12
 8006998:	300c      	adds	r0, #12
 800699a:	f000 ffab 	bl	80078f4 <memcpy>
 800699e:	2201      	movs	r2, #1
 80069a0:	4629      	mov	r1, r5
 80069a2:	4620      	mov	r0, r4
 80069a4:	f000 fc0a 	bl	80071bc <__lshift>
 80069a8:	9b00      	ldr	r3, [sp, #0]
 80069aa:	3301      	adds	r3, #1
 80069ac:	9304      	str	r3, [sp, #16]
 80069ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069b2:	4413      	add	r3, r2
 80069b4:	9308      	str	r3, [sp, #32]
 80069b6:	9b02      	ldr	r3, [sp, #8]
 80069b8:	f003 0301 	and.w	r3, r3, #1
 80069bc:	46b8      	mov	r8, r7
 80069be:	9306      	str	r3, [sp, #24]
 80069c0:	4607      	mov	r7, r0
 80069c2:	9b04      	ldr	r3, [sp, #16]
 80069c4:	4631      	mov	r1, r6
 80069c6:	3b01      	subs	r3, #1
 80069c8:	4650      	mov	r0, sl
 80069ca:	9301      	str	r3, [sp, #4]
 80069cc:	f7ff fa6a 	bl	8005ea4 <quorem>
 80069d0:	4641      	mov	r1, r8
 80069d2:	9002      	str	r0, [sp, #8]
 80069d4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80069d8:	4650      	mov	r0, sl
 80069da:	f000 fc5b 	bl	8007294 <__mcmp>
 80069de:	463a      	mov	r2, r7
 80069e0:	9005      	str	r0, [sp, #20]
 80069e2:	4631      	mov	r1, r6
 80069e4:	4620      	mov	r0, r4
 80069e6:	f000 fc71 	bl	80072cc <__mdiff>
 80069ea:	68c2      	ldr	r2, [r0, #12]
 80069ec:	4605      	mov	r5, r0
 80069ee:	bb02      	cbnz	r2, 8006a32 <_dtoa_r+0xa7a>
 80069f0:	4601      	mov	r1, r0
 80069f2:	4650      	mov	r0, sl
 80069f4:	f000 fc4e 	bl	8007294 <__mcmp>
 80069f8:	4602      	mov	r2, r0
 80069fa:	4629      	mov	r1, r5
 80069fc:	4620      	mov	r0, r4
 80069fe:	9209      	str	r2, [sp, #36]	; 0x24
 8006a00:	f000 fa0c 	bl	8006e1c <_Bfree>
 8006a04:	9b07      	ldr	r3, [sp, #28]
 8006a06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a08:	9d04      	ldr	r5, [sp, #16]
 8006a0a:	ea43 0102 	orr.w	r1, r3, r2
 8006a0e:	9b06      	ldr	r3, [sp, #24]
 8006a10:	4319      	orrs	r1, r3
 8006a12:	d110      	bne.n	8006a36 <_dtoa_r+0xa7e>
 8006a14:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006a18:	d029      	beq.n	8006a6e <_dtoa_r+0xab6>
 8006a1a:	9b05      	ldr	r3, [sp, #20]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	dd02      	ble.n	8006a26 <_dtoa_r+0xa6e>
 8006a20:	9b02      	ldr	r3, [sp, #8]
 8006a22:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006a26:	9b01      	ldr	r3, [sp, #4]
 8006a28:	f883 9000 	strb.w	r9, [r3]
 8006a2c:	e774      	b.n	8006918 <_dtoa_r+0x960>
 8006a2e:	4638      	mov	r0, r7
 8006a30:	e7ba      	b.n	80069a8 <_dtoa_r+0x9f0>
 8006a32:	2201      	movs	r2, #1
 8006a34:	e7e1      	b.n	80069fa <_dtoa_r+0xa42>
 8006a36:	9b05      	ldr	r3, [sp, #20]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	db04      	blt.n	8006a46 <_dtoa_r+0xa8e>
 8006a3c:	9907      	ldr	r1, [sp, #28]
 8006a3e:	430b      	orrs	r3, r1
 8006a40:	9906      	ldr	r1, [sp, #24]
 8006a42:	430b      	orrs	r3, r1
 8006a44:	d120      	bne.n	8006a88 <_dtoa_r+0xad0>
 8006a46:	2a00      	cmp	r2, #0
 8006a48:	dded      	ble.n	8006a26 <_dtoa_r+0xa6e>
 8006a4a:	4651      	mov	r1, sl
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	4620      	mov	r0, r4
 8006a50:	f000 fbb4 	bl	80071bc <__lshift>
 8006a54:	4631      	mov	r1, r6
 8006a56:	4682      	mov	sl, r0
 8006a58:	f000 fc1c 	bl	8007294 <__mcmp>
 8006a5c:	2800      	cmp	r0, #0
 8006a5e:	dc03      	bgt.n	8006a68 <_dtoa_r+0xab0>
 8006a60:	d1e1      	bne.n	8006a26 <_dtoa_r+0xa6e>
 8006a62:	f019 0f01 	tst.w	r9, #1
 8006a66:	d0de      	beq.n	8006a26 <_dtoa_r+0xa6e>
 8006a68:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006a6c:	d1d8      	bne.n	8006a20 <_dtoa_r+0xa68>
 8006a6e:	9a01      	ldr	r2, [sp, #4]
 8006a70:	2339      	movs	r3, #57	; 0x39
 8006a72:	7013      	strb	r3, [r2, #0]
 8006a74:	462b      	mov	r3, r5
 8006a76:	461d      	mov	r5, r3
 8006a78:	3b01      	subs	r3, #1
 8006a7a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006a7e:	2a39      	cmp	r2, #57	; 0x39
 8006a80:	d06c      	beq.n	8006b5c <_dtoa_r+0xba4>
 8006a82:	3201      	adds	r2, #1
 8006a84:	701a      	strb	r2, [r3, #0]
 8006a86:	e747      	b.n	8006918 <_dtoa_r+0x960>
 8006a88:	2a00      	cmp	r2, #0
 8006a8a:	dd07      	ble.n	8006a9c <_dtoa_r+0xae4>
 8006a8c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006a90:	d0ed      	beq.n	8006a6e <_dtoa_r+0xab6>
 8006a92:	9a01      	ldr	r2, [sp, #4]
 8006a94:	f109 0301 	add.w	r3, r9, #1
 8006a98:	7013      	strb	r3, [r2, #0]
 8006a9a:	e73d      	b.n	8006918 <_dtoa_r+0x960>
 8006a9c:	9b04      	ldr	r3, [sp, #16]
 8006a9e:	9a08      	ldr	r2, [sp, #32]
 8006aa0:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d043      	beq.n	8006b30 <_dtoa_r+0xb78>
 8006aa8:	4651      	mov	r1, sl
 8006aaa:	2300      	movs	r3, #0
 8006aac:	220a      	movs	r2, #10
 8006aae:	4620      	mov	r0, r4
 8006ab0:	f000 f9d6 	bl	8006e60 <__multadd>
 8006ab4:	45b8      	cmp	r8, r7
 8006ab6:	4682      	mov	sl, r0
 8006ab8:	f04f 0300 	mov.w	r3, #0
 8006abc:	f04f 020a 	mov.w	r2, #10
 8006ac0:	4641      	mov	r1, r8
 8006ac2:	4620      	mov	r0, r4
 8006ac4:	d107      	bne.n	8006ad6 <_dtoa_r+0xb1e>
 8006ac6:	f000 f9cb 	bl	8006e60 <__multadd>
 8006aca:	4680      	mov	r8, r0
 8006acc:	4607      	mov	r7, r0
 8006ace:	9b04      	ldr	r3, [sp, #16]
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	9304      	str	r3, [sp, #16]
 8006ad4:	e775      	b.n	80069c2 <_dtoa_r+0xa0a>
 8006ad6:	f000 f9c3 	bl	8006e60 <__multadd>
 8006ada:	4639      	mov	r1, r7
 8006adc:	4680      	mov	r8, r0
 8006ade:	2300      	movs	r3, #0
 8006ae0:	220a      	movs	r2, #10
 8006ae2:	4620      	mov	r0, r4
 8006ae4:	f000 f9bc 	bl	8006e60 <__multadd>
 8006ae8:	4607      	mov	r7, r0
 8006aea:	e7f0      	b.n	8006ace <_dtoa_r+0xb16>
 8006aec:	9b04      	ldr	r3, [sp, #16]
 8006aee:	9301      	str	r3, [sp, #4]
 8006af0:	9d00      	ldr	r5, [sp, #0]
 8006af2:	4631      	mov	r1, r6
 8006af4:	4650      	mov	r0, sl
 8006af6:	f7ff f9d5 	bl	8005ea4 <quorem>
 8006afa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006afe:	9b00      	ldr	r3, [sp, #0]
 8006b00:	f805 9b01 	strb.w	r9, [r5], #1
 8006b04:	1aea      	subs	r2, r5, r3
 8006b06:	9b01      	ldr	r3, [sp, #4]
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	dd07      	ble.n	8006b1c <_dtoa_r+0xb64>
 8006b0c:	4651      	mov	r1, sl
 8006b0e:	2300      	movs	r3, #0
 8006b10:	220a      	movs	r2, #10
 8006b12:	4620      	mov	r0, r4
 8006b14:	f000 f9a4 	bl	8006e60 <__multadd>
 8006b18:	4682      	mov	sl, r0
 8006b1a:	e7ea      	b.n	8006af2 <_dtoa_r+0xb3a>
 8006b1c:	9b01      	ldr	r3, [sp, #4]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	bfc8      	it	gt
 8006b22:	461d      	movgt	r5, r3
 8006b24:	9b00      	ldr	r3, [sp, #0]
 8006b26:	bfd8      	it	le
 8006b28:	2501      	movle	r5, #1
 8006b2a:	441d      	add	r5, r3
 8006b2c:	f04f 0800 	mov.w	r8, #0
 8006b30:	4651      	mov	r1, sl
 8006b32:	2201      	movs	r2, #1
 8006b34:	4620      	mov	r0, r4
 8006b36:	f000 fb41 	bl	80071bc <__lshift>
 8006b3a:	4631      	mov	r1, r6
 8006b3c:	4682      	mov	sl, r0
 8006b3e:	f000 fba9 	bl	8007294 <__mcmp>
 8006b42:	2800      	cmp	r0, #0
 8006b44:	dc96      	bgt.n	8006a74 <_dtoa_r+0xabc>
 8006b46:	d102      	bne.n	8006b4e <_dtoa_r+0xb96>
 8006b48:	f019 0f01 	tst.w	r9, #1
 8006b4c:	d192      	bne.n	8006a74 <_dtoa_r+0xabc>
 8006b4e:	462b      	mov	r3, r5
 8006b50:	461d      	mov	r5, r3
 8006b52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b56:	2a30      	cmp	r2, #48	; 0x30
 8006b58:	d0fa      	beq.n	8006b50 <_dtoa_r+0xb98>
 8006b5a:	e6dd      	b.n	8006918 <_dtoa_r+0x960>
 8006b5c:	9a00      	ldr	r2, [sp, #0]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d189      	bne.n	8006a76 <_dtoa_r+0xabe>
 8006b62:	f10b 0b01 	add.w	fp, fp, #1
 8006b66:	2331      	movs	r3, #49	; 0x31
 8006b68:	e796      	b.n	8006a98 <_dtoa_r+0xae0>
 8006b6a:	4b0a      	ldr	r3, [pc, #40]	; (8006b94 <_dtoa_r+0xbdc>)
 8006b6c:	f7ff ba99 	b.w	80060a2 <_dtoa_r+0xea>
 8006b70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	f47f aa6d 	bne.w	8006052 <_dtoa_r+0x9a>
 8006b78:	4b07      	ldr	r3, [pc, #28]	; (8006b98 <_dtoa_r+0xbe0>)
 8006b7a:	f7ff ba92 	b.w	80060a2 <_dtoa_r+0xea>
 8006b7e:	9b01      	ldr	r3, [sp, #4]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	dcb5      	bgt.n	8006af0 <_dtoa_r+0xb38>
 8006b84:	9b07      	ldr	r3, [sp, #28]
 8006b86:	2b02      	cmp	r3, #2
 8006b88:	f73f aeb1 	bgt.w	80068ee <_dtoa_r+0x936>
 8006b8c:	e7b0      	b.n	8006af0 <_dtoa_r+0xb38>
 8006b8e:	bf00      	nop
 8006b90:	08008100 	.word	0x08008100
 8006b94:	08008060 	.word	0x08008060
 8006b98:	08008084 	.word	0x08008084

08006b9c <_free_r>:
 8006b9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b9e:	2900      	cmp	r1, #0
 8006ba0:	d044      	beq.n	8006c2c <_free_r+0x90>
 8006ba2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ba6:	9001      	str	r0, [sp, #4]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	f1a1 0404 	sub.w	r4, r1, #4
 8006bae:	bfb8      	it	lt
 8006bb0:	18e4      	addlt	r4, r4, r3
 8006bb2:	f000 f8e7 	bl	8006d84 <__malloc_lock>
 8006bb6:	4a1e      	ldr	r2, [pc, #120]	; (8006c30 <_free_r+0x94>)
 8006bb8:	9801      	ldr	r0, [sp, #4]
 8006bba:	6813      	ldr	r3, [r2, #0]
 8006bbc:	b933      	cbnz	r3, 8006bcc <_free_r+0x30>
 8006bbe:	6063      	str	r3, [r4, #4]
 8006bc0:	6014      	str	r4, [r2, #0]
 8006bc2:	b003      	add	sp, #12
 8006bc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006bc8:	f000 b8e2 	b.w	8006d90 <__malloc_unlock>
 8006bcc:	42a3      	cmp	r3, r4
 8006bce:	d908      	bls.n	8006be2 <_free_r+0x46>
 8006bd0:	6825      	ldr	r5, [r4, #0]
 8006bd2:	1961      	adds	r1, r4, r5
 8006bd4:	428b      	cmp	r3, r1
 8006bd6:	bf01      	itttt	eq
 8006bd8:	6819      	ldreq	r1, [r3, #0]
 8006bda:	685b      	ldreq	r3, [r3, #4]
 8006bdc:	1949      	addeq	r1, r1, r5
 8006bde:	6021      	streq	r1, [r4, #0]
 8006be0:	e7ed      	b.n	8006bbe <_free_r+0x22>
 8006be2:	461a      	mov	r2, r3
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	b10b      	cbz	r3, 8006bec <_free_r+0x50>
 8006be8:	42a3      	cmp	r3, r4
 8006bea:	d9fa      	bls.n	8006be2 <_free_r+0x46>
 8006bec:	6811      	ldr	r1, [r2, #0]
 8006bee:	1855      	adds	r5, r2, r1
 8006bf0:	42a5      	cmp	r5, r4
 8006bf2:	d10b      	bne.n	8006c0c <_free_r+0x70>
 8006bf4:	6824      	ldr	r4, [r4, #0]
 8006bf6:	4421      	add	r1, r4
 8006bf8:	1854      	adds	r4, r2, r1
 8006bfa:	42a3      	cmp	r3, r4
 8006bfc:	6011      	str	r1, [r2, #0]
 8006bfe:	d1e0      	bne.n	8006bc2 <_free_r+0x26>
 8006c00:	681c      	ldr	r4, [r3, #0]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	6053      	str	r3, [r2, #4]
 8006c06:	440c      	add	r4, r1
 8006c08:	6014      	str	r4, [r2, #0]
 8006c0a:	e7da      	b.n	8006bc2 <_free_r+0x26>
 8006c0c:	d902      	bls.n	8006c14 <_free_r+0x78>
 8006c0e:	230c      	movs	r3, #12
 8006c10:	6003      	str	r3, [r0, #0]
 8006c12:	e7d6      	b.n	8006bc2 <_free_r+0x26>
 8006c14:	6825      	ldr	r5, [r4, #0]
 8006c16:	1961      	adds	r1, r4, r5
 8006c18:	428b      	cmp	r3, r1
 8006c1a:	bf04      	itt	eq
 8006c1c:	6819      	ldreq	r1, [r3, #0]
 8006c1e:	685b      	ldreq	r3, [r3, #4]
 8006c20:	6063      	str	r3, [r4, #4]
 8006c22:	bf04      	itt	eq
 8006c24:	1949      	addeq	r1, r1, r5
 8006c26:	6021      	streq	r1, [r4, #0]
 8006c28:	6054      	str	r4, [r2, #4]
 8006c2a:	e7ca      	b.n	8006bc2 <_free_r+0x26>
 8006c2c:	b003      	add	sp, #12
 8006c2e:	bd30      	pop	{r4, r5, pc}
 8006c30:	20000470 	.word	0x20000470

08006c34 <malloc>:
 8006c34:	4b02      	ldr	r3, [pc, #8]	; (8006c40 <malloc+0xc>)
 8006c36:	4601      	mov	r1, r0
 8006c38:	6818      	ldr	r0, [r3, #0]
 8006c3a:	f000 b823 	b.w	8006c84 <_malloc_r>
 8006c3e:	bf00      	nop
 8006c40:	20000064 	.word	0x20000064

08006c44 <sbrk_aligned>:
 8006c44:	b570      	push	{r4, r5, r6, lr}
 8006c46:	4e0e      	ldr	r6, [pc, #56]	; (8006c80 <sbrk_aligned+0x3c>)
 8006c48:	460c      	mov	r4, r1
 8006c4a:	6831      	ldr	r1, [r6, #0]
 8006c4c:	4605      	mov	r5, r0
 8006c4e:	b911      	cbnz	r1, 8006c56 <sbrk_aligned+0x12>
 8006c50:	f000 fe40 	bl	80078d4 <_sbrk_r>
 8006c54:	6030      	str	r0, [r6, #0]
 8006c56:	4621      	mov	r1, r4
 8006c58:	4628      	mov	r0, r5
 8006c5a:	f000 fe3b 	bl	80078d4 <_sbrk_r>
 8006c5e:	1c43      	adds	r3, r0, #1
 8006c60:	d00a      	beq.n	8006c78 <sbrk_aligned+0x34>
 8006c62:	1cc4      	adds	r4, r0, #3
 8006c64:	f024 0403 	bic.w	r4, r4, #3
 8006c68:	42a0      	cmp	r0, r4
 8006c6a:	d007      	beq.n	8006c7c <sbrk_aligned+0x38>
 8006c6c:	1a21      	subs	r1, r4, r0
 8006c6e:	4628      	mov	r0, r5
 8006c70:	f000 fe30 	bl	80078d4 <_sbrk_r>
 8006c74:	3001      	adds	r0, #1
 8006c76:	d101      	bne.n	8006c7c <sbrk_aligned+0x38>
 8006c78:	f04f 34ff 	mov.w	r4, #4294967295
 8006c7c:	4620      	mov	r0, r4
 8006c7e:	bd70      	pop	{r4, r5, r6, pc}
 8006c80:	20000474 	.word	0x20000474

08006c84 <_malloc_r>:
 8006c84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c88:	1ccd      	adds	r5, r1, #3
 8006c8a:	f025 0503 	bic.w	r5, r5, #3
 8006c8e:	3508      	adds	r5, #8
 8006c90:	2d0c      	cmp	r5, #12
 8006c92:	bf38      	it	cc
 8006c94:	250c      	movcc	r5, #12
 8006c96:	2d00      	cmp	r5, #0
 8006c98:	4607      	mov	r7, r0
 8006c9a:	db01      	blt.n	8006ca0 <_malloc_r+0x1c>
 8006c9c:	42a9      	cmp	r1, r5
 8006c9e:	d905      	bls.n	8006cac <_malloc_r+0x28>
 8006ca0:	230c      	movs	r3, #12
 8006ca2:	603b      	str	r3, [r7, #0]
 8006ca4:	2600      	movs	r6, #0
 8006ca6:	4630      	mov	r0, r6
 8006ca8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006d80 <_malloc_r+0xfc>
 8006cb0:	f000 f868 	bl	8006d84 <__malloc_lock>
 8006cb4:	f8d8 3000 	ldr.w	r3, [r8]
 8006cb8:	461c      	mov	r4, r3
 8006cba:	bb5c      	cbnz	r4, 8006d14 <_malloc_r+0x90>
 8006cbc:	4629      	mov	r1, r5
 8006cbe:	4638      	mov	r0, r7
 8006cc0:	f7ff ffc0 	bl	8006c44 <sbrk_aligned>
 8006cc4:	1c43      	adds	r3, r0, #1
 8006cc6:	4604      	mov	r4, r0
 8006cc8:	d155      	bne.n	8006d76 <_malloc_r+0xf2>
 8006cca:	f8d8 4000 	ldr.w	r4, [r8]
 8006cce:	4626      	mov	r6, r4
 8006cd0:	2e00      	cmp	r6, #0
 8006cd2:	d145      	bne.n	8006d60 <_malloc_r+0xdc>
 8006cd4:	2c00      	cmp	r4, #0
 8006cd6:	d048      	beq.n	8006d6a <_malloc_r+0xe6>
 8006cd8:	6823      	ldr	r3, [r4, #0]
 8006cda:	4631      	mov	r1, r6
 8006cdc:	4638      	mov	r0, r7
 8006cde:	eb04 0903 	add.w	r9, r4, r3
 8006ce2:	f000 fdf7 	bl	80078d4 <_sbrk_r>
 8006ce6:	4581      	cmp	r9, r0
 8006ce8:	d13f      	bne.n	8006d6a <_malloc_r+0xe6>
 8006cea:	6821      	ldr	r1, [r4, #0]
 8006cec:	1a6d      	subs	r5, r5, r1
 8006cee:	4629      	mov	r1, r5
 8006cf0:	4638      	mov	r0, r7
 8006cf2:	f7ff ffa7 	bl	8006c44 <sbrk_aligned>
 8006cf6:	3001      	adds	r0, #1
 8006cf8:	d037      	beq.n	8006d6a <_malloc_r+0xe6>
 8006cfa:	6823      	ldr	r3, [r4, #0]
 8006cfc:	442b      	add	r3, r5
 8006cfe:	6023      	str	r3, [r4, #0]
 8006d00:	f8d8 3000 	ldr.w	r3, [r8]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d038      	beq.n	8006d7a <_malloc_r+0xf6>
 8006d08:	685a      	ldr	r2, [r3, #4]
 8006d0a:	42a2      	cmp	r2, r4
 8006d0c:	d12b      	bne.n	8006d66 <_malloc_r+0xe2>
 8006d0e:	2200      	movs	r2, #0
 8006d10:	605a      	str	r2, [r3, #4]
 8006d12:	e00f      	b.n	8006d34 <_malloc_r+0xb0>
 8006d14:	6822      	ldr	r2, [r4, #0]
 8006d16:	1b52      	subs	r2, r2, r5
 8006d18:	d41f      	bmi.n	8006d5a <_malloc_r+0xd6>
 8006d1a:	2a0b      	cmp	r2, #11
 8006d1c:	d917      	bls.n	8006d4e <_malloc_r+0xca>
 8006d1e:	1961      	adds	r1, r4, r5
 8006d20:	42a3      	cmp	r3, r4
 8006d22:	6025      	str	r5, [r4, #0]
 8006d24:	bf18      	it	ne
 8006d26:	6059      	strne	r1, [r3, #4]
 8006d28:	6863      	ldr	r3, [r4, #4]
 8006d2a:	bf08      	it	eq
 8006d2c:	f8c8 1000 	streq.w	r1, [r8]
 8006d30:	5162      	str	r2, [r4, r5]
 8006d32:	604b      	str	r3, [r1, #4]
 8006d34:	4638      	mov	r0, r7
 8006d36:	f104 060b 	add.w	r6, r4, #11
 8006d3a:	f000 f829 	bl	8006d90 <__malloc_unlock>
 8006d3e:	f026 0607 	bic.w	r6, r6, #7
 8006d42:	1d23      	adds	r3, r4, #4
 8006d44:	1af2      	subs	r2, r6, r3
 8006d46:	d0ae      	beq.n	8006ca6 <_malloc_r+0x22>
 8006d48:	1b9b      	subs	r3, r3, r6
 8006d4a:	50a3      	str	r3, [r4, r2]
 8006d4c:	e7ab      	b.n	8006ca6 <_malloc_r+0x22>
 8006d4e:	42a3      	cmp	r3, r4
 8006d50:	6862      	ldr	r2, [r4, #4]
 8006d52:	d1dd      	bne.n	8006d10 <_malloc_r+0x8c>
 8006d54:	f8c8 2000 	str.w	r2, [r8]
 8006d58:	e7ec      	b.n	8006d34 <_malloc_r+0xb0>
 8006d5a:	4623      	mov	r3, r4
 8006d5c:	6864      	ldr	r4, [r4, #4]
 8006d5e:	e7ac      	b.n	8006cba <_malloc_r+0x36>
 8006d60:	4634      	mov	r4, r6
 8006d62:	6876      	ldr	r6, [r6, #4]
 8006d64:	e7b4      	b.n	8006cd0 <_malloc_r+0x4c>
 8006d66:	4613      	mov	r3, r2
 8006d68:	e7cc      	b.n	8006d04 <_malloc_r+0x80>
 8006d6a:	230c      	movs	r3, #12
 8006d6c:	603b      	str	r3, [r7, #0]
 8006d6e:	4638      	mov	r0, r7
 8006d70:	f000 f80e 	bl	8006d90 <__malloc_unlock>
 8006d74:	e797      	b.n	8006ca6 <_malloc_r+0x22>
 8006d76:	6025      	str	r5, [r4, #0]
 8006d78:	e7dc      	b.n	8006d34 <_malloc_r+0xb0>
 8006d7a:	605b      	str	r3, [r3, #4]
 8006d7c:	deff      	udf	#255	; 0xff
 8006d7e:	bf00      	nop
 8006d80:	20000470 	.word	0x20000470

08006d84 <__malloc_lock>:
 8006d84:	4801      	ldr	r0, [pc, #4]	; (8006d8c <__malloc_lock+0x8>)
 8006d86:	f7ff b88b 	b.w	8005ea0 <__retarget_lock_acquire_recursive>
 8006d8a:	bf00      	nop
 8006d8c:	2000046c 	.word	0x2000046c

08006d90 <__malloc_unlock>:
 8006d90:	4801      	ldr	r0, [pc, #4]	; (8006d98 <__malloc_unlock+0x8>)
 8006d92:	f7ff b886 	b.w	8005ea2 <__retarget_lock_release_recursive>
 8006d96:	bf00      	nop
 8006d98:	2000046c 	.word	0x2000046c

08006d9c <_Balloc>:
 8006d9c:	b570      	push	{r4, r5, r6, lr}
 8006d9e:	69c6      	ldr	r6, [r0, #28]
 8006da0:	4604      	mov	r4, r0
 8006da2:	460d      	mov	r5, r1
 8006da4:	b976      	cbnz	r6, 8006dc4 <_Balloc+0x28>
 8006da6:	2010      	movs	r0, #16
 8006da8:	f7ff ff44 	bl	8006c34 <malloc>
 8006dac:	4602      	mov	r2, r0
 8006dae:	61e0      	str	r0, [r4, #28]
 8006db0:	b920      	cbnz	r0, 8006dbc <_Balloc+0x20>
 8006db2:	4b18      	ldr	r3, [pc, #96]	; (8006e14 <_Balloc+0x78>)
 8006db4:	4818      	ldr	r0, [pc, #96]	; (8006e18 <_Balloc+0x7c>)
 8006db6:	216b      	movs	r1, #107	; 0x6b
 8006db8:	f000 fdaa 	bl	8007910 <__assert_func>
 8006dbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006dc0:	6006      	str	r6, [r0, #0]
 8006dc2:	60c6      	str	r6, [r0, #12]
 8006dc4:	69e6      	ldr	r6, [r4, #28]
 8006dc6:	68f3      	ldr	r3, [r6, #12]
 8006dc8:	b183      	cbz	r3, 8006dec <_Balloc+0x50>
 8006dca:	69e3      	ldr	r3, [r4, #28]
 8006dcc:	68db      	ldr	r3, [r3, #12]
 8006dce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006dd2:	b9b8      	cbnz	r0, 8006e04 <_Balloc+0x68>
 8006dd4:	2101      	movs	r1, #1
 8006dd6:	fa01 f605 	lsl.w	r6, r1, r5
 8006dda:	1d72      	adds	r2, r6, #5
 8006ddc:	0092      	lsls	r2, r2, #2
 8006dde:	4620      	mov	r0, r4
 8006de0:	f000 fdb4 	bl	800794c <_calloc_r>
 8006de4:	b160      	cbz	r0, 8006e00 <_Balloc+0x64>
 8006de6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006dea:	e00e      	b.n	8006e0a <_Balloc+0x6e>
 8006dec:	2221      	movs	r2, #33	; 0x21
 8006dee:	2104      	movs	r1, #4
 8006df0:	4620      	mov	r0, r4
 8006df2:	f000 fdab 	bl	800794c <_calloc_r>
 8006df6:	69e3      	ldr	r3, [r4, #28]
 8006df8:	60f0      	str	r0, [r6, #12]
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d1e4      	bne.n	8006dca <_Balloc+0x2e>
 8006e00:	2000      	movs	r0, #0
 8006e02:	bd70      	pop	{r4, r5, r6, pc}
 8006e04:	6802      	ldr	r2, [r0, #0]
 8006e06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006e10:	e7f7      	b.n	8006e02 <_Balloc+0x66>
 8006e12:	bf00      	nop
 8006e14:	08008091 	.word	0x08008091
 8006e18:	08008111 	.word	0x08008111

08006e1c <_Bfree>:
 8006e1c:	b570      	push	{r4, r5, r6, lr}
 8006e1e:	69c6      	ldr	r6, [r0, #28]
 8006e20:	4605      	mov	r5, r0
 8006e22:	460c      	mov	r4, r1
 8006e24:	b976      	cbnz	r6, 8006e44 <_Bfree+0x28>
 8006e26:	2010      	movs	r0, #16
 8006e28:	f7ff ff04 	bl	8006c34 <malloc>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	61e8      	str	r0, [r5, #28]
 8006e30:	b920      	cbnz	r0, 8006e3c <_Bfree+0x20>
 8006e32:	4b09      	ldr	r3, [pc, #36]	; (8006e58 <_Bfree+0x3c>)
 8006e34:	4809      	ldr	r0, [pc, #36]	; (8006e5c <_Bfree+0x40>)
 8006e36:	218f      	movs	r1, #143	; 0x8f
 8006e38:	f000 fd6a 	bl	8007910 <__assert_func>
 8006e3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e40:	6006      	str	r6, [r0, #0]
 8006e42:	60c6      	str	r6, [r0, #12]
 8006e44:	b13c      	cbz	r4, 8006e56 <_Bfree+0x3a>
 8006e46:	69eb      	ldr	r3, [r5, #28]
 8006e48:	6862      	ldr	r2, [r4, #4]
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e50:	6021      	str	r1, [r4, #0]
 8006e52:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006e56:	bd70      	pop	{r4, r5, r6, pc}
 8006e58:	08008091 	.word	0x08008091
 8006e5c:	08008111 	.word	0x08008111

08006e60 <__multadd>:
 8006e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e64:	690d      	ldr	r5, [r1, #16]
 8006e66:	4607      	mov	r7, r0
 8006e68:	460c      	mov	r4, r1
 8006e6a:	461e      	mov	r6, r3
 8006e6c:	f101 0c14 	add.w	ip, r1, #20
 8006e70:	2000      	movs	r0, #0
 8006e72:	f8dc 3000 	ldr.w	r3, [ip]
 8006e76:	b299      	uxth	r1, r3
 8006e78:	fb02 6101 	mla	r1, r2, r1, r6
 8006e7c:	0c1e      	lsrs	r6, r3, #16
 8006e7e:	0c0b      	lsrs	r3, r1, #16
 8006e80:	fb02 3306 	mla	r3, r2, r6, r3
 8006e84:	b289      	uxth	r1, r1
 8006e86:	3001      	adds	r0, #1
 8006e88:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006e8c:	4285      	cmp	r5, r0
 8006e8e:	f84c 1b04 	str.w	r1, [ip], #4
 8006e92:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006e96:	dcec      	bgt.n	8006e72 <__multadd+0x12>
 8006e98:	b30e      	cbz	r6, 8006ede <__multadd+0x7e>
 8006e9a:	68a3      	ldr	r3, [r4, #8]
 8006e9c:	42ab      	cmp	r3, r5
 8006e9e:	dc19      	bgt.n	8006ed4 <__multadd+0x74>
 8006ea0:	6861      	ldr	r1, [r4, #4]
 8006ea2:	4638      	mov	r0, r7
 8006ea4:	3101      	adds	r1, #1
 8006ea6:	f7ff ff79 	bl	8006d9c <_Balloc>
 8006eaa:	4680      	mov	r8, r0
 8006eac:	b928      	cbnz	r0, 8006eba <__multadd+0x5a>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	4b0c      	ldr	r3, [pc, #48]	; (8006ee4 <__multadd+0x84>)
 8006eb2:	480d      	ldr	r0, [pc, #52]	; (8006ee8 <__multadd+0x88>)
 8006eb4:	21ba      	movs	r1, #186	; 0xba
 8006eb6:	f000 fd2b 	bl	8007910 <__assert_func>
 8006eba:	6922      	ldr	r2, [r4, #16]
 8006ebc:	3202      	adds	r2, #2
 8006ebe:	f104 010c 	add.w	r1, r4, #12
 8006ec2:	0092      	lsls	r2, r2, #2
 8006ec4:	300c      	adds	r0, #12
 8006ec6:	f000 fd15 	bl	80078f4 <memcpy>
 8006eca:	4621      	mov	r1, r4
 8006ecc:	4638      	mov	r0, r7
 8006ece:	f7ff ffa5 	bl	8006e1c <_Bfree>
 8006ed2:	4644      	mov	r4, r8
 8006ed4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006ed8:	3501      	adds	r5, #1
 8006eda:	615e      	str	r6, [r3, #20]
 8006edc:	6125      	str	r5, [r4, #16]
 8006ede:	4620      	mov	r0, r4
 8006ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ee4:	08008100 	.word	0x08008100
 8006ee8:	08008111 	.word	0x08008111

08006eec <__hi0bits>:
 8006eec:	0c03      	lsrs	r3, r0, #16
 8006eee:	041b      	lsls	r3, r3, #16
 8006ef0:	b9d3      	cbnz	r3, 8006f28 <__hi0bits+0x3c>
 8006ef2:	0400      	lsls	r0, r0, #16
 8006ef4:	2310      	movs	r3, #16
 8006ef6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006efa:	bf04      	itt	eq
 8006efc:	0200      	lsleq	r0, r0, #8
 8006efe:	3308      	addeq	r3, #8
 8006f00:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006f04:	bf04      	itt	eq
 8006f06:	0100      	lsleq	r0, r0, #4
 8006f08:	3304      	addeq	r3, #4
 8006f0a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006f0e:	bf04      	itt	eq
 8006f10:	0080      	lsleq	r0, r0, #2
 8006f12:	3302      	addeq	r3, #2
 8006f14:	2800      	cmp	r0, #0
 8006f16:	db05      	blt.n	8006f24 <__hi0bits+0x38>
 8006f18:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006f1c:	f103 0301 	add.w	r3, r3, #1
 8006f20:	bf08      	it	eq
 8006f22:	2320      	moveq	r3, #32
 8006f24:	4618      	mov	r0, r3
 8006f26:	4770      	bx	lr
 8006f28:	2300      	movs	r3, #0
 8006f2a:	e7e4      	b.n	8006ef6 <__hi0bits+0xa>

08006f2c <__lo0bits>:
 8006f2c:	6803      	ldr	r3, [r0, #0]
 8006f2e:	f013 0207 	ands.w	r2, r3, #7
 8006f32:	d00c      	beq.n	8006f4e <__lo0bits+0x22>
 8006f34:	07d9      	lsls	r1, r3, #31
 8006f36:	d422      	bmi.n	8006f7e <__lo0bits+0x52>
 8006f38:	079a      	lsls	r2, r3, #30
 8006f3a:	bf49      	itett	mi
 8006f3c:	085b      	lsrmi	r3, r3, #1
 8006f3e:	089b      	lsrpl	r3, r3, #2
 8006f40:	6003      	strmi	r3, [r0, #0]
 8006f42:	2201      	movmi	r2, #1
 8006f44:	bf5c      	itt	pl
 8006f46:	6003      	strpl	r3, [r0, #0]
 8006f48:	2202      	movpl	r2, #2
 8006f4a:	4610      	mov	r0, r2
 8006f4c:	4770      	bx	lr
 8006f4e:	b299      	uxth	r1, r3
 8006f50:	b909      	cbnz	r1, 8006f56 <__lo0bits+0x2a>
 8006f52:	0c1b      	lsrs	r3, r3, #16
 8006f54:	2210      	movs	r2, #16
 8006f56:	b2d9      	uxtb	r1, r3
 8006f58:	b909      	cbnz	r1, 8006f5e <__lo0bits+0x32>
 8006f5a:	3208      	adds	r2, #8
 8006f5c:	0a1b      	lsrs	r3, r3, #8
 8006f5e:	0719      	lsls	r1, r3, #28
 8006f60:	bf04      	itt	eq
 8006f62:	091b      	lsreq	r3, r3, #4
 8006f64:	3204      	addeq	r2, #4
 8006f66:	0799      	lsls	r1, r3, #30
 8006f68:	bf04      	itt	eq
 8006f6a:	089b      	lsreq	r3, r3, #2
 8006f6c:	3202      	addeq	r2, #2
 8006f6e:	07d9      	lsls	r1, r3, #31
 8006f70:	d403      	bmi.n	8006f7a <__lo0bits+0x4e>
 8006f72:	085b      	lsrs	r3, r3, #1
 8006f74:	f102 0201 	add.w	r2, r2, #1
 8006f78:	d003      	beq.n	8006f82 <__lo0bits+0x56>
 8006f7a:	6003      	str	r3, [r0, #0]
 8006f7c:	e7e5      	b.n	8006f4a <__lo0bits+0x1e>
 8006f7e:	2200      	movs	r2, #0
 8006f80:	e7e3      	b.n	8006f4a <__lo0bits+0x1e>
 8006f82:	2220      	movs	r2, #32
 8006f84:	e7e1      	b.n	8006f4a <__lo0bits+0x1e>
	...

08006f88 <__i2b>:
 8006f88:	b510      	push	{r4, lr}
 8006f8a:	460c      	mov	r4, r1
 8006f8c:	2101      	movs	r1, #1
 8006f8e:	f7ff ff05 	bl	8006d9c <_Balloc>
 8006f92:	4602      	mov	r2, r0
 8006f94:	b928      	cbnz	r0, 8006fa2 <__i2b+0x1a>
 8006f96:	4b05      	ldr	r3, [pc, #20]	; (8006fac <__i2b+0x24>)
 8006f98:	4805      	ldr	r0, [pc, #20]	; (8006fb0 <__i2b+0x28>)
 8006f9a:	f240 1145 	movw	r1, #325	; 0x145
 8006f9e:	f000 fcb7 	bl	8007910 <__assert_func>
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	6144      	str	r4, [r0, #20]
 8006fa6:	6103      	str	r3, [r0, #16]
 8006fa8:	bd10      	pop	{r4, pc}
 8006faa:	bf00      	nop
 8006fac:	08008100 	.word	0x08008100
 8006fb0:	08008111 	.word	0x08008111

08006fb4 <__multiply>:
 8006fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fb8:	4691      	mov	r9, r2
 8006fba:	690a      	ldr	r2, [r1, #16]
 8006fbc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	bfb8      	it	lt
 8006fc4:	460b      	movlt	r3, r1
 8006fc6:	460c      	mov	r4, r1
 8006fc8:	bfbc      	itt	lt
 8006fca:	464c      	movlt	r4, r9
 8006fcc:	4699      	movlt	r9, r3
 8006fce:	6927      	ldr	r7, [r4, #16]
 8006fd0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006fd4:	68a3      	ldr	r3, [r4, #8]
 8006fd6:	6861      	ldr	r1, [r4, #4]
 8006fd8:	eb07 060a 	add.w	r6, r7, sl
 8006fdc:	42b3      	cmp	r3, r6
 8006fde:	b085      	sub	sp, #20
 8006fe0:	bfb8      	it	lt
 8006fe2:	3101      	addlt	r1, #1
 8006fe4:	f7ff feda 	bl	8006d9c <_Balloc>
 8006fe8:	b930      	cbnz	r0, 8006ff8 <__multiply+0x44>
 8006fea:	4602      	mov	r2, r0
 8006fec:	4b44      	ldr	r3, [pc, #272]	; (8007100 <__multiply+0x14c>)
 8006fee:	4845      	ldr	r0, [pc, #276]	; (8007104 <__multiply+0x150>)
 8006ff0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006ff4:	f000 fc8c 	bl	8007910 <__assert_func>
 8006ff8:	f100 0514 	add.w	r5, r0, #20
 8006ffc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007000:	462b      	mov	r3, r5
 8007002:	2200      	movs	r2, #0
 8007004:	4543      	cmp	r3, r8
 8007006:	d321      	bcc.n	800704c <__multiply+0x98>
 8007008:	f104 0314 	add.w	r3, r4, #20
 800700c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007010:	f109 0314 	add.w	r3, r9, #20
 8007014:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007018:	9202      	str	r2, [sp, #8]
 800701a:	1b3a      	subs	r2, r7, r4
 800701c:	3a15      	subs	r2, #21
 800701e:	f022 0203 	bic.w	r2, r2, #3
 8007022:	3204      	adds	r2, #4
 8007024:	f104 0115 	add.w	r1, r4, #21
 8007028:	428f      	cmp	r7, r1
 800702a:	bf38      	it	cc
 800702c:	2204      	movcc	r2, #4
 800702e:	9201      	str	r2, [sp, #4]
 8007030:	9a02      	ldr	r2, [sp, #8]
 8007032:	9303      	str	r3, [sp, #12]
 8007034:	429a      	cmp	r2, r3
 8007036:	d80c      	bhi.n	8007052 <__multiply+0x9e>
 8007038:	2e00      	cmp	r6, #0
 800703a:	dd03      	ble.n	8007044 <__multiply+0x90>
 800703c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007040:	2b00      	cmp	r3, #0
 8007042:	d05b      	beq.n	80070fc <__multiply+0x148>
 8007044:	6106      	str	r6, [r0, #16]
 8007046:	b005      	add	sp, #20
 8007048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800704c:	f843 2b04 	str.w	r2, [r3], #4
 8007050:	e7d8      	b.n	8007004 <__multiply+0x50>
 8007052:	f8b3 a000 	ldrh.w	sl, [r3]
 8007056:	f1ba 0f00 	cmp.w	sl, #0
 800705a:	d024      	beq.n	80070a6 <__multiply+0xf2>
 800705c:	f104 0e14 	add.w	lr, r4, #20
 8007060:	46a9      	mov	r9, r5
 8007062:	f04f 0c00 	mov.w	ip, #0
 8007066:	f85e 2b04 	ldr.w	r2, [lr], #4
 800706a:	f8d9 1000 	ldr.w	r1, [r9]
 800706e:	fa1f fb82 	uxth.w	fp, r2
 8007072:	b289      	uxth	r1, r1
 8007074:	fb0a 110b 	mla	r1, sl, fp, r1
 8007078:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800707c:	f8d9 2000 	ldr.w	r2, [r9]
 8007080:	4461      	add	r1, ip
 8007082:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007086:	fb0a c20b 	mla	r2, sl, fp, ip
 800708a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800708e:	b289      	uxth	r1, r1
 8007090:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007094:	4577      	cmp	r7, lr
 8007096:	f849 1b04 	str.w	r1, [r9], #4
 800709a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800709e:	d8e2      	bhi.n	8007066 <__multiply+0xb2>
 80070a0:	9a01      	ldr	r2, [sp, #4]
 80070a2:	f845 c002 	str.w	ip, [r5, r2]
 80070a6:	9a03      	ldr	r2, [sp, #12]
 80070a8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80070ac:	3304      	adds	r3, #4
 80070ae:	f1b9 0f00 	cmp.w	r9, #0
 80070b2:	d021      	beq.n	80070f8 <__multiply+0x144>
 80070b4:	6829      	ldr	r1, [r5, #0]
 80070b6:	f104 0c14 	add.w	ip, r4, #20
 80070ba:	46ae      	mov	lr, r5
 80070bc:	f04f 0a00 	mov.w	sl, #0
 80070c0:	f8bc b000 	ldrh.w	fp, [ip]
 80070c4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80070c8:	fb09 220b 	mla	r2, r9, fp, r2
 80070cc:	4452      	add	r2, sl
 80070ce:	b289      	uxth	r1, r1
 80070d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80070d4:	f84e 1b04 	str.w	r1, [lr], #4
 80070d8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80070dc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80070e0:	f8be 1000 	ldrh.w	r1, [lr]
 80070e4:	fb09 110a 	mla	r1, r9, sl, r1
 80070e8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80070ec:	4567      	cmp	r7, ip
 80070ee:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80070f2:	d8e5      	bhi.n	80070c0 <__multiply+0x10c>
 80070f4:	9a01      	ldr	r2, [sp, #4]
 80070f6:	50a9      	str	r1, [r5, r2]
 80070f8:	3504      	adds	r5, #4
 80070fa:	e799      	b.n	8007030 <__multiply+0x7c>
 80070fc:	3e01      	subs	r6, #1
 80070fe:	e79b      	b.n	8007038 <__multiply+0x84>
 8007100:	08008100 	.word	0x08008100
 8007104:	08008111 	.word	0x08008111

08007108 <__pow5mult>:
 8007108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800710c:	4615      	mov	r5, r2
 800710e:	f012 0203 	ands.w	r2, r2, #3
 8007112:	4606      	mov	r6, r0
 8007114:	460f      	mov	r7, r1
 8007116:	d007      	beq.n	8007128 <__pow5mult+0x20>
 8007118:	4c25      	ldr	r4, [pc, #148]	; (80071b0 <__pow5mult+0xa8>)
 800711a:	3a01      	subs	r2, #1
 800711c:	2300      	movs	r3, #0
 800711e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007122:	f7ff fe9d 	bl	8006e60 <__multadd>
 8007126:	4607      	mov	r7, r0
 8007128:	10ad      	asrs	r5, r5, #2
 800712a:	d03d      	beq.n	80071a8 <__pow5mult+0xa0>
 800712c:	69f4      	ldr	r4, [r6, #28]
 800712e:	b97c      	cbnz	r4, 8007150 <__pow5mult+0x48>
 8007130:	2010      	movs	r0, #16
 8007132:	f7ff fd7f 	bl	8006c34 <malloc>
 8007136:	4602      	mov	r2, r0
 8007138:	61f0      	str	r0, [r6, #28]
 800713a:	b928      	cbnz	r0, 8007148 <__pow5mult+0x40>
 800713c:	4b1d      	ldr	r3, [pc, #116]	; (80071b4 <__pow5mult+0xac>)
 800713e:	481e      	ldr	r0, [pc, #120]	; (80071b8 <__pow5mult+0xb0>)
 8007140:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007144:	f000 fbe4 	bl	8007910 <__assert_func>
 8007148:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800714c:	6004      	str	r4, [r0, #0]
 800714e:	60c4      	str	r4, [r0, #12]
 8007150:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007154:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007158:	b94c      	cbnz	r4, 800716e <__pow5mult+0x66>
 800715a:	f240 2171 	movw	r1, #625	; 0x271
 800715e:	4630      	mov	r0, r6
 8007160:	f7ff ff12 	bl	8006f88 <__i2b>
 8007164:	2300      	movs	r3, #0
 8007166:	f8c8 0008 	str.w	r0, [r8, #8]
 800716a:	4604      	mov	r4, r0
 800716c:	6003      	str	r3, [r0, #0]
 800716e:	f04f 0900 	mov.w	r9, #0
 8007172:	07eb      	lsls	r3, r5, #31
 8007174:	d50a      	bpl.n	800718c <__pow5mult+0x84>
 8007176:	4639      	mov	r1, r7
 8007178:	4622      	mov	r2, r4
 800717a:	4630      	mov	r0, r6
 800717c:	f7ff ff1a 	bl	8006fb4 <__multiply>
 8007180:	4639      	mov	r1, r7
 8007182:	4680      	mov	r8, r0
 8007184:	4630      	mov	r0, r6
 8007186:	f7ff fe49 	bl	8006e1c <_Bfree>
 800718a:	4647      	mov	r7, r8
 800718c:	106d      	asrs	r5, r5, #1
 800718e:	d00b      	beq.n	80071a8 <__pow5mult+0xa0>
 8007190:	6820      	ldr	r0, [r4, #0]
 8007192:	b938      	cbnz	r0, 80071a4 <__pow5mult+0x9c>
 8007194:	4622      	mov	r2, r4
 8007196:	4621      	mov	r1, r4
 8007198:	4630      	mov	r0, r6
 800719a:	f7ff ff0b 	bl	8006fb4 <__multiply>
 800719e:	6020      	str	r0, [r4, #0]
 80071a0:	f8c0 9000 	str.w	r9, [r0]
 80071a4:	4604      	mov	r4, r0
 80071a6:	e7e4      	b.n	8007172 <__pow5mult+0x6a>
 80071a8:	4638      	mov	r0, r7
 80071aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071ae:	bf00      	nop
 80071b0:	08008260 	.word	0x08008260
 80071b4:	08008091 	.word	0x08008091
 80071b8:	08008111 	.word	0x08008111

080071bc <__lshift>:
 80071bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071c0:	460c      	mov	r4, r1
 80071c2:	6849      	ldr	r1, [r1, #4]
 80071c4:	6923      	ldr	r3, [r4, #16]
 80071c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80071ca:	68a3      	ldr	r3, [r4, #8]
 80071cc:	4607      	mov	r7, r0
 80071ce:	4691      	mov	r9, r2
 80071d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80071d4:	f108 0601 	add.w	r6, r8, #1
 80071d8:	42b3      	cmp	r3, r6
 80071da:	db0b      	blt.n	80071f4 <__lshift+0x38>
 80071dc:	4638      	mov	r0, r7
 80071de:	f7ff fddd 	bl	8006d9c <_Balloc>
 80071e2:	4605      	mov	r5, r0
 80071e4:	b948      	cbnz	r0, 80071fa <__lshift+0x3e>
 80071e6:	4602      	mov	r2, r0
 80071e8:	4b28      	ldr	r3, [pc, #160]	; (800728c <__lshift+0xd0>)
 80071ea:	4829      	ldr	r0, [pc, #164]	; (8007290 <__lshift+0xd4>)
 80071ec:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80071f0:	f000 fb8e 	bl	8007910 <__assert_func>
 80071f4:	3101      	adds	r1, #1
 80071f6:	005b      	lsls	r3, r3, #1
 80071f8:	e7ee      	b.n	80071d8 <__lshift+0x1c>
 80071fa:	2300      	movs	r3, #0
 80071fc:	f100 0114 	add.w	r1, r0, #20
 8007200:	f100 0210 	add.w	r2, r0, #16
 8007204:	4618      	mov	r0, r3
 8007206:	4553      	cmp	r3, sl
 8007208:	db33      	blt.n	8007272 <__lshift+0xb6>
 800720a:	6920      	ldr	r0, [r4, #16]
 800720c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007210:	f104 0314 	add.w	r3, r4, #20
 8007214:	f019 091f 	ands.w	r9, r9, #31
 8007218:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800721c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007220:	d02b      	beq.n	800727a <__lshift+0xbe>
 8007222:	f1c9 0e20 	rsb	lr, r9, #32
 8007226:	468a      	mov	sl, r1
 8007228:	2200      	movs	r2, #0
 800722a:	6818      	ldr	r0, [r3, #0]
 800722c:	fa00 f009 	lsl.w	r0, r0, r9
 8007230:	4310      	orrs	r0, r2
 8007232:	f84a 0b04 	str.w	r0, [sl], #4
 8007236:	f853 2b04 	ldr.w	r2, [r3], #4
 800723a:	459c      	cmp	ip, r3
 800723c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007240:	d8f3      	bhi.n	800722a <__lshift+0x6e>
 8007242:	ebac 0304 	sub.w	r3, ip, r4
 8007246:	3b15      	subs	r3, #21
 8007248:	f023 0303 	bic.w	r3, r3, #3
 800724c:	3304      	adds	r3, #4
 800724e:	f104 0015 	add.w	r0, r4, #21
 8007252:	4584      	cmp	ip, r0
 8007254:	bf38      	it	cc
 8007256:	2304      	movcc	r3, #4
 8007258:	50ca      	str	r2, [r1, r3]
 800725a:	b10a      	cbz	r2, 8007260 <__lshift+0xa4>
 800725c:	f108 0602 	add.w	r6, r8, #2
 8007260:	3e01      	subs	r6, #1
 8007262:	4638      	mov	r0, r7
 8007264:	612e      	str	r6, [r5, #16]
 8007266:	4621      	mov	r1, r4
 8007268:	f7ff fdd8 	bl	8006e1c <_Bfree>
 800726c:	4628      	mov	r0, r5
 800726e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007272:	f842 0f04 	str.w	r0, [r2, #4]!
 8007276:	3301      	adds	r3, #1
 8007278:	e7c5      	b.n	8007206 <__lshift+0x4a>
 800727a:	3904      	subs	r1, #4
 800727c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007280:	f841 2f04 	str.w	r2, [r1, #4]!
 8007284:	459c      	cmp	ip, r3
 8007286:	d8f9      	bhi.n	800727c <__lshift+0xc0>
 8007288:	e7ea      	b.n	8007260 <__lshift+0xa4>
 800728a:	bf00      	nop
 800728c:	08008100 	.word	0x08008100
 8007290:	08008111 	.word	0x08008111

08007294 <__mcmp>:
 8007294:	b530      	push	{r4, r5, lr}
 8007296:	6902      	ldr	r2, [r0, #16]
 8007298:	690c      	ldr	r4, [r1, #16]
 800729a:	1b12      	subs	r2, r2, r4
 800729c:	d10e      	bne.n	80072bc <__mcmp+0x28>
 800729e:	f100 0314 	add.w	r3, r0, #20
 80072a2:	3114      	adds	r1, #20
 80072a4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80072a8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80072ac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80072b0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80072b4:	42a5      	cmp	r5, r4
 80072b6:	d003      	beq.n	80072c0 <__mcmp+0x2c>
 80072b8:	d305      	bcc.n	80072c6 <__mcmp+0x32>
 80072ba:	2201      	movs	r2, #1
 80072bc:	4610      	mov	r0, r2
 80072be:	bd30      	pop	{r4, r5, pc}
 80072c0:	4283      	cmp	r3, r0
 80072c2:	d3f3      	bcc.n	80072ac <__mcmp+0x18>
 80072c4:	e7fa      	b.n	80072bc <__mcmp+0x28>
 80072c6:	f04f 32ff 	mov.w	r2, #4294967295
 80072ca:	e7f7      	b.n	80072bc <__mcmp+0x28>

080072cc <__mdiff>:
 80072cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072d0:	460c      	mov	r4, r1
 80072d2:	4606      	mov	r6, r0
 80072d4:	4611      	mov	r1, r2
 80072d6:	4620      	mov	r0, r4
 80072d8:	4690      	mov	r8, r2
 80072da:	f7ff ffdb 	bl	8007294 <__mcmp>
 80072de:	1e05      	subs	r5, r0, #0
 80072e0:	d110      	bne.n	8007304 <__mdiff+0x38>
 80072e2:	4629      	mov	r1, r5
 80072e4:	4630      	mov	r0, r6
 80072e6:	f7ff fd59 	bl	8006d9c <_Balloc>
 80072ea:	b930      	cbnz	r0, 80072fa <__mdiff+0x2e>
 80072ec:	4b3a      	ldr	r3, [pc, #232]	; (80073d8 <__mdiff+0x10c>)
 80072ee:	4602      	mov	r2, r0
 80072f0:	f240 2137 	movw	r1, #567	; 0x237
 80072f4:	4839      	ldr	r0, [pc, #228]	; (80073dc <__mdiff+0x110>)
 80072f6:	f000 fb0b 	bl	8007910 <__assert_func>
 80072fa:	2301      	movs	r3, #1
 80072fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007300:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007304:	bfa4      	itt	ge
 8007306:	4643      	movge	r3, r8
 8007308:	46a0      	movge	r8, r4
 800730a:	4630      	mov	r0, r6
 800730c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007310:	bfa6      	itte	ge
 8007312:	461c      	movge	r4, r3
 8007314:	2500      	movge	r5, #0
 8007316:	2501      	movlt	r5, #1
 8007318:	f7ff fd40 	bl	8006d9c <_Balloc>
 800731c:	b920      	cbnz	r0, 8007328 <__mdiff+0x5c>
 800731e:	4b2e      	ldr	r3, [pc, #184]	; (80073d8 <__mdiff+0x10c>)
 8007320:	4602      	mov	r2, r0
 8007322:	f240 2145 	movw	r1, #581	; 0x245
 8007326:	e7e5      	b.n	80072f4 <__mdiff+0x28>
 8007328:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800732c:	6926      	ldr	r6, [r4, #16]
 800732e:	60c5      	str	r5, [r0, #12]
 8007330:	f104 0914 	add.w	r9, r4, #20
 8007334:	f108 0514 	add.w	r5, r8, #20
 8007338:	f100 0e14 	add.w	lr, r0, #20
 800733c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007340:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007344:	f108 0210 	add.w	r2, r8, #16
 8007348:	46f2      	mov	sl, lr
 800734a:	2100      	movs	r1, #0
 800734c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007350:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007354:	fa11 f88b 	uxtah	r8, r1, fp
 8007358:	b299      	uxth	r1, r3
 800735a:	0c1b      	lsrs	r3, r3, #16
 800735c:	eba8 0801 	sub.w	r8, r8, r1
 8007360:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007364:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007368:	fa1f f888 	uxth.w	r8, r8
 800736c:	1419      	asrs	r1, r3, #16
 800736e:	454e      	cmp	r6, r9
 8007370:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007374:	f84a 3b04 	str.w	r3, [sl], #4
 8007378:	d8e8      	bhi.n	800734c <__mdiff+0x80>
 800737a:	1b33      	subs	r3, r6, r4
 800737c:	3b15      	subs	r3, #21
 800737e:	f023 0303 	bic.w	r3, r3, #3
 8007382:	3304      	adds	r3, #4
 8007384:	3415      	adds	r4, #21
 8007386:	42a6      	cmp	r6, r4
 8007388:	bf38      	it	cc
 800738a:	2304      	movcc	r3, #4
 800738c:	441d      	add	r5, r3
 800738e:	4473      	add	r3, lr
 8007390:	469e      	mov	lr, r3
 8007392:	462e      	mov	r6, r5
 8007394:	4566      	cmp	r6, ip
 8007396:	d30e      	bcc.n	80073b6 <__mdiff+0xea>
 8007398:	f10c 0203 	add.w	r2, ip, #3
 800739c:	1b52      	subs	r2, r2, r5
 800739e:	f022 0203 	bic.w	r2, r2, #3
 80073a2:	3d03      	subs	r5, #3
 80073a4:	45ac      	cmp	ip, r5
 80073a6:	bf38      	it	cc
 80073a8:	2200      	movcc	r2, #0
 80073aa:	4413      	add	r3, r2
 80073ac:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80073b0:	b17a      	cbz	r2, 80073d2 <__mdiff+0x106>
 80073b2:	6107      	str	r7, [r0, #16]
 80073b4:	e7a4      	b.n	8007300 <__mdiff+0x34>
 80073b6:	f856 8b04 	ldr.w	r8, [r6], #4
 80073ba:	fa11 f288 	uxtah	r2, r1, r8
 80073be:	1414      	asrs	r4, r2, #16
 80073c0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80073c4:	b292      	uxth	r2, r2
 80073c6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80073ca:	f84e 2b04 	str.w	r2, [lr], #4
 80073ce:	1421      	asrs	r1, r4, #16
 80073d0:	e7e0      	b.n	8007394 <__mdiff+0xc8>
 80073d2:	3f01      	subs	r7, #1
 80073d4:	e7ea      	b.n	80073ac <__mdiff+0xe0>
 80073d6:	bf00      	nop
 80073d8:	08008100 	.word	0x08008100
 80073dc:	08008111 	.word	0x08008111

080073e0 <__d2b>:
 80073e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80073e4:	460f      	mov	r7, r1
 80073e6:	2101      	movs	r1, #1
 80073e8:	ec59 8b10 	vmov	r8, r9, d0
 80073ec:	4616      	mov	r6, r2
 80073ee:	f7ff fcd5 	bl	8006d9c <_Balloc>
 80073f2:	4604      	mov	r4, r0
 80073f4:	b930      	cbnz	r0, 8007404 <__d2b+0x24>
 80073f6:	4602      	mov	r2, r0
 80073f8:	4b24      	ldr	r3, [pc, #144]	; (800748c <__d2b+0xac>)
 80073fa:	4825      	ldr	r0, [pc, #148]	; (8007490 <__d2b+0xb0>)
 80073fc:	f240 310f 	movw	r1, #783	; 0x30f
 8007400:	f000 fa86 	bl	8007910 <__assert_func>
 8007404:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007408:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800740c:	bb2d      	cbnz	r5, 800745a <__d2b+0x7a>
 800740e:	9301      	str	r3, [sp, #4]
 8007410:	f1b8 0300 	subs.w	r3, r8, #0
 8007414:	d026      	beq.n	8007464 <__d2b+0x84>
 8007416:	4668      	mov	r0, sp
 8007418:	9300      	str	r3, [sp, #0]
 800741a:	f7ff fd87 	bl	8006f2c <__lo0bits>
 800741e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007422:	b1e8      	cbz	r0, 8007460 <__d2b+0x80>
 8007424:	f1c0 0320 	rsb	r3, r0, #32
 8007428:	fa02 f303 	lsl.w	r3, r2, r3
 800742c:	430b      	orrs	r3, r1
 800742e:	40c2      	lsrs	r2, r0
 8007430:	6163      	str	r3, [r4, #20]
 8007432:	9201      	str	r2, [sp, #4]
 8007434:	9b01      	ldr	r3, [sp, #4]
 8007436:	61a3      	str	r3, [r4, #24]
 8007438:	2b00      	cmp	r3, #0
 800743a:	bf14      	ite	ne
 800743c:	2202      	movne	r2, #2
 800743e:	2201      	moveq	r2, #1
 8007440:	6122      	str	r2, [r4, #16]
 8007442:	b1bd      	cbz	r5, 8007474 <__d2b+0x94>
 8007444:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007448:	4405      	add	r5, r0
 800744a:	603d      	str	r5, [r7, #0]
 800744c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007450:	6030      	str	r0, [r6, #0]
 8007452:	4620      	mov	r0, r4
 8007454:	b003      	add	sp, #12
 8007456:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800745a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800745e:	e7d6      	b.n	800740e <__d2b+0x2e>
 8007460:	6161      	str	r1, [r4, #20]
 8007462:	e7e7      	b.n	8007434 <__d2b+0x54>
 8007464:	a801      	add	r0, sp, #4
 8007466:	f7ff fd61 	bl	8006f2c <__lo0bits>
 800746a:	9b01      	ldr	r3, [sp, #4]
 800746c:	6163      	str	r3, [r4, #20]
 800746e:	3020      	adds	r0, #32
 8007470:	2201      	movs	r2, #1
 8007472:	e7e5      	b.n	8007440 <__d2b+0x60>
 8007474:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007478:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800747c:	6038      	str	r0, [r7, #0]
 800747e:	6918      	ldr	r0, [r3, #16]
 8007480:	f7ff fd34 	bl	8006eec <__hi0bits>
 8007484:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007488:	e7e2      	b.n	8007450 <__d2b+0x70>
 800748a:	bf00      	nop
 800748c:	08008100 	.word	0x08008100
 8007490:	08008111 	.word	0x08008111

08007494 <__ssputs_r>:
 8007494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007498:	688e      	ldr	r6, [r1, #8]
 800749a:	461f      	mov	r7, r3
 800749c:	42be      	cmp	r6, r7
 800749e:	680b      	ldr	r3, [r1, #0]
 80074a0:	4682      	mov	sl, r0
 80074a2:	460c      	mov	r4, r1
 80074a4:	4690      	mov	r8, r2
 80074a6:	d82c      	bhi.n	8007502 <__ssputs_r+0x6e>
 80074a8:	898a      	ldrh	r2, [r1, #12]
 80074aa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80074ae:	d026      	beq.n	80074fe <__ssputs_r+0x6a>
 80074b0:	6965      	ldr	r5, [r4, #20]
 80074b2:	6909      	ldr	r1, [r1, #16]
 80074b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80074b8:	eba3 0901 	sub.w	r9, r3, r1
 80074bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80074c0:	1c7b      	adds	r3, r7, #1
 80074c2:	444b      	add	r3, r9
 80074c4:	106d      	asrs	r5, r5, #1
 80074c6:	429d      	cmp	r5, r3
 80074c8:	bf38      	it	cc
 80074ca:	461d      	movcc	r5, r3
 80074cc:	0553      	lsls	r3, r2, #21
 80074ce:	d527      	bpl.n	8007520 <__ssputs_r+0x8c>
 80074d0:	4629      	mov	r1, r5
 80074d2:	f7ff fbd7 	bl	8006c84 <_malloc_r>
 80074d6:	4606      	mov	r6, r0
 80074d8:	b360      	cbz	r0, 8007534 <__ssputs_r+0xa0>
 80074da:	6921      	ldr	r1, [r4, #16]
 80074dc:	464a      	mov	r2, r9
 80074de:	f000 fa09 	bl	80078f4 <memcpy>
 80074e2:	89a3      	ldrh	r3, [r4, #12]
 80074e4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80074e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074ec:	81a3      	strh	r3, [r4, #12]
 80074ee:	6126      	str	r6, [r4, #16]
 80074f0:	6165      	str	r5, [r4, #20]
 80074f2:	444e      	add	r6, r9
 80074f4:	eba5 0509 	sub.w	r5, r5, r9
 80074f8:	6026      	str	r6, [r4, #0]
 80074fa:	60a5      	str	r5, [r4, #8]
 80074fc:	463e      	mov	r6, r7
 80074fe:	42be      	cmp	r6, r7
 8007500:	d900      	bls.n	8007504 <__ssputs_r+0x70>
 8007502:	463e      	mov	r6, r7
 8007504:	6820      	ldr	r0, [r4, #0]
 8007506:	4632      	mov	r2, r6
 8007508:	4641      	mov	r1, r8
 800750a:	f000 f9c9 	bl	80078a0 <memmove>
 800750e:	68a3      	ldr	r3, [r4, #8]
 8007510:	1b9b      	subs	r3, r3, r6
 8007512:	60a3      	str	r3, [r4, #8]
 8007514:	6823      	ldr	r3, [r4, #0]
 8007516:	4433      	add	r3, r6
 8007518:	6023      	str	r3, [r4, #0]
 800751a:	2000      	movs	r0, #0
 800751c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007520:	462a      	mov	r2, r5
 8007522:	f000 fa3b 	bl	800799c <_realloc_r>
 8007526:	4606      	mov	r6, r0
 8007528:	2800      	cmp	r0, #0
 800752a:	d1e0      	bne.n	80074ee <__ssputs_r+0x5a>
 800752c:	6921      	ldr	r1, [r4, #16]
 800752e:	4650      	mov	r0, sl
 8007530:	f7ff fb34 	bl	8006b9c <_free_r>
 8007534:	230c      	movs	r3, #12
 8007536:	f8ca 3000 	str.w	r3, [sl]
 800753a:	89a3      	ldrh	r3, [r4, #12]
 800753c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007540:	81a3      	strh	r3, [r4, #12]
 8007542:	f04f 30ff 	mov.w	r0, #4294967295
 8007546:	e7e9      	b.n	800751c <__ssputs_r+0x88>

08007548 <_svfiprintf_r>:
 8007548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800754c:	4698      	mov	r8, r3
 800754e:	898b      	ldrh	r3, [r1, #12]
 8007550:	061b      	lsls	r3, r3, #24
 8007552:	b09d      	sub	sp, #116	; 0x74
 8007554:	4607      	mov	r7, r0
 8007556:	460d      	mov	r5, r1
 8007558:	4614      	mov	r4, r2
 800755a:	d50e      	bpl.n	800757a <_svfiprintf_r+0x32>
 800755c:	690b      	ldr	r3, [r1, #16]
 800755e:	b963      	cbnz	r3, 800757a <_svfiprintf_r+0x32>
 8007560:	2140      	movs	r1, #64	; 0x40
 8007562:	f7ff fb8f 	bl	8006c84 <_malloc_r>
 8007566:	6028      	str	r0, [r5, #0]
 8007568:	6128      	str	r0, [r5, #16]
 800756a:	b920      	cbnz	r0, 8007576 <_svfiprintf_r+0x2e>
 800756c:	230c      	movs	r3, #12
 800756e:	603b      	str	r3, [r7, #0]
 8007570:	f04f 30ff 	mov.w	r0, #4294967295
 8007574:	e0d0      	b.n	8007718 <_svfiprintf_r+0x1d0>
 8007576:	2340      	movs	r3, #64	; 0x40
 8007578:	616b      	str	r3, [r5, #20]
 800757a:	2300      	movs	r3, #0
 800757c:	9309      	str	r3, [sp, #36]	; 0x24
 800757e:	2320      	movs	r3, #32
 8007580:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007584:	f8cd 800c 	str.w	r8, [sp, #12]
 8007588:	2330      	movs	r3, #48	; 0x30
 800758a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007730 <_svfiprintf_r+0x1e8>
 800758e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007592:	f04f 0901 	mov.w	r9, #1
 8007596:	4623      	mov	r3, r4
 8007598:	469a      	mov	sl, r3
 800759a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800759e:	b10a      	cbz	r2, 80075a4 <_svfiprintf_r+0x5c>
 80075a0:	2a25      	cmp	r2, #37	; 0x25
 80075a2:	d1f9      	bne.n	8007598 <_svfiprintf_r+0x50>
 80075a4:	ebba 0b04 	subs.w	fp, sl, r4
 80075a8:	d00b      	beq.n	80075c2 <_svfiprintf_r+0x7a>
 80075aa:	465b      	mov	r3, fp
 80075ac:	4622      	mov	r2, r4
 80075ae:	4629      	mov	r1, r5
 80075b0:	4638      	mov	r0, r7
 80075b2:	f7ff ff6f 	bl	8007494 <__ssputs_r>
 80075b6:	3001      	adds	r0, #1
 80075b8:	f000 80a9 	beq.w	800770e <_svfiprintf_r+0x1c6>
 80075bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075be:	445a      	add	r2, fp
 80075c0:	9209      	str	r2, [sp, #36]	; 0x24
 80075c2:	f89a 3000 	ldrb.w	r3, [sl]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	f000 80a1 	beq.w	800770e <_svfiprintf_r+0x1c6>
 80075cc:	2300      	movs	r3, #0
 80075ce:	f04f 32ff 	mov.w	r2, #4294967295
 80075d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075d6:	f10a 0a01 	add.w	sl, sl, #1
 80075da:	9304      	str	r3, [sp, #16]
 80075dc:	9307      	str	r3, [sp, #28]
 80075de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075e2:	931a      	str	r3, [sp, #104]	; 0x68
 80075e4:	4654      	mov	r4, sl
 80075e6:	2205      	movs	r2, #5
 80075e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075ec:	4850      	ldr	r0, [pc, #320]	; (8007730 <_svfiprintf_r+0x1e8>)
 80075ee:	f7f8 fdef 	bl	80001d0 <memchr>
 80075f2:	9a04      	ldr	r2, [sp, #16]
 80075f4:	b9d8      	cbnz	r0, 800762e <_svfiprintf_r+0xe6>
 80075f6:	06d0      	lsls	r0, r2, #27
 80075f8:	bf44      	itt	mi
 80075fa:	2320      	movmi	r3, #32
 80075fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007600:	0711      	lsls	r1, r2, #28
 8007602:	bf44      	itt	mi
 8007604:	232b      	movmi	r3, #43	; 0x2b
 8007606:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800760a:	f89a 3000 	ldrb.w	r3, [sl]
 800760e:	2b2a      	cmp	r3, #42	; 0x2a
 8007610:	d015      	beq.n	800763e <_svfiprintf_r+0xf6>
 8007612:	9a07      	ldr	r2, [sp, #28]
 8007614:	4654      	mov	r4, sl
 8007616:	2000      	movs	r0, #0
 8007618:	f04f 0c0a 	mov.w	ip, #10
 800761c:	4621      	mov	r1, r4
 800761e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007622:	3b30      	subs	r3, #48	; 0x30
 8007624:	2b09      	cmp	r3, #9
 8007626:	d94d      	bls.n	80076c4 <_svfiprintf_r+0x17c>
 8007628:	b1b0      	cbz	r0, 8007658 <_svfiprintf_r+0x110>
 800762a:	9207      	str	r2, [sp, #28]
 800762c:	e014      	b.n	8007658 <_svfiprintf_r+0x110>
 800762e:	eba0 0308 	sub.w	r3, r0, r8
 8007632:	fa09 f303 	lsl.w	r3, r9, r3
 8007636:	4313      	orrs	r3, r2
 8007638:	9304      	str	r3, [sp, #16]
 800763a:	46a2      	mov	sl, r4
 800763c:	e7d2      	b.n	80075e4 <_svfiprintf_r+0x9c>
 800763e:	9b03      	ldr	r3, [sp, #12]
 8007640:	1d19      	adds	r1, r3, #4
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	9103      	str	r1, [sp, #12]
 8007646:	2b00      	cmp	r3, #0
 8007648:	bfbb      	ittet	lt
 800764a:	425b      	neglt	r3, r3
 800764c:	f042 0202 	orrlt.w	r2, r2, #2
 8007650:	9307      	strge	r3, [sp, #28]
 8007652:	9307      	strlt	r3, [sp, #28]
 8007654:	bfb8      	it	lt
 8007656:	9204      	strlt	r2, [sp, #16]
 8007658:	7823      	ldrb	r3, [r4, #0]
 800765a:	2b2e      	cmp	r3, #46	; 0x2e
 800765c:	d10c      	bne.n	8007678 <_svfiprintf_r+0x130>
 800765e:	7863      	ldrb	r3, [r4, #1]
 8007660:	2b2a      	cmp	r3, #42	; 0x2a
 8007662:	d134      	bne.n	80076ce <_svfiprintf_r+0x186>
 8007664:	9b03      	ldr	r3, [sp, #12]
 8007666:	1d1a      	adds	r2, r3, #4
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	9203      	str	r2, [sp, #12]
 800766c:	2b00      	cmp	r3, #0
 800766e:	bfb8      	it	lt
 8007670:	f04f 33ff 	movlt.w	r3, #4294967295
 8007674:	3402      	adds	r4, #2
 8007676:	9305      	str	r3, [sp, #20]
 8007678:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007740 <_svfiprintf_r+0x1f8>
 800767c:	7821      	ldrb	r1, [r4, #0]
 800767e:	2203      	movs	r2, #3
 8007680:	4650      	mov	r0, sl
 8007682:	f7f8 fda5 	bl	80001d0 <memchr>
 8007686:	b138      	cbz	r0, 8007698 <_svfiprintf_r+0x150>
 8007688:	9b04      	ldr	r3, [sp, #16]
 800768a:	eba0 000a 	sub.w	r0, r0, sl
 800768e:	2240      	movs	r2, #64	; 0x40
 8007690:	4082      	lsls	r2, r0
 8007692:	4313      	orrs	r3, r2
 8007694:	3401      	adds	r4, #1
 8007696:	9304      	str	r3, [sp, #16]
 8007698:	f814 1b01 	ldrb.w	r1, [r4], #1
 800769c:	4825      	ldr	r0, [pc, #148]	; (8007734 <_svfiprintf_r+0x1ec>)
 800769e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80076a2:	2206      	movs	r2, #6
 80076a4:	f7f8 fd94 	bl	80001d0 <memchr>
 80076a8:	2800      	cmp	r0, #0
 80076aa:	d038      	beq.n	800771e <_svfiprintf_r+0x1d6>
 80076ac:	4b22      	ldr	r3, [pc, #136]	; (8007738 <_svfiprintf_r+0x1f0>)
 80076ae:	bb1b      	cbnz	r3, 80076f8 <_svfiprintf_r+0x1b0>
 80076b0:	9b03      	ldr	r3, [sp, #12]
 80076b2:	3307      	adds	r3, #7
 80076b4:	f023 0307 	bic.w	r3, r3, #7
 80076b8:	3308      	adds	r3, #8
 80076ba:	9303      	str	r3, [sp, #12]
 80076bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076be:	4433      	add	r3, r6
 80076c0:	9309      	str	r3, [sp, #36]	; 0x24
 80076c2:	e768      	b.n	8007596 <_svfiprintf_r+0x4e>
 80076c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80076c8:	460c      	mov	r4, r1
 80076ca:	2001      	movs	r0, #1
 80076cc:	e7a6      	b.n	800761c <_svfiprintf_r+0xd4>
 80076ce:	2300      	movs	r3, #0
 80076d0:	3401      	adds	r4, #1
 80076d2:	9305      	str	r3, [sp, #20]
 80076d4:	4619      	mov	r1, r3
 80076d6:	f04f 0c0a 	mov.w	ip, #10
 80076da:	4620      	mov	r0, r4
 80076dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076e0:	3a30      	subs	r2, #48	; 0x30
 80076e2:	2a09      	cmp	r2, #9
 80076e4:	d903      	bls.n	80076ee <_svfiprintf_r+0x1a6>
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d0c6      	beq.n	8007678 <_svfiprintf_r+0x130>
 80076ea:	9105      	str	r1, [sp, #20]
 80076ec:	e7c4      	b.n	8007678 <_svfiprintf_r+0x130>
 80076ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80076f2:	4604      	mov	r4, r0
 80076f4:	2301      	movs	r3, #1
 80076f6:	e7f0      	b.n	80076da <_svfiprintf_r+0x192>
 80076f8:	ab03      	add	r3, sp, #12
 80076fa:	9300      	str	r3, [sp, #0]
 80076fc:	462a      	mov	r2, r5
 80076fe:	4b0f      	ldr	r3, [pc, #60]	; (800773c <_svfiprintf_r+0x1f4>)
 8007700:	a904      	add	r1, sp, #16
 8007702:	4638      	mov	r0, r7
 8007704:	f7fd fe76 	bl	80053f4 <_printf_float>
 8007708:	1c42      	adds	r2, r0, #1
 800770a:	4606      	mov	r6, r0
 800770c:	d1d6      	bne.n	80076bc <_svfiprintf_r+0x174>
 800770e:	89ab      	ldrh	r3, [r5, #12]
 8007710:	065b      	lsls	r3, r3, #25
 8007712:	f53f af2d 	bmi.w	8007570 <_svfiprintf_r+0x28>
 8007716:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007718:	b01d      	add	sp, #116	; 0x74
 800771a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800771e:	ab03      	add	r3, sp, #12
 8007720:	9300      	str	r3, [sp, #0]
 8007722:	462a      	mov	r2, r5
 8007724:	4b05      	ldr	r3, [pc, #20]	; (800773c <_svfiprintf_r+0x1f4>)
 8007726:	a904      	add	r1, sp, #16
 8007728:	4638      	mov	r0, r7
 800772a:	f7fe f907 	bl	800593c <_printf_i>
 800772e:	e7eb      	b.n	8007708 <_svfiprintf_r+0x1c0>
 8007730:	0800826c 	.word	0x0800826c
 8007734:	08008276 	.word	0x08008276
 8007738:	080053f5 	.word	0x080053f5
 800773c:	08007495 	.word	0x08007495
 8007740:	08008272 	.word	0x08008272

08007744 <__sflush_r>:
 8007744:	898a      	ldrh	r2, [r1, #12]
 8007746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800774a:	4605      	mov	r5, r0
 800774c:	0710      	lsls	r0, r2, #28
 800774e:	460c      	mov	r4, r1
 8007750:	d458      	bmi.n	8007804 <__sflush_r+0xc0>
 8007752:	684b      	ldr	r3, [r1, #4]
 8007754:	2b00      	cmp	r3, #0
 8007756:	dc05      	bgt.n	8007764 <__sflush_r+0x20>
 8007758:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800775a:	2b00      	cmp	r3, #0
 800775c:	dc02      	bgt.n	8007764 <__sflush_r+0x20>
 800775e:	2000      	movs	r0, #0
 8007760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007764:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007766:	2e00      	cmp	r6, #0
 8007768:	d0f9      	beq.n	800775e <__sflush_r+0x1a>
 800776a:	2300      	movs	r3, #0
 800776c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007770:	682f      	ldr	r7, [r5, #0]
 8007772:	6a21      	ldr	r1, [r4, #32]
 8007774:	602b      	str	r3, [r5, #0]
 8007776:	d032      	beq.n	80077de <__sflush_r+0x9a>
 8007778:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800777a:	89a3      	ldrh	r3, [r4, #12]
 800777c:	075a      	lsls	r2, r3, #29
 800777e:	d505      	bpl.n	800778c <__sflush_r+0x48>
 8007780:	6863      	ldr	r3, [r4, #4]
 8007782:	1ac0      	subs	r0, r0, r3
 8007784:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007786:	b10b      	cbz	r3, 800778c <__sflush_r+0x48>
 8007788:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800778a:	1ac0      	subs	r0, r0, r3
 800778c:	2300      	movs	r3, #0
 800778e:	4602      	mov	r2, r0
 8007790:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007792:	6a21      	ldr	r1, [r4, #32]
 8007794:	4628      	mov	r0, r5
 8007796:	47b0      	blx	r6
 8007798:	1c43      	adds	r3, r0, #1
 800779a:	89a3      	ldrh	r3, [r4, #12]
 800779c:	d106      	bne.n	80077ac <__sflush_r+0x68>
 800779e:	6829      	ldr	r1, [r5, #0]
 80077a0:	291d      	cmp	r1, #29
 80077a2:	d82b      	bhi.n	80077fc <__sflush_r+0xb8>
 80077a4:	4a29      	ldr	r2, [pc, #164]	; (800784c <__sflush_r+0x108>)
 80077a6:	410a      	asrs	r2, r1
 80077a8:	07d6      	lsls	r6, r2, #31
 80077aa:	d427      	bmi.n	80077fc <__sflush_r+0xb8>
 80077ac:	2200      	movs	r2, #0
 80077ae:	6062      	str	r2, [r4, #4]
 80077b0:	04d9      	lsls	r1, r3, #19
 80077b2:	6922      	ldr	r2, [r4, #16]
 80077b4:	6022      	str	r2, [r4, #0]
 80077b6:	d504      	bpl.n	80077c2 <__sflush_r+0x7e>
 80077b8:	1c42      	adds	r2, r0, #1
 80077ba:	d101      	bne.n	80077c0 <__sflush_r+0x7c>
 80077bc:	682b      	ldr	r3, [r5, #0]
 80077be:	b903      	cbnz	r3, 80077c2 <__sflush_r+0x7e>
 80077c0:	6560      	str	r0, [r4, #84]	; 0x54
 80077c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077c4:	602f      	str	r7, [r5, #0]
 80077c6:	2900      	cmp	r1, #0
 80077c8:	d0c9      	beq.n	800775e <__sflush_r+0x1a>
 80077ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077ce:	4299      	cmp	r1, r3
 80077d0:	d002      	beq.n	80077d8 <__sflush_r+0x94>
 80077d2:	4628      	mov	r0, r5
 80077d4:	f7ff f9e2 	bl	8006b9c <_free_r>
 80077d8:	2000      	movs	r0, #0
 80077da:	6360      	str	r0, [r4, #52]	; 0x34
 80077dc:	e7c0      	b.n	8007760 <__sflush_r+0x1c>
 80077de:	2301      	movs	r3, #1
 80077e0:	4628      	mov	r0, r5
 80077e2:	47b0      	blx	r6
 80077e4:	1c41      	adds	r1, r0, #1
 80077e6:	d1c8      	bne.n	800777a <__sflush_r+0x36>
 80077e8:	682b      	ldr	r3, [r5, #0]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d0c5      	beq.n	800777a <__sflush_r+0x36>
 80077ee:	2b1d      	cmp	r3, #29
 80077f0:	d001      	beq.n	80077f6 <__sflush_r+0xb2>
 80077f2:	2b16      	cmp	r3, #22
 80077f4:	d101      	bne.n	80077fa <__sflush_r+0xb6>
 80077f6:	602f      	str	r7, [r5, #0]
 80077f8:	e7b1      	b.n	800775e <__sflush_r+0x1a>
 80077fa:	89a3      	ldrh	r3, [r4, #12]
 80077fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007800:	81a3      	strh	r3, [r4, #12]
 8007802:	e7ad      	b.n	8007760 <__sflush_r+0x1c>
 8007804:	690f      	ldr	r7, [r1, #16]
 8007806:	2f00      	cmp	r7, #0
 8007808:	d0a9      	beq.n	800775e <__sflush_r+0x1a>
 800780a:	0793      	lsls	r3, r2, #30
 800780c:	680e      	ldr	r6, [r1, #0]
 800780e:	bf08      	it	eq
 8007810:	694b      	ldreq	r3, [r1, #20]
 8007812:	600f      	str	r7, [r1, #0]
 8007814:	bf18      	it	ne
 8007816:	2300      	movne	r3, #0
 8007818:	eba6 0807 	sub.w	r8, r6, r7
 800781c:	608b      	str	r3, [r1, #8]
 800781e:	f1b8 0f00 	cmp.w	r8, #0
 8007822:	dd9c      	ble.n	800775e <__sflush_r+0x1a>
 8007824:	6a21      	ldr	r1, [r4, #32]
 8007826:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007828:	4643      	mov	r3, r8
 800782a:	463a      	mov	r2, r7
 800782c:	4628      	mov	r0, r5
 800782e:	47b0      	blx	r6
 8007830:	2800      	cmp	r0, #0
 8007832:	dc06      	bgt.n	8007842 <__sflush_r+0xfe>
 8007834:	89a3      	ldrh	r3, [r4, #12]
 8007836:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800783a:	81a3      	strh	r3, [r4, #12]
 800783c:	f04f 30ff 	mov.w	r0, #4294967295
 8007840:	e78e      	b.n	8007760 <__sflush_r+0x1c>
 8007842:	4407      	add	r7, r0
 8007844:	eba8 0800 	sub.w	r8, r8, r0
 8007848:	e7e9      	b.n	800781e <__sflush_r+0xda>
 800784a:	bf00      	nop
 800784c:	dfbffffe 	.word	0xdfbffffe

08007850 <_fflush_r>:
 8007850:	b538      	push	{r3, r4, r5, lr}
 8007852:	690b      	ldr	r3, [r1, #16]
 8007854:	4605      	mov	r5, r0
 8007856:	460c      	mov	r4, r1
 8007858:	b913      	cbnz	r3, 8007860 <_fflush_r+0x10>
 800785a:	2500      	movs	r5, #0
 800785c:	4628      	mov	r0, r5
 800785e:	bd38      	pop	{r3, r4, r5, pc}
 8007860:	b118      	cbz	r0, 800786a <_fflush_r+0x1a>
 8007862:	6a03      	ldr	r3, [r0, #32]
 8007864:	b90b      	cbnz	r3, 800786a <_fflush_r+0x1a>
 8007866:	f7fe fa05 	bl	8005c74 <__sinit>
 800786a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d0f3      	beq.n	800785a <_fflush_r+0xa>
 8007872:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007874:	07d0      	lsls	r0, r2, #31
 8007876:	d404      	bmi.n	8007882 <_fflush_r+0x32>
 8007878:	0599      	lsls	r1, r3, #22
 800787a:	d402      	bmi.n	8007882 <_fflush_r+0x32>
 800787c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800787e:	f7fe fb0f 	bl	8005ea0 <__retarget_lock_acquire_recursive>
 8007882:	4628      	mov	r0, r5
 8007884:	4621      	mov	r1, r4
 8007886:	f7ff ff5d 	bl	8007744 <__sflush_r>
 800788a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800788c:	07da      	lsls	r2, r3, #31
 800788e:	4605      	mov	r5, r0
 8007890:	d4e4      	bmi.n	800785c <_fflush_r+0xc>
 8007892:	89a3      	ldrh	r3, [r4, #12]
 8007894:	059b      	lsls	r3, r3, #22
 8007896:	d4e1      	bmi.n	800785c <_fflush_r+0xc>
 8007898:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800789a:	f7fe fb02 	bl	8005ea2 <__retarget_lock_release_recursive>
 800789e:	e7dd      	b.n	800785c <_fflush_r+0xc>

080078a0 <memmove>:
 80078a0:	4288      	cmp	r0, r1
 80078a2:	b510      	push	{r4, lr}
 80078a4:	eb01 0402 	add.w	r4, r1, r2
 80078a8:	d902      	bls.n	80078b0 <memmove+0x10>
 80078aa:	4284      	cmp	r4, r0
 80078ac:	4623      	mov	r3, r4
 80078ae:	d807      	bhi.n	80078c0 <memmove+0x20>
 80078b0:	1e43      	subs	r3, r0, #1
 80078b2:	42a1      	cmp	r1, r4
 80078b4:	d008      	beq.n	80078c8 <memmove+0x28>
 80078b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80078ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80078be:	e7f8      	b.n	80078b2 <memmove+0x12>
 80078c0:	4402      	add	r2, r0
 80078c2:	4601      	mov	r1, r0
 80078c4:	428a      	cmp	r2, r1
 80078c6:	d100      	bne.n	80078ca <memmove+0x2a>
 80078c8:	bd10      	pop	{r4, pc}
 80078ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80078ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80078d2:	e7f7      	b.n	80078c4 <memmove+0x24>

080078d4 <_sbrk_r>:
 80078d4:	b538      	push	{r3, r4, r5, lr}
 80078d6:	4d06      	ldr	r5, [pc, #24]	; (80078f0 <_sbrk_r+0x1c>)
 80078d8:	2300      	movs	r3, #0
 80078da:	4604      	mov	r4, r0
 80078dc:	4608      	mov	r0, r1
 80078de:	602b      	str	r3, [r5, #0]
 80078e0:	f7fa f964 	bl	8001bac <_sbrk>
 80078e4:	1c43      	adds	r3, r0, #1
 80078e6:	d102      	bne.n	80078ee <_sbrk_r+0x1a>
 80078e8:	682b      	ldr	r3, [r5, #0]
 80078ea:	b103      	cbz	r3, 80078ee <_sbrk_r+0x1a>
 80078ec:	6023      	str	r3, [r4, #0]
 80078ee:	bd38      	pop	{r3, r4, r5, pc}
 80078f0:	20000468 	.word	0x20000468

080078f4 <memcpy>:
 80078f4:	440a      	add	r2, r1
 80078f6:	4291      	cmp	r1, r2
 80078f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80078fc:	d100      	bne.n	8007900 <memcpy+0xc>
 80078fe:	4770      	bx	lr
 8007900:	b510      	push	{r4, lr}
 8007902:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007906:	f803 4f01 	strb.w	r4, [r3, #1]!
 800790a:	4291      	cmp	r1, r2
 800790c:	d1f9      	bne.n	8007902 <memcpy+0xe>
 800790e:	bd10      	pop	{r4, pc}

08007910 <__assert_func>:
 8007910:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007912:	4614      	mov	r4, r2
 8007914:	461a      	mov	r2, r3
 8007916:	4b09      	ldr	r3, [pc, #36]	; (800793c <__assert_func+0x2c>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4605      	mov	r5, r0
 800791c:	68d8      	ldr	r0, [r3, #12]
 800791e:	b14c      	cbz	r4, 8007934 <__assert_func+0x24>
 8007920:	4b07      	ldr	r3, [pc, #28]	; (8007940 <__assert_func+0x30>)
 8007922:	9100      	str	r1, [sp, #0]
 8007924:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007928:	4906      	ldr	r1, [pc, #24]	; (8007944 <__assert_func+0x34>)
 800792a:	462b      	mov	r3, r5
 800792c:	f000 f872 	bl	8007a14 <fiprintf>
 8007930:	f000 f882 	bl	8007a38 <abort>
 8007934:	4b04      	ldr	r3, [pc, #16]	; (8007948 <__assert_func+0x38>)
 8007936:	461c      	mov	r4, r3
 8007938:	e7f3      	b.n	8007922 <__assert_func+0x12>
 800793a:	bf00      	nop
 800793c:	20000064 	.word	0x20000064
 8007940:	08008287 	.word	0x08008287
 8007944:	08008294 	.word	0x08008294
 8007948:	080082c2 	.word	0x080082c2

0800794c <_calloc_r>:
 800794c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800794e:	fba1 2402 	umull	r2, r4, r1, r2
 8007952:	b94c      	cbnz	r4, 8007968 <_calloc_r+0x1c>
 8007954:	4611      	mov	r1, r2
 8007956:	9201      	str	r2, [sp, #4]
 8007958:	f7ff f994 	bl	8006c84 <_malloc_r>
 800795c:	9a01      	ldr	r2, [sp, #4]
 800795e:	4605      	mov	r5, r0
 8007960:	b930      	cbnz	r0, 8007970 <_calloc_r+0x24>
 8007962:	4628      	mov	r0, r5
 8007964:	b003      	add	sp, #12
 8007966:	bd30      	pop	{r4, r5, pc}
 8007968:	220c      	movs	r2, #12
 800796a:	6002      	str	r2, [r0, #0]
 800796c:	2500      	movs	r5, #0
 800796e:	e7f8      	b.n	8007962 <_calloc_r+0x16>
 8007970:	4621      	mov	r1, r4
 8007972:	f7fe fa18 	bl	8005da6 <memset>
 8007976:	e7f4      	b.n	8007962 <_calloc_r+0x16>

08007978 <__ascii_mbtowc>:
 8007978:	b082      	sub	sp, #8
 800797a:	b901      	cbnz	r1, 800797e <__ascii_mbtowc+0x6>
 800797c:	a901      	add	r1, sp, #4
 800797e:	b142      	cbz	r2, 8007992 <__ascii_mbtowc+0x1a>
 8007980:	b14b      	cbz	r3, 8007996 <__ascii_mbtowc+0x1e>
 8007982:	7813      	ldrb	r3, [r2, #0]
 8007984:	600b      	str	r3, [r1, #0]
 8007986:	7812      	ldrb	r2, [r2, #0]
 8007988:	1e10      	subs	r0, r2, #0
 800798a:	bf18      	it	ne
 800798c:	2001      	movne	r0, #1
 800798e:	b002      	add	sp, #8
 8007990:	4770      	bx	lr
 8007992:	4610      	mov	r0, r2
 8007994:	e7fb      	b.n	800798e <__ascii_mbtowc+0x16>
 8007996:	f06f 0001 	mvn.w	r0, #1
 800799a:	e7f8      	b.n	800798e <__ascii_mbtowc+0x16>

0800799c <_realloc_r>:
 800799c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079a0:	4680      	mov	r8, r0
 80079a2:	4614      	mov	r4, r2
 80079a4:	460e      	mov	r6, r1
 80079a6:	b921      	cbnz	r1, 80079b2 <_realloc_r+0x16>
 80079a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079ac:	4611      	mov	r1, r2
 80079ae:	f7ff b969 	b.w	8006c84 <_malloc_r>
 80079b2:	b92a      	cbnz	r2, 80079c0 <_realloc_r+0x24>
 80079b4:	f7ff f8f2 	bl	8006b9c <_free_r>
 80079b8:	4625      	mov	r5, r4
 80079ba:	4628      	mov	r0, r5
 80079bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079c0:	f000 f841 	bl	8007a46 <_malloc_usable_size_r>
 80079c4:	4284      	cmp	r4, r0
 80079c6:	4607      	mov	r7, r0
 80079c8:	d802      	bhi.n	80079d0 <_realloc_r+0x34>
 80079ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80079ce:	d812      	bhi.n	80079f6 <_realloc_r+0x5a>
 80079d0:	4621      	mov	r1, r4
 80079d2:	4640      	mov	r0, r8
 80079d4:	f7ff f956 	bl	8006c84 <_malloc_r>
 80079d8:	4605      	mov	r5, r0
 80079da:	2800      	cmp	r0, #0
 80079dc:	d0ed      	beq.n	80079ba <_realloc_r+0x1e>
 80079de:	42bc      	cmp	r4, r7
 80079e0:	4622      	mov	r2, r4
 80079e2:	4631      	mov	r1, r6
 80079e4:	bf28      	it	cs
 80079e6:	463a      	movcs	r2, r7
 80079e8:	f7ff ff84 	bl	80078f4 <memcpy>
 80079ec:	4631      	mov	r1, r6
 80079ee:	4640      	mov	r0, r8
 80079f0:	f7ff f8d4 	bl	8006b9c <_free_r>
 80079f4:	e7e1      	b.n	80079ba <_realloc_r+0x1e>
 80079f6:	4635      	mov	r5, r6
 80079f8:	e7df      	b.n	80079ba <_realloc_r+0x1e>

080079fa <__ascii_wctomb>:
 80079fa:	b149      	cbz	r1, 8007a10 <__ascii_wctomb+0x16>
 80079fc:	2aff      	cmp	r2, #255	; 0xff
 80079fe:	bf85      	ittet	hi
 8007a00:	238a      	movhi	r3, #138	; 0x8a
 8007a02:	6003      	strhi	r3, [r0, #0]
 8007a04:	700a      	strbls	r2, [r1, #0]
 8007a06:	f04f 30ff 	movhi.w	r0, #4294967295
 8007a0a:	bf98      	it	ls
 8007a0c:	2001      	movls	r0, #1
 8007a0e:	4770      	bx	lr
 8007a10:	4608      	mov	r0, r1
 8007a12:	4770      	bx	lr

08007a14 <fiprintf>:
 8007a14:	b40e      	push	{r1, r2, r3}
 8007a16:	b503      	push	{r0, r1, lr}
 8007a18:	4601      	mov	r1, r0
 8007a1a:	ab03      	add	r3, sp, #12
 8007a1c:	4805      	ldr	r0, [pc, #20]	; (8007a34 <fiprintf+0x20>)
 8007a1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a22:	6800      	ldr	r0, [r0, #0]
 8007a24:	9301      	str	r3, [sp, #4]
 8007a26:	f000 f83f 	bl	8007aa8 <_vfiprintf_r>
 8007a2a:	b002      	add	sp, #8
 8007a2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a30:	b003      	add	sp, #12
 8007a32:	4770      	bx	lr
 8007a34:	20000064 	.word	0x20000064

08007a38 <abort>:
 8007a38:	b508      	push	{r3, lr}
 8007a3a:	2006      	movs	r0, #6
 8007a3c:	f000 fa0c 	bl	8007e58 <raise>
 8007a40:	2001      	movs	r0, #1
 8007a42:	f7fa f83b 	bl	8001abc <_exit>

08007a46 <_malloc_usable_size_r>:
 8007a46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a4a:	1f18      	subs	r0, r3, #4
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	bfbc      	itt	lt
 8007a50:	580b      	ldrlt	r3, [r1, r0]
 8007a52:	18c0      	addlt	r0, r0, r3
 8007a54:	4770      	bx	lr

08007a56 <__sfputc_r>:
 8007a56:	6893      	ldr	r3, [r2, #8]
 8007a58:	3b01      	subs	r3, #1
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	b410      	push	{r4}
 8007a5e:	6093      	str	r3, [r2, #8]
 8007a60:	da08      	bge.n	8007a74 <__sfputc_r+0x1e>
 8007a62:	6994      	ldr	r4, [r2, #24]
 8007a64:	42a3      	cmp	r3, r4
 8007a66:	db01      	blt.n	8007a6c <__sfputc_r+0x16>
 8007a68:	290a      	cmp	r1, #10
 8007a6a:	d103      	bne.n	8007a74 <__sfputc_r+0x1e>
 8007a6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a70:	f000 b934 	b.w	8007cdc <__swbuf_r>
 8007a74:	6813      	ldr	r3, [r2, #0]
 8007a76:	1c58      	adds	r0, r3, #1
 8007a78:	6010      	str	r0, [r2, #0]
 8007a7a:	7019      	strb	r1, [r3, #0]
 8007a7c:	4608      	mov	r0, r1
 8007a7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a82:	4770      	bx	lr

08007a84 <__sfputs_r>:
 8007a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a86:	4606      	mov	r6, r0
 8007a88:	460f      	mov	r7, r1
 8007a8a:	4614      	mov	r4, r2
 8007a8c:	18d5      	adds	r5, r2, r3
 8007a8e:	42ac      	cmp	r4, r5
 8007a90:	d101      	bne.n	8007a96 <__sfputs_r+0x12>
 8007a92:	2000      	movs	r0, #0
 8007a94:	e007      	b.n	8007aa6 <__sfputs_r+0x22>
 8007a96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a9a:	463a      	mov	r2, r7
 8007a9c:	4630      	mov	r0, r6
 8007a9e:	f7ff ffda 	bl	8007a56 <__sfputc_r>
 8007aa2:	1c43      	adds	r3, r0, #1
 8007aa4:	d1f3      	bne.n	8007a8e <__sfputs_r+0xa>
 8007aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007aa8 <_vfiprintf_r>:
 8007aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aac:	460d      	mov	r5, r1
 8007aae:	b09d      	sub	sp, #116	; 0x74
 8007ab0:	4614      	mov	r4, r2
 8007ab2:	4698      	mov	r8, r3
 8007ab4:	4606      	mov	r6, r0
 8007ab6:	b118      	cbz	r0, 8007ac0 <_vfiprintf_r+0x18>
 8007ab8:	6a03      	ldr	r3, [r0, #32]
 8007aba:	b90b      	cbnz	r3, 8007ac0 <_vfiprintf_r+0x18>
 8007abc:	f7fe f8da 	bl	8005c74 <__sinit>
 8007ac0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ac2:	07d9      	lsls	r1, r3, #31
 8007ac4:	d405      	bmi.n	8007ad2 <_vfiprintf_r+0x2a>
 8007ac6:	89ab      	ldrh	r3, [r5, #12]
 8007ac8:	059a      	lsls	r2, r3, #22
 8007aca:	d402      	bmi.n	8007ad2 <_vfiprintf_r+0x2a>
 8007acc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ace:	f7fe f9e7 	bl	8005ea0 <__retarget_lock_acquire_recursive>
 8007ad2:	89ab      	ldrh	r3, [r5, #12]
 8007ad4:	071b      	lsls	r3, r3, #28
 8007ad6:	d501      	bpl.n	8007adc <_vfiprintf_r+0x34>
 8007ad8:	692b      	ldr	r3, [r5, #16]
 8007ada:	b99b      	cbnz	r3, 8007b04 <_vfiprintf_r+0x5c>
 8007adc:	4629      	mov	r1, r5
 8007ade:	4630      	mov	r0, r6
 8007ae0:	f000 f93a 	bl	8007d58 <__swsetup_r>
 8007ae4:	b170      	cbz	r0, 8007b04 <_vfiprintf_r+0x5c>
 8007ae6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ae8:	07dc      	lsls	r4, r3, #31
 8007aea:	d504      	bpl.n	8007af6 <_vfiprintf_r+0x4e>
 8007aec:	f04f 30ff 	mov.w	r0, #4294967295
 8007af0:	b01d      	add	sp, #116	; 0x74
 8007af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007af6:	89ab      	ldrh	r3, [r5, #12]
 8007af8:	0598      	lsls	r0, r3, #22
 8007afa:	d4f7      	bmi.n	8007aec <_vfiprintf_r+0x44>
 8007afc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007afe:	f7fe f9d0 	bl	8005ea2 <__retarget_lock_release_recursive>
 8007b02:	e7f3      	b.n	8007aec <_vfiprintf_r+0x44>
 8007b04:	2300      	movs	r3, #0
 8007b06:	9309      	str	r3, [sp, #36]	; 0x24
 8007b08:	2320      	movs	r3, #32
 8007b0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b12:	2330      	movs	r3, #48	; 0x30
 8007b14:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007cc8 <_vfiprintf_r+0x220>
 8007b18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b1c:	f04f 0901 	mov.w	r9, #1
 8007b20:	4623      	mov	r3, r4
 8007b22:	469a      	mov	sl, r3
 8007b24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b28:	b10a      	cbz	r2, 8007b2e <_vfiprintf_r+0x86>
 8007b2a:	2a25      	cmp	r2, #37	; 0x25
 8007b2c:	d1f9      	bne.n	8007b22 <_vfiprintf_r+0x7a>
 8007b2e:	ebba 0b04 	subs.w	fp, sl, r4
 8007b32:	d00b      	beq.n	8007b4c <_vfiprintf_r+0xa4>
 8007b34:	465b      	mov	r3, fp
 8007b36:	4622      	mov	r2, r4
 8007b38:	4629      	mov	r1, r5
 8007b3a:	4630      	mov	r0, r6
 8007b3c:	f7ff ffa2 	bl	8007a84 <__sfputs_r>
 8007b40:	3001      	adds	r0, #1
 8007b42:	f000 80a9 	beq.w	8007c98 <_vfiprintf_r+0x1f0>
 8007b46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b48:	445a      	add	r2, fp
 8007b4a:	9209      	str	r2, [sp, #36]	; 0x24
 8007b4c:	f89a 3000 	ldrb.w	r3, [sl]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	f000 80a1 	beq.w	8007c98 <_vfiprintf_r+0x1f0>
 8007b56:	2300      	movs	r3, #0
 8007b58:	f04f 32ff 	mov.w	r2, #4294967295
 8007b5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b60:	f10a 0a01 	add.w	sl, sl, #1
 8007b64:	9304      	str	r3, [sp, #16]
 8007b66:	9307      	str	r3, [sp, #28]
 8007b68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b6c:	931a      	str	r3, [sp, #104]	; 0x68
 8007b6e:	4654      	mov	r4, sl
 8007b70:	2205      	movs	r2, #5
 8007b72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b76:	4854      	ldr	r0, [pc, #336]	; (8007cc8 <_vfiprintf_r+0x220>)
 8007b78:	f7f8 fb2a 	bl	80001d0 <memchr>
 8007b7c:	9a04      	ldr	r2, [sp, #16]
 8007b7e:	b9d8      	cbnz	r0, 8007bb8 <_vfiprintf_r+0x110>
 8007b80:	06d1      	lsls	r1, r2, #27
 8007b82:	bf44      	itt	mi
 8007b84:	2320      	movmi	r3, #32
 8007b86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b8a:	0713      	lsls	r3, r2, #28
 8007b8c:	bf44      	itt	mi
 8007b8e:	232b      	movmi	r3, #43	; 0x2b
 8007b90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b94:	f89a 3000 	ldrb.w	r3, [sl]
 8007b98:	2b2a      	cmp	r3, #42	; 0x2a
 8007b9a:	d015      	beq.n	8007bc8 <_vfiprintf_r+0x120>
 8007b9c:	9a07      	ldr	r2, [sp, #28]
 8007b9e:	4654      	mov	r4, sl
 8007ba0:	2000      	movs	r0, #0
 8007ba2:	f04f 0c0a 	mov.w	ip, #10
 8007ba6:	4621      	mov	r1, r4
 8007ba8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bac:	3b30      	subs	r3, #48	; 0x30
 8007bae:	2b09      	cmp	r3, #9
 8007bb0:	d94d      	bls.n	8007c4e <_vfiprintf_r+0x1a6>
 8007bb2:	b1b0      	cbz	r0, 8007be2 <_vfiprintf_r+0x13a>
 8007bb4:	9207      	str	r2, [sp, #28]
 8007bb6:	e014      	b.n	8007be2 <_vfiprintf_r+0x13a>
 8007bb8:	eba0 0308 	sub.w	r3, r0, r8
 8007bbc:	fa09 f303 	lsl.w	r3, r9, r3
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	9304      	str	r3, [sp, #16]
 8007bc4:	46a2      	mov	sl, r4
 8007bc6:	e7d2      	b.n	8007b6e <_vfiprintf_r+0xc6>
 8007bc8:	9b03      	ldr	r3, [sp, #12]
 8007bca:	1d19      	adds	r1, r3, #4
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	9103      	str	r1, [sp, #12]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	bfbb      	ittet	lt
 8007bd4:	425b      	neglt	r3, r3
 8007bd6:	f042 0202 	orrlt.w	r2, r2, #2
 8007bda:	9307      	strge	r3, [sp, #28]
 8007bdc:	9307      	strlt	r3, [sp, #28]
 8007bde:	bfb8      	it	lt
 8007be0:	9204      	strlt	r2, [sp, #16]
 8007be2:	7823      	ldrb	r3, [r4, #0]
 8007be4:	2b2e      	cmp	r3, #46	; 0x2e
 8007be6:	d10c      	bne.n	8007c02 <_vfiprintf_r+0x15a>
 8007be8:	7863      	ldrb	r3, [r4, #1]
 8007bea:	2b2a      	cmp	r3, #42	; 0x2a
 8007bec:	d134      	bne.n	8007c58 <_vfiprintf_r+0x1b0>
 8007bee:	9b03      	ldr	r3, [sp, #12]
 8007bf0:	1d1a      	adds	r2, r3, #4
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	9203      	str	r2, [sp, #12]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	bfb8      	it	lt
 8007bfa:	f04f 33ff 	movlt.w	r3, #4294967295
 8007bfe:	3402      	adds	r4, #2
 8007c00:	9305      	str	r3, [sp, #20]
 8007c02:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007cd8 <_vfiprintf_r+0x230>
 8007c06:	7821      	ldrb	r1, [r4, #0]
 8007c08:	2203      	movs	r2, #3
 8007c0a:	4650      	mov	r0, sl
 8007c0c:	f7f8 fae0 	bl	80001d0 <memchr>
 8007c10:	b138      	cbz	r0, 8007c22 <_vfiprintf_r+0x17a>
 8007c12:	9b04      	ldr	r3, [sp, #16]
 8007c14:	eba0 000a 	sub.w	r0, r0, sl
 8007c18:	2240      	movs	r2, #64	; 0x40
 8007c1a:	4082      	lsls	r2, r0
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	3401      	adds	r4, #1
 8007c20:	9304      	str	r3, [sp, #16]
 8007c22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c26:	4829      	ldr	r0, [pc, #164]	; (8007ccc <_vfiprintf_r+0x224>)
 8007c28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c2c:	2206      	movs	r2, #6
 8007c2e:	f7f8 facf 	bl	80001d0 <memchr>
 8007c32:	2800      	cmp	r0, #0
 8007c34:	d03f      	beq.n	8007cb6 <_vfiprintf_r+0x20e>
 8007c36:	4b26      	ldr	r3, [pc, #152]	; (8007cd0 <_vfiprintf_r+0x228>)
 8007c38:	bb1b      	cbnz	r3, 8007c82 <_vfiprintf_r+0x1da>
 8007c3a:	9b03      	ldr	r3, [sp, #12]
 8007c3c:	3307      	adds	r3, #7
 8007c3e:	f023 0307 	bic.w	r3, r3, #7
 8007c42:	3308      	adds	r3, #8
 8007c44:	9303      	str	r3, [sp, #12]
 8007c46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c48:	443b      	add	r3, r7
 8007c4a:	9309      	str	r3, [sp, #36]	; 0x24
 8007c4c:	e768      	b.n	8007b20 <_vfiprintf_r+0x78>
 8007c4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c52:	460c      	mov	r4, r1
 8007c54:	2001      	movs	r0, #1
 8007c56:	e7a6      	b.n	8007ba6 <_vfiprintf_r+0xfe>
 8007c58:	2300      	movs	r3, #0
 8007c5a:	3401      	adds	r4, #1
 8007c5c:	9305      	str	r3, [sp, #20]
 8007c5e:	4619      	mov	r1, r3
 8007c60:	f04f 0c0a 	mov.w	ip, #10
 8007c64:	4620      	mov	r0, r4
 8007c66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c6a:	3a30      	subs	r2, #48	; 0x30
 8007c6c:	2a09      	cmp	r2, #9
 8007c6e:	d903      	bls.n	8007c78 <_vfiprintf_r+0x1d0>
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d0c6      	beq.n	8007c02 <_vfiprintf_r+0x15a>
 8007c74:	9105      	str	r1, [sp, #20]
 8007c76:	e7c4      	b.n	8007c02 <_vfiprintf_r+0x15a>
 8007c78:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c7c:	4604      	mov	r4, r0
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e7f0      	b.n	8007c64 <_vfiprintf_r+0x1bc>
 8007c82:	ab03      	add	r3, sp, #12
 8007c84:	9300      	str	r3, [sp, #0]
 8007c86:	462a      	mov	r2, r5
 8007c88:	4b12      	ldr	r3, [pc, #72]	; (8007cd4 <_vfiprintf_r+0x22c>)
 8007c8a:	a904      	add	r1, sp, #16
 8007c8c:	4630      	mov	r0, r6
 8007c8e:	f7fd fbb1 	bl	80053f4 <_printf_float>
 8007c92:	4607      	mov	r7, r0
 8007c94:	1c78      	adds	r0, r7, #1
 8007c96:	d1d6      	bne.n	8007c46 <_vfiprintf_r+0x19e>
 8007c98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c9a:	07d9      	lsls	r1, r3, #31
 8007c9c:	d405      	bmi.n	8007caa <_vfiprintf_r+0x202>
 8007c9e:	89ab      	ldrh	r3, [r5, #12]
 8007ca0:	059a      	lsls	r2, r3, #22
 8007ca2:	d402      	bmi.n	8007caa <_vfiprintf_r+0x202>
 8007ca4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ca6:	f7fe f8fc 	bl	8005ea2 <__retarget_lock_release_recursive>
 8007caa:	89ab      	ldrh	r3, [r5, #12]
 8007cac:	065b      	lsls	r3, r3, #25
 8007cae:	f53f af1d 	bmi.w	8007aec <_vfiprintf_r+0x44>
 8007cb2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007cb4:	e71c      	b.n	8007af0 <_vfiprintf_r+0x48>
 8007cb6:	ab03      	add	r3, sp, #12
 8007cb8:	9300      	str	r3, [sp, #0]
 8007cba:	462a      	mov	r2, r5
 8007cbc:	4b05      	ldr	r3, [pc, #20]	; (8007cd4 <_vfiprintf_r+0x22c>)
 8007cbe:	a904      	add	r1, sp, #16
 8007cc0:	4630      	mov	r0, r6
 8007cc2:	f7fd fe3b 	bl	800593c <_printf_i>
 8007cc6:	e7e4      	b.n	8007c92 <_vfiprintf_r+0x1ea>
 8007cc8:	0800826c 	.word	0x0800826c
 8007ccc:	08008276 	.word	0x08008276
 8007cd0:	080053f5 	.word	0x080053f5
 8007cd4:	08007a85 	.word	0x08007a85
 8007cd8:	08008272 	.word	0x08008272

08007cdc <__swbuf_r>:
 8007cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cde:	460e      	mov	r6, r1
 8007ce0:	4614      	mov	r4, r2
 8007ce2:	4605      	mov	r5, r0
 8007ce4:	b118      	cbz	r0, 8007cee <__swbuf_r+0x12>
 8007ce6:	6a03      	ldr	r3, [r0, #32]
 8007ce8:	b90b      	cbnz	r3, 8007cee <__swbuf_r+0x12>
 8007cea:	f7fd ffc3 	bl	8005c74 <__sinit>
 8007cee:	69a3      	ldr	r3, [r4, #24]
 8007cf0:	60a3      	str	r3, [r4, #8]
 8007cf2:	89a3      	ldrh	r3, [r4, #12]
 8007cf4:	071a      	lsls	r2, r3, #28
 8007cf6:	d525      	bpl.n	8007d44 <__swbuf_r+0x68>
 8007cf8:	6923      	ldr	r3, [r4, #16]
 8007cfa:	b31b      	cbz	r3, 8007d44 <__swbuf_r+0x68>
 8007cfc:	6823      	ldr	r3, [r4, #0]
 8007cfe:	6922      	ldr	r2, [r4, #16]
 8007d00:	1a98      	subs	r0, r3, r2
 8007d02:	6963      	ldr	r3, [r4, #20]
 8007d04:	b2f6      	uxtb	r6, r6
 8007d06:	4283      	cmp	r3, r0
 8007d08:	4637      	mov	r7, r6
 8007d0a:	dc04      	bgt.n	8007d16 <__swbuf_r+0x3a>
 8007d0c:	4621      	mov	r1, r4
 8007d0e:	4628      	mov	r0, r5
 8007d10:	f7ff fd9e 	bl	8007850 <_fflush_r>
 8007d14:	b9e0      	cbnz	r0, 8007d50 <__swbuf_r+0x74>
 8007d16:	68a3      	ldr	r3, [r4, #8]
 8007d18:	3b01      	subs	r3, #1
 8007d1a:	60a3      	str	r3, [r4, #8]
 8007d1c:	6823      	ldr	r3, [r4, #0]
 8007d1e:	1c5a      	adds	r2, r3, #1
 8007d20:	6022      	str	r2, [r4, #0]
 8007d22:	701e      	strb	r6, [r3, #0]
 8007d24:	6962      	ldr	r2, [r4, #20]
 8007d26:	1c43      	adds	r3, r0, #1
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d004      	beq.n	8007d36 <__swbuf_r+0x5a>
 8007d2c:	89a3      	ldrh	r3, [r4, #12]
 8007d2e:	07db      	lsls	r3, r3, #31
 8007d30:	d506      	bpl.n	8007d40 <__swbuf_r+0x64>
 8007d32:	2e0a      	cmp	r6, #10
 8007d34:	d104      	bne.n	8007d40 <__swbuf_r+0x64>
 8007d36:	4621      	mov	r1, r4
 8007d38:	4628      	mov	r0, r5
 8007d3a:	f7ff fd89 	bl	8007850 <_fflush_r>
 8007d3e:	b938      	cbnz	r0, 8007d50 <__swbuf_r+0x74>
 8007d40:	4638      	mov	r0, r7
 8007d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d44:	4621      	mov	r1, r4
 8007d46:	4628      	mov	r0, r5
 8007d48:	f000 f806 	bl	8007d58 <__swsetup_r>
 8007d4c:	2800      	cmp	r0, #0
 8007d4e:	d0d5      	beq.n	8007cfc <__swbuf_r+0x20>
 8007d50:	f04f 37ff 	mov.w	r7, #4294967295
 8007d54:	e7f4      	b.n	8007d40 <__swbuf_r+0x64>
	...

08007d58 <__swsetup_r>:
 8007d58:	b538      	push	{r3, r4, r5, lr}
 8007d5a:	4b2a      	ldr	r3, [pc, #168]	; (8007e04 <__swsetup_r+0xac>)
 8007d5c:	4605      	mov	r5, r0
 8007d5e:	6818      	ldr	r0, [r3, #0]
 8007d60:	460c      	mov	r4, r1
 8007d62:	b118      	cbz	r0, 8007d6c <__swsetup_r+0x14>
 8007d64:	6a03      	ldr	r3, [r0, #32]
 8007d66:	b90b      	cbnz	r3, 8007d6c <__swsetup_r+0x14>
 8007d68:	f7fd ff84 	bl	8005c74 <__sinit>
 8007d6c:	89a3      	ldrh	r3, [r4, #12]
 8007d6e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d72:	0718      	lsls	r0, r3, #28
 8007d74:	d422      	bmi.n	8007dbc <__swsetup_r+0x64>
 8007d76:	06d9      	lsls	r1, r3, #27
 8007d78:	d407      	bmi.n	8007d8a <__swsetup_r+0x32>
 8007d7a:	2309      	movs	r3, #9
 8007d7c:	602b      	str	r3, [r5, #0]
 8007d7e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007d82:	81a3      	strh	r3, [r4, #12]
 8007d84:	f04f 30ff 	mov.w	r0, #4294967295
 8007d88:	e034      	b.n	8007df4 <__swsetup_r+0x9c>
 8007d8a:	0758      	lsls	r0, r3, #29
 8007d8c:	d512      	bpl.n	8007db4 <__swsetup_r+0x5c>
 8007d8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d90:	b141      	cbz	r1, 8007da4 <__swsetup_r+0x4c>
 8007d92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d96:	4299      	cmp	r1, r3
 8007d98:	d002      	beq.n	8007da0 <__swsetup_r+0x48>
 8007d9a:	4628      	mov	r0, r5
 8007d9c:	f7fe fefe 	bl	8006b9c <_free_r>
 8007da0:	2300      	movs	r3, #0
 8007da2:	6363      	str	r3, [r4, #52]	; 0x34
 8007da4:	89a3      	ldrh	r3, [r4, #12]
 8007da6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007daa:	81a3      	strh	r3, [r4, #12]
 8007dac:	2300      	movs	r3, #0
 8007dae:	6063      	str	r3, [r4, #4]
 8007db0:	6923      	ldr	r3, [r4, #16]
 8007db2:	6023      	str	r3, [r4, #0]
 8007db4:	89a3      	ldrh	r3, [r4, #12]
 8007db6:	f043 0308 	orr.w	r3, r3, #8
 8007dba:	81a3      	strh	r3, [r4, #12]
 8007dbc:	6923      	ldr	r3, [r4, #16]
 8007dbe:	b94b      	cbnz	r3, 8007dd4 <__swsetup_r+0x7c>
 8007dc0:	89a3      	ldrh	r3, [r4, #12]
 8007dc2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007dc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dca:	d003      	beq.n	8007dd4 <__swsetup_r+0x7c>
 8007dcc:	4621      	mov	r1, r4
 8007dce:	4628      	mov	r0, r5
 8007dd0:	f000 f884 	bl	8007edc <__smakebuf_r>
 8007dd4:	89a0      	ldrh	r0, [r4, #12]
 8007dd6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007dda:	f010 0301 	ands.w	r3, r0, #1
 8007dde:	d00a      	beq.n	8007df6 <__swsetup_r+0x9e>
 8007de0:	2300      	movs	r3, #0
 8007de2:	60a3      	str	r3, [r4, #8]
 8007de4:	6963      	ldr	r3, [r4, #20]
 8007de6:	425b      	negs	r3, r3
 8007de8:	61a3      	str	r3, [r4, #24]
 8007dea:	6923      	ldr	r3, [r4, #16]
 8007dec:	b943      	cbnz	r3, 8007e00 <__swsetup_r+0xa8>
 8007dee:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007df2:	d1c4      	bne.n	8007d7e <__swsetup_r+0x26>
 8007df4:	bd38      	pop	{r3, r4, r5, pc}
 8007df6:	0781      	lsls	r1, r0, #30
 8007df8:	bf58      	it	pl
 8007dfa:	6963      	ldrpl	r3, [r4, #20]
 8007dfc:	60a3      	str	r3, [r4, #8]
 8007dfe:	e7f4      	b.n	8007dea <__swsetup_r+0x92>
 8007e00:	2000      	movs	r0, #0
 8007e02:	e7f7      	b.n	8007df4 <__swsetup_r+0x9c>
 8007e04:	20000064 	.word	0x20000064

08007e08 <_raise_r>:
 8007e08:	291f      	cmp	r1, #31
 8007e0a:	b538      	push	{r3, r4, r5, lr}
 8007e0c:	4604      	mov	r4, r0
 8007e0e:	460d      	mov	r5, r1
 8007e10:	d904      	bls.n	8007e1c <_raise_r+0x14>
 8007e12:	2316      	movs	r3, #22
 8007e14:	6003      	str	r3, [r0, #0]
 8007e16:	f04f 30ff 	mov.w	r0, #4294967295
 8007e1a:	bd38      	pop	{r3, r4, r5, pc}
 8007e1c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007e1e:	b112      	cbz	r2, 8007e26 <_raise_r+0x1e>
 8007e20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007e24:	b94b      	cbnz	r3, 8007e3a <_raise_r+0x32>
 8007e26:	4620      	mov	r0, r4
 8007e28:	f000 f830 	bl	8007e8c <_getpid_r>
 8007e2c:	462a      	mov	r2, r5
 8007e2e:	4601      	mov	r1, r0
 8007e30:	4620      	mov	r0, r4
 8007e32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e36:	f000 b817 	b.w	8007e68 <_kill_r>
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d00a      	beq.n	8007e54 <_raise_r+0x4c>
 8007e3e:	1c59      	adds	r1, r3, #1
 8007e40:	d103      	bne.n	8007e4a <_raise_r+0x42>
 8007e42:	2316      	movs	r3, #22
 8007e44:	6003      	str	r3, [r0, #0]
 8007e46:	2001      	movs	r0, #1
 8007e48:	e7e7      	b.n	8007e1a <_raise_r+0x12>
 8007e4a:	2400      	movs	r4, #0
 8007e4c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007e50:	4628      	mov	r0, r5
 8007e52:	4798      	blx	r3
 8007e54:	2000      	movs	r0, #0
 8007e56:	e7e0      	b.n	8007e1a <_raise_r+0x12>

08007e58 <raise>:
 8007e58:	4b02      	ldr	r3, [pc, #8]	; (8007e64 <raise+0xc>)
 8007e5a:	4601      	mov	r1, r0
 8007e5c:	6818      	ldr	r0, [r3, #0]
 8007e5e:	f7ff bfd3 	b.w	8007e08 <_raise_r>
 8007e62:	bf00      	nop
 8007e64:	20000064 	.word	0x20000064

08007e68 <_kill_r>:
 8007e68:	b538      	push	{r3, r4, r5, lr}
 8007e6a:	4d07      	ldr	r5, [pc, #28]	; (8007e88 <_kill_r+0x20>)
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	4604      	mov	r4, r0
 8007e70:	4608      	mov	r0, r1
 8007e72:	4611      	mov	r1, r2
 8007e74:	602b      	str	r3, [r5, #0]
 8007e76:	f7f9 fe11 	bl	8001a9c <_kill>
 8007e7a:	1c43      	adds	r3, r0, #1
 8007e7c:	d102      	bne.n	8007e84 <_kill_r+0x1c>
 8007e7e:	682b      	ldr	r3, [r5, #0]
 8007e80:	b103      	cbz	r3, 8007e84 <_kill_r+0x1c>
 8007e82:	6023      	str	r3, [r4, #0]
 8007e84:	bd38      	pop	{r3, r4, r5, pc}
 8007e86:	bf00      	nop
 8007e88:	20000468 	.word	0x20000468

08007e8c <_getpid_r>:
 8007e8c:	f7f9 bdfe 	b.w	8001a8c <_getpid>

08007e90 <__swhatbuf_r>:
 8007e90:	b570      	push	{r4, r5, r6, lr}
 8007e92:	460c      	mov	r4, r1
 8007e94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e98:	2900      	cmp	r1, #0
 8007e9a:	b096      	sub	sp, #88	; 0x58
 8007e9c:	4615      	mov	r5, r2
 8007e9e:	461e      	mov	r6, r3
 8007ea0:	da0d      	bge.n	8007ebe <__swhatbuf_r+0x2e>
 8007ea2:	89a3      	ldrh	r3, [r4, #12]
 8007ea4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007ea8:	f04f 0100 	mov.w	r1, #0
 8007eac:	bf0c      	ite	eq
 8007eae:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007eb2:	2340      	movne	r3, #64	; 0x40
 8007eb4:	2000      	movs	r0, #0
 8007eb6:	6031      	str	r1, [r6, #0]
 8007eb8:	602b      	str	r3, [r5, #0]
 8007eba:	b016      	add	sp, #88	; 0x58
 8007ebc:	bd70      	pop	{r4, r5, r6, pc}
 8007ebe:	466a      	mov	r2, sp
 8007ec0:	f000 f848 	bl	8007f54 <_fstat_r>
 8007ec4:	2800      	cmp	r0, #0
 8007ec6:	dbec      	blt.n	8007ea2 <__swhatbuf_r+0x12>
 8007ec8:	9901      	ldr	r1, [sp, #4]
 8007eca:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007ece:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007ed2:	4259      	negs	r1, r3
 8007ed4:	4159      	adcs	r1, r3
 8007ed6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007eda:	e7eb      	b.n	8007eb4 <__swhatbuf_r+0x24>

08007edc <__smakebuf_r>:
 8007edc:	898b      	ldrh	r3, [r1, #12]
 8007ede:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ee0:	079d      	lsls	r5, r3, #30
 8007ee2:	4606      	mov	r6, r0
 8007ee4:	460c      	mov	r4, r1
 8007ee6:	d507      	bpl.n	8007ef8 <__smakebuf_r+0x1c>
 8007ee8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007eec:	6023      	str	r3, [r4, #0]
 8007eee:	6123      	str	r3, [r4, #16]
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	6163      	str	r3, [r4, #20]
 8007ef4:	b002      	add	sp, #8
 8007ef6:	bd70      	pop	{r4, r5, r6, pc}
 8007ef8:	ab01      	add	r3, sp, #4
 8007efa:	466a      	mov	r2, sp
 8007efc:	f7ff ffc8 	bl	8007e90 <__swhatbuf_r>
 8007f00:	9900      	ldr	r1, [sp, #0]
 8007f02:	4605      	mov	r5, r0
 8007f04:	4630      	mov	r0, r6
 8007f06:	f7fe febd 	bl	8006c84 <_malloc_r>
 8007f0a:	b948      	cbnz	r0, 8007f20 <__smakebuf_r+0x44>
 8007f0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f10:	059a      	lsls	r2, r3, #22
 8007f12:	d4ef      	bmi.n	8007ef4 <__smakebuf_r+0x18>
 8007f14:	f023 0303 	bic.w	r3, r3, #3
 8007f18:	f043 0302 	orr.w	r3, r3, #2
 8007f1c:	81a3      	strh	r3, [r4, #12]
 8007f1e:	e7e3      	b.n	8007ee8 <__smakebuf_r+0xc>
 8007f20:	89a3      	ldrh	r3, [r4, #12]
 8007f22:	6020      	str	r0, [r4, #0]
 8007f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f28:	81a3      	strh	r3, [r4, #12]
 8007f2a:	9b00      	ldr	r3, [sp, #0]
 8007f2c:	6163      	str	r3, [r4, #20]
 8007f2e:	9b01      	ldr	r3, [sp, #4]
 8007f30:	6120      	str	r0, [r4, #16]
 8007f32:	b15b      	cbz	r3, 8007f4c <__smakebuf_r+0x70>
 8007f34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f38:	4630      	mov	r0, r6
 8007f3a:	f000 f81d 	bl	8007f78 <_isatty_r>
 8007f3e:	b128      	cbz	r0, 8007f4c <__smakebuf_r+0x70>
 8007f40:	89a3      	ldrh	r3, [r4, #12]
 8007f42:	f023 0303 	bic.w	r3, r3, #3
 8007f46:	f043 0301 	orr.w	r3, r3, #1
 8007f4a:	81a3      	strh	r3, [r4, #12]
 8007f4c:	89a3      	ldrh	r3, [r4, #12]
 8007f4e:	431d      	orrs	r5, r3
 8007f50:	81a5      	strh	r5, [r4, #12]
 8007f52:	e7cf      	b.n	8007ef4 <__smakebuf_r+0x18>

08007f54 <_fstat_r>:
 8007f54:	b538      	push	{r3, r4, r5, lr}
 8007f56:	4d07      	ldr	r5, [pc, #28]	; (8007f74 <_fstat_r+0x20>)
 8007f58:	2300      	movs	r3, #0
 8007f5a:	4604      	mov	r4, r0
 8007f5c:	4608      	mov	r0, r1
 8007f5e:	4611      	mov	r1, r2
 8007f60:	602b      	str	r3, [r5, #0]
 8007f62:	f7f9 fdfa 	bl	8001b5a <_fstat>
 8007f66:	1c43      	adds	r3, r0, #1
 8007f68:	d102      	bne.n	8007f70 <_fstat_r+0x1c>
 8007f6a:	682b      	ldr	r3, [r5, #0]
 8007f6c:	b103      	cbz	r3, 8007f70 <_fstat_r+0x1c>
 8007f6e:	6023      	str	r3, [r4, #0]
 8007f70:	bd38      	pop	{r3, r4, r5, pc}
 8007f72:	bf00      	nop
 8007f74:	20000468 	.word	0x20000468

08007f78 <_isatty_r>:
 8007f78:	b538      	push	{r3, r4, r5, lr}
 8007f7a:	4d06      	ldr	r5, [pc, #24]	; (8007f94 <_isatty_r+0x1c>)
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	4604      	mov	r4, r0
 8007f80:	4608      	mov	r0, r1
 8007f82:	602b      	str	r3, [r5, #0]
 8007f84:	f7f9 fdf9 	bl	8001b7a <_isatty>
 8007f88:	1c43      	adds	r3, r0, #1
 8007f8a:	d102      	bne.n	8007f92 <_isatty_r+0x1a>
 8007f8c:	682b      	ldr	r3, [r5, #0]
 8007f8e:	b103      	cbz	r3, 8007f92 <_isatty_r+0x1a>
 8007f90:	6023      	str	r3, [r4, #0]
 8007f92:	bd38      	pop	{r3, r4, r5, pc}
 8007f94:	20000468 	.word	0x20000468

08007f98 <_init>:
 8007f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f9a:	bf00      	nop
 8007f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f9e:	bc08      	pop	{r3}
 8007fa0:	469e      	mov	lr, r3
 8007fa2:	4770      	bx	lr

08007fa4 <_fini>:
 8007fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fa6:	bf00      	nop
 8007fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007faa:	bc08      	pop	{r3}
 8007fac:	469e      	mov	lr, r3
 8007fae:	4770      	bx	lr
