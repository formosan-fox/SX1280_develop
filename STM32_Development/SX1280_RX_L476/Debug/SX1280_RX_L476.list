
SX1280_RX_L476.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004698  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08004828  08004828  00014828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048d4  080048d4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080048d4  080048d4  000148d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048dc  080048dc  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048dc  080048dc  000148dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048e0  080048e0  000148e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080048e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  2000005c  08004940  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  08004940  000202b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bfa2  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001acc  00000000  00000000  0002c071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ab0  00000000  00000000  0002db40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000083a  00000000  00000000  0002e5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025f39  00000000  00000000  0002ee2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d086  00000000  00000000  00054d63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e9a04  00000000  00000000  00061de9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003090  00000000  00000000  0014b7f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0014e880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004810 	.word	0x08004810

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08004810 	.word	0x08004810

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <SPI1_TRANSCEIVER>:
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */
static void SPI1_TRANSCEIVER(uint8_t* tx, uint8_t* rx, uint8_t lengh)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af02      	add	r7, sp, #8
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	4613      	mov	r3, r2
 8000578:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 800057a:	2200      	movs	r2, #0
 800057c:	2140      	movs	r1, #64	; 0x40
 800057e:	480c      	ldr	r0, [pc, #48]	; (80005b0 <SPI1_TRANSCEIVER+0x44>)
 8000580:	f000 ff9a 	bl	80014b8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000584:	2001      	movs	r0, #1
 8000586:	f000 fce3 	bl	8000f50 <HAL_Delay>
	HAL_SPI_TransmitReceive(&hspi1, tx, rx, lengh, 10);
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	b29b      	uxth	r3, r3
 800058e:	220a      	movs	r2, #10
 8000590:	9200      	str	r2, [sp, #0]
 8000592:	68ba      	ldr	r2, [r7, #8]
 8000594:	68f9      	ldr	r1, [r7, #12]
 8000596:	4807      	ldr	r0, [pc, #28]	; (80005b4 <SPI1_TRANSCEIVER+0x48>)
 8000598:	f002 fb69 	bl	8002c6e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 800059c:	2201      	movs	r2, #1
 800059e:	2140      	movs	r1, #64	; 0x40
 80005a0:	4803      	ldr	r0, [pc, #12]	; (80005b0 <SPI1_TRANSCEIVER+0x44>)
 80005a2:	f000 ff89 	bl	80014b8 <HAL_GPIO_WritePin>
}
 80005a6:	bf00      	nop
 80005a8:	3710      	adds	r7, #16
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	48000400 	.word	0x48000400
 80005b4:	20000078 	.word	0x20000078

080005b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b0a4      	sub	sp, #144	; 0x90
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005be:	f000 fc4b 	bl	8000e58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c2:	f000 f9ab 	bl	800091c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c6:	f000 fa69 	bl	8000a9c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ca:	f000 fa37 	bl	8000a3c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80005ce:	f000 f9f7 	bl	80009c0 <MX_SPI1_Init>

  char uart_buf[100];
  int uart_buf_len;
  int received;

  uart_buf_len = sprintf(uart_buf, "SX1280 RX bit rate test\r\n");
 80005d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005d6:	49c7      	ldr	r1, [pc, #796]	; (80008f4 <main+0x33c>)
 80005d8:	4618      	mov	r0, r3
 80005da:	f003 fc75 	bl	8003ec8 <siprintf>
 80005de:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 80005e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80005e6:	b29a      	uxth	r2, r3
 80005e8:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80005ec:	2364      	movs	r3, #100	; 0x64
 80005ee:	48c2      	ldr	r0, [pc, #776]	; (80008f8 <main+0x340>)
 80005f0:	f002 ff12 	bl	8003418 <HAL_UART_Transmit>
  //===========================================
  //===========================================
  //===========================================

  uint8_t tx[16] = {};
 80005f4:	2300      	movs	r3, #0
 80005f6:	617b      	str	r3, [r7, #20]
 80005f8:	f107 0318 	add.w	r3, r7, #24
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
  uint8_t rx[16] = {};
 8000604:	2300      	movs	r3, #0
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	f107 0308 	add.w	r3, r7, #8
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]

  // reset
  HAL_GPIO_WritePin(SX1280_RST_GPIO_Port, SX1280_RST_Pin, GPIO_PIN_SET);
 8000614:	2201      	movs	r2, #1
 8000616:	2180      	movs	r1, #128	; 0x80
 8000618:	48b8      	ldr	r0, [pc, #736]	; (80008fc <main+0x344>)
 800061a:	f000 ff4d 	bl	80014b8 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800061e:	200a      	movs	r0, #10
 8000620:	f000 fc96 	bl	8000f50 <HAL_Delay>
  HAL_GPIO_WritePin(SX1280_RST_GPIO_Port, SX1280_RST_Pin, GPIO_PIN_RESET);
 8000624:	2200      	movs	r2, #0
 8000626:	2180      	movs	r1, #128	; 0x80
 8000628:	48b4      	ldr	r0, [pc, #720]	; (80008fc <main+0x344>)
 800062a:	f000 ff45 	bl	80014b8 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800062e:	200a      	movs	r0, #10
 8000630:	f000 fc8e 	bl	8000f50 <HAL_Delay>
  HAL_GPIO_WritePin(SX1280_RST_GPIO_Port, SX1280_RST_Pin, GPIO_PIN_SET);
 8000634:	2201      	movs	r2, #1
 8000636:	2180      	movs	r1, #128	; 0x80
 8000638:	48b0      	ldr	r0, [pc, #704]	; (80008fc <main+0x344>)
 800063a:	f000 ff3d 	bl	80014b8 <HAL_GPIO_WritePin>
  //===========================================
  // common transceiver setting for LoRa
  //===========================================

  // setstandby(stdby_xosc)
  *(uint32_t*)tx = 0x80 | 0x01 << 8;
 800063e:	f107 0314 	add.w	r3, r7, #20
 8000642:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000646:	601a      	str	r2, [r3, #0]
  SPI1_TRANSCEIVER(tx, rx, 2);
 8000648:	1d39      	adds	r1, r7, #4
 800064a:	f107 0314 	add.w	r3, r7, #20
 800064e:	2202      	movs	r2, #2
 8000650:	4618      	mov	r0, r3
 8000652:	f7ff ff8b 	bl	800056c <SPI1_TRANSCEIVER>

  // setpackettype(packet_type_lora)
  *(uint32_t*)tx = 0x8A | 0x01 << 8; // LoRa mode
 8000656:	f107 0314 	add.w	r3, r7, #20
 800065a:	f44f 72c5 	mov.w	r2, #394	; 0x18a
 800065e:	601a      	str	r2, [r3, #0]
  SPI1_TRANSCEIVER(tx, rx, 2);
 8000660:	1d39      	adds	r1, r7, #4
 8000662:	f107 0314 	add.w	r3, r7, #20
 8000666:	2202      	movs	r2, #2
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff ff7f 	bl	800056c <SPI1_TRANSCEIVER>

  // setrffrequency(rfFrequency)
  *(uint32_t*)tx = 0x86 | 0xB8 << 8 | 0x9D << 16 | 0x89 << 24;
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	4aa3      	ldr	r2, [pc, #652]	; (8000900 <main+0x348>)
 8000674:	601a      	str	r2, [r3, #0]
  SPI1_TRANSCEIVER(tx, rx, 4);
 8000676:	1d39      	adds	r1, r7, #4
 8000678:	f107 0314 	add.w	r3, r7, #20
 800067c:	2204      	movs	r2, #4
 800067e:	4618      	mov	r0, r3
 8000680:	f7ff ff74 	bl	800056c <SPI1_TRANSCEIVER>

  // setbufferbaseaddress()
  *(uint32_t*)tx = 0x8F | 0x80 << 8 | 0x00 << 16;
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	f248 028f 	movw	r2, #32911	; 0x808f
 800068c:	601a      	str	r2, [r3, #0]
  SPI1_TRANSCEIVER(tx, rx, 3);
 800068e:	1d39      	adds	r1, r7, #4
 8000690:	f107 0314 	add.w	r3, r7, #20
 8000694:	2203      	movs	r2, #3
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff ff68 	bl	800056c <SPI1_TRANSCEIVER>

  // setmodulationparams(modparam1, modparam2, modparam3)
  *(uint32_t*)tx = 0x8B | 0x70 << 8 | 0x18 << 16 | 0x01 << 24;
 800069c:	f107 0314 	add.w	r3, r7, #20
 80006a0:	4a98      	ldr	r2, [pc, #608]	; (8000904 <main+0x34c>)
 80006a2:	601a      	str	r2, [r3, #0]
  SPI1_TRANSCEIVER(tx, rx, 4);
 80006a4:	1d39      	adds	r1, r7, #4
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	2204      	movs	r2, #4
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff ff5d 	bl	800056c <SPI1_TRANSCEIVER>

  // setpacketparams(pktparam1, pktparam2, pktparam3, pktparam4, pktparam5)
  *(uint32_t*)tx = 0x8C | 0x0C << 8 | 0x80 << 16 | 0x08 << 24;
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	4a94      	ldr	r2, [pc, #592]	; (8000908 <main+0x350>)
 80006b8:	601a      	str	r2, [r3, #0]
  *(uint32_t*)(tx+4) = 0x20 | 0x40 << 8 | 0x00 << 16 | 0x00 << 24;
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	3304      	adds	r3, #4
 80006c0:	f244 0220 	movw	r2, #16416	; 0x4020
 80006c4:	601a      	str	r2, [r3, #0]
  SPI1_TRANSCEIVER(tx, rx, 8);
 80006c6:	1d39      	adds	r1, r7, #4
 80006c8:	f107 0314 	add.w	r3, r7, #20
 80006cc:	2208      	movs	r2, #8
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff ff4c 	bl	800056c <SPI1_TRANSCEIVER>
    //===========================================
    // Rx Setting and Operations
    //===========================================

    // SetDioIrqParams(irqMask, dio1Mask, dio2Mask, dio3Mask)
    *(uint32_t*)tx = 0x8D | 0x40 << 8 | 0x23 << 16 | 0x00 << 24;
 80006d4:	f107 0314 	add.w	r3, r7, #20
 80006d8:	4a8c      	ldr	r2, [pc, #560]	; (800090c <main+0x354>)
 80006da:	601a      	str	r2, [r3, #0]
    *(uint32_t*)(tx+4) = 0x01 | 0x00 << 8 | 0x02 << 16 | 0x40 << 24;
 80006dc:	f107 0314 	add.w	r3, r7, #20
 80006e0:	3304      	adds	r3, #4
 80006e2:	4a8b      	ldr	r2, [pc, #556]	; (8000910 <main+0x358>)
 80006e4:	601a      	str	r2, [r3, #0]
    *(uint32_t*)(tx+8) = 0x20;
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	3308      	adds	r3, #8
 80006ec:	2220      	movs	r2, #32
 80006ee:	601a      	str	r2, [r3, #0]
    SPI1_TRANSCEIVER(tx, rx, 9);
 80006f0:	1d39      	adds	r1, r7, #4
 80006f2:	f107 0314 	add.w	r3, r7, #20
 80006f6:	2209      	movs	r2, #9
 80006f8:	4618      	mov	r0, r3
 80006fa:	f7ff ff37 	bl	800056c <SPI1_TRANSCEIVER>

    // SetRx(periodBase, periodBaseCount[15:8], periodBaseCount[7:0])
    *(uint32_t*)tx = 0x82 | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	2282      	movs	r2, #130	; 0x82
 8000704:	601a      	str	r2, [r3, #0]
    SPI1_TRANSCEIVER(tx, rx, 4);
 8000706:	1d39      	adds	r1, r7, #4
 8000708:	f107 0314 	add.w	r3, r7, #20
 800070c:	2204      	movs	r2, #4
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff ff2c 	bl	800056c <SPI1_TRANSCEIVER>

    // WaitIrq
    while(1)
    {
  	   *(uint32_t*)tx = 0x15 | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
 8000714:	f107 0314 	add.w	r3, r7, #20
 8000718:	2215      	movs	r2, #21
 800071a:	601a      	str	r2, [r3, #0]
  	   SPI1_TRANSCEIVER(tx, rx, 4);
 800071c:	1d39      	adds	r1, r7, #4
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	2204      	movs	r2, #4
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff ff21 	bl	800056c <SPI1_TRANSCEIVER>
  	   if(rx[3] & 0x02) break;
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	f003 0302 	and.w	r3, r3, #2
 8000730:	2b00      	cmp	r3, #0
 8000732:	d100      	bne.n	8000736 <main+0x17e>
  	   *(uint32_t*)tx = 0x15 | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
 8000734:	e7ee      	b.n	8000714 <main+0x15c>
  	   if(rx[3] & 0x02) break;
 8000736:	bf00      	nop
    }

    // GetPacketStatus()
    *(uint32_t*)tx = 0x1D | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
 8000738:	f107 0314 	add.w	r3, r7, #20
 800073c:	221d      	movs	r2, #29
 800073e:	601a      	str	r2, [r3, #0]
    *(uint32_t*)(tx+4) = 0x00 | 0x00 << 8 | 0x00 << 16;
 8000740:	f107 0314 	add.w	r3, r7, #20
 8000744:	3304      	adds	r3, #4
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
    SPI1_TRANSCEIVER(tx, rx, 7);
 800074a:	1d39      	adds	r1, r7, #4
 800074c:	f107 0314 	add.w	r3, r7, #20
 8000750:	2207      	movs	r2, #7
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff ff0a 	bl	800056c <SPI1_TRANSCEIVER>

    // ClrIrqStatus(irqMask)
    *(uint32_t*)tx = 0x97 | 0xFF << 8 | 0xFF << 16;
 8000758:	f107 0314 	add.w	r3, r7, #20
 800075c:	4a6d      	ldr	r2, [pc, #436]	; (8000914 <main+0x35c>)
 800075e:	601a      	str	r2, [r3, #0]
    SPI1_TRANSCEIVER(tx, rx, 3);
 8000760:	1d39      	adds	r1, r7, #4
 8000762:	f107 0314 	add.w	r3, r7, #20
 8000766:	2203      	movs	r2, #3
 8000768:	4618      	mov	r0, r3
 800076a:	f7ff feff 	bl	800056c <SPI1_TRANSCEIVER>

    // GetRxBufferStatus()
    *(uint32_t*)tx = 0x17 | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
 800076e:	f107 0314 	add.w	r3, r7, #20
 8000772:	2217      	movs	r2, #23
 8000774:	601a      	str	r2, [r3, #0]
    SPI1_TRANSCEIVER(tx, rx, 4);
 8000776:	1d39      	adds	r1, r7, #4
 8000778:	f107 0314 	add.w	r3, r7, #20
 800077c:	2204      	movs	r2, #4
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff fef4 	bl	800056c <SPI1_TRANSCEIVER>

    // ReadBuffer(offset, payloadLengthRx)
	 *(uint32_t*)tx = 0x1B | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	221b      	movs	r2, #27
 800078a:	601a      	str	r2, [r3, #0]
	 *(uint32_t*)(tx+4) = 0x00 | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
 800078c:	f107 0314 	add.w	r3, r7, #20
 8000790:	3304      	adds	r3, #4
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
	 *(uint32_t*)(tx+8) = 0x00 | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	3308      	adds	r3, #8
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
	 SPI1_TRANSCEIVER(tx, rx, 11);
 80007a0:	1d39      	adds	r1, r7, #4
 80007a2:	f107 0314 	add.w	r3, r7, #20
 80007a6:	220b      	movs	r2, #11
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff fedf 	bl	800056c <SPI1_TRANSCEIVER>

	 received = *(int*) (rx+3);
 80007ae:	f8d7 3007 	ldr.w	r3, [r7, #7]
 80007b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	 uart_buf_len = sprintf(uart_buf, "received: %05d\r\n", received);
 80007b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ba:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80007be:	4956      	ldr	r1, [pc, #344]	; (8000918 <main+0x360>)
 80007c0:	4618      	mov	r0, r3
 80007c2:	f003 fb81 	bl	8003ec8 <siprintf>
 80007c6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	 HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 80007ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80007ce:	b29a      	uxth	r2, r3
 80007d0:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80007d4:	2364      	movs	r3, #100	; 0x64
 80007d6:	4848      	ldr	r0, [pc, #288]	; (80008f8 <main+0x340>)
 80007d8:	f002 fe1e 	bl	8003418 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   while (1)
   {
	      // WriteBuffer(offset, *data)
	      *(uint32_t*)tx = 0x1A | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	221a      	movs	r2, #26
 80007e2:	601a      	str	r2, [r3, #0]
	      *(uint32_t*)(tx+4) = 0x00000000;
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	3304      	adds	r3, #4
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
	      SPI1_TRANSCEIVER(tx, rx, 8);
 80007ee:	1d39      	adds	r1, r7, #4
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	2208      	movs	r2, #8
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff feb8 	bl	800056c <SPI1_TRANSCEIVER>
	      // SetRx(periodBase, periodBaseCount[15:8], periodBaseCount[7:0])
  	     *(uint32_t*)tx = 0x82 | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	2282      	movs	r2, #130	; 0x82
 8000802:	601a      	str	r2, [r3, #0]
  	     SPI1_TRANSCEIVER(tx, rx, 4);
 8000804:	1d39      	adds	r1, r7, #4
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	2204      	movs	r2, #4
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff fead 	bl	800056c <SPI1_TRANSCEIVER>

  	     // WaitIrq
  	     while(1)
  	     {
  	  	   *(uint32_t*)tx = 0x15 | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	2215      	movs	r2, #21
 8000818:	601a      	str	r2, [r3, #0]
  	  	   SPI1_TRANSCEIVER(tx, rx, 4);
 800081a:	1d39      	adds	r1, r7, #4
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	2204      	movs	r2, #4
 8000822:	4618      	mov	r0, r3
 8000824:	f7ff fea2 	bl	800056c <SPI1_TRANSCEIVER>
  	  	   if(rx[3] & 0x02) break;
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	2b00      	cmp	r3, #0
 8000830:	d100      	bne.n	8000834 <main+0x27c>
  	  	   *(uint32_t*)tx = 0x15 | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
 8000832:	e7ee      	b.n	8000812 <main+0x25a>
  	  	   if(rx[3] & 0x02) break;
 8000834:	bf00      	nop
  	     }

  	     // GetPacketStatus()
  	     *(uint32_t*)tx = 0x1D | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	221d      	movs	r2, #29
 800083c:	601a      	str	r2, [r3, #0]
  	     *(uint32_t*)(tx+4) = 0x00 | 0x00 << 8 | 0x00 << 16;
 800083e:	f107 0314 	add.w	r3, r7, #20
 8000842:	3304      	adds	r3, #4
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
  	     SPI1_TRANSCEIVER(tx, rx, 7);
 8000848:	1d39      	adds	r1, r7, #4
 800084a:	f107 0314 	add.w	r3, r7, #20
 800084e:	2207      	movs	r2, #7
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff fe8b 	bl	800056c <SPI1_TRANSCEIVER>

  	     // ClrIrqStatus(irqMask)
  	     *(uint32_t*)tx = 0x97 | 0xFF << 8 | 0xFF << 16;
 8000856:	f107 0314 	add.w	r3, r7, #20
 800085a:	4a2e      	ldr	r2, [pc, #184]	; (8000914 <main+0x35c>)
 800085c:	601a      	str	r2, [r3, #0]
  	     SPI1_TRANSCEIVER(tx, rx, 3);
 800085e:	1d39      	adds	r1, r7, #4
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	2203      	movs	r2, #3
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff fe80 	bl	800056c <SPI1_TRANSCEIVER>

  	    *(uint32_t*)tx = 0x15 | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	2215      	movs	r2, #21
 8000872:	601a      	str	r2, [r3, #0]
  	     SPI1_TRANSCEIVER(tx, rx, 4);
 8000874:	1d39      	adds	r1, r7, #4
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	2204      	movs	r2, #4
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff fe75 	bl	800056c <SPI1_TRANSCEIVER>

  	     // GetRxBufferStatus()
  	     *(uint32_t*)tx = 0x17 | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	2217      	movs	r2, #23
 8000888:	601a      	str	r2, [r3, #0]
  	     SPI1_TRANSCEIVER(tx, rx, 4);
 800088a:	1d39      	adds	r1, r7, #4
 800088c:	f107 0314 	add.w	r3, r7, #20
 8000890:	2204      	movs	r2, #4
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff fe6a 	bl	800056c <SPI1_TRANSCEIVER>

  	     // ReadBuffer(offset, payloadLengthRx)
  	     *(uint32_t*)tx = 0x1B | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	221b      	movs	r2, #27
 800089e:	601a      	str	r2, [r3, #0]
  	     *(uint32_t*)(tx+4) = 0x00 | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	3304      	adds	r3, #4
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
  	     *(uint32_t*)(tx+8) = 0x00 | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
 80008aa:	f107 0314 	add.w	r3, r7, #20
 80008ae:	3308      	adds	r3, #8
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
  	     SPI1_TRANSCEIVER(tx, rx, 11);
 80008b4:	1d39      	adds	r1, r7, #4
 80008b6:	f107 0314 	add.w	r3, r7, #20
 80008ba:	220b      	movs	r2, #11
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff fe55 	bl	800056c <SPI1_TRANSCEIVER>

  		 received = *(int*) (rx+3);
 80008c2:	f8d7 3007 	ldr.w	r3, [r7, #7]
 80008c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  		 uart_buf_len = sprintf(uart_buf, "received: %05d\r\n", received);
 80008ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ce:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80008d2:	4911      	ldr	r1, [pc, #68]	; (8000918 <main+0x360>)
 80008d4:	4618      	mov	r0, r3
 80008d6:	f003 faf7 	bl	8003ec8 <siprintf>
 80008da:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
  		 HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 80008de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80008e2:	b29a      	uxth	r2, r3
 80008e4:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80008e8:	2364      	movs	r3, #100	; 0x64
 80008ea:	4803      	ldr	r0, [pc, #12]	; (80008f8 <main+0x340>)
 80008ec:	f002 fd94 	bl	8003418 <HAL_UART_Transmit>
	      *(uint32_t*)tx = 0x1A | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
 80008f0:	e774      	b.n	80007dc <main+0x224>
 80008f2:	bf00      	nop
 80008f4:	08004828 	.word	0x08004828
 80008f8:	200000dc 	.word	0x200000dc
 80008fc:	48000800 	.word	0x48000800
 8000900:	899db886 	.word	0x899db886
 8000904:	0118708b 	.word	0x0118708b
 8000908:	08800c8c 	.word	0x08800c8c
 800090c:	0023408d 	.word	0x0023408d
 8000910:	40020001 	.word	0x40020001
 8000914:	00ffff97 	.word	0x00ffff97
 8000918:	08004844 	.word	0x08004844

0800091c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b096      	sub	sp, #88	; 0x58
 8000920:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000922:	f107 0314 	add.w	r3, r7, #20
 8000926:	2244      	movs	r2, #68	; 0x44
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f003 faec 	bl	8003f08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000930:	463b      	mov	r3, r7
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
 800093c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800093e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000942:	f000 fddf 	bl	8001504 <HAL_PWREx_ControlVoltageScaling>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800094c:	f000 f920 	bl	8000b90 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000950:	2302      	movs	r3, #2
 8000952:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000954:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000958:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800095a:	2310      	movs	r3, #16
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800095e:	2302      	movs	r3, #2
 8000960:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000962:	2302      	movs	r3, #2
 8000964:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000966:	2301      	movs	r3, #1
 8000968:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800096a:	230a      	movs	r3, #10
 800096c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800096e:	2307      	movs	r3, #7
 8000970:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000972:	2302      	movs	r3, #2
 8000974:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000976:	2302      	movs	r3, #2
 8000978:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800097a:	f107 0314 	add.w	r3, r7, #20
 800097e:	4618      	mov	r0, r3
 8000980:	f000 fe16 	bl	80015b0 <HAL_RCC_OscConfig>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800098a:	f000 f901 	bl	8000b90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800098e:	230f      	movs	r3, #15
 8000990:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000992:	2303      	movs	r3, #3
 8000994:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000996:	2300      	movs	r3, #0
 8000998:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800099e:	2300      	movs	r3, #0
 80009a0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009a2:	463b      	mov	r3, r7
 80009a4:	2104      	movs	r1, #4
 80009a6:	4618      	mov	r0, r3
 80009a8:	f001 f9de 	bl	8001d68 <HAL_RCC_ClockConfig>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80009b2:	f000 f8ed 	bl	8000b90 <Error_Handler>
  }
}
 80009b6:	bf00      	nop
 80009b8:	3758      	adds	r7, #88	; 0x58
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
	...

080009c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009c4:	4b1b      	ldr	r3, [pc, #108]	; (8000a34 <MX_SPI1_Init+0x74>)
 80009c6:	4a1c      	ldr	r2, [pc, #112]	; (8000a38 <MX_SPI1_Init+0x78>)
 80009c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009ca:	4b1a      	ldr	r3, [pc, #104]	; (8000a34 <MX_SPI1_Init+0x74>)
 80009cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009d2:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <MX_SPI1_Init+0x74>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80009d8:	4b16      	ldr	r3, [pc, #88]	; (8000a34 <MX_SPI1_Init+0x74>)
 80009da:	f44f 7240 	mov.w	r2, #768	; 0x300
 80009de:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009e0:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <MX_SPI1_Init+0x74>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009e6:	4b13      	ldr	r3, [pc, #76]	; (8000a34 <MX_SPI1_Init+0x74>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009ec:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <MX_SPI1_Init+0x74>)
 80009ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009f2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <MX_SPI1_Init+0x74>)
 80009f6:	2218      	movs	r2, #24
 80009f8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <MX_SPI1_Init+0x74>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <MX_SPI1_Init+0x74>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <MX_SPI1_Init+0x74>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a0c:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <MX_SPI1_Init+0x74>)
 8000a0e:	2207      	movs	r2, #7
 8000a10:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a12:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <MX_SPI1_Init+0x74>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <MX_SPI1_Init+0x74>)
 8000a1a:	2208      	movs	r2, #8
 8000a1c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a1e:	4805      	ldr	r0, [pc, #20]	; (8000a34 <MX_SPI1_Init+0x74>)
 8000a20:	f002 f882 	bl	8002b28 <HAL_SPI_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000a2a:	f000 f8b1 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20000078 	.word	0x20000078
 8000a38:	40013000 	.word	0x40013000

08000a3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a40:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a42:	4a15      	ldr	r2, [pc, #84]	; (8000a98 <MX_USART2_UART_Init+0x5c>)
 8000a44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8000a46:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a48:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000a4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4e:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a54:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a60:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a62:	220c      	movs	r2, #12
 8000a64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a6c:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a72:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a7e:	4805      	ldr	r0, [pc, #20]	; (8000a94 <MX_USART2_UART_Init+0x58>)
 8000a80:	f002 fc7c 	bl	800337c <HAL_UART_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a8a:	f000 f881 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	200000dc 	.word	0x200000dc
 8000a98:	40004400 	.word	0x40004400

08000a9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08a      	sub	sp, #40	; 0x28
 8000aa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa2:	f107 0314 	add.w	r3, r7, #20
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
 8000ab0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab2:	4b34      	ldr	r3, [pc, #208]	; (8000b84 <MX_GPIO_Init+0xe8>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab6:	4a33      	ldr	r2, [pc, #204]	; (8000b84 <MX_GPIO_Init+0xe8>)
 8000ab8:	f043 0304 	orr.w	r3, r3, #4
 8000abc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000abe:	4b31      	ldr	r3, [pc, #196]	; (8000b84 <MX_GPIO_Init+0xe8>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac2:	f003 0304 	and.w	r3, r3, #4
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aca:	4b2e      	ldr	r3, [pc, #184]	; (8000b84 <MX_GPIO_Init+0xe8>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ace:	4a2d      	ldr	r2, [pc, #180]	; (8000b84 <MX_GPIO_Init+0xe8>)
 8000ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ad4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad6:	4b2b      	ldr	r3, [pc, #172]	; (8000b84 <MX_GPIO_Init+0xe8>)
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae2:	4b28      	ldr	r3, [pc, #160]	; (8000b84 <MX_GPIO_Init+0xe8>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae6:	4a27      	ldr	r2, [pc, #156]	; (8000b84 <MX_GPIO_Init+0xe8>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aee:	4b25      	ldr	r3, [pc, #148]	; (8000b84 <MX_GPIO_Init+0xe8>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	60bb      	str	r3, [r7, #8]
 8000af8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afa:	4b22      	ldr	r3, [pc, #136]	; (8000b84 <MX_GPIO_Init+0xe8>)
 8000afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afe:	4a21      	ldr	r2, [pc, #132]	; (8000b84 <MX_GPIO_Init+0xe8>)
 8000b00:	f043 0302 	orr.w	r3, r3, #2
 8000b04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b06:	4b1f      	ldr	r3, [pc, #124]	; (8000b84 <MX_GPIO_Init+0xe8>)
 8000b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0a:	f003 0302 	and.w	r3, r3, #2
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SX1280_RST_GPIO_Port, SX1280_RST_Pin, GPIO_PIN_SET);
 8000b12:	2201      	movs	r2, #1
 8000b14:	2180      	movs	r1, #128	; 0x80
 8000b16:	481c      	ldr	r0, [pc, #112]	; (8000b88 <MX_GPIO_Init+0xec>)
 8000b18:	f000 fcce 	bl	80014b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	2140      	movs	r1, #64	; 0x40
 8000b20:	481a      	ldr	r0, [pc, #104]	; (8000b8c <MX_GPIO_Init+0xf0>)
 8000b22:	f000 fcc9 	bl	80014b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b2c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4812      	ldr	r0, [pc, #72]	; (8000b88 <MX_GPIO_Init+0xec>)
 8000b3e:	f000 fb11 	bl	8001164 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX1280_RST_Pin */
  GPIO_InitStruct.Pin = SX1280_RST_Pin;
 8000b42:	2380      	movs	r3, #128	; 0x80
 8000b44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b46:	2301      	movs	r3, #1
 8000b48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SX1280_RST_GPIO_Port, &GPIO_InitStruct);
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	4619      	mov	r1, r3
 8000b58:	480b      	ldr	r0, [pc, #44]	; (8000b88 <MX_GPIO_Init+0xec>)
 8000b5a:	f000 fb03 	bl	8001164 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 8000b5e:	2340      	movs	r3, #64	; 0x40
 8000b60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b62:	2301      	movs	r3, #1
 8000b64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	4619      	mov	r1, r3
 8000b74:	4805      	ldr	r0, [pc, #20]	; (8000b8c <MX_GPIO_Init+0xf0>)
 8000b76:	f000 faf5 	bl	8001164 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b7a:	bf00      	nop
 8000b7c:	3728      	adds	r7, #40	; 0x28
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40021000 	.word	0x40021000
 8000b88:	48000800 	.word	0x48000800
 8000b8c:	48000400 	.word	0x48000400

08000b90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b94:	b672      	cpsid	i
}
 8000b96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <Error_Handler+0x8>
	...

08000b9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba2:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <HAL_MspInit+0x44>)
 8000ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ba6:	4a0e      	ldr	r2, [pc, #56]	; (8000be0 <HAL_MspInit+0x44>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	6613      	str	r3, [r2, #96]	; 0x60
 8000bae:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <HAL_MspInit+0x44>)
 8000bb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bba:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <HAL_MspInit+0x44>)
 8000bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bbe:	4a08      	ldr	r2, [pc, #32]	; (8000be0 <HAL_MspInit+0x44>)
 8000bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc4:	6593      	str	r3, [r2, #88]	; 0x58
 8000bc6:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <HAL_MspInit+0x44>)
 8000bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bce:	603b      	str	r3, [r7, #0]
 8000bd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	40021000 	.word	0x40021000

08000be4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a17      	ldr	r2, [pc, #92]	; (8000c60 <HAL_SPI_MspInit+0x7c>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d128      	bne.n	8000c58 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c06:	4b17      	ldr	r3, [pc, #92]	; (8000c64 <HAL_SPI_MspInit+0x80>)
 8000c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c0a:	4a16      	ldr	r2, [pc, #88]	; (8000c64 <HAL_SPI_MspInit+0x80>)
 8000c0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c10:	6613      	str	r3, [r2, #96]	; 0x60
 8000c12:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <HAL_SPI_MspInit+0x80>)
 8000c14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1e:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <HAL_SPI_MspInit+0x80>)
 8000c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c22:	4a10      	ldr	r2, [pc, #64]	; (8000c64 <HAL_SPI_MspInit+0x80>)
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <HAL_SPI_MspInit+0x80>)
 8000c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c36:	23e0      	movs	r3, #224	; 0xe0
 8000c38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c42:	2303      	movs	r3, #3
 8000c44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c46:	2305      	movs	r3, #5
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4a:	f107 0314 	add.w	r3, r7, #20
 8000c4e:	4619      	mov	r1, r3
 8000c50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c54:	f000 fa86 	bl	8001164 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c58:	bf00      	nop
 8000c5a:	3728      	adds	r7, #40	; 0x28
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40013000 	.word	0x40013000
 8000c64:	40021000 	.word	0x40021000

08000c68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b0ac      	sub	sp, #176	; 0xb0
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	2288      	movs	r2, #136	; 0x88
 8000c86:	2100      	movs	r1, #0
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f003 f93d 	bl	8003f08 <memset>
  if(huart->Instance==USART2)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a21      	ldr	r2, [pc, #132]	; (8000d18 <HAL_UART_MspInit+0xb0>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d13b      	bne.n	8000d10 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f001 fa83 	bl	80021b0 <HAL_RCCEx_PeriphCLKConfig>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cb0:	f7ff ff6e 	bl	8000b90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cb4:	4b19      	ldr	r3, [pc, #100]	; (8000d1c <HAL_UART_MspInit+0xb4>)
 8000cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cb8:	4a18      	ldr	r2, [pc, #96]	; (8000d1c <HAL_UART_MspInit+0xb4>)
 8000cba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cbe:	6593      	str	r3, [r2, #88]	; 0x58
 8000cc0:	4b16      	ldr	r3, [pc, #88]	; (8000d1c <HAL_UART_MspInit+0xb4>)
 8000cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc8:	613b      	str	r3, [r7, #16]
 8000cca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ccc:	4b13      	ldr	r3, [pc, #76]	; (8000d1c <HAL_UART_MspInit+0xb4>)
 8000cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd0:	4a12      	ldr	r2, [pc, #72]	; (8000d1c <HAL_UART_MspInit+0xb4>)
 8000cd2:	f043 0301 	orr.w	r3, r3, #1
 8000cd6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cd8:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <HAL_UART_MspInit+0xb4>)
 8000cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cdc:	f003 0301 	and.w	r3, r3, #1
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ce4:	230c      	movs	r3, #12
 8000ce6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cea:	2302      	movs	r3, #2
 8000cec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cfc:	2307      	movs	r3, #7
 8000cfe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d02:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d06:	4619      	mov	r1, r3
 8000d08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d0c:	f000 fa2a 	bl	8001164 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d10:	bf00      	nop
 8000d12:	37b0      	adds	r7, #176	; 0xb0
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40004400 	.word	0x40004400
 8000d1c:	40021000 	.word	0x40021000

08000d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <NMI_Handler+0x4>

08000d26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d2a:	e7fe      	b.n	8000d2a <HardFault_Handler+0x4>

08000d2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <MemManage_Handler+0x4>

08000d32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d36:	e7fe      	b.n	8000d36 <BusFault_Handler+0x4>

08000d38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <UsageFault_Handler+0x4>

08000d3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d6c:	f000 f8d0 	bl	8000f10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d7c:	4a14      	ldr	r2, [pc, #80]	; (8000dd0 <_sbrk+0x5c>)
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <_sbrk+0x60>)
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d88:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <_sbrk+0x64>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d102      	bne.n	8000d96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d90:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <_sbrk+0x64>)
 8000d92:	4a12      	ldr	r2, [pc, #72]	; (8000ddc <_sbrk+0x68>)
 8000d94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d96:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <_sbrk+0x64>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d207      	bcs.n	8000db4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000da4:	f003 f8b8 	bl	8003f18 <__errno>
 8000da8:	4603      	mov	r3, r0
 8000daa:	220c      	movs	r2, #12
 8000dac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dae:	f04f 33ff 	mov.w	r3, #4294967295
 8000db2:	e009      	b.n	8000dc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000db4:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <_sbrk+0x64>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dba:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <_sbrk+0x64>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	4a05      	ldr	r2, [pc, #20]	; (8000dd8 <_sbrk+0x64>)
 8000dc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20018000 	.word	0x20018000
 8000dd4:	00000400 	.word	0x00000400
 8000dd8:	20000164 	.word	0x20000164
 8000ddc:	200002b8 	.word	0x200002b8

08000de0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <SystemInit+0x20>)
 8000de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dea:	4a05      	ldr	r2, [pc, #20]	; (8000e00 <SystemInit+0x20>)
 8000dec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000df0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e3c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e08:	f7ff ffea 	bl	8000de0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e0c:	480c      	ldr	r0, [pc, #48]	; (8000e40 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e0e:	490d      	ldr	r1, [pc, #52]	; (8000e44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e10:	4a0d      	ldr	r2, [pc, #52]	; (8000e48 <LoopForever+0xe>)
  movs r3, #0
 8000e12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e14:	e002      	b.n	8000e1c <LoopCopyDataInit>

08000e16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e1a:	3304      	adds	r3, #4

08000e1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e20:	d3f9      	bcc.n	8000e16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e22:	4a0a      	ldr	r2, [pc, #40]	; (8000e4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e24:	4c0a      	ldr	r4, [pc, #40]	; (8000e50 <LoopForever+0x16>)
  movs r3, #0
 8000e26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e28:	e001      	b.n	8000e2e <LoopFillZerobss>

08000e2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e2c:	3204      	adds	r2, #4

08000e2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e30:	d3fb      	bcc.n	8000e2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e32:	f003 f877 	bl	8003f24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e36:	f7ff fbbf 	bl	80005b8 <main>

08000e3a <LoopForever>:

LoopForever:
    b LoopForever
 8000e3a:	e7fe      	b.n	8000e3a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e3c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e44:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e48:	080048e4 	.word	0x080048e4
  ldr r2, =_sbss
 8000e4c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e50:	200002b4 	.word	0x200002b4

08000e54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e54:	e7fe      	b.n	8000e54 <ADC1_2_IRQHandler>
	...

08000e58 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e62:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <HAL_Init+0x3c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a0b      	ldr	r2, [pc, #44]	; (8000e94 <HAL_Init+0x3c>)
 8000e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e6c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e6e:	2003      	movs	r0, #3
 8000e70:	f000 f944 	bl	80010fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e74:	2000      	movs	r0, #0
 8000e76:	f000 f80f 	bl	8000e98 <HAL_InitTick>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d002      	beq.n	8000e86 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e80:	2301      	movs	r3, #1
 8000e82:	71fb      	strb	r3, [r7, #7]
 8000e84:	e001      	b.n	8000e8a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e86:	f7ff fe89 	bl	8000b9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40022000 	.word	0x40022000

08000e98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ea4:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <HAL_InitTick+0x6c>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d023      	beq.n	8000ef4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000eac:	4b16      	ldr	r3, [pc, #88]	; (8000f08 <HAL_InitTick+0x70>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <HAL_InitTick+0x6c>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 f941 	bl	800114a <HAL_SYSTICK_Config>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d10f      	bne.n	8000eee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2b0f      	cmp	r3, #15
 8000ed2:	d809      	bhi.n	8000ee8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	6879      	ldr	r1, [r7, #4]
 8000ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8000edc:	f000 f919 	bl	8001112 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ee0:	4a0a      	ldr	r2, [pc, #40]	; (8000f0c <HAL_InitTick+0x74>)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6013      	str	r3, [r2, #0]
 8000ee6:	e007      	b.n	8000ef8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	73fb      	strb	r3, [r7, #15]
 8000eec:	e004      	b.n	8000ef8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	73fb      	strb	r3, [r7, #15]
 8000ef2:	e001      	b.n	8000ef8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000008 	.word	0x20000008
 8000f08:	20000000 	.word	0x20000000
 8000f0c:	20000004 	.word	0x20000004

08000f10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <HAL_IncTick+0x20>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <HAL_IncTick+0x24>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4413      	add	r3, r2
 8000f20:	4a04      	ldr	r2, [pc, #16]	; (8000f34 <HAL_IncTick+0x24>)
 8000f22:	6013      	str	r3, [r2, #0]
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	20000008 	.word	0x20000008
 8000f34:	20000168 	.word	0x20000168

08000f38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f3c:	4b03      	ldr	r3, [pc, #12]	; (8000f4c <HAL_GetTick+0x14>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	20000168 	.word	0x20000168

08000f50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f58:	f7ff ffee 	bl	8000f38 <HAL_GetTick>
 8000f5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f68:	d005      	beq.n	8000f76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f6a:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <HAL_Delay+0x44>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	4413      	add	r3, r2
 8000f74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f76:	bf00      	nop
 8000f78:	f7ff ffde 	bl	8000f38 <HAL_GetTick>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	68fa      	ldr	r2, [r7, #12]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d8f7      	bhi.n	8000f78 <HAL_Delay+0x28>
  {
  }
}
 8000f88:	bf00      	nop
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000008 	.word	0x20000008

08000f98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <__NVIC_SetPriorityGrouping+0x44>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fae:	68ba      	ldr	r2, [r7, #8]
 8000fb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fca:	4a04      	ldr	r2, [pc, #16]	; (8000fdc <__NVIC_SetPriorityGrouping+0x44>)
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	60d3      	str	r3, [r2, #12]
}
 8000fd0:	bf00      	nop
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe4:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	0a1b      	lsrs	r3, r3, #8
 8000fea:	f003 0307 	and.w	r3, r3, #7
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	6039      	str	r1, [r7, #0]
 8001006:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100c:	2b00      	cmp	r3, #0
 800100e:	db0a      	blt.n	8001026 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	b2da      	uxtb	r2, r3
 8001014:	490c      	ldr	r1, [pc, #48]	; (8001048 <__NVIC_SetPriority+0x4c>)
 8001016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101a:	0112      	lsls	r2, r2, #4
 800101c:	b2d2      	uxtb	r2, r2
 800101e:	440b      	add	r3, r1
 8001020:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001024:	e00a      	b.n	800103c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	b2da      	uxtb	r2, r3
 800102a:	4908      	ldr	r1, [pc, #32]	; (800104c <__NVIC_SetPriority+0x50>)
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	f003 030f 	and.w	r3, r3, #15
 8001032:	3b04      	subs	r3, #4
 8001034:	0112      	lsls	r2, r2, #4
 8001036:	b2d2      	uxtb	r2, r2
 8001038:	440b      	add	r3, r1
 800103a:	761a      	strb	r2, [r3, #24]
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	e000e100 	.word	0xe000e100
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001050:	b480      	push	{r7}
 8001052:	b089      	sub	sp, #36	; 0x24
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f003 0307 	and.w	r3, r3, #7
 8001062:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	f1c3 0307 	rsb	r3, r3, #7
 800106a:	2b04      	cmp	r3, #4
 800106c:	bf28      	it	cs
 800106e:	2304      	movcs	r3, #4
 8001070:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	3304      	adds	r3, #4
 8001076:	2b06      	cmp	r3, #6
 8001078:	d902      	bls.n	8001080 <NVIC_EncodePriority+0x30>
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3b03      	subs	r3, #3
 800107e:	e000      	b.n	8001082 <NVIC_EncodePriority+0x32>
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001084:	f04f 32ff 	mov.w	r2, #4294967295
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	43da      	mvns	r2, r3
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	401a      	ands	r2, r3
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001098:	f04f 31ff 	mov.w	r1, #4294967295
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	fa01 f303 	lsl.w	r3, r1, r3
 80010a2:	43d9      	mvns	r1, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a8:	4313      	orrs	r3, r2
         );
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3724      	adds	r7, #36	; 0x24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
	...

080010b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3b01      	subs	r3, #1
 80010c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010c8:	d301      	bcc.n	80010ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ca:	2301      	movs	r3, #1
 80010cc:	e00f      	b.n	80010ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ce:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <SysTick_Config+0x40>)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3b01      	subs	r3, #1
 80010d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010d6:	210f      	movs	r1, #15
 80010d8:	f04f 30ff 	mov.w	r0, #4294967295
 80010dc:	f7ff ff8e 	bl	8000ffc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e0:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <SysTick_Config+0x40>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010e6:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <SysTick_Config+0x40>)
 80010e8:	2207      	movs	r2, #7
 80010ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	e000e010 	.word	0xe000e010

080010fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f7ff ff47 	bl	8000f98 <__NVIC_SetPriorityGrouping>
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b086      	sub	sp, #24
 8001116:	af00      	add	r7, sp, #0
 8001118:	4603      	mov	r3, r0
 800111a:	60b9      	str	r1, [r7, #8]
 800111c:	607a      	str	r2, [r7, #4]
 800111e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001124:	f7ff ff5c 	bl	8000fe0 <__NVIC_GetPriorityGrouping>
 8001128:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	68b9      	ldr	r1, [r7, #8]
 800112e:	6978      	ldr	r0, [r7, #20]
 8001130:	f7ff ff8e 	bl	8001050 <NVIC_EncodePriority>
 8001134:	4602      	mov	r2, r0
 8001136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113a:	4611      	mov	r1, r2
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff5d 	bl	8000ffc <__NVIC_SetPriority>
}
 8001142:	bf00      	nop
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff ffb0 	bl	80010b8 <SysTick_Config>
 8001158:	4603      	mov	r3, r0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
	...

08001164 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001164:	b480      	push	{r7}
 8001166:	b087      	sub	sp, #28
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001172:	e17f      	b.n	8001474 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	2101      	movs	r1, #1
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	fa01 f303 	lsl.w	r3, r1, r3
 8001180:	4013      	ands	r3, r2
 8001182:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2b00      	cmp	r3, #0
 8001188:	f000 8171 	beq.w	800146e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 0303 	and.w	r3, r3, #3
 8001194:	2b01      	cmp	r3, #1
 8001196:	d005      	beq.n	80011a4 <HAL_GPIO_Init+0x40>
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 0303 	and.w	r3, r3, #3
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d130      	bne.n	8001206 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	2203      	movs	r2, #3
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	68da      	ldr	r2, [r3, #12]
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011da:	2201      	movs	r2, #1
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43db      	mvns	r3, r3
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	4013      	ands	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	091b      	lsrs	r3, r3, #4
 80011f0:	f003 0201 	and.w	r2, r3, #1
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f003 0303 	and.w	r3, r3, #3
 800120e:	2b03      	cmp	r3, #3
 8001210:	d118      	bne.n	8001244 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001216:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001218:	2201      	movs	r2, #1
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	4013      	ands	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	08db      	lsrs	r3, r3, #3
 800122e:	f003 0201 	and.w	r2, r3, #1
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	4313      	orrs	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 0303 	and.w	r3, r3, #3
 800124c:	2b03      	cmp	r3, #3
 800124e:	d017      	beq.n	8001280 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	2203      	movs	r2, #3
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	4013      	ands	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	689a      	ldr	r2, [r3, #8]
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	4313      	orrs	r3, r2
 8001278:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 0303 	and.w	r3, r3, #3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d123      	bne.n	80012d4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	08da      	lsrs	r2, r3, #3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3208      	adds	r2, #8
 8001294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001298:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	f003 0307 	and.w	r3, r3, #7
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	220f      	movs	r2, #15
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	4013      	ands	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	691a      	ldr	r2, [r3, #16]
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	08da      	lsrs	r2, r3, #3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	3208      	adds	r2, #8
 80012ce:	6939      	ldr	r1, [r7, #16]
 80012d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	2203      	movs	r2, #3
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	43db      	mvns	r3, r3
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	4013      	ands	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f003 0203 	and.w	r2, r3, #3
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	4313      	orrs	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001310:	2b00      	cmp	r3, #0
 8001312:	f000 80ac 	beq.w	800146e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001316:	4b5f      	ldr	r3, [pc, #380]	; (8001494 <HAL_GPIO_Init+0x330>)
 8001318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800131a:	4a5e      	ldr	r2, [pc, #376]	; (8001494 <HAL_GPIO_Init+0x330>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	6613      	str	r3, [r2, #96]	; 0x60
 8001322:	4b5c      	ldr	r3, [pc, #368]	; (8001494 <HAL_GPIO_Init+0x330>)
 8001324:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	60bb      	str	r3, [r7, #8]
 800132c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800132e:	4a5a      	ldr	r2, [pc, #360]	; (8001498 <HAL_GPIO_Init+0x334>)
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	089b      	lsrs	r3, r3, #2
 8001334:	3302      	adds	r3, #2
 8001336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	f003 0303 	and.w	r3, r3, #3
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	220f      	movs	r2, #15
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	4013      	ands	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001358:	d025      	beq.n	80013a6 <HAL_GPIO_Init+0x242>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a4f      	ldr	r2, [pc, #316]	; (800149c <HAL_GPIO_Init+0x338>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d01f      	beq.n	80013a2 <HAL_GPIO_Init+0x23e>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a4e      	ldr	r2, [pc, #312]	; (80014a0 <HAL_GPIO_Init+0x33c>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d019      	beq.n	800139e <HAL_GPIO_Init+0x23a>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a4d      	ldr	r2, [pc, #308]	; (80014a4 <HAL_GPIO_Init+0x340>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d013      	beq.n	800139a <HAL_GPIO_Init+0x236>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a4c      	ldr	r2, [pc, #304]	; (80014a8 <HAL_GPIO_Init+0x344>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d00d      	beq.n	8001396 <HAL_GPIO_Init+0x232>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a4b      	ldr	r2, [pc, #300]	; (80014ac <HAL_GPIO_Init+0x348>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d007      	beq.n	8001392 <HAL_GPIO_Init+0x22e>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a4a      	ldr	r2, [pc, #296]	; (80014b0 <HAL_GPIO_Init+0x34c>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d101      	bne.n	800138e <HAL_GPIO_Init+0x22a>
 800138a:	2306      	movs	r3, #6
 800138c:	e00c      	b.n	80013a8 <HAL_GPIO_Init+0x244>
 800138e:	2307      	movs	r3, #7
 8001390:	e00a      	b.n	80013a8 <HAL_GPIO_Init+0x244>
 8001392:	2305      	movs	r3, #5
 8001394:	e008      	b.n	80013a8 <HAL_GPIO_Init+0x244>
 8001396:	2304      	movs	r3, #4
 8001398:	e006      	b.n	80013a8 <HAL_GPIO_Init+0x244>
 800139a:	2303      	movs	r3, #3
 800139c:	e004      	b.n	80013a8 <HAL_GPIO_Init+0x244>
 800139e:	2302      	movs	r3, #2
 80013a0:	e002      	b.n	80013a8 <HAL_GPIO_Init+0x244>
 80013a2:	2301      	movs	r3, #1
 80013a4:	e000      	b.n	80013a8 <HAL_GPIO_Init+0x244>
 80013a6:	2300      	movs	r3, #0
 80013a8:	697a      	ldr	r2, [r7, #20]
 80013aa:	f002 0203 	and.w	r2, r2, #3
 80013ae:	0092      	lsls	r2, r2, #2
 80013b0:	4093      	lsls	r3, r2
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013b8:	4937      	ldr	r1, [pc, #220]	; (8001498 <HAL_GPIO_Init+0x334>)
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	089b      	lsrs	r3, r3, #2
 80013be:	3302      	adds	r3, #2
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013c6:	4b3b      	ldr	r3, [pc, #236]	; (80014b4 <HAL_GPIO_Init+0x350>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	43db      	mvns	r3, r3
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	4013      	ands	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d003      	beq.n	80013ea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013ea:	4a32      	ldr	r2, [pc, #200]	; (80014b4 <HAL_GPIO_Init+0x350>)
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013f0:	4b30      	ldr	r3, [pc, #192]	; (80014b4 <HAL_GPIO_Init+0x350>)
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	43db      	mvns	r3, r3
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	4013      	ands	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d003      	beq.n	8001414 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	4313      	orrs	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001414:	4a27      	ldr	r2, [pc, #156]	; (80014b4 <HAL_GPIO_Init+0x350>)
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800141a:	4b26      	ldr	r3, [pc, #152]	; (80014b4 <HAL_GPIO_Init+0x350>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	43db      	mvns	r3, r3
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	4013      	ands	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	4313      	orrs	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800143e:	4a1d      	ldr	r2, [pc, #116]	; (80014b4 <HAL_GPIO_Init+0x350>)
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001444:	4b1b      	ldr	r3, [pc, #108]	; (80014b4 <HAL_GPIO_Init+0x350>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	43db      	mvns	r3, r3
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	4013      	ands	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d003      	beq.n	8001468 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	4313      	orrs	r3, r2
 8001466:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001468:	4a12      	ldr	r2, [pc, #72]	; (80014b4 <HAL_GPIO_Init+0x350>)
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	3301      	adds	r3, #1
 8001472:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	fa22 f303 	lsr.w	r3, r2, r3
 800147e:	2b00      	cmp	r3, #0
 8001480:	f47f ae78 	bne.w	8001174 <HAL_GPIO_Init+0x10>
  }
}
 8001484:	bf00      	nop
 8001486:	bf00      	nop
 8001488:	371c      	adds	r7, #28
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	40021000 	.word	0x40021000
 8001498:	40010000 	.word	0x40010000
 800149c:	48000400 	.word	0x48000400
 80014a0:	48000800 	.word	0x48000800
 80014a4:	48000c00 	.word	0x48000c00
 80014a8:	48001000 	.word	0x48001000
 80014ac:	48001400 	.word	0x48001400
 80014b0:	48001800 	.word	0x48001800
 80014b4:	40010400 	.word	0x40010400

080014b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	460b      	mov	r3, r1
 80014c2:	807b      	strh	r3, [r7, #2]
 80014c4:	4613      	mov	r3, r2
 80014c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014c8:	787b      	ldrb	r3, [r7, #1]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d003      	beq.n	80014d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014ce:	887a      	ldrh	r2, [r7, #2]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014d4:	e002      	b.n	80014dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014d6:	887a      	ldrh	r2, [r7, #2]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80014ec:	4b04      	ldr	r3, [pc, #16]	; (8001500 <HAL_PWREx_GetVoltageRange+0x18>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	40007000 	.word	0x40007000

08001504 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001512:	d130      	bne.n	8001576 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001514:	4b23      	ldr	r3, [pc, #140]	; (80015a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800151c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001520:	d038      	beq.n	8001594 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001522:	4b20      	ldr	r3, [pc, #128]	; (80015a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800152a:	4a1e      	ldr	r2, [pc, #120]	; (80015a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800152c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001530:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001532:	4b1d      	ldr	r3, [pc, #116]	; (80015a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2232      	movs	r2, #50	; 0x32
 8001538:	fb02 f303 	mul.w	r3, r2, r3
 800153c:	4a1b      	ldr	r2, [pc, #108]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800153e:	fba2 2303 	umull	r2, r3, r2, r3
 8001542:	0c9b      	lsrs	r3, r3, #18
 8001544:	3301      	adds	r3, #1
 8001546:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001548:	e002      	b.n	8001550 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	3b01      	subs	r3, #1
 800154e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001550:	4b14      	ldr	r3, [pc, #80]	; (80015a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001552:	695b      	ldr	r3, [r3, #20]
 8001554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001558:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800155c:	d102      	bne.n	8001564 <HAL_PWREx_ControlVoltageScaling+0x60>
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1f2      	bne.n	800154a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001564:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001566:	695b      	ldr	r3, [r3, #20]
 8001568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800156c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001570:	d110      	bne.n	8001594 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e00f      	b.n	8001596 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001576:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800157e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001582:	d007      	beq.n	8001594 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001584:	4b07      	ldr	r3, [pc, #28]	; (80015a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800158c:	4a05      	ldr	r2, [pc, #20]	; (80015a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800158e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001592:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3714      	adds	r7, #20
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	40007000 	.word	0x40007000
 80015a8:	20000000 	.word	0x20000000
 80015ac:	431bde83 	.word	0x431bde83

080015b0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b088      	sub	sp, #32
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d101      	bne.n	80015c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e3ca      	b.n	8001d58 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015c2:	4b97      	ldr	r3, [pc, #604]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f003 030c 	and.w	r3, r3, #12
 80015ca:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015cc:	4b94      	ldr	r3, [pc, #592]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	f003 0303 	and.w	r3, r3, #3
 80015d4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0310 	and.w	r3, r3, #16
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f000 80e4 	beq.w	80017ac <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d007      	beq.n	80015fa <HAL_RCC_OscConfig+0x4a>
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	2b0c      	cmp	r3, #12
 80015ee:	f040 808b 	bne.w	8001708 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	f040 8087 	bne.w	8001708 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015fa:	4b89      	ldr	r3, [pc, #548]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d005      	beq.n	8001612 <HAL_RCC_OscConfig+0x62>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d101      	bne.n	8001612 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e3a2      	b.n	8001d58 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a1a      	ldr	r2, [r3, #32]
 8001616:	4b82      	ldr	r3, [pc, #520]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0308 	and.w	r3, r3, #8
 800161e:	2b00      	cmp	r3, #0
 8001620:	d004      	beq.n	800162c <HAL_RCC_OscConfig+0x7c>
 8001622:	4b7f      	ldr	r3, [pc, #508]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800162a:	e005      	b.n	8001638 <HAL_RCC_OscConfig+0x88>
 800162c:	4b7c      	ldr	r3, [pc, #496]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 800162e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001632:	091b      	lsrs	r3, r3, #4
 8001634:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001638:	4293      	cmp	r3, r2
 800163a:	d223      	bcs.n	8001684 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a1b      	ldr	r3, [r3, #32]
 8001640:	4618      	mov	r0, r3
 8001642:	f000 fd55 	bl	80020f0 <RCC_SetFlashLatencyFromMSIRange>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e383      	b.n	8001d58 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001650:	4b73      	ldr	r3, [pc, #460]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a72      	ldr	r2, [pc, #456]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 8001656:	f043 0308 	orr.w	r3, r3, #8
 800165a:	6013      	str	r3, [r2, #0]
 800165c:	4b70      	ldr	r3, [pc, #448]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a1b      	ldr	r3, [r3, #32]
 8001668:	496d      	ldr	r1, [pc, #436]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 800166a:	4313      	orrs	r3, r2
 800166c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800166e:	4b6c      	ldr	r3, [pc, #432]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	021b      	lsls	r3, r3, #8
 800167c:	4968      	ldr	r1, [pc, #416]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 800167e:	4313      	orrs	r3, r2
 8001680:	604b      	str	r3, [r1, #4]
 8001682:	e025      	b.n	80016d0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001684:	4b66      	ldr	r3, [pc, #408]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a65      	ldr	r2, [pc, #404]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 800168a:	f043 0308 	orr.w	r3, r3, #8
 800168e:	6013      	str	r3, [r2, #0]
 8001690:	4b63      	ldr	r3, [pc, #396]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a1b      	ldr	r3, [r3, #32]
 800169c:	4960      	ldr	r1, [pc, #384]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 800169e:	4313      	orrs	r3, r2
 80016a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016a2:	4b5f      	ldr	r3, [pc, #380]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	021b      	lsls	r3, r3, #8
 80016b0:	495b      	ldr	r1, [pc, #364]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 80016b2:	4313      	orrs	r3, r2
 80016b4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d109      	bne.n	80016d0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a1b      	ldr	r3, [r3, #32]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f000 fd15 	bl	80020f0 <RCC_SetFlashLatencyFromMSIRange>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e343      	b.n	8001d58 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016d0:	f000 fc4a 	bl	8001f68 <HAL_RCC_GetSysClockFreq>
 80016d4:	4602      	mov	r2, r0
 80016d6:	4b52      	ldr	r3, [pc, #328]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	091b      	lsrs	r3, r3, #4
 80016dc:	f003 030f 	and.w	r3, r3, #15
 80016e0:	4950      	ldr	r1, [pc, #320]	; (8001824 <HAL_RCC_OscConfig+0x274>)
 80016e2:	5ccb      	ldrb	r3, [r1, r3]
 80016e4:	f003 031f 	and.w	r3, r3, #31
 80016e8:	fa22 f303 	lsr.w	r3, r2, r3
 80016ec:	4a4e      	ldr	r2, [pc, #312]	; (8001828 <HAL_RCC_OscConfig+0x278>)
 80016ee:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016f0:	4b4e      	ldr	r3, [pc, #312]	; (800182c <HAL_RCC_OscConfig+0x27c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff fbcf 	bl	8000e98 <HAL_InitTick>
 80016fa:	4603      	mov	r3, r0
 80016fc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d052      	beq.n	80017aa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001704:	7bfb      	ldrb	r3, [r7, #15]
 8001706:	e327      	b.n	8001d58 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d032      	beq.n	8001776 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001710:	4b43      	ldr	r3, [pc, #268]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a42      	ldr	r2, [pc, #264]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 8001716:	f043 0301 	orr.w	r3, r3, #1
 800171a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800171c:	f7ff fc0c 	bl	8000f38 <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001724:	f7ff fc08 	bl	8000f38 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b02      	cmp	r3, #2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e310      	b.n	8001d58 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001736:	4b3a      	ldr	r3, [pc, #232]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d0f0      	beq.n	8001724 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001742:	4b37      	ldr	r3, [pc, #220]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a36      	ldr	r2, [pc, #216]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 8001748:	f043 0308 	orr.w	r3, r3, #8
 800174c:	6013      	str	r3, [r2, #0]
 800174e:	4b34      	ldr	r3, [pc, #208]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a1b      	ldr	r3, [r3, #32]
 800175a:	4931      	ldr	r1, [pc, #196]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 800175c:	4313      	orrs	r3, r2
 800175e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001760:	4b2f      	ldr	r3, [pc, #188]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	69db      	ldr	r3, [r3, #28]
 800176c:	021b      	lsls	r3, r3, #8
 800176e:	492c      	ldr	r1, [pc, #176]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 8001770:	4313      	orrs	r3, r2
 8001772:	604b      	str	r3, [r1, #4]
 8001774:	e01a      	b.n	80017ac <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001776:	4b2a      	ldr	r3, [pc, #168]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a29      	ldr	r2, [pc, #164]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 800177c:	f023 0301 	bic.w	r3, r3, #1
 8001780:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001782:	f7ff fbd9 	bl	8000f38 <HAL_GetTick>
 8001786:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001788:	e008      	b.n	800179c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800178a:	f7ff fbd5 	bl	8000f38 <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e2dd      	b.n	8001d58 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800179c:	4b20      	ldr	r3, [pc, #128]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d1f0      	bne.n	800178a <HAL_RCC_OscConfig+0x1da>
 80017a8:	e000      	b.n	80017ac <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017aa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d074      	beq.n	80018a2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	2b08      	cmp	r3, #8
 80017bc:	d005      	beq.n	80017ca <HAL_RCC_OscConfig+0x21a>
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	2b0c      	cmp	r3, #12
 80017c2:	d10e      	bne.n	80017e2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	2b03      	cmp	r3, #3
 80017c8:	d10b      	bne.n	80017e2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ca:	4b15      	ldr	r3, [pc, #84]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d064      	beq.n	80018a0 <HAL_RCC_OscConfig+0x2f0>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d160      	bne.n	80018a0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e2ba      	b.n	8001d58 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ea:	d106      	bne.n	80017fa <HAL_RCC_OscConfig+0x24a>
 80017ec:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a0b      	ldr	r2, [pc, #44]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 80017f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017f6:	6013      	str	r3, [r2, #0]
 80017f8:	e026      	b.n	8001848 <HAL_RCC_OscConfig+0x298>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001802:	d115      	bne.n	8001830 <HAL_RCC_OscConfig+0x280>
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a05      	ldr	r2, [pc, #20]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 800180a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800180e:	6013      	str	r3, [r2, #0]
 8001810:	4b03      	ldr	r3, [pc, #12]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a02      	ldr	r2, [pc, #8]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 8001816:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800181a:	6013      	str	r3, [r2, #0]
 800181c:	e014      	b.n	8001848 <HAL_RCC_OscConfig+0x298>
 800181e:	bf00      	nop
 8001820:	40021000 	.word	0x40021000
 8001824:	08004858 	.word	0x08004858
 8001828:	20000000 	.word	0x20000000
 800182c:	20000004 	.word	0x20000004
 8001830:	4ba0      	ldr	r3, [pc, #640]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a9f      	ldr	r2, [pc, #636]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 8001836:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800183a:	6013      	str	r3, [r2, #0]
 800183c:	4b9d      	ldr	r3, [pc, #628]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a9c      	ldr	r2, [pc, #624]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 8001842:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001846:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d013      	beq.n	8001878 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001850:	f7ff fb72 	bl	8000f38 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001858:	f7ff fb6e 	bl	8000f38 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b64      	cmp	r3, #100	; 0x64
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e276      	b.n	8001d58 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800186a:	4b92      	ldr	r3, [pc, #584]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d0f0      	beq.n	8001858 <HAL_RCC_OscConfig+0x2a8>
 8001876:	e014      	b.n	80018a2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001878:	f7ff fb5e 	bl	8000f38 <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001880:	f7ff fb5a 	bl	8000f38 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b64      	cmp	r3, #100	; 0x64
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e262      	b.n	8001d58 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001892:	4b88      	ldr	r3, [pc, #544]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1f0      	bne.n	8001880 <HAL_RCC_OscConfig+0x2d0>
 800189e:	e000      	b.n	80018a2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d060      	beq.n	8001970 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	2b04      	cmp	r3, #4
 80018b2:	d005      	beq.n	80018c0 <HAL_RCC_OscConfig+0x310>
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	2b0c      	cmp	r3, #12
 80018b8:	d119      	bne.n	80018ee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d116      	bne.n	80018ee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018c0:	4b7c      	ldr	r3, [pc, #496]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d005      	beq.n	80018d8 <HAL_RCC_OscConfig+0x328>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d101      	bne.n	80018d8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e23f      	b.n	8001d58 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d8:	4b76      	ldr	r3, [pc, #472]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	691b      	ldr	r3, [r3, #16]
 80018e4:	061b      	lsls	r3, r3, #24
 80018e6:	4973      	ldr	r1, [pc, #460]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018ec:	e040      	b.n	8001970 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d023      	beq.n	800193e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018f6:	4b6f      	ldr	r3, [pc, #444]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a6e      	ldr	r2, [pc, #440]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 80018fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001900:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001902:	f7ff fb19 	bl	8000f38 <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001908:	e008      	b.n	800191c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800190a:	f7ff fb15 	bl	8000f38 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e21d      	b.n	8001d58 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800191c:	4b65      	ldr	r3, [pc, #404]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0f0      	beq.n	800190a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001928:	4b62      	ldr	r3, [pc, #392]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	061b      	lsls	r3, r3, #24
 8001936:	495f      	ldr	r1, [pc, #380]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 8001938:	4313      	orrs	r3, r2
 800193a:	604b      	str	r3, [r1, #4]
 800193c:	e018      	b.n	8001970 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800193e:	4b5d      	ldr	r3, [pc, #372]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a5c      	ldr	r2, [pc, #368]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 8001944:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001948:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194a:	f7ff faf5 	bl	8000f38 <HAL_GetTick>
 800194e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001950:	e008      	b.n	8001964 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001952:	f7ff faf1 	bl	8000f38 <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e1f9      	b.n	8001d58 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001964:	4b53      	ldr	r3, [pc, #332]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800196c:	2b00      	cmp	r3, #0
 800196e:	d1f0      	bne.n	8001952 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0308 	and.w	r3, r3, #8
 8001978:	2b00      	cmp	r3, #0
 800197a:	d03c      	beq.n	80019f6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	695b      	ldr	r3, [r3, #20]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d01c      	beq.n	80019be <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001984:	4b4b      	ldr	r3, [pc, #300]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 8001986:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800198a:	4a4a      	ldr	r2, [pc, #296]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 800198c:	f043 0301 	orr.w	r3, r3, #1
 8001990:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001994:	f7ff fad0 	bl	8000f38 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800199c:	f7ff facc 	bl	8000f38 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e1d4      	b.n	8001d58 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019ae:	4b41      	ldr	r3, [pc, #260]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 80019b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d0ef      	beq.n	800199c <HAL_RCC_OscConfig+0x3ec>
 80019bc:	e01b      	b.n	80019f6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019be:	4b3d      	ldr	r3, [pc, #244]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 80019c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019c4:	4a3b      	ldr	r2, [pc, #236]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 80019c6:	f023 0301 	bic.w	r3, r3, #1
 80019ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ce:	f7ff fab3 	bl	8000f38 <HAL_GetTick>
 80019d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019d4:	e008      	b.n	80019e8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019d6:	f7ff faaf 	bl	8000f38 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e1b7      	b.n	8001d58 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019e8:	4b32      	ldr	r3, [pc, #200]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 80019ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1ef      	bne.n	80019d6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0304 	and.w	r3, r3, #4
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f000 80a6 	beq.w	8001b50 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a04:	2300      	movs	r3, #0
 8001a06:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a08:	4b2a      	ldr	r3, [pc, #168]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 8001a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d10d      	bne.n	8001a30 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a14:	4b27      	ldr	r3, [pc, #156]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 8001a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a18:	4a26      	ldr	r2, [pc, #152]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 8001a1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a1e:	6593      	str	r3, [r2, #88]	; 0x58
 8001a20:	4b24      	ldr	r3, [pc, #144]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 8001a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a30:	4b21      	ldr	r3, [pc, #132]	; (8001ab8 <HAL_RCC_OscConfig+0x508>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d118      	bne.n	8001a6e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a3c:	4b1e      	ldr	r3, [pc, #120]	; (8001ab8 <HAL_RCC_OscConfig+0x508>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a1d      	ldr	r2, [pc, #116]	; (8001ab8 <HAL_RCC_OscConfig+0x508>)
 8001a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a48:	f7ff fa76 	bl	8000f38 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a50:	f7ff fa72 	bl	8000f38 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e17a      	b.n	8001d58 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a62:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <HAL_RCC_OscConfig+0x508>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0f0      	beq.n	8001a50 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d108      	bne.n	8001a88 <HAL_RCC_OscConfig+0x4d8>
 8001a76:	4b0f      	ldr	r3, [pc, #60]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 8001a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a7c:	4a0d      	ldr	r2, [pc, #52]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 8001a7e:	f043 0301 	orr.w	r3, r3, #1
 8001a82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a86:	e029      	b.n	8001adc <HAL_RCC_OscConfig+0x52c>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	2b05      	cmp	r3, #5
 8001a8e:	d115      	bne.n	8001abc <HAL_RCC_OscConfig+0x50c>
 8001a90:	4b08      	ldr	r3, [pc, #32]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 8001a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a96:	4a07      	ldr	r2, [pc, #28]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 8001a98:	f043 0304 	orr.w	r3, r3, #4
 8001a9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001aa0:	4b04      	ldr	r3, [pc, #16]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 8001aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aa6:	4a03      	ldr	r2, [pc, #12]	; (8001ab4 <HAL_RCC_OscConfig+0x504>)
 8001aa8:	f043 0301 	orr.w	r3, r3, #1
 8001aac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ab0:	e014      	b.n	8001adc <HAL_RCC_OscConfig+0x52c>
 8001ab2:	bf00      	nop
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	40007000 	.word	0x40007000
 8001abc:	4b9c      	ldr	r3, [pc, #624]	; (8001d30 <HAL_RCC_OscConfig+0x780>)
 8001abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ac2:	4a9b      	ldr	r2, [pc, #620]	; (8001d30 <HAL_RCC_OscConfig+0x780>)
 8001ac4:	f023 0301 	bic.w	r3, r3, #1
 8001ac8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001acc:	4b98      	ldr	r3, [pc, #608]	; (8001d30 <HAL_RCC_OscConfig+0x780>)
 8001ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ad2:	4a97      	ldr	r2, [pc, #604]	; (8001d30 <HAL_RCC_OscConfig+0x780>)
 8001ad4:	f023 0304 	bic.w	r3, r3, #4
 8001ad8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d016      	beq.n	8001b12 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae4:	f7ff fa28 	bl	8000f38 <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aea:	e00a      	b.n	8001b02 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aec:	f7ff fa24 	bl	8000f38 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e12a      	b.n	8001d58 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b02:	4b8b      	ldr	r3, [pc, #556]	; (8001d30 <HAL_RCC_OscConfig+0x780>)
 8001b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d0ed      	beq.n	8001aec <HAL_RCC_OscConfig+0x53c>
 8001b10:	e015      	b.n	8001b3e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b12:	f7ff fa11 	bl	8000f38 <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b18:	e00a      	b.n	8001b30 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b1a:	f7ff fa0d 	bl	8000f38 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e113      	b.n	8001d58 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b30:	4b7f      	ldr	r3, [pc, #508]	; (8001d30 <HAL_RCC_OscConfig+0x780>)
 8001b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1ed      	bne.n	8001b1a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b3e:	7ffb      	ldrb	r3, [r7, #31]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d105      	bne.n	8001b50 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b44:	4b7a      	ldr	r3, [pc, #488]	; (8001d30 <HAL_RCC_OscConfig+0x780>)
 8001b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b48:	4a79      	ldr	r2, [pc, #484]	; (8001d30 <HAL_RCC_OscConfig+0x780>)
 8001b4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b4e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	f000 80fe 	beq.w	8001d56 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	f040 80d0 	bne.w	8001d04 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b64:	4b72      	ldr	r3, [pc, #456]	; (8001d30 <HAL_RCC_OscConfig+0x780>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	f003 0203 	and.w	r2, r3, #3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d130      	bne.n	8001bda <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	3b01      	subs	r3, #1
 8001b84:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d127      	bne.n	8001bda <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b94:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d11f      	bne.n	8001bda <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ba4:	2a07      	cmp	r2, #7
 8001ba6:	bf14      	ite	ne
 8001ba8:	2201      	movne	r2, #1
 8001baa:	2200      	moveq	r2, #0
 8001bac:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d113      	bne.n	8001bda <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bbc:	085b      	lsrs	r3, r3, #1
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d109      	bne.n	8001bda <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd0:	085b      	lsrs	r3, r3, #1
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d06e      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	2b0c      	cmp	r3, #12
 8001bde:	d069      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001be0:	4b53      	ldr	r3, [pc, #332]	; (8001d30 <HAL_RCC_OscConfig+0x780>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d105      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001bec:	4b50      	ldr	r3, [pc, #320]	; (8001d30 <HAL_RCC_OscConfig+0x780>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e0ad      	b.n	8001d58 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001bfc:	4b4c      	ldr	r3, [pc, #304]	; (8001d30 <HAL_RCC_OscConfig+0x780>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a4b      	ldr	r2, [pc, #300]	; (8001d30 <HAL_RCC_OscConfig+0x780>)
 8001c02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c06:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c08:	f7ff f996 	bl	8000f38 <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c10:	f7ff f992 	bl	8000f38 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e09a      	b.n	8001d58 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c22:	4b43      	ldr	r3, [pc, #268]	; (8001d30 <HAL_RCC_OscConfig+0x780>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1f0      	bne.n	8001c10 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c2e:	4b40      	ldr	r3, [pc, #256]	; (8001d30 <HAL_RCC_OscConfig+0x780>)
 8001c30:	68da      	ldr	r2, [r3, #12]
 8001c32:	4b40      	ldr	r3, [pc, #256]	; (8001d34 <HAL_RCC_OscConfig+0x784>)
 8001c34:	4013      	ands	r3, r2
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c3e:	3a01      	subs	r2, #1
 8001c40:	0112      	lsls	r2, r2, #4
 8001c42:	4311      	orrs	r1, r2
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c48:	0212      	lsls	r2, r2, #8
 8001c4a:	4311      	orrs	r1, r2
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c50:	0852      	lsrs	r2, r2, #1
 8001c52:	3a01      	subs	r2, #1
 8001c54:	0552      	lsls	r2, r2, #21
 8001c56:	4311      	orrs	r1, r2
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c5c:	0852      	lsrs	r2, r2, #1
 8001c5e:	3a01      	subs	r2, #1
 8001c60:	0652      	lsls	r2, r2, #25
 8001c62:	4311      	orrs	r1, r2
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c68:	0912      	lsrs	r2, r2, #4
 8001c6a:	0452      	lsls	r2, r2, #17
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	4930      	ldr	r1, [pc, #192]	; (8001d30 <HAL_RCC_OscConfig+0x780>)
 8001c70:	4313      	orrs	r3, r2
 8001c72:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c74:	4b2e      	ldr	r3, [pc, #184]	; (8001d30 <HAL_RCC_OscConfig+0x780>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a2d      	ldr	r2, [pc, #180]	; (8001d30 <HAL_RCC_OscConfig+0x780>)
 8001c7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c7e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c80:	4b2b      	ldr	r3, [pc, #172]	; (8001d30 <HAL_RCC_OscConfig+0x780>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	4a2a      	ldr	r2, [pc, #168]	; (8001d30 <HAL_RCC_OscConfig+0x780>)
 8001c86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c8a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c8c:	f7ff f954 	bl	8000f38 <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c94:	f7ff f950 	bl	8000f38 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e058      	b.n	8001d58 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ca6:	4b22      	ldr	r3, [pc, #136]	; (8001d30 <HAL_RCC_OscConfig+0x780>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d0f0      	beq.n	8001c94 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cb2:	e050      	b.n	8001d56 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e04f      	b.n	8001d58 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cb8:	4b1d      	ldr	r3, [pc, #116]	; (8001d30 <HAL_RCC_OscConfig+0x780>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d148      	bne.n	8001d56 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001cc4:	4b1a      	ldr	r3, [pc, #104]	; (8001d30 <HAL_RCC_OscConfig+0x780>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a19      	ldr	r2, [pc, #100]	; (8001d30 <HAL_RCC_OscConfig+0x780>)
 8001cca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cd0:	4b17      	ldr	r3, [pc, #92]	; (8001d30 <HAL_RCC_OscConfig+0x780>)
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	4a16      	ldr	r2, [pc, #88]	; (8001d30 <HAL_RCC_OscConfig+0x780>)
 8001cd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cda:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001cdc:	f7ff f92c 	bl	8000f38 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce4:	f7ff f928 	bl	8000f38 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e030      	b.n	8001d58 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cf6:	4b0e      	ldr	r3, [pc, #56]	; (8001d30 <HAL_RCC_OscConfig+0x780>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d0f0      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x734>
 8001d02:	e028      	b.n	8001d56 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	2b0c      	cmp	r3, #12
 8001d08:	d023      	beq.n	8001d52 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d0a:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <HAL_RCC_OscConfig+0x780>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a08      	ldr	r2, [pc, #32]	; (8001d30 <HAL_RCC_OscConfig+0x780>)
 8001d10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d16:	f7ff f90f 	bl	8000f38 <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d1c:	e00c      	b.n	8001d38 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d1e:	f7ff f90b 	bl	8000f38 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d905      	bls.n	8001d38 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e013      	b.n	8001d58 <HAL_RCC_OscConfig+0x7a8>
 8001d30:	40021000 	.word	0x40021000
 8001d34:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d38:	4b09      	ldr	r3, [pc, #36]	; (8001d60 <HAL_RCC_OscConfig+0x7b0>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d1ec      	bne.n	8001d1e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d44:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <HAL_RCC_OscConfig+0x7b0>)
 8001d46:	68da      	ldr	r2, [r3, #12]
 8001d48:	4905      	ldr	r1, [pc, #20]	; (8001d60 <HAL_RCC_OscConfig+0x7b0>)
 8001d4a:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <HAL_RCC_OscConfig+0x7b4>)
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	60cb      	str	r3, [r1, #12]
 8001d50:	e001      	b.n	8001d56 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e000      	b.n	8001d58 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3720      	adds	r7, #32
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40021000 	.word	0x40021000
 8001d64:	feeefffc 	.word	0xfeeefffc

08001d68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d101      	bne.n	8001d7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e0e7      	b.n	8001f4c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d7c:	4b75      	ldr	r3, [pc, #468]	; (8001f54 <HAL_RCC_ClockConfig+0x1ec>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0307 	and.w	r3, r3, #7
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d910      	bls.n	8001dac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d8a:	4b72      	ldr	r3, [pc, #456]	; (8001f54 <HAL_RCC_ClockConfig+0x1ec>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f023 0207 	bic.w	r2, r3, #7
 8001d92:	4970      	ldr	r1, [pc, #448]	; (8001f54 <HAL_RCC_ClockConfig+0x1ec>)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d9a:	4b6e      	ldr	r3, [pc, #440]	; (8001f54 <HAL_RCC_ClockConfig+0x1ec>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	683a      	ldr	r2, [r7, #0]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d001      	beq.n	8001dac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e0cf      	b.n	8001f4c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d010      	beq.n	8001dda <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689a      	ldr	r2, [r3, #8]
 8001dbc:	4b66      	ldr	r3, [pc, #408]	; (8001f58 <HAL_RCC_ClockConfig+0x1f0>)
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d908      	bls.n	8001dda <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dc8:	4b63      	ldr	r3, [pc, #396]	; (8001f58 <HAL_RCC_ClockConfig+0x1f0>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	4960      	ldr	r1, [pc, #384]	; (8001f58 <HAL_RCC_ClockConfig+0x1f0>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d04c      	beq.n	8001e80 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	2b03      	cmp	r3, #3
 8001dec:	d107      	bne.n	8001dfe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dee:	4b5a      	ldr	r3, [pc, #360]	; (8001f58 <HAL_RCC_ClockConfig+0x1f0>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d121      	bne.n	8001e3e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e0a6      	b.n	8001f4c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d107      	bne.n	8001e16 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e06:	4b54      	ldr	r3, [pc, #336]	; (8001f58 <HAL_RCC_ClockConfig+0x1f0>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d115      	bne.n	8001e3e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e09a      	b.n	8001f4c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d107      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e1e:	4b4e      	ldr	r3, [pc, #312]	; (8001f58 <HAL_RCC_ClockConfig+0x1f0>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d109      	bne.n	8001e3e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e08e      	b.n	8001f4c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e2e:	4b4a      	ldr	r3, [pc, #296]	; (8001f58 <HAL_RCC_ClockConfig+0x1f0>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e086      	b.n	8001f4c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e3e:	4b46      	ldr	r3, [pc, #280]	; (8001f58 <HAL_RCC_ClockConfig+0x1f0>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f023 0203 	bic.w	r2, r3, #3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	4943      	ldr	r1, [pc, #268]	; (8001f58 <HAL_RCC_ClockConfig+0x1f0>)
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e50:	f7ff f872 	bl	8000f38 <HAL_GetTick>
 8001e54:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e56:	e00a      	b.n	8001e6e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e58:	f7ff f86e 	bl	8000f38 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e06e      	b.n	8001f4c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e6e:	4b3a      	ldr	r3, [pc, #232]	; (8001f58 <HAL_RCC_ClockConfig+0x1f0>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 020c 	and.w	r2, r3, #12
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d1eb      	bne.n	8001e58 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d010      	beq.n	8001eae <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	4b31      	ldr	r3, [pc, #196]	; (8001f58 <HAL_RCC_ClockConfig+0x1f0>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d208      	bcs.n	8001eae <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e9c:	4b2e      	ldr	r3, [pc, #184]	; (8001f58 <HAL_RCC_ClockConfig+0x1f0>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	492b      	ldr	r1, [pc, #172]	; (8001f58 <HAL_RCC_ClockConfig+0x1f0>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001eae:	4b29      	ldr	r3, [pc, #164]	; (8001f54 <HAL_RCC_ClockConfig+0x1ec>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d210      	bcs.n	8001ede <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ebc:	4b25      	ldr	r3, [pc, #148]	; (8001f54 <HAL_RCC_ClockConfig+0x1ec>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f023 0207 	bic.w	r2, r3, #7
 8001ec4:	4923      	ldr	r1, [pc, #140]	; (8001f54 <HAL_RCC_ClockConfig+0x1ec>)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ecc:	4b21      	ldr	r3, [pc, #132]	; (8001f54 <HAL_RCC_ClockConfig+0x1ec>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0307 	and.w	r3, r3, #7
 8001ed4:	683a      	ldr	r2, [r7, #0]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d001      	beq.n	8001ede <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e036      	b.n	8001f4c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0304 	and.w	r3, r3, #4
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d008      	beq.n	8001efc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eea:	4b1b      	ldr	r3, [pc, #108]	; (8001f58 <HAL_RCC_ClockConfig+0x1f0>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	4918      	ldr	r1, [pc, #96]	; (8001f58 <HAL_RCC_ClockConfig+0x1f0>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0308 	and.w	r3, r3, #8
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d009      	beq.n	8001f1c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f08:	4b13      	ldr	r3, [pc, #76]	; (8001f58 <HAL_RCC_ClockConfig+0x1f0>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	4910      	ldr	r1, [pc, #64]	; (8001f58 <HAL_RCC_ClockConfig+0x1f0>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f1c:	f000 f824 	bl	8001f68 <HAL_RCC_GetSysClockFreq>
 8001f20:	4602      	mov	r2, r0
 8001f22:	4b0d      	ldr	r3, [pc, #52]	; (8001f58 <HAL_RCC_ClockConfig+0x1f0>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	091b      	lsrs	r3, r3, #4
 8001f28:	f003 030f 	and.w	r3, r3, #15
 8001f2c:	490b      	ldr	r1, [pc, #44]	; (8001f5c <HAL_RCC_ClockConfig+0x1f4>)
 8001f2e:	5ccb      	ldrb	r3, [r1, r3]
 8001f30:	f003 031f 	and.w	r3, r3, #31
 8001f34:	fa22 f303 	lsr.w	r3, r2, r3
 8001f38:	4a09      	ldr	r2, [pc, #36]	; (8001f60 <HAL_RCC_ClockConfig+0x1f8>)
 8001f3a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f3c:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <HAL_RCC_ClockConfig+0x1fc>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7fe ffa9 	bl	8000e98 <HAL_InitTick>
 8001f46:	4603      	mov	r3, r0
 8001f48:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f4a:	7afb      	ldrb	r3, [r7, #11]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3710      	adds	r7, #16
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40022000 	.word	0x40022000
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	08004858 	.word	0x08004858
 8001f60:	20000000 	.word	0x20000000
 8001f64:	20000004 	.word	0x20000004

08001f68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b089      	sub	sp, #36	; 0x24
 8001f6c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	61fb      	str	r3, [r7, #28]
 8001f72:	2300      	movs	r3, #0
 8001f74:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f76:	4b3e      	ldr	r3, [pc, #248]	; (8002070 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f003 030c 	and.w	r3, r3, #12
 8001f7e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f80:	4b3b      	ldr	r3, [pc, #236]	; (8002070 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	f003 0303 	and.w	r3, r3, #3
 8001f88:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d005      	beq.n	8001f9c <HAL_RCC_GetSysClockFreq+0x34>
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	2b0c      	cmp	r3, #12
 8001f94:	d121      	bne.n	8001fda <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d11e      	bne.n	8001fda <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f9c:	4b34      	ldr	r3, [pc, #208]	; (8002070 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0308 	and.w	r3, r3, #8
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d107      	bne.n	8001fb8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001fa8:	4b31      	ldr	r3, [pc, #196]	; (8002070 <HAL_RCC_GetSysClockFreq+0x108>)
 8001faa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fae:	0a1b      	lsrs	r3, r3, #8
 8001fb0:	f003 030f 	and.w	r3, r3, #15
 8001fb4:	61fb      	str	r3, [r7, #28]
 8001fb6:	e005      	b.n	8001fc4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001fb8:	4b2d      	ldr	r3, [pc, #180]	; (8002070 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	091b      	lsrs	r3, r3, #4
 8001fbe:	f003 030f 	and.w	r3, r3, #15
 8001fc2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001fc4:	4a2b      	ldr	r2, [pc, #172]	; (8002074 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fcc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d10d      	bne.n	8001ff0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fd8:	e00a      	b.n	8001ff0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	2b04      	cmp	r3, #4
 8001fde:	d102      	bne.n	8001fe6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fe0:	4b25      	ldr	r3, [pc, #148]	; (8002078 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fe2:	61bb      	str	r3, [r7, #24]
 8001fe4:	e004      	b.n	8001ff0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	2b08      	cmp	r3, #8
 8001fea:	d101      	bne.n	8001ff0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fec:	4b23      	ldr	r3, [pc, #140]	; (800207c <HAL_RCC_GetSysClockFreq+0x114>)
 8001fee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	2b0c      	cmp	r3, #12
 8001ff4:	d134      	bne.n	8002060 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ff6:	4b1e      	ldr	r3, [pc, #120]	; (8002070 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	f003 0303 	and.w	r3, r3, #3
 8001ffe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	2b02      	cmp	r3, #2
 8002004:	d003      	beq.n	800200e <HAL_RCC_GetSysClockFreq+0xa6>
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	2b03      	cmp	r3, #3
 800200a:	d003      	beq.n	8002014 <HAL_RCC_GetSysClockFreq+0xac>
 800200c:	e005      	b.n	800201a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800200e:	4b1a      	ldr	r3, [pc, #104]	; (8002078 <HAL_RCC_GetSysClockFreq+0x110>)
 8002010:	617b      	str	r3, [r7, #20]
      break;
 8002012:	e005      	b.n	8002020 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002014:	4b19      	ldr	r3, [pc, #100]	; (800207c <HAL_RCC_GetSysClockFreq+0x114>)
 8002016:	617b      	str	r3, [r7, #20]
      break;
 8002018:	e002      	b.n	8002020 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	617b      	str	r3, [r7, #20]
      break;
 800201e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002020:	4b13      	ldr	r3, [pc, #76]	; (8002070 <HAL_RCC_GetSysClockFreq+0x108>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	091b      	lsrs	r3, r3, #4
 8002026:	f003 0307 	and.w	r3, r3, #7
 800202a:	3301      	adds	r3, #1
 800202c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800202e:	4b10      	ldr	r3, [pc, #64]	; (8002070 <HAL_RCC_GetSysClockFreq+0x108>)
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	0a1b      	lsrs	r3, r3, #8
 8002034:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002038:	697a      	ldr	r2, [r7, #20]
 800203a:	fb03 f202 	mul.w	r2, r3, r2
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	fbb2 f3f3 	udiv	r3, r2, r3
 8002044:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002046:	4b0a      	ldr	r3, [pc, #40]	; (8002070 <HAL_RCC_GetSysClockFreq+0x108>)
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	0e5b      	lsrs	r3, r3, #25
 800204c:	f003 0303 	and.w	r3, r3, #3
 8002050:	3301      	adds	r3, #1
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	fbb2 f3f3 	udiv	r3, r2, r3
 800205e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002060:	69bb      	ldr	r3, [r7, #24]
}
 8002062:	4618      	mov	r0, r3
 8002064:	3724      	adds	r7, #36	; 0x24
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	40021000 	.word	0x40021000
 8002074:	08004870 	.word	0x08004870
 8002078:	00f42400 	.word	0x00f42400
 800207c:	007a1200 	.word	0x007a1200

08002080 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002084:	4b03      	ldr	r3, [pc, #12]	; (8002094 <HAL_RCC_GetHCLKFreq+0x14>)
 8002086:	681b      	ldr	r3, [r3, #0]
}
 8002088:	4618      	mov	r0, r3
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	20000000 	.word	0x20000000

08002098 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800209c:	f7ff fff0 	bl	8002080 <HAL_RCC_GetHCLKFreq>
 80020a0:	4602      	mov	r2, r0
 80020a2:	4b06      	ldr	r3, [pc, #24]	; (80020bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	0a1b      	lsrs	r3, r3, #8
 80020a8:	f003 0307 	and.w	r3, r3, #7
 80020ac:	4904      	ldr	r1, [pc, #16]	; (80020c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020ae:	5ccb      	ldrb	r3, [r1, r3]
 80020b0:	f003 031f 	and.w	r3, r3, #31
 80020b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40021000 	.word	0x40021000
 80020c0:	08004868 	.word	0x08004868

080020c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020c8:	f7ff ffda 	bl	8002080 <HAL_RCC_GetHCLKFreq>
 80020cc:	4602      	mov	r2, r0
 80020ce:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	0adb      	lsrs	r3, r3, #11
 80020d4:	f003 0307 	and.w	r3, r3, #7
 80020d8:	4904      	ldr	r1, [pc, #16]	; (80020ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80020da:	5ccb      	ldrb	r3, [r1, r3]
 80020dc:	f003 031f 	and.w	r3, r3, #31
 80020e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40021000 	.word	0x40021000
 80020ec:	08004868 	.word	0x08004868

080020f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80020f8:	2300      	movs	r3, #0
 80020fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80020fc:	4b2a      	ldr	r3, [pc, #168]	; (80021a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d003      	beq.n	8002110 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002108:	f7ff f9ee 	bl	80014e8 <HAL_PWREx_GetVoltageRange>
 800210c:	6178      	str	r0, [r7, #20]
 800210e:	e014      	b.n	800213a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002110:	4b25      	ldr	r3, [pc, #148]	; (80021a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002114:	4a24      	ldr	r2, [pc, #144]	; (80021a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002116:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800211a:	6593      	str	r3, [r2, #88]	; 0x58
 800211c:	4b22      	ldr	r3, [pc, #136]	; (80021a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800211e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002128:	f7ff f9de 	bl	80014e8 <HAL_PWREx_GetVoltageRange>
 800212c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800212e:	4b1e      	ldr	r3, [pc, #120]	; (80021a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002132:	4a1d      	ldr	r2, [pc, #116]	; (80021a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002134:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002138:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002140:	d10b      	bne.n	800215a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b80      	cmp	r3, #128	; 0x80
 8002146:	d919      	bls.n	800217c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2ba0      	cmp	r3, #160	; 0xa0
 800214c:	d902      	bls.n	8002154 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800214e:	2302      	movs	r3, #2
 8002150:	613b      	str	r3, [r7, #16]
 8002152:	e013      	b.n	800217c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002154:	2301      	movs	r3, #1
 8002156:	613b      	str	r3, [r7, #16]
 8002158:	e010      	b.n	800217c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2b80      	cmp	r3, #128	; 0x80
 800215e:	d902      	bls.n	8002166 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002160:	2303      	movs	r3, #3
 8002162:	613b      	str	r3, [r7, #16]
 8002164:	e00a      	b.n	800217c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2b80      	cmp	r3, #128	; 0x80
 800216a:	d102      	bne.n	8002172 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800216c:	2302      	movs	r3, #2
 800216e:	613b      	str	r3, [r7, #16]
 8002170:	e004      	b.n	800217c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2b70      	cmp	r3, #112	; 0x70
 8002176:	d101      	bne.n	800217c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002178:	2301      	movs	r3, #1
 800217a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800217c:	4b0b      	ldr	r3, [pc, #44]	; (80021ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f023 0207 	bic.w	r2, r3, #7
 8002184:	4909      	ldr	r1, [pc, #36]	; (80021ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	4313      	orrs	r3, r2
 800218a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800218c:	4b07      	ldr	r3, [pc, #28]	; (80021ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	429a      	cmp	r2, r3
 8002198:	d001      	beq.n	800219e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e000      	b.n	80021a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3718      	adds	r7, #24
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	40021000 	.word	0x40021000
 80021ac:	40022000 	.word	0x40022000

080021b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80021b8:	2300      	movs	r3, #0
 80021ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021bc:	2300      	movs	r3, #0
 80021be:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d041      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021d4:	d02a      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80021d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021da:	d824      	bhi.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80021dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021e0:	d008      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80021e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021e6:	d81e      	bhi.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d00a      	beq.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80021ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021f0:	d010      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80021f2:	e018      	b.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80021f4:	4b86      	ldr	r3, [pc, #536]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	4a85      	ldr	r2, [pc, #532]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021fe:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002200:	e015      	b.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	3304      	adds	r3, #4
 8002206:	2100      	movs	r1, #0
 8002208:	4618      	mov	r0, r3
 800220a:	f000 fabb 	bl	8002784 <RCCEx_PLLSAI1_Config>
 800220e:	4603      	mov	r3, r0
 8002210:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002212:	e00c      	b.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3320      	adds	r3, #32
 8002218:	2100      	movs	r1, #0
 800221a:	4618      	mov	r0, r3
 800221c:	f000 fba6 	bl	800296c <RCCEx_PLLSAI2_Config>
 8002220:	4603      	mov	r3, r0
 8002222:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002224:	e003      	b.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	74fb      	strb	r3, [r7, #19]
      break;
 800222a:	e000      	b.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800222c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800222e:	7cfb      	ldrb	r3, [r7, #19]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d10b      	bne.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002234:	4b76      	ldr	r3, [pc, #472]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800223a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002242:	4973      	ldr	r1, [pc, #460]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002244:	4313      	orrs	r3, r2
 8002246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800224a:	e001      	b.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800224c:	7cfb      	ldrb	r3, [r7, #19]
 800224e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d041      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002260:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002264:	d02a      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002266:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800226a:	d824      	bhi.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800226c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002270:	d008      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002272:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002276:	d81e      	bhi.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002278:	2b00      	cmp	r3, #0
 800227a:	d00a      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800227c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002280:	d010      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002282:	e018      	b.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002284:	4b62      	ldr	r3, [pc, #392]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	4a61      	ldr	r2, [pc, #388]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800228a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800228e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002290:	e015      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	3304      	adds	r3, #4
 8002296:	2100      	movs	r1, #0
 8002298:	4618      	mov	r0, r3
 800229a:	f000 fa73 	bl	8002784 <RCCEx_PLLSAI1_Config>
 800229e:	4603      	mov	r3, r0
 80022a0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022a2:	e00c      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	3320      	adds	r3, #32
 80022a8:	2100      	movs	r1, #0
 80022aa:	4618      	mov	r0, r3
 80022ac:	f000 fb5e 	bl	800296c <RCCEx_PLLSAI2_Config>
 80022b0:	4603      	mov	r3, r0
 80022b2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022b4:	e003      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	74fb      	strb	r3, [r7, #19]
      break;
 80022ba:	e000      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80022bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022be:	7cfb      	ldrb	r3, [r7, #19]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d10b      	bne.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80022c4:	4b52      	ldr	r3, [pc, #328]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022d2:	494f      	ldr	r1, [pc, #316]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80022da:	e001      	b.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022dc:	7cfb      	ldrb	r3, [r7, #19]
 80022de:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f000 80a0 	beq.w	800242e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ee:	2300      	movs	r3, #0
 80022f0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022f2:	4b47      	ldr	r3, [pc, #284]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80022fe:	2301      	movs	r3, #1
 8002300:	e000      	b.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002302:	2300      	movs	r3, #0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d00d      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002308:	4b41      	ldr	r3, [pc, #260]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800230a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800230c:	4a40      	ldr	r2, [pc, #256]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800230e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002312:	6593      	str	r3, [r2, #88]	; 0x58
 8002314:	4b3e      	ldr	r3, [pc, #248]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002318:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231c:	60bb      	str	r3, [r7, #8]
 800231e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002320:	2301      	movs	r3, #1
 8002322:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002324:	4b3b      	ldr	r3, [pc, #236]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a3a      	ldr	r2, [pc, #232]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800232a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800232e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002330:	f7fe fe02 	bl	8000f38 <HAL_GetTick>
 8002334:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002336:	e009      	b.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002338:	f7fe fdfe 	bl	8000f38 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d902      	bls.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	74fb      	strb	r3, [r7, #19]
        break;
 800234a:	e005      	b.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800234c:	4b31      	ldr	r3, [pc, #196]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002354:	2b00      	cmp	r3, #0
 8002356:	d0ef      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002358:	7cfb      	ldrb	r3, [r7, #19]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d15c      	bne.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800235e:	4b2c      	ldr	r3, [pc, #176]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002364:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002368:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d01f      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	429a      	cmp	r2, r3
 800237a:	d019      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800237c:	4b24      	ldr	r3, [pc, #144]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800237e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002382:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002386:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002388:	4b21      	ldr	r3, [pc, #132]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800238a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800238e:	4a20      	ldr	r2, [pc, #128]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002394:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002398:	4b1d      	ldr	r3, [pc, #116]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800239a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800239e:	4a1c      	ldr	r2, [pc, #112]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80023a8:	4a19      	ldr	r2, [pc, #100]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d016      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ba:	f7fe fdbd 	bl	8000f38 <HAL_GetTick>
 80023be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023c0:	e00b      	b.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023c2:	f7fe fdb9 	bl	8000f38 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d902      	bls.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	74fb      	strb	r3, [r7, #19]
            break;
 80023d8:	e006      	b.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023da:	4b0d      	ldr	r3, [pc, #52]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d0ec      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80023e8:	7cfb      	ldrb	r3, [r7, #19]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d10c      	bne.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023ee:	4b08      	ldr	r3, [pc, #32]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023fe:	4904      	ldr	r1, [pc, #16]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002400:	4313      	orrs	r3, r2
 8002402:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002406:	e009      	b.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002408:	7cfb      	ldrb	r3, [r7, #19]
 800240a:	74bb      	strb	r3, [r7, #18]
 800240c:	e006      	b.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800240e:	bf00      	nop
 8002410:	40021000 	.word	0x40021000
 8002414:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002418:	7cfb      	ldrb	r3, [r7, #19]
 800241a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800241c:	7c7b      	ldrb	r3, [r7, #17]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d105      	bne.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002422:	4b9e      	ldr	r3, [pc, #632]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002426:	4a9d      	ldr	r2, [pc, #628]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002428:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800242c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00a      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800243a:	4b98      	ldr	r3, [pc, #608]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800243c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002440:	f023 0203 	bic.w	r2, r3, #3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002448:	4994      	ldr	r1, [pc, #592]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800244a:	4313      	orrs	r3, r2
 800244c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00a      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800245c:	4b8f      	ldr	r3, [pc, #572]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800245e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002462:	f023 020c 	bic.w	r2, r3, #12
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800246a:	498c      	ldr	r1, [pc, #560]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800246c:	4313      	orrs	r3, r2
 800246e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0304 	and.w	r3, r3, #4
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00a      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800247e:	4b87      	ldr	r3, [pc, #540]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002484:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248c:	4983      	ldr	r1, [pc, #524]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800248e:	4313      	orrs	r3, r2
 8002490:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0308 	and.w	r3, r3, #8
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00a      	beq.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024a0:	4b7e      	ldr	r3, [pc, #504]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ae:	497b      	ldr	r1, [pc, #492]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0310 	and.w	r3, r3, #16
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d00a      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024c2:	4b76      	ldr	r3, [pc, #472]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024d0:	4972      	ldr	r1, [pc, #456]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0320 	and.w	r3, r3, #32
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00a      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024e4:	4b6d      	ldr	r3, [pc, #436]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f2:	496a      	ldr	r1, [pc, #424]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00a      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002506:	4b65      	ldr	r3, [pc, #404]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800250c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002514:	4961      	ldr	r1, [pc, #388]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002516:	4313      	orrs	r3, r2
 8002518:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002524:	2b00      	cmp	r3, #0
 8002526:	d00a      	beq.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002528:	4b5c      	ldr	r3, [pc, #368]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800252a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800252e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002536:	4959      	ldr	r1, [pc, #356]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002538:	4313      	orrs	r3, r2
 800253a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002546:	2b00      	cmp	r3, #0
 8002548:	d00a      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800254a:	4b54      	ldr	r3, [pc, #336]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800254c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002550:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002558:	4950      	ldr	r1, [pc, #320]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800255a:	4313      	orrs	r3, r2
 800255c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00a      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800256c:	4b4b      	ldr	r3, [pc, #300]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800256e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002572:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800257a:	4948      	ldr	r1, [pc, #288]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800257c:	4313      	orrs	r3, r2
 800257e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00a      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800258e:	4b43      	ldr	r3, [pc, #268]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002594:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800259c:	493f      	ldr	r1, [pc, #252]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d028      	beq.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025b0:	4b3a      	ldr	r3, [pc, #232]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025be:	4937      	ldr	r1, [pc, #220]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025ce:	d106      	bne.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025d0:	4b32      	ldr	r3, [pc, #200]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	4a31      	ldr	r2, [pc, #196]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025da:	60d3      	str	r3, [r2, #12]
 80025dc:	e011      	b.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025e6:	d10c      	bne.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	3304      	adds	r3, #4
 80025ec:	2101      	movs	r1, #1
 80025ee:	4618      	mov	r0, r3
 80025f0:	f000 f8c8 	bl	8002784 <RCCEx_PLLSAI1_Config>
 80025f4:	4603      	mov	r3, r0
 80025f6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80025f8:	7cfb      	ldrb	r3, [r7, #19]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80025fe:	7cfb      	ldrb	r3, [r7, #19]
 8002600:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d028      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800260e:	4b23      	ldr	r3, [pc, #140]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002614:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261c:	491f      	ldr	r1, [pc, #124]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800261e:	4313      	orrs	r3, r2
 8002620:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002628:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800262c:	d106      	bne.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800262e:	4b1b      	ldr	r3, [pc, #108]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	4a1a      	ldr	r2, [pc, #104]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002638:	60d3      	str	r3, [r2, #12]
 800263a:	e011      	b.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002640:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002644:	d10c      	bne.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	3304      	adds	r3, #4
 800264a:	2101      	movs	r1, #1
 800264c:	4618      	mov	r0, r3
 800264e:	f000 f899 	bl	8002784 <RCCEx_PLLSAI1_Config>
 8002652:	4603      	mov	r3, r0
 8002654:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002656:	7cfb      	ldrb	r3, [r7, #19]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800265c:	7cfb      	ldrb	r3, [r7, #19]
 800265e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d02b      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800266c:	4b0b      	ldr	r3, [pc, #44]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800266e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002672:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800267a:	4908      	ldr	r1, [pc, #32]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800267c:	4313      	orrs	r3, r2
 800267e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002686:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800268a:	d109      	bne.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800268c:	4b03      	ldr	r3, [pc, #12]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	4a02      	ldr	r2, [pc, #8]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002692:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002696:	60d3      	str	r3, [r2, #12]
 8002698:	e014      	b.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800269a:	bf00      	nop
 800269c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026a8:	d10c      	bne.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	3304      	adds	r3, #4
 80026ae:	2101      	movs	r1, #1
 80026b0:	4618      	mov	r0, r3
 80026b2:	f000 f867 	bl	8002784 <RCCEx_PLLSAI1_Config>
 80026b6:	4603      	mov	r3, r0
 80026b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026ba:	7cfb      	ldrb	r3, [r7, #19]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80026c0:	7cfb      	ldrb	r3, [r7, #19]
 80026c2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d02f      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026d0:	4b2b      	ldr	r3, [pc, #172]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026de:	4928      	ldr	r1, [pc, #160]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026ee:	d10d      	bne.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	3304      	adds	r3, #4
 80026f4:	2102      	movs	r1, #2
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 f844 	bl	8002784 <RCCEx_PLLSAI1_Config>
 80026fc:	4603      	mov	r3, r0
 80026fe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002700:	7cfb      	ldrb	r3, [r7, #19]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d014      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002706:	7cfb      	ldrb	r3, [r7, #19]
 8002708:	74bb      	strb	r3, [r7, #18]
 800270a:	e011      	b.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002710:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002714:	d10c      	bne.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	3320      	adds	r3, #32
 800271a:	2102      	movs	r1, #2
 800271c:	4618      	mov	r0, r3
 800271e:	f000 f925 	bl	800296c <RCCEx_PLLSAI2_Config>
 8002722:	4603      	mov	r3, r0
 8002724:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002726:	7cfb      	ldrb	r3, [r7, #19]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800272c:	7cfb      	ldrb	r3, [r7, #19]
 800272e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d00a      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800273c:	4b10      	ldr	r3, [pc, #64]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800273e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002742:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800274a:	490d      	ldr	r1, [pc, #52]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800274c:	4313      	orrs	r3, r2
 800274e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00b      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800275e:	4b08      	ldr	r3, [pc, #32]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002764:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800276e:	4904      	ldr	r1, [pc, #16]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002770:	4313      	orrs	r3, r2
 8002772:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002776:	7cbb      	ldrb	r3, [r7, #18]
}
 8002778:	4618      	mov	r0, r3
 800277a:	3718      	adds	r7, #24
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40021000 	.word	0x40021000

08002784 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800278e:	2300      	movs	r3, #0
 8002790:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002792:	4b75      	ldr	r3, [pc, #468]	; (8002968 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d018      	beq.n	80027d0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800279e:	4b72      	ldr	r3, [pc, #456]	; (8002968 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	f003 0203 	and.w	r2, r3, #3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d10d      	bne.n	80027ca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
       ||
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d009      	beq.n	80027ca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80027b6:	4b6c      	ldr	r3, [pc, #432]	; (8002968 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	091b      	lsrs	r3, r3, #4
 80027bc:	f003 0307 	and.w	r3, r3, #7
 80027c0:	1c5a      	adds	r2, r3, #1
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
       ||
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d047      	beq.n	800285a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	73fb      	strb	r3, [r7, #15]
 80027ce:	e044      	b.n	800285a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2b03      	cmp	r3, #3
 80027d6:	d018      	beq.n	800280a <RCCEx_PLLSAI1_Config+0x86>
 80027d8:	2b03      	cmp	r3, #3
 80027da:	d825      	bhi.n	8002828 <RCCEx_PLLSAI1_Config+0xa4>
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d002      	beq.n	80027e6 <RCCEx_PLLSAI1_Config+0x62>
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d009      	beq.n	80027f8 <RCCEx_PLLSAI1_Config+0x74>
 80027e4:	e020      	b.n	8002828 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027e6:	4b60      	ldr	r3, [pc, #384]	; (8002968 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d11d      	bne.n	800282e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027f6:	e01a      	b.n	800282e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027f8:	4b5b      	ldr	r3, [pc, #364]	; (8002968 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002800:	2b00      	cmp	r3, #0
 8002802:	d116      	bne.n	8002832 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002808:	e013      	b.n	8002832 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800280a:	4b57      	ldr	r3, [pc, #348]	; (8002968 <RCCEx_PLLSAI1_Config+0x1e4>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d10f      	bne.n	8002836 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002816:	4b54      	ldr	r3, [pc, #336]	; (8002968 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d109      	bne.n	8002836 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002826:	e006      	b.n	8002836 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	73fb      	strb	r3, [r7, #15]
      break;
 800282c:	e004      	b.n	8002838 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800282e:	bf00      	nop
 8002830:	e002      	b.n	8002838 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002832:	bf00      	nop
 8002834:	e000      	b.n	8002838 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002836:	bf00      	nop
    }

    if(status == HAL_OK)
 8002838:	7bfb      	ldrb	r3, [r7, #15]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10d      	bne.n	800285a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800283e:	4b4a      	ldr	r3, [pc, #296]	; (8002968 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6819      	ldr	r1, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	3b01      	subs	r3, #1
 8002850:	011b      	lsls	r3, r3, #4
 8002852:	430b      	orrs	r3, r1
 8002854:	4944      	ldr	r1, [pc, #272]	; (8002968 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002856:	4313      	orrs	r3, r2
 8002858:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800285a:	7bfb      	ldrb	r3, [r7, #15]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d17d      	bne.n	800295c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002860:	4b41      	ldr	r3, [pc, #260]	; (8002968 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a40      	ldr	r2, [pc, #256]	; (8002968 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002866:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800286a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800286c:	f7fe fb64 	bl	8000f38 <HAL_GetTick>
 8002870:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002872:	e009      	b.n	8002888 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002874:	f7fe fb60 	bl	8000f38 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d902      	bls.n	8002888 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	73fb      	strb	r3, [r7, #15]
        break;
 8002886:	e005      	b.n	8002894 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002888:	4b37      	ldr	r3, [pc, #220]	; (8002968 <RCCEx_PLLSAI1_Config+0x1e4>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1ef      	bne.n	8002874 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002894:	7bfb      	ldrb	r3, [r7, #15]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d160      	bne.n	800295c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d111      	bne.n	80028c4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028a0:	4b31      	ldr	r3, [pc, #196]	; (8002968 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80028a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	6892      	ldr	r2, [r2, #8]
 80028b0:	0211      	lsls	r1, r2, #8
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	68d2      	ldr	r2, [r2, #12]
 80028b6:	0912      	lsrs	r2, r2, #4
 80028b8:	0452      	lsls	r2, r2, #17
 80028ba:	430a      	orrs	r2, r1
 80028bc:	492a      	ldr	r1, [pc, #168]	; (8002968 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	610b      	str	r3, [r1, #16]
 80028c2:	e027      	b.n	8002914 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d112      	bne.n	80028f0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028ca:	4b27      	ldr	r3, [pc, #156]	; (8002968 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80028d2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	6892      	ldr	r2, [r2, #8]
 80028da:	0211      	lsls	r1, r2, #8
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	6912      	ldr	r2, [r2, #16]
 80028e0:	0852      	lsrs	r2, r2, #1
 80028e2:	3a01      	subs	r2, #1
 80028e4:	0552      	lsls	r2, r2, #21
 80028e6:	430a      	orrs	r2, r1
 80028e8:	491f      	ldr	r1, [pc, #124]	; (8002968 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	610b      	str	r3, [r1, #16]
 80028ee:	e011      	b.n	8002914 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028f0:	4b1d      	ldr	r3, [pc, #116]	; (8002968 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80028f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6892      	ldr	r2, [r2, #8]
 8002900:	0211      	lsls	r1, r2, #8
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	6952      	ldr	r2, [r2, #20]
 8002906:	0852      	lsrs	r2, r2, #1
 8002908:	3a01      	subs	r2, #1
 800290a:	0652      	lsls	r2, r2, #25
 800290c:	430a      	orrs	r2, r1
 800290e:	4916      	ldr	r1, [pc, #88]	; (8002968 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002910:	4313      	orrs	r3, r2
 8002912:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002914:	4b14      	ldr	r3, [pc, #80]	; (8002968 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a13      	ldr	r2, [pc, #76]	; (8002968 <RCCEx_PLLSAI1_Config+0x1e4>)
 800291a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800291e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002920:	f7fe fb0a 	bl	8000f38 <HAL_GetTick>
 8002924:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002926:	e009      	b.n	800293c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002928:	f7fe fb06 	bl	8000f38 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d902      	bls.n	800293c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	73fb      	strb	r3, [r7, #15]
          break;
 800293a:	e005      	b.n	8002948 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800293c:	4b0a      	ldr	r3, [pc, #40]	; (8002968 <RCCEx_PLLSAI1_Config+0x1e4>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d0ef      	beq.n	8002928 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002948:	7bfb      	ldrb	r3, [r7, #15]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d106      	bne.n	800295c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800294e:	4b06      	ldr	r3, [pc, #24]	; (8002968 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002950:	691a      	ldr	r2, [r3, #16]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	4904      	ldr	r1, [pc, #16]	; (8002968 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002958:	4313      	orrs	r3, r2
 800295a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800295c:	7bfb      	ldrb	r3, [r7, #15]
}
 800295e:	4618      	mov	r0, r3
 8002960:	3710      	adds	r7, #16
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	40021000 	.word	0x40021000

0800296c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002976:	2300      	movs	r3, #0
 8002978:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800297a:	4b6a      	ldr	r3, [pc, #424]	; (8002b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	f003 0303 	and.w	r3, r3, #3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d018      	beq.n	80029b8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002986:	4b67      	ldr	r3, [pc, #412]	; (8002b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	f003 0203 	and.w	r2, r3, #3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	429a      	cmp	r2, r3
 8002994:	d10d      	bne.n	80029b2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
       ||
 800299a:	2b00      	cmp	r3, #0
 800299c:	d009      	beq.n	80029b2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800299e:	4b61      	ldr	r3, [pc, #388]	; (8002b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	091b      	lsrs	r3, r3, #4
 80029a4:	f003 0307 	and.w	r3, r3, #7
 80029a8:	1c5a      	adds	r2, r3, #1
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
       ||
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d047      	beq.n	8002a42 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	73fb      	strb	r3, [r7, #15]
 80029b6:	e044      	b.n	8002a42 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2b03      	cmp	r3, #3
 80029be:	d018      	beq.n	80029f2 <RCCEx_PLLSAI2_Config+0x86>
 80029c0:	2b03      	cmp	r3, #3
 80029c2:	d825      	bhi.n	8002a10 <RCCEx_PLLSAI2_Config+0xa4>
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d002      	beq.n	80029ce <RCCEx_PLLSAI2_Config+0x62>
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d009      	beq.n	80029e0 <RCCEx_PLLSAI2_Config+0x74>
 80029cc:	e020      	b.n	8002a10 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029ce:	4b55      	ldr	r3, [pc, #340]	; (8002b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d11d      	bne.n	8002a16 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029de:	e01a      	b.n	8002a16 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029e0:	4b50      	ldr	r3, [pc, #320]	; (8002b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d116      	bne.n	8002a1a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029f0:	e013      	b.n	8002a1a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029f2:	4b4c      	ldr	r3, [pc, #304]	; (8002b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10f      	bne.n	8002a1e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029fe:	4b49      	ldr	r3, [pc, #292]	; (8002b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d109      	bne.n	8002a1e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a0e:	e006      	b.n	8002a1e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	73fb      	strb	r3, [r7, #15]
      break;
 8002a14:	e004      	b.n	8002a20 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a16:	bf00      	nop
 8002a18:	e002      	b.n	8002a20 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a1a:	bf00      	nop
 8002a1c:	e000      	b.n	8002a20 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a1e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a20:	7bfb      	ldrb	r3, [r7, #15]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10d      	bne.n	8002a42 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a26:	4b3f      	ldr	r3, [pc, #252]	; (8002b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6819      	ldr	r1, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	3b01      	subs	r3, #1
 8002a38:	011b      	lsls	r3, r3, #4
 8002a3a:	430b      	orrs	r3, r1
 8002a3c:	4939      	ldr	r1, [pc, #228]	; (8002b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a42:	7bfb      	ldrb	r3, [r7, #15]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d167      	bne.n	8002b18 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002a48:	4b36      	ldr	r3, [pc, #216]	; (8002b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a35      	ldr	r2, [pc, #212]	; (8002b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a54:	f7fe fa70 	bl	8000f38 <HAL_GetTick>
 8002a58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a5a:	e009      	b.n	8002a70 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a5c:	f7fe fa6c 	bl	8000f38 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d902      	bls.n	8002a70 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	73fb      	strb	r3, [r7, #15]
        break;
 8002a6e:	e005      	b.n	8002a7c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a70:	4b2c      	ldr	r3, [pc, #176]	; (8002b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1ef      	bne.n	8002a5c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a7c:	7bfb      	ldrb	r3, [r7, #15]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d14a      	bne.n	8002b18 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d111      	bne.n	8002aac <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a88:	4b26      	ldr	r3, [pc, #152]	; (8002b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a8a:	695b      	ldr	r3, [r3, #20]
 8002a8c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002a90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	6892      	ldr	r2, [r2, #8]
 8002a98:	0211      	lsls	r1, r2, #8
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	68d2      	ldr	r2, [r2, #12]
 8002a9e:	0912      	lsrs	r2, r2, #4
 8002aa0:	0452      	lsls	r2, r2, #17
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	491f      	ldr	r1, [pc, #124]	; (8002b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	614b      	str	r3, [r1, #20]
 8002aaa:	e011      	b.n	8002ad0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002aac:	4b1d      	ldr	r3, [pc, #116]	; (8002b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aae:	695b      	ldr	r3, [r3, #20]
 8002ab0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ab4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	6892      	ldr	r2, [r2, #8]
 8002abc:	0211      	lsls	r1, r2, #8
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	6912      	ldr	r2, [r2, #16]
 8002ac2:	0852      	lsrs	r2, r2, #1
 8002ac4:	3a01      	subs	r2, #1
 8002ac6:	0652      	lsls	r2, r2, #25
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	4916      	ldr	r1, [pc, #88]	; (8002b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ad0:	4b14      	ldr	r3, [pc, #80]	; (8002b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a13      	ldr	r2, [pc, #76]	; (8002b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ada:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002adc:	f7fe fa2c 	bl	8000f38 <HAL_GetTick>
 8002ae0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ae2:	e009      	b.n	8002af8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ae4:	f7fe fa28 	bl	8000f38 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d902      	bls.n	8002af8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	73fb      	strb	r3, [r7, #15]
          break;
 8002af6:	e005      	b.n	8002b04 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002af8:	4b0a      	ldr	r3, [pc, #40]	; (8002b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d0ef      	beq.n	8002ae4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002b04:	7bfb      	ldrb	r3, [r7, #15]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d106      	bne.n	8002b18 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002b0a:	4b06      	ldr	r3, [pc, #24]	; (8002b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b0c:	695a      	ldr	r2, [r3, #20]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	4904      	ldr	r1, [pc, #16]	; (8002b24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	40021000 	.word	0x40021000

08002b28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e095      	b.n	8002c66 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d108      	bne.n	8002b54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b4a:	d009      	beq.n	8002b60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	61da      	str	r2, [r3, #28]
 8002b52:	e005      	b.n	8002b60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d106      	bne.n	8002b80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7fe f832 	bl	8000be4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2202      	movs	r2, #2
 8002b84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b96:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ba0:	d902      	bls.n	8002ba8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60fb      	str	r3, [r7, #12]
 8002ba6:	e002      	b.n	8002bae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002ba8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002bb6:	d007      	beq.n	8002bc8 <HAL_SPI_Init+0xa0>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002bc0:	d002      	beq.n	8002bc8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	431a      	orrs	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	695b      	ldr	r3, [r3, #20]
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	431a      	orrs	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	69db      	ldr	r3, [r3, #28]
 8002bfc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c00:	431a      	orrs	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a1b      	ldr	r3, [r3, #32]
 8002c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c0a:	ea42 0103 	orr.w	r1, r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c12:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	0c1b      	lsrs	r3, r3, #16
 8002c24:	f003 0204 	and.w	r2, r3, #4
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2c:	f003 0310 	and.w	r3, r3, #16
 8002c30:	431a      	orrs	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c36:	f003 0308 	and.w	r3, r3, #8
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002c44:	ea42 0103 	orr.w	r1, r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	430a      	orrs	r2, r1
 8002c54:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b08a      	sub	sp, #40	; 0x28
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	60f8      	str	r0, [r7, #12]
 8002c76:	60b9      	str	r1, [r7, #8]
 8002c78:	607a      	str	r2, [r7, #4]
 8002c7a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002c80:	2300      	movs	r3, #0
 8002c82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d101      	bne.n	8002c94 <HAL_SPI_TransmitReceive+0x26>
 8002c90:	2302      	movs	r3, #2
 8002c92:	e20a      	b.n	80030aa <HAL_SPI_TransmitReceive+0x43c>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c9c:	f7fe f94c 	bl	8000f38 <HAL_GetTick>
 8002ca0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ca8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002cb0:	887b      	ldrh	r3, [r7, #2]
 8002cb2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002cb4:	887b      	ldrh	r3, [r7, #2]
 8002cb6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002cb8:	7efb      	ldrb	r3, [r7, #27]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d00e      	beq.n	8002cdc <HAL_SPI_TransmitReceive+0x6e>
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cc4:	d106      	bne.n	8002cd4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d102      	bne.n	8002cd4 <HAL_SPI_TransmitReceive+0x66>
 8002cce:	7efb      	ldrb	r3, [r7, #27]
 8002cd0:	2b04      	cmp	r3, #4
 8002cd2:	d003      	beq.n	8002cdc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002cda:	e1e0      	b.n	800309e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d005      	beq.n	8002cee <HAL_SPI_TransmitReceive+0x80>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d002      	beq.n	8002cee <HAL_SPI_TransmitReceive+0x80>
 8002ce8:	887b      	ldrh	r3, [r7, #2]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d103      	bne.n	8002cf6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002cf4:	e1d3      	b.n	800309e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b04      	cmp	r3, #4
 8002d00:	d003      	beq.n	8002d0a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2205      	movs	r2, #5
 8002d06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	887a      	ldrh	r2, [r7, #2]
 8002d1a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	887a      	ldrh	r2, [r7, #2]
 8002d22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	68ba      	ldr	r2, [r7, #8]
 8002d2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	887a      	ldrh	r2, [r7, #2]
 8002d30:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	887a      	ldrh	r2, [r7, #2]
 8002d36:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2200      	movs	r2, #0
 8002d42:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d4c:	d802      	bhi.n	8002d54 <HAL_SPI_TransmitReceive+0xe6>
 8002d4e:	8a3b      	ldrh	r3, [r7, #16]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d908      	bls.n	8002d66 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d62:	605a      	str	r2, [r3, #4]
 8002d64:	e007      	b.n	8002d76 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	685a      	ldr	r2, [r3, #4]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d74:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d80:	2b40      	cmp	r3, #64	; 0x40
 8002d82:	d007      	beq.n	8002d94 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d9c:	f240 8081 	bls.w	8002ea2 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d002      	beq.n	8002dae <HAL_SPI_TransmitReceive+0x140>
 8002da8:	8a7b      	ldrh	r3, [r7, #18]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d16d      	bne.n	8002e8a <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db2:	881a      	ldrh	r2, [r3, #0]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dbe:	1c9a      	adds	r2, r3, #2
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002dd2:	e05a      	b.n	8002e8a <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d11b      	bne.n	8002e1a <HAL_SPI_TransmitReceive+0x1ac>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d016      	beq.n	8002e1a <HAL_SPI_TransmitReceive+0x1ac>
 8002dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d113      	bne.n	8002e1a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df6:	881a      	ldrh	r2, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e02:	1c9a      	adds	r2, r3, #2
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e16:	2300      	movs	r3, #0
 8002e18:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d11c      	bne.n	8002e62 <HAL_SPI_TransmitReceive+0x1f4>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d016      	beq.n	8002e62 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68da      	ldr	r2, [r3, #12]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	b292      	uxth	r2, r2
 8002e40:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	1c9a      	adds	r2, r3, #2
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	3b01      	subs	r3, #1
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002e62:	f7fe f869 	bl	8000f38 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d80b      	bhi.n	8002e8a <HAL_SPI_TransmitReceive+0x21c>
 8002e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e78:	d007      	beq.n	8002e8a <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8002e88:	e109      	b.n	800309e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d19f      	bne.n	8002dd4 <HAL_SPI_TransmitReceive+0x166>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d199      	bne.n	8002dd4 <HAL_SPI_TransmitReceive+0x166>
 8002ea0:	e0e3      	b.n	800306a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d003      	beq.n	8002eb2 <HAL_SPI_TransmitReceive+0x244>
 8002eaa:	8a7b      	ldrh	r3, [r7, #18]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	f040 80cf 	bne.w	8003050 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d912      	bls.n	8002ee2 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec0:	881a      	ldrh	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ecc:	1c9a      	adds	r2, r3, #2
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	3b02      	subs	r3, #2
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ee0:	e0b6      	b.n	8003050 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	330c      	adds	r3, #12
 8002eec:	7812      	ldrb	r2, [r2, #0]
 8002eee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef4:	1c5a      	adds	r2, r3, #1
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	3b01      	subs	r3, #1
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f08:	e0a2      	b.n	8003050 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d134      	bne.n	8002f82 <HAL_SPI_TransmitReceive+0x314>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d02f      	beq.n	8002f82 <HAL_SPI_TransmitReceive+0x314>
 8002f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d12c      	bne.n	8002f82 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d912      	bls.n	8002f58 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f36:	881a      	ldrh	r2, [r3, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f42:	1c9a      	adds	r2, r3, #2
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	3b02      	subs	r3, #2
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f56:	e012      	b.n	8002f7e <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	330c      	adds	r3, #12
 8002f62:	7812      	ldrb	r2, [r2, #0]
 8002f64:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6a:	1c5a      	adds	r2, r3, #1
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	3b01      	subs	r3, #1
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d148      	bne.n	8003022 <HAL_SPI_TransmitReceive+0x3b4>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d042      	beq.n	8003022 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d923      	bls.n	8002ff0 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68da      	ldr	r2, [r3, #12]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	b292      	uxth	r2, r2
 8002fb4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	1c9a      	adds	r2, r3, #2
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	3b02      	subs	r3, #2
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d81f      	bhi.n	800301e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002fec:	605a      	str	r2, [r3, #4]
 8002fee:	e016      	b.n	800301e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f103 020c 	add.w	r2, r3, #12
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffc:	7812      	ldrb	r2, [r2, #0]
 8002ffe:	b2d2      	uxtb	r2, r2
 8003000:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	1c5a      	adds	r2, r3, #1
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003012:	b29b      	uxth	r3, r3
 8003014:	3b01      	subs	r3, #1
 8003016:	b29a      	uxth	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800301e:	2301      	movs	r3, #1
 8003020:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003022:	f7fd ff89 	bl	8000f38 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800302e:	429a      	cmp	r2, r3
 8003030:	d803      	bhi.n	800303a <HAL_SPI_TransmitReceive+0x3cc>
 8003032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003038:	d102      	bne.n	8003040 <HAL_SPI_TransmitReceive+0x3d2>
 800303a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303c:	2b00      	cmp	r3, #0
 800303e:	d107      	bne.n	8003050 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800304e:	e026      	b.n	800309e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003054:	b29b      	uxth	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	f47f af57 	bne.w	8002f0a <HAL_SPI_TransmitReceive+0x29c>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003062:	b29b      	uxth	r3, r3
 8003064:	2b00      	cmp	r3, #0
 8003066:	f47f af50 	bne.w	8002f0a <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800306a:	69fa      	ldr	r2, [r7, #28]
 800306c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f000 f93e 	bl	80032f0 <SPI_EndRxTxTransaction>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d005      	beq.n	8003086 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2220      	movs	r2, #32
 8003084:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800308a:	2b00      	cmp	r3, #0
 800308c:	d003      	beq.n	8003096 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003094:	e003      	b.n	800309e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80030a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3728      	adds	r7, #40	; 0x28
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
	...

080030b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b088      	sub	sp, #32
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	603b      	str	r3, [r7, #0]
 80030c0:	4613      	mov	r3, r2
 80030c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80030c4:	f7fd ff38 	bl	8000f38 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030cc:	1a9b      	subs	r3, r3, r2
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	4413      	add	r3, r2
 80030d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80030d4:	f7fd ff30 	bl	8000f38 <HAL_GetTick>
 80030d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80030da:	4b39      	ldr	r3, [pc, #228]	; (80031c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	015b      	lsls	r3, r3, #5
 80030e0:	0d1b      	lsrs	r3, r3, #20
 80030e2:	69fa      	ldr	r2, [r7, #28]
 80030e4:	fb02 f303 	mul.w	r3, r2, r3
 80030e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030ea:	e054      	b.n	8003196 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f2:	d050      	beq.n	8003196 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80030f4:	f7fd ff20 	bl	8000f38 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	69fa      	ldr	r2, [r7, #28]
 8003100:	429a      	cmp	r2, r3
 8003102:	d902      	bls.n	800310a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d13d      	bne.n	8003186 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003118:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003122:	d111      	bne.n	8003148 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800312c:	d004      	beq.n	8003138 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003136:	d107      	bne.n	8003148 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003146:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003150:	d10f      	bne.n	8003172 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003160:	601a      	str	r2, [r3, #0]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003170:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e017      	b.n	80031b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d101      	bne.n	8003190 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800318c:	2300      	movs	r3, #0
 800318e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	3b01      	subs	r3, #1
 8003194:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	4013      	ands	r3, r2
 80031a0:	68ba      	ldr	r2, [r7, #8]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	bf0c      	ite	eq
 80031a6:	2301      	moveq	r3, #1
 80031a8:	2300      	movne	r3, #0
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	461a      	mov	r2, r3
 80031ae:	79fb      	ldrb	r3, [r7, #7]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d19b      	bne.n	80030ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3720      	adds	r7, #32
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	20000000 	.word	0x20000000

080031c4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b08a      	sub	sp, #40	; 0x28
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
 80031d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80031d2:	2300      	movs	r3, #0
 80031d4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80031d6:	f7fd feaf 	bl	8000f38 <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031de:	1a9b      	subs	r3, r3, r2
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	4413      	add	r3, r2
 80031e4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80031e6:	f7fd fea7 	bl	8000f38 <HAL_GetTick>
 80031ea:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	330c      	adds	r3, #12
 80031f2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80031f4:	4b3d      	ldr	r3, [pc, #244]	; (80032ec <SPI_WaitFifoStateUntilTimeout+0x128>)
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	4613      	mov	r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	4413      	add	r3, r2
 80031fe:	00da      	lsls	r2, r3, #3
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	0d1b      	lsrs	r3, r3, #20
 8003204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003206:	fb02 f303 	mul.w	r3, r2, r3
 800320a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800320c:	e060      	b.n	80032d0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003214:	d107      	bne.n	8003226 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d104      	bne.n	8003226 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	b2db      	uxtb	r3, r3
 8003222:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003224:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800322c:	d050      	beq.n	80032d0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800322e:	f7fd fe83 	bl	8000f38 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	6a3b      	ldr	r3, [r7, #32]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800323a:	429a      	cmp	r2, r3
 800323c:	d902      	bls.n	8003244 <SPI_WaitFifoStateUntilTimeout+0x80>
 800323e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003240:	2b00      	cmp	r3, #0
 8003242:	d13d      	bne.n	80032c0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	685a      	ldr	r2, [r3, #4]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003252:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800325c:	d111      	bne.n	8003282 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003266:	d004      	beq.n	8003272 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003270:	d107      	bne.n	8003282 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003280:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003286:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800328a:	d10f      	bne.n	80032ac <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032aa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e010      	b.n	80032e2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80032c6:	2300      	movs	r3, #0
 80032c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	3b01      	subs	r3, #1
 80032ce:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689a      	ldr	r2, [r3, #8]
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	4013      	ands	r3, r2
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d196      	bne.n	800320e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3728      	adds	r7, #40	; 0x28
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	20000000 	.word	0x20000000

080032f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af02      	add	r7, sp, #8
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	9300      	str	r3, [sp, #0]
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	2200      	movs	r2, #0
 8003304:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003308:	68f8      	ldr	r0, [r7, #12]
 800330a:	f7ff ff5b 	bl	80031c4 <SPI_WaitFifoStateUntilTimeout>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d007      	beq.n	8003324 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003318:	f043 0220 	orr.w	r2, r3, #32
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e027      	b.n	8003374 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	9300      	str	r3, [sp, #0]
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	2200      	movs	r2, #0
 800332c:	2180      	movs	r1, #128	; 0x80
 800332e:	68f8      	ldr	r0, [r7, #12]
 8003330:	f7ff fec0 	bl	80030b4 <SPI_WaitFlagStateUntilTimeout>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d007      	beq.n	800334a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800333e:	f043 0220 	orr.w	r2, r3, #32
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e014      	b.n	8003374 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	9300      	str	r3, [sp, #0]
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	2200      	movs	r2, #0
 8003352:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f7ff ff34 	bl	80031c4 <SPI_WaitFifoStateUntilTimeout>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d007      	beq.n	8003372 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003366:	f043 0220 	orr.w	r2, r3, #32
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e000      	b.n	8003374 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e040      	b.n	8003410 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003392:	2b00      	cmp	r3, #0
 8003394:	d106      	bne.n	80033a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7fd fc62 	bl	8000c68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2224      	movs	r2, #36	; 0x24
 80033a8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f022 0201 	bic.w	r2, r2, #1
 80033b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d002      	beq.n	80033c8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 fb6a 	bl	8003a9c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 f8af 	bl	800352c <UART_SetConfig>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d101      	bne.n	80033d8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e01b      	b.n	8003410 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689a      	ldr	r2, [r3, #8]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f042 0201 	orr.w	r2, r2, #1
 8003406:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 fbe9 	bl	8003be0 <UART_CheckIdleState>
 800340e:	4603      	mov	r3, r0
}
 8003410:	4618      	mov	r0, r3
 8003412:	3708      	adds	r7, #8
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b08a      	sub	sp, #40	; 0x28
 800341c:	af02      	add	r7, sp, #8
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	603b      	str	r3, [r7, #0]
 8003424:	4613      	mov	r3, r2
 8003426:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800342c:	2b20      	cmp	r3, #32
 800342e:	d178      	bne.n	8003522 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d002      	beq.n	800343c <HAL_UART_Transmit+0x24>
 8003436:	88fb      	ldrh	r3, [r7, #6]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d101      	bne.n	8003440 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e071      	b.n	8003524 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2221      	movs	r2, #33	; 0x21
 800344c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800344e:	f7fd fd73 	bl	8000f38 <HAL_GetTick>
 8003452:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	88fa      	ldrh	r2, [r7, #6]
 8003458:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	88fa      	ldrh	r2, [r7, #6]
 8003460:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800346c:	d108      	bne.n	8003480 <HAL_UART_Transmit+0x68>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d104      	bne.n	8003480 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003476:	2300      	movs	r3, #0
 8003478:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	61bb      	str	r3, [r7, #24]
 800347e:	e003      	b.n	8003488 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003484:	2300      	movs	r3, #0
 8003486:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003488:	e030      	b.n	80034ec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	9300      	str	r3, [sp, #0]
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	2200      	movs	r2, #0
 8003492:	2180      	movs	r1, #128	; 0x80
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f000 fc4b 	bl	8003d30 <UART_WaitOnFlagUntilTimeout>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d004      	beq.n	80034aa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2220      	movs	r2, #32
 80034a4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e03c      	b.n	8003524 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d10b      	bne.n	80034c8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	881a      	ldrh	r2, [r3, #0]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034bc:	b292      	uxth	r2, r2
 80034be:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	3302      	adds	r3, #2
 80034c4:	61bb      	str	r3, [r7, #24]
 80034c6:	e008      	b.n	80034da <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	781a      	ldrb	r2, [r3, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	b292      	uxth	r2, r2
 80034d2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	3301      	adds	r3, #1
 80034d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	3b01      	subs	r3, #1
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1c8      	bne.n	800348a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	9300      	str	r3, [sp, #0]
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	2200      	movs	r2, #0
 8003500:	2140      	movs	r1, #64	; 0x40
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 fc14 	bl	8003d30 <UART_WaitOnFlagUntilTimeout>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d004      	beq.n	8003518 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2220      	movs	r2, #32
 8003512:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e005      	b.n	8003524 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2220      	movs	r2, #32
 800351c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800351e:	2300      	movs	r3, #0
 8003520:	e000      	b.n	8003524 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003522:	2302      	movs	r3, #2
  }
}
 8003524:	4618      	mov	r0, r3
 8003526:	3720      	adds	r7, #32
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800352c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003530:	b08a      	sub	sp, #40	; 0x28
 8003532:	af00      	add	r7, sp, #0
 8003534:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003536:	2300      	movs	r3, #0
 8003538:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	689a      	ldr	r2, [r3, #8]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	431a      	orrs	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	431a      	orrs	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	69db      	ldr	r3, [r3, #28]
 8003550:	4313      	orrs	r3, r2
 8003552:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	4ba4      	ldr	r3, [pc, #656]	; (80037ec <UART_SetConfig+0x2c0>)
 800355c:	4013      	ands	r3, r2
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	6812      	ldr	r2, [r2, #0]
 8003562:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003564:	430b      	orrs	r3, r1
 8003566:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	68da      	ldr	r2, [r3, #12]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	430a      	orrs	r2, r1
 800357c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a99      	ldr	r2, [pc, #612]	; (80037f0 <UART_SetConfig+0x2c4>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d004      	beq.n	8003598 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003594:	4313      	orrs	r3, r2
 8003596:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035a8:	430a      	orrs	r2, r1
 80035aa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a90      	ldr	r2, [pc, #576]	; (80037f4 <UART_SetConfig+0x2c8>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d126      	bne.n	8003604 <UART_SetConfig+0xd8>
 80035b6:	4b90      	ldr	r3, [pc, #576]	; (80037f8 <UART_SetConfig+0x2cc>)
 80035b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035bc:	f003 0303 	and.w	r3, r3, #3
 80035c0:	2b03      	cmp	r3, #3
 80035c2:	d81b      	bhi.n	80035fc <UART_SetConfig+0xd0>
 80035c4:	a201      	add	r2, pc, #4	; (adr r2, 80035cc <UART_SetConfig+0xa0>)
 80035c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ca:	bf00      	nop
 80035cc:	080035dd 	.word	0x080035dd
 80035d0:	080035ed 	.word	0x080035ed
 80035d4:	080035e5 	.word	0x080035e5
 80035d8:	080035f5 	.word	0x080035f5
 80035dc:	2301      	movs	r3, #1
 80035de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035e2:	e116      	b.n	8003812 <UART_SetConfig+0x2e6>
 80035e4:	2302      	movs	r3, #2
 80035e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035ea:	e112      	b.n	8003812 <UART_SetConfig+0x2e6>
 80035ec:	2304      	movs	r3, #4
 80035ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035f2:	e10e      	b.n	8003812 <UART_SetConfig+0x2e6>
 80035f4:	2308      	movs	r3, #8
 80035f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035fa:	e10a      	b.n	8003812 <UART_SetConfig+0x2e6>
 80035fc:	2310      	movs	r3, #16
 80035fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003602:	e106      	b.n	8003812 <UART_SetConfig+0x2e6>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a7c      	ldr	r2, [pc, #496]	; (80037fc <UART_SetConfig+0x2d0>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d138      	bne.n	8003680 <UART_SetConfig+0x154>
 800360e:	4b7a      	ldr	r3, [pc, #488]	; (80037f8 <UART_SetConfig+0x2cc>)
 8003610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003614:	f003 030c 	and.w	r3, r3, #12
 8003618:	2b0c      	cmp	r3, #12
 800361a:	d82d      	bhi.n	8003678 <UART_SetConfig+0x14c>
 800361c:	a201      	add	r2, pc, #4	; (adr r2, 8003624 <UART_SetConfig+0xf8>)
 800361e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003622:	bf00      	nop
 8003624:	08003659 	.word	0x08003659
 8003628:	08003679 	.word	0x08003679
 800362c:	08003679 	.word	0x08003679
 8003630:	08003679 	.word	0x08003679
 8003634:	08003669 	.word	0x08003669
 8003638:	08003679 	.word	0x08003679
 800363c:	08003679 	.word	0x08003679
 8003640:	08003679 	.word	0x08003679
 8003644:	08003661 	.word	0x08003661
 8003648:	08003679 	.word	0x08003679
 800364c:	08003679 	.word	0x08003679
 8003650:	08003679 	.word	0x08003679
 8003654:	08003671 	.word	0x08003671
 8003658:	2300      	movs	r3, #0
 800365a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800365e:	e0d8      	b.n	8003812 <UART_SetConfig+0x2e6>
 8003660:	2302      	movs	r3, #2
 8003662:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003666:	e0d4      	b.n	8003812 <UART_SetConfig+0x2e6>
 8003668:	2304      	movs	r3, #4
 800366a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800366e:	e0d0      	b.n	8003812 <UART_SetConfig+0x2e6>
 8003670:	2308      	movs	r3, #8
 8003672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003676:	e0cc      	b.n	8003812 <UART_SetConfig+0x2e6>
 8003678:	2310      	movs	r3, #16
 800367a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800367e:	e0c8      	b.n	8003812 <UART_SetConfig+0x2e6>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a5e      	ldr	r2, [pc, #376]	; (8003800 <UART_SetConfig+0x2d4>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d125      	bne.n	80036d6 <UART_SetConfig+0x1aa>
 800368a:	4b5b      	ldr	r3, [pc, #364]	; (80037f8 <UART_SetConfig+0x2cc>)
 800368c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003690:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003694:	2b30      	cmp	r3, #48	; 0x30
 8003696:	d016      	beq.n	80036c6 <UART_SetConfig+0x19a>
 8003698:	2b30      	cmp	r3, #48	; 0x30
 800369a:	d818      	bhi.n	80036ce <UART_SetConfig+0x1a2>
 800369c:	2b20      	cmp	r3, #32
 800369e:	d00a      	beq.n	80036b6 <UART_SetConfig+0x18a>
 80036a0:	2b20      	cmp	r3, #32
 80036a2:	d814      	bhi.n	80036ce <UART_SetConfig+0x1a2>
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d002      	beq.n	80036ae <UART_SetConfig+0x182>
 80036a8:	2b10      	cmp	r3, #16
 80036aa:	d008      	beq.n	80036be <UART_SetConfig+0x192>
 80036ac:	e00f      	b.n	80036ce <UART_SetConfig+0x1a2>
 80036ae:	2300      	movs	r3, #0
 80036b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036b4:	e0ad      	b.n	8003812 <UART_SetConfig+0x2e6>
 80036b6:	2302      	movs	r3, #2
 80036b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036bc:	e0a9      	b.n	8003812 <UART_SetConfig+0x2e6>
 80036be:	2304      	movs	r3, #4
 80036c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036c4:	e0a5      	b.n	8003812 <UART_SetConfig+0x2e6>
 80036c6:	2308      	movs	r3, #8
 80036c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036cc:	e0a1      	b.n	8003812 <UART_SetConfig+0x2e6>
 80036ce:	2310      	movs	r3, #16
 80036d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036d4:	e09d      	b.n	8003812 <UART_SetConfig+0x2e6>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a4a      	ldr	r2, [pc, #296]	; (8003804 <UART_SetConfig+0x2d8>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d125      	bne.n	800372c <UART_SetConfig+0x200>
 80036e0:	4b45      	ldr	r3, [pc, #276]	; (80037f8 <UART_SetConfig+0x2cc>)
 80036e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80036ea:	2bc0      	cmp	r3, #192	; 0xc0
 80036ec:	d016      	beq.n	800371c <UART_SetConfig+0x1f0>
 80036ee:	2bc0      	cmp	r3, #192	; 0xc0
 80036f0:	d818      	bhi.n	8003724 <UART_SetConfig+0x1f8>
 80036f2:	2b80      	cmp	r3, #128	; 0x80
 80036f4:	d00a      	beq.n	800370c <UART_SetConfig+0x1e0>
 80036f6:	2b80      	cmp	r3, #128	; 0x80
 80036f8:	d814      	bhi.n	8003724 <UART_SetConfig+0x1f8>
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d002      	beq.n	8003704 <UART_SetConfig+0x1d8>
 80036fe:	2b40      	cmp	r3, #64	; 0x40
 8003700:	d008      	beq.n	8003714 <UART_SetConfig+0x1e8>
 8003702:	e00f      	b.n	8003724 <UART_SetConfig+0x1f8>
 8003704:	2300      	movs	r3, #0
 8003706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800370a:	e082      	b.n	8003812 <UART_SetConfig+0x2e6>
 800370c:	2302      	movs	r3, #2
 800370e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003712:	e07e      	b.n	8003812 <UART_SetConfig+0x2e6>
 8003714:	2304      	movs	r3, #4
 8003716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800371a:	e07a      	b.n	8003812 <UART_SetConfig+0x2e6>
 800371c:	2308      	movs	r3, #8
 800371e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003722:	e076      	b.n	8003812 <UART_SetConfig+0x2e6>
 8003724:	2310      	movs	r3, #16
 8003726:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800372a:	e072      	b.n	8003812 <UART_SetConfig+0x2e6>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a35      	ldr	r2, [pc, #212]	; (8003808 <UART_SetConfig+0x2dc>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d12a      	bne.n	800378c <UART_SetConfig+0x260>
 8003736:	4b30      	ldr	r3, [pc, #192]	; (80037f8 <UART_SetConfig+0x2cc>)
 8003738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800373c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003740:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003744:	d01a      	beq.n	800377c <UART_SetConfig+0x250>
 8003746:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800374a:	d81b      	bhi.n	8003784 <UART_SetConfig+0x258>
 800374c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003750:	d00c      	beq.n	800376c <UART_SetConfig+0x240>
 8003752:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003756:	d815      	bhi.n	8003784 <UART_SetConfig+0x258>
 8003758:	2b00      	cmp	r3, #0
 800375a:	d003      	beq.n	8003764 <UART_SetConfig+0x238>
 800375c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003760:	d008      	beq.n	8003774 <UART_SetConfig+0x248>
 8003762:	e00f      	b.n	8003784 <UART_SetConfig+0x258>
 8003764:	2300      	movs	r3, #0
 8003766:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800376a:	e052      	b.n	8003812 <UART_SetConfig+0x2e6>
 800376c:	2302      	movs	r3, #2
 800376e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003772:	e04e      	b.n	8003812 <UART_SetConfig+0x2e6>
 8003774:	2304      	movs	r3, #4
 8003776:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800377a:	e04a      	b.n	8003812 <UART_SetConfig+0x2e6>
 800377c:	2308      	movs	r3, #8
 800377e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003782:	e046      	b.n	8003812 <UART_SetConfig+0x2e6>
 8003784:	2310      	movs	r3, #16
 8003786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800378a:	e042      	b.n	8003812 <UART_SetConfig+0x2e6>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a17      	ldr	r2, [pc, #92]	; (80037f0 <UART_SetConfig+0x2c4>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d13a      	bne.n	800380c <UART_SetConfig+0x2e0>
 8003796:	4b18      	ldr	r3, [pc, #96]	; (80037f8 <UART_SetConfig+0x2cc>)
 8003798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800379c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80037a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037a4:	d01a      	beq.n	80037dc <UART_SetConfig+0x2b0>
 80037a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037aa:	d81b      	bhi.n	80037e4 <UART_SetConfig+0x2b8>
 80037ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037b0:	d00c      	beq.n	80037cc <UART_SetConfig+0x2a0>
 80037b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037b6:	d815      	bhi.n	80037e4 <UART_SetConfig+0x2b8>
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d003      	beq.n	80037c4 <UART_SetConfig+0x298>
 80037bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037c0:	d008      	beq.n	80037d4 <UART_SetConfig+0x2a8>
 80037c2:	e00f      	b.n	80037e4 <UART_SetConfig+0x2b8>
 80037c4:	2300      	movs	r3, #0
 80037c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ca:	e022      	b.n	8003812 <UART_SetConfig+0x2e6>
 80037cc:	2302      	movs	r3, #2
 80037ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037d2:	e01e      	b.n	8003812 <UART_SetConfig+0x2e6>
 80037d4:	2304      	movs	r3, #4
 80037d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037da:	e01a      	b.n	8003812 <UART_SetConfig+0x2e6>
 80037dc:	2308      	movs	r3, #8
 80037de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037e2:	e016      	b.n	8003812 <UART_SetConfig+0x2e6>
 80037e4:	2310      	movs	r3, #16
 80037e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ea:	e012      	b.n	8003812 <UART_SetConfig+0x2e6>
 80037ec:	efff69f3 	.word	0xefff69f3
 80037f0:	40008000 	.word	0x40008000
 80037f4:	40013800 	.word	0x40013800
 80037f8:	40021000 	.word	0x40021000
 80037fc:	40004400 	.word	0x40004400
 8003800:	40004800 	.word	0x40004800
 8003804:	40004c00 	.word	0x40004c00
 8003808:	40005000 	.word	0x40005000
 800380c:	2310      	movs	r3, #16
 800380e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a9f      	ldr	r2, [pc, #636]	; (8003a94 <UART_SetConfig+0x568>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d17a      	bne.n	8003912 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800381c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003820:	2b08      	cmp	r3, #8
 8003822:	d824      	bhi.n	800386e <UART_SetConfig+0x342>
 8003824:	a201      	add	r2, pc, #4	; (adr r2, 800382c <UART_SetConfig+0x300>)
 8003826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800382a:	bf00      	nop
 800382c:	08003851 	.word	0x08003851
 8003830:	0800386f 	.word	0x0800386f
 8003834:	08003859 	.word	0x08003859
 8003838:	0800386f 	.word	0x0800386f
 800383c:	0800385f 	.word	0x0800385f
 8003840:	0800386f 	.word	0x0800386f
 8003844:	0800386f 	.word	0x0800386f
 8003848:	0800386f 	.word	0x0800386f
 800384c:	08003867 	.word	0x08003867
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003850:	f7fe fc22 	bl	8002098 <HAL_RCC_GetPCLK1Freq>
 8003854:	61f8      	str	r0, [r7, #28]
        break;
 8003856:	e010      	b.n	800387a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003858:	4b8f      	ldr	r3, [pc, #572]	; (8003a98 <UART_SetConfig+0x56c>)
 800385a:	61fb      	str	r3, [r7, #28]
        break;
 800385c:	e00d      	b.n	800387a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800385e:	f7fe fb83 	bl	8001f68 <HAL_RCC_GetSysClockFreq>
 8003862:	61f8      	str	r0, [r7, #28]
        break;
 8003864:	e009      	b.n	800387a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003866:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800386a:	61fb      	str	r3, [r7, #28]
        break;
 800386c:	e005      	b.n	800387a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800386e:	2300      	movs	r3, #0
 8003870:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003878:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	2b00      	cmp	r3, #0
 800387e:	f000 80fb 	beq.w	8003a78 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	4613      	mov	r3, r2
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	4413      	add	r3, r2
 800388c:	69fa      	ldr	r2, [r7, #28]
 800388e:	429a      	cmp	r2, r3
 8003890:	d305      	bcc.n	800389e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003898:	69fa      	ldr	r2, [r7, #28]
 800389a:	429a      	cmp	r2, r3
 800389c:	d903      	bls.n	80038a6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80038a4:	e0e8      	b.n	8003a78 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	2200      	movs	r2, #0
 80038aa:	461c      	mov	r4, r3
 80038ac:	4615      	mov	r5, r2
 80038ae:	f04f 0200 	mov.w	r2, #0
 80038b2:	f04f 0300 	mov.w	r3, #0
 80038b6:	022b      	lsls	r3, r5, #8
 80038b8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80038bc:	0222      	lsls	r2, r4, #8
 80038be:	68f9      	ldr	r1, [r7, #12]
 80038c0:	6849      	ldr	r1, [r1, #4]
 80038c2:	0849      	lsrs	r1, r1, #1
 80038c4:	2000      	movs	r0, #0
 80038c6:	4688      	mov	r8, r1
 80038c8:	4681      	mov	r9, r0
 80038ca:	eb12 0a08 	adds.w	sl, r2, r8
 80038ce:	eb43 0b09 	adc.w	fp, r3, r9
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	603b      	str	r3, [r7, #0]
 80038da:	607a      	str	r2, [r7, #4]
 80038dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038e0:	4650      	mov	r0, sl
 80038e2:	4659      	mov	r1, fp
 80038e4:	f7fc fcc4 	bl	8000270 <__aeabi_uldivmod>
 80038e8:	4602      	mov	r2, r0
 80038ea:	460b      	mov	r3, r1
 80038ec:	4613      	mov	r3, r2
 80038ee:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038f6:	d308      	bcc.n	800390a <UART_SetConfig+0x3de>
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038fe:	d204      	bcs.n	800390a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	60da      	str	r2, [r3, #12]
 8003908:	e0b6      	b.n	8003a78 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003910:	e0b2      	b.n	8003a78 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	69db      	ldr	r3, [r3, #28]
 8003916:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800391a:	d15e      	bne.n	80039da <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800391c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003920:	2b08      	cmp	r3, #8
 8003922:	d828      	bhi.n	8003976 <UART_SetConfig+0x44a>
 8003924:	a201      	add	r2, pc, #4	; (adr r2, 800392c <UART_SetConfig+0x400>)
 8003926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800392a:	bf00      	nop
 800392c:	08003951 	.word	0x08003951
 8003930:	08003959 	.word	0x08003959
 8003934:	08003961 	.word	0x08003961
 8003938:	08003977 	.word	0x08003977
 800393c:	08003967 	.word	0x08003967
 8003940:	08003977 	.word	0x08003977
 8003944:	08003977 	.word	0x08003977
 8003948:	08003977 	.word	0x08003977
 800394c:	0800396f 	.word	0x0800396f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003950:	f7fe fba2 	bl	8002098 <HAL_RCC_GetPCLK1Freq>
 8003954:	61f8      	str	r0, [r7, #28]
        break;
 8003956:	e014      	b.n	8003982 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003958:	f7fe fbb4 	bl	80020c4 <HAL_RCC_GetPCLK2Freq>
 800395c:	61f8      	str	r0, [r7, #28]
        break;
 800395e:	e010      	b.n	8003982 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003960:	4b4d      	ldr	r3, [pc, #308]	; (8003a98 <UART_SetConfig+0x56c>)
 8003962:	61fb      	str	r3, [r7, #28]
        break;
 8003964:	e00d      	b.n	8003982 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003966:	f7fe faff 	bl	8001f68 <HAL_RCC_GetSysClockFreq>
 800396a:	61f8      	str	r0, [r7, #28]
        break;
 800396c:	e009      	b.n	8003982 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800396e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003972:	61fb      	str	r3, [r7, #28]
        break;
 8003974:	e005      	b.n	8003982 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003976:	2300      	movs	r3, #0
 8003978:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003980:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d077      	beq.n	8003a78 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	005a      	lsls	r2, r3, #1
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	085b      	lsrs	r3, r3, #1
 8003992:	441a      	add	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	fbb2 f3f3 	udiv	r3, r2, r3
 800399c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	2b0f      	cmp	r3, #15
 80039a2:	d916      	bls.n	80039d2 <UART_SetConfig+0x4a6>
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039aa:	d212      	bcs.n	80039d2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	f023 030f 	bic.w	r3, r3, #15
 80039b4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	085b      	lsrs	r3, r3, #1
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	f003 0307 	and.w	r3, r3, #7
 80039c0:	b29a      	uxth	r2, r3
 80039c2:	8afb      	ldrh	r3, [r7, #22]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	8afa      	ldrh	r2, [r7, #22]
 80039ce:	60da      	str	r2, [r3, #12]
 80039d0:	e052      	b.n	8003a78 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80039d8:	e04e      	b.n	8003a78 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039de:	2b08      	cmp	r3, #8
 80039e0:	d827      	bhi.n	8003a32 <UART_SetConfig+0x506>
 80039e2:	a201      	add	r2, pc, #4	; (adr r2, 80039e8 <UART_SetConfig+0x4bc>)
 80039e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e8:	08003a0d 	.word	0x08003a0d
 80039ec:	08003a15 	.word	0x08003a15
 80039f0:	08003a1d 	.word	0x08003a1d
 80039f4:	08003a33 	.word	0x08003a33
 80039f8:	08003a23 	.word	0x08003a23
 80039fc:	08003a33 	.word	0x08003a33
 8003a00:	08003a33 	.word	0x08003a33
 8003a04:	08003a33 	.word	0x08003a33
 8003a08:	08003a2b 	.word	0x08003a2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a0c:	f7fe fb44 	bl	8002098 <HAL_RCC_GetPCLK1Freq>
 8003a10:	61f8      	str	r0, [r7, #28]
        break;
 8003a12:	e014      	b.n	8003a3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a14:	f7fe fb56 	bl	80020c4 <HAL_RCC_GetPCLK2Freq>
 8003a18:	61f8      	str	r0, [r7, #28]
        break;
 8003a1a:	e010      	b.n	8003a3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a1c:	4b1e      	ldr	r3, [pc, #120]	; (8003a98 <UART_SetConfig+0x56c>)
 8003a1e:	61fb      	str	r3, [r7, #28]
        break;
 8003a20:	e00d      	b.n	8003a3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a22:	f7fe faa1 	bl	8001f68 <HAL_RCC_GetSysClockFreq>
 8003a26:	61f8      	str	r0, [r7, #28]
        break;
 8003a28:	e009      	b.n	8003a3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a2e:	61fb      	str	r3, [r7, #28]
        break;
 8003a30:	e005      	b.n	8003a3e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003a32:	2300      	movs	r3, #0
 8003a34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003a3c:	bf00      	nop
    }

    if (pclk != 0U)
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d019      	beq.n	8003a78 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	085a      	lsrs	r2, r3, #1
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	441a      	add	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a56:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	2b0f      	cmp	r3, #15
 8003a5c:	d909      	bls.n	8003a72 <UART_SetConfig+0x546>
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a64:	d205      	bcs.n	8003a72 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	60da      	str	r2, [r3, #12]
 8003a70:	e002      	b.n	8003a78 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003a84:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3728      	adds	r7, #40	; 0x28
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a92:	bf00      	nop
 8003a94:	40008000 	.word	0x40008000
 8003a98:	00f42400 	.word	0x00f42400

08003a9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa8:	f003 0308 	and.w	r3, r3, #8
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00a      	beq.n	8003ac6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00a      	beq.n	8003ae8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aec:	f003 0302 	and.w	r3, r3, #2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d00a      	beq.n	8003b0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	430a      	orrs	r2, r1
 8003b08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0e:	f003 0304 	and.w	r3, r3, #4
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00a      	beq.n	8003b2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b30:	f003 0310 	and.w	r3, r3, #16
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00a      	beq.n	8003b4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b52:	f003 0320 	and.w	r3, r3, #32
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00a      	beq.n	8003b70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d01a      	beq.n	8003bb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b9a:	d10a      	bne.n	8003bb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00a      	beq.n	8003bd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	605a      	str	r2, [r3, #4]
  }
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b098      	sub	sp, #96	; 0x60
 8003be4:	af02      	add	r7, sp, #8
 8003be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003bf0:	f7fd f9a2 	bl	8000f38 <HAL_GetTick>
 8003bf4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0308 	and.w	r3, r3, #8
 8003c00:	2b08      	cmp	r3, #8
 8003c02:	d12e      	bne.n	8003c62 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c08:	9300      	str	r3, [sp, #0]
 8003c0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 f88c 	bl	8003d30 <UART_WaitOnFlagUntilTimeout>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d021      	beq.n	8003c62 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c26:	e853 3f00 	ldrex	r3, [r3]
 8003c2a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c32:	653b      	str	r3, [r7, #80]	; 0x50
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	461a      	mov	r2, r3
 8003c3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c3c:	647b      	str	r3, [r7, #68]	; 0x44
 8003c3e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c40:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c44:	e841 2300 	strex	r3, r2, [r1]
 8003c48:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1e6      	bne.n	8003c1e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2220      	movs	r2, #32
 8003c54:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e062      	b.n	8003d28 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0304 	and.w	r3, r3, #4
 8003c6c:	2b04      	cmp	r3, #4
 8003c6e:	d149      	bne.n	8003d04 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c74:	9300      	str	r3, [sp, #0]
 8003c76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f856 	bl	8003d30 <UART_WaitOnFlagUntilTimeout>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d03c      	beq.n	8003d04 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c92:	e853 3f00 	ldrex	r3, [r3]
 8003c96:	623b      	str	r3, [r7, #32]
   return(result);
 8003c98:	6a3b      	ldr	r3, [r7, #32]
 8003c9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ca8:	633b      	str	r3, [r7, #48]	; 0x30
 8003caa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003cae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cb0:	e841 2300 	strex	r3, r2, [r1]
 8003cb4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1e6      	bne.n	8003c8a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	3308      	adds	r3, #8
 8003cc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	e853 3f00 	ldrex	r3, [r3]
 8003cca:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f023 0301 	bic.w	r3, r3, #1
 8003cd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	3308      	adds	r3, #8
 8003cda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cdc:	61fa      	str	r2, [r7, #28]
 8003cde:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce0:	69b9      	ldr	r1, [r7, #24]
 8003ce2:	69fa      	ldr	r2, [r7, #28]
 8003ce4:	e841 2300 	strex	r3, r2, [r1]
 8003ce8:	617b      	str	r3, [r7, #20]
   return(result);
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1e5      	bne.n	8003cbc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e011      	b.n	8003d28 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2220      	movs	r2, #32
 8003d08:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2220      	movs	r2, #32
 8003d0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3758      	adds	r7, #88	; 0x58
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	603b      	str	r3, [r7, #0]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d40:	e049      	b.n	8003dd6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d48:	d045      	beq.n	8003dd6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d4a:	f7fd f8f5 	bl	8000f38 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	69ba      	ldr	r2, [r7, #24]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d302      	bcc.n	8003d60 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d101      	bne.n	8003d64 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e048      	b.n	8003df6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0304 	and.w	r3, r3, #4
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d031      	beq.n	8003dd6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	69db      	ldr	r3, [r3, #28]
 8003d78:	f003 0308 	and.w	r3, r3, #8
 8003d7c:	2b08      	cmp	r3, #8
 8003d7e:	d110      	bne.n	8003da2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2208      	movs	r2, #8
 8003d86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	f000 f838 	bl	8003dfe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2208      	movs	r2, #8
 8003d92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e029      	b.n	8003df6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	69db      	ldr	r3, [r3, #28]
 8003da8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003db0:	d111      	bne.n	8003dd6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003dba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f000 f81e 	bl	8003dfe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e00f      	b.n	8003df6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	69da      	ldr	r2, [r3, #28]
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	4013      	ands	r3, r2
 8003de0:	68ba      	ldr	r2, [r7, #8]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	bf0c      	ite	eq
 8003de6:	2301      	moveq	r3, #1
 8003de8:	2300      	movne	r3, #0
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	461a      	mov	r2, r3
 8003dee:	79fb      	ldrb	r3, [r7, #7]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d0a6      	beq.n	8003d42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b095      	sub	sp, #84	; 0x54
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e0e:	e853 3f00 	ldrex	r3, [r3]
 8003e12:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	461a      	mov	r2, r3
 8003e22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e24:	643b      	str	r3, [r7, #64]	; 0x40
 8003e26:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e2c:	e841 2300 	strex	r3, r2, [r1]
 8003e30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d1e6      	bne.n	8003e06 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	3308      	adds	r3, #8
 8003e3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e40:	6a3b      	ldr	r3, [r7, #32]
 8003e42:	e853 3f00 	ldrex	r3, [r3]
 8003e46:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	f023 0301 	bic.w	r3, r3, #1
 8003e4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	3308      	adds	r3, #8
 8003e56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e58:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e60:	e841 2300 	strex	r3, r2, [r1]
 8003e64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1e5      	bne.n	8003e38 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d118      	bne.n	8003ea6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	e853 3f00 	ldrex	r3, [r3]
 8003e80:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	f023 0310 	bic.w	r3, r3, #16
 8003e88:	647b      	str	r3, [r7, #68]	; 0x44
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e92:	61bb      	str	r3, [r7, #24]
 8003e94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e96:	6979      	ldr	r1, [r7, #20]
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	e841 2300 	strex	r3, r2, [r1]
 8003e9e:	613b      	str	r3, [r7, #16]
   return(result);
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1e6      	bne.n	8003e74 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2220      	movs	r2, #32
 8003eaa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003eba:	bf00      	nop
 8003ebc:	3754      	adds	r7, #84	; 0x54
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
	...

08003ec8 <siprintf>:
 8003ec8:	b40e      	push	{r1, r2, r3}
 8003eca:	b500      	push	{lr}
 8003ecc:	b09c      	sub	sp, #112	; 0x70
 8003ece:	ab1d      	add	r3, sp, #116	; 0x74
 8003ed0:	9002      	str	r0, [sp, #8]
 8003ed2:	9006      	str	r0, [sp, #24]
 8003ed4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003ed8:	4809      	ldr	r0, [pc, #36]	; (8003f00 <siprintf+0x38>)
 8003eda:	9107      	str	r1, [sp, #28]
 8003edc:	9104      	str	r1, [sp, #16]
 8003ede:	4909      	ldr	r1, [pc, #36]	; (8003f04 <siprintf+0x3c>)
 8003ee0:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ee4:	9105      	str	r1, [sp, #20]
 8003ee6:	6800      	ldr	r0, [r0, #0]
 8003ee8:	9301      	str	r3, [sp, #4]
 8003eea:	a902      	add	r1, sp, #8
 8003eec:	f000 f992 	bl	8004214 <_svfiprintf_r>
 8003ef0:	9b02      	ldr	r3, [sp, #8]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	701a      	strb	r2, [r3, #0]
 8003ef6:	b01c      	add	sp, #112	; 0x70
 8003ef8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003efc:	b003      	add	sp, #12
 8003efe:	4770      	bx	lr
 8003f00:	20000058 	.word	0x20000058
 8003f04:	ffff0208 	.word	0xffff0208

08003f08 <memset>:
 8003f08:	4402      	add	r2, r0
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d100      	bne.n	8003f12 <memset+0xa>
 8003f10:	4770      	bx	lr
 8003f12:	f803 1b01 	strb.w	r1, [r3], #1
 8003f16:	e7f9      	b.n	8003f0c <memset+0x4>

08003f18 <__errno>:
 8003f18:	4b01      	ldr	r3, [pc, #4]	; (8003f20 <__errno+0x8>)
 8003f1a:	6818      	ldr	r0, [r3, #0]
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	20000058 	.word	0x20000058

08003f24 <__libc_init_array>:
 8003f24:	b570      	push	{r4, r5, r6, lr}
 8003f26:	4d0d      	ldr	r5, [pc, #52]	; (8003f5c <__libc_init_array+0x38>)
 8003f28:	4c0d      	ldr	r4, [pc, #52]	; (8003f60 <__libc_init_array+0x3c>)
 8003f2a:	1b64      	subs	r4, r4, r5
 8003f2c:	10a4      	asrs	r4, r4, #2
 8003f2e:	2600      	movs	r6, #0
 8003f30:	42a6      	cmp	r6, r4
 8003f32:	d109      	bne.n	8003f48 <__libc_init_array+0x24>
 8003f34:	4d0b      	ldr	r5, [pc, #44]	; (8003f64 <__libc_init_array+0x40>)
 8003f36:	4c0c      	ldr	r4, [pc, #48]	; (8003f68 <__libc_init_array+0x44>)
 8003f38:	f000 fc6a 	bl	8004810 <_init>
 8003f3c:	1b64      	subs	r4, r4, r5
 8003f3e:	10a4      	asrs	r4, r4, #2
 8003f40:	2600      	movs	r6, #0
 8003f42:	42a6      	cmp	r6, r4
 8003f44:	d105      	bne.n	8003f52 <__libc_init_array+0x2e>
 8003f46:	bd70      	pop	{r4, r5, r6, pc}
 8003f48:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f4c:	4798      	blx	r3
 8003f4e:	3601      	adds	r6, #1
 8003f50:	e7ee      	b.n	8003f30 <__libc_init_array+0xc>
 8003f52:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f56:	4798      	blx	r3
 8003f58:	3601      	adds	r6, #1
 8003f5a:	e7f2      	b.n	8003f42 <__libc_init_array+0x1e>
 8003f5c:	080048dc 	.word	0x080048dc
 8003f60:	080048dc 	.word	0x080048dc
 8003f64:	080048dc 	.word	0x080048dc
 8003f68:	080048e0 	.word	0x080048e0

08003f6c <__retarget_lock_acquire_recursive>:
 8003f6c:	4770      	bx	lr

08003f6e <__retarget_lock_release_recursive>:
 8003f6e:	4770      	bx	lr

08003f70 <_free_r>:
 8003f70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003f72:	2900      	cmp	r1, #0
 8003f74:	d044      	beq.n	8004000 <_free_r+0x90>
 8003f76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f7a:	9001      	str	r0, [sp, #4]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f1a1 0404 	sub.w	r4, r1, #4
 8003f82:	bfb8      	it	lt
 8003f84:	18e4      	addlt	r4, r4, r3
 8003f86:	f000 f8df 	bl	8004148 <__malloc_lock>
 8003f8a:	4a1e      	ldr	r2, [pc, #120]	; (8004004 <_free_r+0x94>)
 8003f8c:	9801      	ldr	r0, [sp, #4]
 8003f8e:	6813      	ldr	r3, [r2, #0]
 8003f90:	b933      	cbnz	r3, 8003fa0 <_free_r+0x30>
 8003f92:	6063      	str	r3, [r4, #4]
 8003f94:	6014      	str	r4, [r2, #0]
 8003f96:	b003      	add	sp, #12
 8003f98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003f9c:	f000 b8da 	b.w	8004154 <__malloc_unlock>
 8003fa0:	42a3      	cmp	r3, r4
 8003fa2:	d908      	bls.n	8003fb6 <_free_r+0x46>
 8003fa4:	6825      	ldr	r5, [r4, #0]
 8003fa6:	1961      	adds	r1, r4, r5
 8003fa8:	428b      	cmp	r3, r1
 8003faa:	bf01      	itttt	eq
 8003fac:	6819      	ldreq	r1, [r3, #0]
 8003fae:	685b      	ldreq	r3, [r3, #4]
 8003fb0:	1949      	addeq	r1, r1, r5
 8003fb2:	6021      	streq	r1, [r4, #0]
 8003fb4:	e7ed      	b.n	8003f92 <_free_r+0x22>
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	b10b      	cbz	r3, 8003fc0 <_free_r+0x50>
 8003fbc:	42a3      	cmp	r3, r4
 8003fbe:	d9fa      	bls.n	8003fb6 <_free_r+0x46>
 8003fc0:	6811      	ldr	r1, [r2, #0]
 8003fc2:	1855      	adds	r5, r2, r1
 8003fc4:	42a5      	cmp	r5, r4
 8003fc6:	d10b      	bne.n	8003fe0 <_free_r+0x70>
 8003fc8:	6824      	ldr	r4, [r4, #0]
 8003fca:	4421      	add	r1, r4
 8003fcc:	1854      	adds	r4, r2, r1
 8003fce:	42a3      	cmp	r3, r4
 8003fd0:	6011      	str	r1, [r2, #0]
 8003fd2:	d1e0      	bne.n	8003f96 <_free_r+0x26>
 8003fd4:	681c      	ldr	r4, [r3, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	6053      	str	r3, [r2, #4]
 8003fda:	440c      	add	r4, r1
 8003fdc:	6014      	str	r4, [r2, #0]
 8003fde:	e7da      	b.n	8003f96 <_free_r+0x26>
 8003fe0:	d902      	bls.n	8003fe8 <_free_r+0x78>
 8003fe2:	230c      	movs	r3, #12
 8003fe4:	6003      	str	r3, [r0, #0]
 8003fe6:	e7d6      	b.n	8003f96 <_free_r+0x26>
 8003fe8:	6825      	ldr	r5, [r4, #0]
 8003fea:	1961      	adds	r1, r4, r5
 8003fec:	428b      	cmp	r3, r1
 8003fee:	bf04      	itt	eq
 8003ff0:	6819      	ldreq	r1, [r3, #0]
 8003ff2:	685b      	ldreq	r3, [r3, #4]
 8003ff4:	6063      	str	r3, [r4, #4]
 8003ff6:	bf04      	itt	eq
 8003ff8:	1949      	addeq	r1, r1, r5
 8003ffa:	6021      	streq	r1, [r4, #0]
 8003ffc:	6054      	str	r4, [r2, #4]
 8003ffe:	e7ca      	b.n	8003f96 <_free_r+0x26>
 8004000:	b003      	add	sp, #12
 8004002:	bd30      	pop	{r4, r5, pc}
 8004004:	200002ac 	.word	0x200002ac

08004008 <sbrk_aligned>:
 8004008:	b570      	push	{r4, r5, r6, lr}
 800400a:	4e0e      	ldr	r6, [pc, #56]	; (8004044 <sbrk_aligned+0x3c>)
 800400c:	460c      	mov	r4, r1
 800400e:	6831      	ldr	r1, [r6, #0]
 8004010:	4605      	mov	r5, r0
 8004012:	b911      	cbnz	r1, 800401a <sbrk_aligned+0x12>
 8004014:	f000 fba6 	bl	8004764 <_sbrk_r>
 8004018:	6030      	str	r0, [r6, #0]
 800401a:	4621      	mov	r1, r4
 800401c:	4628      	mov	r0, r5
 800401e:	f000 fba1 	bl	8004764 <_sbrk_r>
 8004022:	1c43      	adds	r3, r0, #1
 8004024:	d00a      	beq.n	800403c <sbrk_aligned+0x34>
 8004026:	1cc4      	adds	r4, r0, #3
 8004028:	f024 0403 	bic.w	r4, r4, #3
 800402c:	42a0      	cmp	r0, r4
 800402e:	d007      	beq.n	8004040 <sbrk_aligned+0x38>
 8004030:	1a21      	subs	r1, r4, r0
 8004032:	4628      	mov	r0, r5
 8004034:	f000 fb96 	bl	8004764 <_sbrk_r>
 8004038:	3001      	adds	r0, #1
 800403a:	d101      	bne.n	8004040 <sbrk_aligned+0x38>
 800403c:	f04f 34ff 	mov.w	r4, #4294967295
 8004040:	4620      	mov	r0, r4
 8004042:	bd70      	pop	{r4, r5, r6, pc}
 8004044:	200002b0 	.word	0x200002b0

08004048 <_malloc_r>:
 8004048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800404c:	1ccd      	adds	r5, r1, #3
 800404e:	f025 0503 	bic.w	r5, r5, #3
 8004052:	3508      	adds	r5, #8
 8004054:	2d0c      	cmp	r5, #12
 8004056:	bf38      	it	cc
 8004058:	250c      	movcc	r5, #12
 800405a:	2d00      	cmp	r5, #0
 800405c:	4607      	mov	r7, r0
 800405e:	db01      	blt.n	8004064 <_malloc_r+0x1c>
 8004060:	42a9      	cmp	r1, r5
 8004062:	d905      	bls.n	8004070 <_malloc_r+0x28>
 8004064:	230c      	movs	r3, #12
 8004066:	603b      	str	r3, [r7, #0]
 8004068:	2600      	movs	r6, #0
 800406a:	4630      	mov	r0, r6
 800406c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004070:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004144 <_malloc_r+0xfc>
 8004074:	f000 f868 	bl	8004148 <__malloc_lock>
 8004078:	f8d8 3000 	ldr.w	r3, [r8]
 800407c:	461c      	mov	r4, r3
 800407e:	bb5c      	cbnz	r4, 80040d8 <_malloc_r+0x90>
 8004080:	4629      	mov	r1, r5
 8004082:	4638      	mov	r0, r7
 8004084:	f7ff ffc0 	bl	8004008 <sbrk_aligned>
 8004088:	1c43      	adds	r3, r0, #1
 800408a:	4604      	mov	r4, r0
 800408c:	d155      	bne.n	800413a <_malloc_r+0xf2>
 800408e:	f8d8 4000 	ldr.w	r4, [r8]
 8004092:	4626      	mov	r6, r4
 8004094:	2e00      	cmp	r6, #0
 8004096:	d145      	bne.n	8004124 <_malloc_r+0xdc>
 8004098:	2c00      	cmp	r4, #0
 800409a:	d048      	beq.n	800412e <_malloc_r+0xe6>
 800409c:	6823      	ldr	r3, [r4, #0]
 800409e:	4631      	mov	r1, r6
 80040a0:	4638      	mov	r0, r7
 80040a2:	eb04 0903 	add.w	r9, r4, r3
 80040a6:	f000 fb5d 	bl	8004764 <_sbrk_r>
 80040aa:	4581      	cmp	r9, r0
 80040ac:	d13f      	bne.n	800412e <_malloc_r+0xe6>
 80040ae:	6821      	ldr	r1, [r4, #0]
 80040b0:	1a6d      	subs	r5, r5, r1
 80040b2:	4629      	mov	r1, r5
 80040b4:	4638      	mov	r0, r7
 80040b6:	f7ff ffa7 	bl	8004008 <sbrk_aligned>
 80040ba:	3001      	adds	r0, #1
 80040bc:	d037      	beq.n	800412e <_malloc_r+0xe6>
 80040be:	6823      	ldr	r3, [r4, #0]
 80040c0:	442b      	add	r3, r5
 80040c2:	6023      	str	r3, [r4, #0]
 80040c4:	f8d8 3000 	ldr.w	r3, [r8]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d038      	beq.n	800413e <_malloc_r+0xf6>
 80040cc:	685a      	ldr	r2, [r3, #4]
 80040ce:	42a2      	cmp	r2, r4
 80040d0:	d12b      	bne.n	800412a <_malloc_r+0xe2>
 80040d2:	2200      	movs	r2, #0
 80040d4:	605a      	str	r2, [r3, #4]
 80040d6:	e00f      	b.n	80040f8 <_malloc_r+0xb0>
 80040d8:	6822      	ldr	r2, [r4, #0]
 80040da:	1b52      	subs	r2, r2, r5
 80040dc:	d41f      	bmi.n	800411e <_malloc_r+0xd6>
 80040de:	2a0b      	cmp	r2, #11
 80040e0:	d917      	bls.n	8004112 <_malloc_r+0xca>
 80040e2:	1961      	adds	r1, r4, r5
 80040e4:	42a3      	cmp	r3, r4
 80040e6:	6025      	str	r5, [r4, #0]
 80040e8:	bf18      	it	ne
 80040ea:	6059      	strne	r1, [r3, #4]
 80040ec:	6863      	ldr	r3, [r4, #4]
 80040ee:	bf08      	it	eq
 80040f0:	f8c8 1000 	streq.w	r1, [r8]
 80040f4:	5162      	str	r2, [r4, r5]
 80040f6:	604b      	str	r3, [r1, #4]
 80040f8:	4638      	mov	r0, r7
 80040fa:	f104 060b 	add.w	r6, r4, #11
 80040fe:	f000 f829 	bl	8004154 <__malloc_unlock>
 8004102:	f026 0607 	bic.w	r6, r6, #7
 8004106:	1d23      	adds	r3, r4, #4
 8004108:	1af2      	subs	r2, r6, r3
 800410a:	d0ae      	beq.n	800406a <_malloc_r+0x22>
 800410c:	1b9b      	subs	r3, r3, r6
 800410e:	50a3      	str	r3, [r4, r2]
 8004110:	e7ab      	b.n	800406a <_malloc_r+0x22>
 8004112:	42a3      	cmp	r3, r4
 8004114:	6862      	ldr	r2, [r4, #4]
 8004116:	d1dd      	bne.n	80040d4 <_malloc_r+0x8c>
 8004118:	f8c8 2000 	str.w	r2, [r8]
 800411c:	e7ec      	b.n	80040f8 <_malloc_r+0xb0>
 800411e:	4623      	mov	r3, r4
 8004120:	6864      	ldr	r4, [r4, #4]
 8004122:	e7ac      	b.n	800407e <_malloc_r+0x36>
 8004124:	4634      	mov	r4, r6
 8004126:	6876      	ldr	r6, [r6, #4]
 8004128:	e7b4      	b.n	8004094 <_malloc_r+0x4c>
 800412a:	4613      	mov	r3, r2
 800412c:	e7cc      	b.n	80040c8 <_malloc_r+0x80>
 800412e:	230c      	movs	r3, #12
 8004130:	603b      	str	r3, [r7, #0]
 8004132:	4638      	mov	r0, r7
 8004134:	f000 f80e 	bl	8004154 <__malloc_unlock>
 8004138:	e797      	b.n	800406a <_malloc_r+0x22>
 800413a:	6025      	str	r5, [r4, #0]
 800413c:	e7dc      	b.n	80040f8 <_malloc_r+0xb0>
 800413e:	605b      	str	r3, [r3, #4]
 8004140:	deff      	udf	#255	; 0xff
 8004142:	bf00      	nop
 8004144:	200002ac 	.word	0x200002ac

08004148 <__malloc_lock>:
 8004148:	4801      	ldr	r0, [pc, #4]	; (8004150 <__malloc_lock+0x8>)
 800414a:	f7ff bf0f 	b.w	8003f6c <__retarget_lock_acquire_recursive>
 800414e:	bf00      	nop
 8004150:	200002a8 	.word	0x200002a8

08004154 <__malloc_unlock>:
 8004154:	4801      	ldr	r0, [pc, #4]	; (800415c <__malloc_unlock+0x8>)
 8004156:	f7ff bf0a 	b.w	8003f6e <__retarget_lock_release_recursive>
 800415a:	bf00      	nop
 800415c:	200002a8 	.word	0x200002a8

08004160 <__ssputs_r>:
 8004160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004164:	688e      	ldr	r6, [r1, #8]
 8004166:	461f      	mov	r7, r3
 8004168:	42be      	cmp	r6, r7
 800416a:	680b      	ldr	r3, [r1, #0]
 800416c:	4682      	mov	sl, r0
 800416e:	460c      	mov	r4, r1
 8004170:	4690      	mov	r8, r2
 8004172:	d82c      	bhi.n	80041ce <__ssputs_r+0x6e>
 8004174:	898a      	ldrh	r2, [r1, #12]
 8004176:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800417a:	d026      	beq.n	80041ca <__ssputs_r+0x6a>
 800417c:	6965      	ldr	r5, [r4, #20]
 800417e:	6909      	ldr	r1, [r1, #16]
 8004180:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004184:	eba3 0901 	sub.w	r9, r3, r1
 8004188:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800418c:	1c7b      	adds	r3, r7, #1
 800418e:	444b      	add	r3, r9
 8004190:	106d      	asrs	r5, r5, #1
 8004192:	429d      	cmp	r5, r3
 8004194:	bf38      	it	cc
 8004196:	461d      	movcc	r5, r3
 8004198:	0553      	lsls	r3, r2, #21
 800419a:	d527      	bpl.n	80041ec <__ssputs_r+0x8c>
 800419c:	4629      	mov	r1, r5
 800419e:	f7ff ff53 	bl	8004048 <_malloc_r>
 80041a2:	4606      	mov	r6, r0
 80041a4:	b360      	cbz	r0, 8004200 <__ssputs_r+0xa0>
 80041a6:	6921      	ldr	r1, [r4, #16]
 80041a8:	464a      	mov	r2, r9
 80041aa:	f000 faeb 	bl	8004784 <memcpy>
 80041ae:	89a3      	ldrh	r3, [r4, #12]
 80041b0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80041b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041b8:	81a3      	strh	r3, [r4, #12]
 80041ba:	6126      	str	r6, [r4, #16]
 80041bc:	6165      	str	r5, [r4, #20]
 80041be:	444e      	add	r6, r9
 80041c0:	eba5 0509 	sub.w	r5, r5, r9
 80041c4:	6026      	str	r6, [r4, #0]
 80041c6:	60a5      	str	r5, [r4, #8]
 80041c8:	463e      	mov	r6, r7
 80041ca:	42be      	cmp	r6, r7
 80041cc:	d900      	bls.n	80041d0 <__ssputs_r+0x70>
 80041ce:	463e      	mov	r6, r7
 80041d0:	6820      	ldr	r0, [r4, #0]
 80041d2:	4632      	mov	r2, r6
 80041d4:	4641      	mov	r1, r8
 80041d6:	f000 faab 	bl	8004730 <memmove>
 80041da:	68a3      	ldr	r3, [r4, #8]
 80041dc:	1b9b      	subs	r3, r3, r6
 80041de:	60a3      	str	r3, [r4, #8]
 80041e0:	6823      	ldr	r3, [r4, #0]
 80041e2:	4433      	add	r3, r6
 80041e4:	6023      	str	r3, [r4, #0]
 80041e6:	2000      	movs	r0, #0
 80041e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041ec:	462a      	mov	r2, r5
 80041ee:	f000 fad7 	bl	80047a0 <_realloc_r>
 80041f2:	4606      	mov	r6, r0
 80041f4:	2800      	cmp	r0, #0
 80041f6:	d1e0      	bne.n	80041ba <__ssputs_r+0x5a>
 80041f8:	6921      	ldr	r1, [r4, #16]
 80041fa:	4650      	mov	r0, sl
 80041fc:	f7ff feb8 	bl	8003f70 <_free_r>
 8004200:	230c      	movs	r3, #12
 8004202:	f8ca 3000 	str.w	r3, [sl]
 8004206:	89a3      	ldrh	r3, [r4, #12]
 8004208:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800420c:	81a3      	strh	r3, [r4, #12]
 800420e:	f04f 30ff 	mov.w	r0, #4294967295
 8004212:	e7e9      	b.n	80041e8 <__ssputs_r+0x88>

08004214 <_svfiprintf_r>:
 8004214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004218:	4698      	mov	r8, r3
 800421a:	898b      	ldrh	r3, [r1, #12]
 800421c:	061b      	lsls	r3, r3, #24
 800421e:	b09d      	sub	sp, #116	; 0x74
 8004220:	4607      	mov	r7, r0
 8004222:	460d      	mov	r5, r1
 8004224:	4614      	mov	r4, r2
 8004226:	d50e      	bpl.n	8004246 <_svfiprintf_r+0x32>
 8004228:	690b      	ldr	r3, [r1, #16]
 800422a:	b963      	cbnz	r3, 8004246 <_svfiprintf_r+0x32>
 800422c:	2140      	movs	r1, #64	; 0x40
 800422e:	f7ff ff0b 	bl	8004048 <_malloc_r>
 8004232:	6028      	str	r0, [r5, #0]
 8004234:	6128      	str	r0, [r5, #16]
 8004236:	b920      	cbnz	r0, 8004242 <_svfiprintf_r+0x2e>
 8004238:	230c      	movs	r3, #12
 800423a:	603b      	str	r3, [r7, #0]
 800423c:	f04f 30ff 	mov.w	r0, #4294967295
 8004240:	e0d0      	b.n	80043e4 <_svfiprintf_r+0x1d0>
 8004242:	2340      	movs	r3, #64	; 0x40
 8004244:	616b      	str	r3, [r5, #20]
 8004246:	2300      	movs	r3, #0
 8004248:	9309      	str	r3, [sp, #36]	; 0x24
 800424a:	2320      	movs	r3, #32
 800424c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004250:	f8cd 800c 	str.w	r8, [sp, #12]
 8004254:	2330      	movs	r3, #48	; 0x30
 8004256:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80043fc <_svfiprintf_r+0x1e8>
 800425a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800425e:	f04f 0901 	mov.w	r9, #1
 8004262:	4623      	mov	r3, r4
 8004264:	469a      	mov	sl, r3
 8004266:	f813 2b01 	ldrb.w	r2, [r3], #1
 800426a:	b10a      	cbz	r2, 8004270 <_svfiprintf_r+0x5c>
 800426c:	2a25      	cmp	r2, #37	; 0x25
 800426e:	d1f9      	bne.n	8004264 <_svfiprintf_r+0x50>
 8004270:	ebba 0b04 	subs.w	fp, sl, r4
 8004274:	d00b      	beq.n	800428e <_svfiprintf_r+0x7a>
 8004276:	465b      	mov	r3, fp
 8004278:	4622      	mov	r2, r4
 800427a:	4629      	mov	r1, r5
 800427c:	4638      	mov	r0, r7
 800427e:	f7ff ff6f 	bl	8004160 <__ssputs_r>
 8004282:	3001      	adds	r0, #1
 8004284:	f000 80a9 	beq.w	80043da <_svfiprintf_r+0x1c6>
 8004288:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800428a:	445a      	add	r2, fp
 800428c:	9209      	str	r2, [sp, #36]	; 0x24
 800428e:	f89a 3000 	ldrb.w	r3, [sl]
 8004292:	2b00      	cmp	r3, #0
 8004294:	f000 80a1 	beq.w	80043da <_svfiprintf_r+0x1c6>
 8004298:	2300      	movs	r3, #0
 800429a:	f04f 32ff 	mov.w	r2, #4294967295
 800429e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042a2:	f10a 0a01 	add.w	sl, sl, #1
 80042a6:	9304      	str	r3, [sp, #16]
 80042a8:	9307      	str	r3, [sp, #28]
 80042aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80042ae:	931a      	str	r3, [sp, #104]	; 0x68
 80042b0:	4654      	mov	r4, sl
 80042b2:	2205      	movs	r2, #5
 80042b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042b8:	4850      	ldr	r0, [pc, #320]	; (80043fc <_svfiprintf_r+0x1e8>)
 80042ba:	f7fb ff89 	bl	80001d0 <memchr>
 80042be:	9a04      	ldr	r2, [sp, #16]
 80042c0:	b9d8      	cbnz	r0, 80042fa <_svfiprintf_r+0xe6>
 80042c2:	06d0      	lsls	r0, r2, #27
 80042c4:	bf44      	itt	mi
 80042c6:	2320      	movmi	r3, #32
 80042c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042cc:	0711      	lsls	r1, r2, #28
 80042ce:	bf44      	itt	mi
 80042d0:	232b      	movmi	r3, #43	; 0x2b
 80042d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042d6:	f89a 3000 	ldrb.w	r3, [sl]
 80042da:	2b2a      	cmp	r3, #42	; 0x2a
 80042dc:	d015      	beq.n	800430a <_svfiprintf_r+0xf6>
 80042de:	9a07      	ldr	r2, [sp, #28]
 80042e0:	4654      	mov	r4, sl
 80042e2:	2000      	movs	r0, #0
 80042e4:	f04f 0c0a 	mov.w	ip, #10
 80042e8:	4621      	mov	r1, r4
 80042ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042ee:	3b30      	subs	r3, #48	; 0x30
 80042f0:	2b09      	cmp	r3, #9
 80042f2:	d94d      	bls.n	8004390 <_svfiprintf_r+0x17c>
 80042f4:	b1b0      	cbz	r0, 8004324 <_svfiprintf_r+0x110>
 80042f6:	9207      	str	r2, [sp, #28]
 80042f8:	e014      	b.n	8004324 <_svfiprintf_r+0x110>
 80042fa:	eba0 0308 	sub.w	r3, r0, r8
 80042fe:	fa09 f303 	lsl.w	r3, r9, r3
 8004302:	4313      	orrs	r3, r2
 8004304:	9304      	str	r3, [sp, #16]
 8004306:	46a2      	mov	sl, r4
 8004308:	e7d2      	b.n	80042b0 <_svfiprintf_r+0x9c>
 800430a:	9b03      	ldr	r3, [sp, #12]
 800430c:	1d19      	adds	r1, r3, #4
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	9103      	str	r1, [sp, #12]
 8004312:	2b00      	cmp	r3, #0
 8004314:	bfbb      	ittet	lt
 8004316:	425b      	neglt	r3, r3
 8004318:	f042 0202 	orrlt.w	r2, r2, #2
 800431c:	9307      	strge	r3, [sp, #28]
 800431e:	9307      	strlt	r3, [sp, #28]
 8004320:	bfb8      	it	lt
 8004322:	9204      	strlt	r2, [sp, #16]
 8004324:	7823      	ldrb	r3, [r4, #0]
 8004326:	2b2e      	cmp	r3, #46	; 0x2e
 8004328:	d10c      	bne.n	8004344 <_svfiprintf_r+0x130>
 800432a:	7863      	ldrb	r3, [r4, #1]
 800432c:	2b2a      	cmp	r3, #42	; 0x2a
 800432e:	d134      	bne.n	800439a <_svfiprintf_r+0x186>
 8004330:	9b03      	ldr	r3, [sp, #12]
 8004332:	1d1a      	adds	r2, r3, #4
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	9203      	str	r2, [sp, #12]
 8004338:	2b00      	cmp	r3, #0
 800433a:	bfb8      	it	lt
 800433c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004340:	3402      	adds	r4, #2
 8004342:	9305      	str	r3, [sp, #20]
 8004344:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800440c <_svfiprintf_r+0x1f8>
 8004348:	7821      	ldrb	r1, [r4, #0]
 800434a:	2203      	movs	r2, #3
 800434c:	4650      	mov	r0, sl
 800434e:	f7fb ff3f 	bl	80001d0 <memchr>
 8004352:	b138      	cbz	r0, 8004364 <_svfiprintf_r+0x150>
 8004354:	9b04      	ldr	r3, [sp, #16]
 8004356:	eba0 000a 	sub.w	r0, r0, sl
 800435a:	2240      	movs	r2, #64	; 0x40
 800435c:	4082      	lsls	r2, r0
 800435e:	4313      	orrs	r3, r2
 8004360:	3401      	adds	r4, #1
 8004362:	9304      	str	r3, [sp, #16]
 8004364:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004368:	4825      	ldr	r0, [pc, #148]	; (8004400 <_svfiprintf_r+0x1ec>)
 800436a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800436e:	2206      	movs	r2, #6
 8004370:	f7fb ff2e 	bl	80001d0 <memchr>
 8004374:	2800      	cmp	r0, #0
 8004376:	d038      	beq.n	80043ea <_svfiprintf_r+0x1d6>
 8004378:	4b22      	ldr	r3, [pc, #136]	; (8004404 <_svfiprintf_r+0x1f0>)
 800437a:	bb1b      	cbnz	r3, 80043c4 <_svfiprintf_r+0x1b0>
 800437c:	9b03      	ldr	r3, [sp, #12]
 800437e:	3307      	adds	r3, #7
 8004380:	f023 0307 	bic.w	r3, r3, #7
 8004384:	3308      	adds	r3, #8
 8004386:	9303      	str	r3, [sp, #12]
 8004388:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800438a:	4433      	add	r3, r6
 800438c:	9309      	str	r3, [sp, #36]	; 0x24
 800438e:	e768      	b.n	8004262 <_svfiprintf_r+0x4e>
 8004390:	fb0c 3202 	mla	r2, ip, r2, r3
 8004394:	460c      	mov	r4, r1
 8004396:	2001      	movs	r0, #1
 8004398:	e7a6      	b.n	80042e8 <_svfiprintf_r+0xd4>
 800439a:	2300      	movs	r3, #0
 800439c:	3401      	adds	r4, #1
 800439e:	9305      	str	r3, [sp, #20]
 80043a0:	4619      	mov	r1, r3
 80043a2:	f04f 0c0a 	mov.w	ip, #10
 80043a6:	4620      	mov	r0, r4
 80043a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043ac:	3a30      	subs	r2, #48	; 0x30
 80043ae:	2a09      	cmp	r2, #9
 80043b0:	d903      	bls.n	80043ba <_svfiprintf_r+0x1a6>
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d0c6      	beq.n	8004344 <_svfiprintf_r+0x130>
 80043b6:	9105      	str	r1, [sp, #20]
 80043b8:	e7c4      	b.n	8004344 <_svfiprintf_r+0x130>
 80043ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80043be:	4604      	mov	r4, r0
 80043c0:	2301      	movs	r3, #1
 80043c2:	e7f0      	b.n	80043a6 <_svfiprintf_r+0x192>
 80043c4:	ab03      	add	r3, sp, #12
 80043c6:	9300      	str	r3, [sp, #0]
 80043c8:	462a      	mov	r2, r5
 80043ca:	4b0f      	ldr	r3, [pc, #60]	; (8004408 <_svfiprintf_r+0x1f4>)
 80043cc:	a904      	add	r1, sp, #16
 80043ce:	4638      	mov	r0, r7
 80043d0:	f3af 8000 	nop.w
 80043d4:	1c42      	adds	r2, r0, #1
 80043d6:	4606      	mov	r6, r0
 80043d8:	d1d6      	bne.n	8004388 <_svfiprintf_r+0x174>
 80043da:	89ab      	ldrh	r3, [r5, #12]
 80043dc:	065b      	lsls	r3, r3, #25
 80043de:	f53f af2d 	bmi.w	800423c <_svfiprintf_r+0x28>
 80043e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80043e4:	b01d      	add	sp, #116	; 0x74
 80043e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043ea:	ab03      	add	r3, sp, #12
 80043ec:	9300      	str	r3, [sp, #0]
 80043ee:	462a      	mov	r2, r5
 80043f0:	4b05      	ldr	r3, [pc, #20]	; (8004408 <_svfiprintf_r+0x1f4>)
 80043f2:	a904      	add	r1, sp, #16
 80043f4:	4638      	mov	r0, r7
 80043f6:	f000 f879 	bl	80044ec <_printf_i>
 80043fa:	e7eb      	b.n	80043d4 <_svfiprintf_r+0x1c0>
 80043fc:	080048a0 	.word	0x080048a0
 8004400:	080048aa 	.word	0x080048aa
 8004404:	00000000 	.word	0x00000000
 8004408:	08004161 	.word	0x08004161
 800440c:	080048a6 	.word	0x080048a6

08004410 <_printf_common>:
 8004410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004414:	4616      	mov	r6, r2
 8004416:	4699      	mov	r9, r3
 8004418:	688a      	ldr	r2, [r1, #8]
 800441a:	690b      	ldr	r3, [r1, #16]
 800441c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004420:	4293      	cmp	r3, r2
 8004422:	bfb8      	it	lt
 8004424:	4613      	movlt	r3, r2
 8004426:	6033      	str	r3, [r6, #0]
 8004428:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800442c:	4607      	mov	r7, r0
 800442e:	460c      	mov	r4, r1
 8004430:	b10a      	cbz	r2, 8004436 <_printf_common+0x26>
 8004432:	3301      	adds	r3, #1
 8004434:	6033      	str	r3, [r6, #0]
 8004436:	6823      	ldr	r3, [r4, #0]
 8004438:	0699      	lsls	r1, r3, #26
 800443a:	bf42      	ittt	mi
 800443c:	6833      	ldrmi	r3, [r6, #0]
 800443e:	3302      	addmi	r3, #2
 8004440:	6033      	strmi	r3, [r6, #0]
 8004442:	6825      	ldr	r5, [r4, #0]
 8004444:	f015 0506 	ands.w	r5, r5, #6
 8004448:	d106      	bne.n	8004458 <_printf_common+0x48>
 800444a:	f104 0a19 	add.w	sl, r4, #25
 800444e:	68e3      	ldr	r3, [r4, #12]
 8004450:	6832      	ldr	r2, [r6, #0]
 8004452:	1a9b      	subs	r3, r3, r2
 8004454:	42ab      	cmp	r3, r5
 8004456:	dc26      	bgt.n	80044a6 <_printf_common+0x96>
 8004458:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800445c:	1e13      	subs	r3, r2, #0
 800445e:	6822      	ldr	r2, [r4, #0]
 8004460:	bf18      	it	ne
 8004462:	2301      	movne	r3, #1
 8004464:	0692      	lsls	r2, r2, #26
 8004466:	d42b      	bmi.n	80044c0 <_printf_common+0xb0>
 8004468:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800446c:	4649      	mov	r1, r9
 800446e:	4638      	mov	r0, r7
 8004470:	47c0      	blx	r8
 8004472:	3001      	adds	r0, #1
 8004474:	d01e      	beq.n	80044b4 <_printf_common+0xa4>
 8004476:	6823      	ldr	r3, [r4, #0]
 8004478:	6922      	ldr	r2, [r4, #16]
 800447a:	f003 0306 	and.w	r3, r3, #6
 800447e:	2b04      	cmp	r3, #4
 8004480:	bf02      	ittt	eq
 8004482:	68e5      	ldreq	r5, [r4, #12]
 8004484:	6833      	ldreq	r3, [r6, #0]
 8004486:	1aed      	subeq	r5, r5, r3
 8004488:	68a3      	ldr	r3, [r4, #8]
 800448a:	bf0c      	ite	eq
 800448c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004490:	2500      	movne	r5, #0
 8004492:	4293      	cmp	r3, r2
 8004494:	bfc4      	itt	gt
 8004496:	1a9b      	subgt	r3, r3, r2
 8004498:	18ed      	addgt	r5, r5, r3
 800449a:	2600      	movs	r6, #0
 800449c:	341a      	adds	r4, #26
 800449e:	42b5      	cmp	r5, r6
 80044a0:	d11a      	bne.n	80044d8 <_printf_common+0xc8>
 80044a2:	2000      	movs	r0, #0
 80044a4:	e008      	b.n	80044b8 <_printf_common+0xa8>
 80044a6:	2301      	movs	r3, #1
 80044a8:	4652      	mov	r2, sl
 80044aa:	4649      	mov	r1, r9
 80044ac:	4638      	mov	r0, r7
 80044ae:	47c0      	blx	r8
 80044b0:	3001      	adds	r0, #1
 80044b2:	d103      	bne.n	80044bc <_printf_common+0xac>
 80044b4:	f04f 30ff 	mov.w	r0, #4294967295
 80044b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044bc:	3501      	adds	r5, #1
 80044be:	e7c6      	b.n	800444e <_printf_common+0x3e>
 80044c0:	18e1      	adds	r1, r4, r3
 80044c2:	1c5a      	adds	r2, r3, #1
 80044c4:	2030      	movs	r0, #48	; 0x30
 80044c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044ca:	4422      	add	r2, r4
 80044cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80044d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80044d4:	3302      	adds	r3, #2
 80044d6:	e7c7      	b.n	8004468 <_printf_common+0x58>
 80044d8:	2301      	movs	r3, #1
 80044da:	4622      	mov	r2, r4
 80044dc:	4649      	mov	r1, r9
 80044de:	4638      	mov	r0, r7
 80044e0:	47c0      	blx	r8
 80044e2:	3001      	adds	r0, #1
 80044e4:	d0e6      	beq.n	80044b4 <_printf_common+0xa4>
 80044e6:	3601      	adds	r6, #1
 80044e8:	e7d9      	b.n	800449e <_printf_common+0x8e>
	...

080044ec <_printf_i>:
 80044ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044f0:	7e0f      	ldrb	r7, [r1, #24]
 80044f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80044f4:	2f78      	cmp	r7, #120	; 0x78
 80044f6:	4691      	mov	r9, r2
 80044f8:	4680      	mov	r8, r0
 80044fa:	460c      	mov	r4, r1
 80044fc:	469a      	mov	sl, r3
 80044fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004502:	d807      	bhi.n	8004514 <_printf_i+0x28>
 8004504:	2f62      	cmp	r7, #98	; 0x62
 8004506:	d80a      	bhi.n	800451e <_printf_i+0x32>
 8004508:	2f00      	cmp	r7, #0
 800450a:	f000 80d4 	beq.w	80046b6 <_printf_i+0x1ca>
 800450e:	2f58      	cmp	r7, #88	; 0x58
 8004510:	f000 80c0 	beq.w	8004694 <_printf_i+0x1a8>
 8004514:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004518:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800451c:	e03a      	b.n	8004594 <_printf_i+0xa8>
 800451e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004522:	2b15      	cmp	r3, #21
 8004524:	d8f6      	bhi.n	8004514 <_printf_i+0x28>
 8004526:	a101      	add	r1, pc, #4	; (adr r1, 800452c <_printf_i+0x40>)
 8004528:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800452c:	08004585 	.word	0x08004585
 8004530:	08004599 	.word	0x08004599
 8004534:	08004515 	.word	0x08004515
 8004538:	08004515 	.word	0x08004515
 800453c:	08004515 	.word	0x08004515
 8004540:	08004515 	.word	0x08004515
 8004544:	08004599 	.word	0x08004599
 8004548:	08004515 	.word	0x08004515
 800454c:	08004515 	.word	0x08004515
 8004550:	08004515 	.word	0x08004515
 8004554:	08004515 	.word	0x08004515
 8004558:	0800469d 	.word	0x0800469d
 800455c:	080045c5 	.word	0x080045c5
 8004560:	08004657 	.word	0x08004657
 8004564:	08004515 	.word	0x08004515
 8004568:	08004515 	.word	0x08004515
 800456c:	080046bf 	.word	0x080046bf
 8004570:	08004515 	.word	0x08004515
 8004574:	080045c5 	.word	0x080045c5
 8004578:	08004515 	.word	0x08004515
 800457c:	08004515 	.word	0x08004515
 8004580:	0800465f 	.word	0x0800465f
 8004584:	682b      	ldr	r3, [r5, #0]
 8004586:	1d1a      	adds	r2, r3, #4
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	602a      	str	r2, [r5, #0]
 800458c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004590:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004594:	2301      	movs	r3, #1
 8004596:	e09f      	b.n	80046d8 <_printf_i+0x1ec>
 8004598:	6820      	ldr	r0, [r4, #0]
 800459a:	682b      	ldr	r3, [r5, #0]
 800459c:	0607      	lsls	r7, r0, #24
 800459e:	f103 0104 	add.w	r1, r3, #4
 80045a2:	6029      	str	r1, [r5, #0]
 80045a4:	d501      	bpl.n	80045aa <_printf_i+0xbe>
 80045a6:	681e      	ldr	r6, [r3, #0]
 80045a8:	e003      	b.n	80045b2 <_printf_i+0xc6>
 80045aa:	0646      	lsls	r6, r0, #25
 80045ac:	d5fb      	bpl.n	80045a6 <_printf_i+0xba>
 80045ae:	f9b3 6000 	ldrsh.w	r6, [r3]
 80045b2:	2e00      	cmp	r6, #0
 80045b4:	da03      	bge.n	80045be <_printf_i+0xd2>
 80045b6:	232d      	movs	r3, #45	; 0x2d
 80045b8:	4276      	negs	r6, r6
 80045ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045be:	485a      	ldr	r0, [pc, #360]	; (8004728 <_printf_i+0x23c>)
 80045c0:	230a      	movs	r3, #10
 80045c2:	e012      	b.n	80045ea <_printf_i+0xfe>
 80045c4:	682b      	ldr	r3, [r5, #0]
 80045c6:	6820      	ldr	r0, [r4, #0]
 80045c8:	1d19      	adds	r1, r3, #4
 80045ca:	6029      	str	r1, [r5, #0]
 80045cc:	0605      	lsls	r5, r0, #24
 80045ce:	d501      	bpl.n	80045d4 <_printf_i+0xe8>
 80045d0:	681e      	ldr	r6, [r3, #0]
 80045d2:	e002      	b.n	80045da <_printf_i+0xee>
 80045d4:	0641      	lsls	r1, r0, #25
 80045d6:	d5fb      	bpl.n	80045d0 <_printf_i+0xe4>
 80045d8:	881e      	ldrh	r6, [r3, #0]
 80045da:	4853      	ldr	r0, [pc, #332]	; (8004728 <_printf_i+0x23c>)
 80045dc:	2f6f      	cmp	r7, #111	; 0x6f
 80045de:	bf0c      	ite	eq
 80045e0:	2308      	moveq	r3, #8
 80045e2:	230a      	movne	r3, #10
 80045e4:	2100      	movs	r1, #0
 80045e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80045ea:	6865      	ldr	r5, [r4, #4]
 80045ec:	60a5      	str	r5, [r4, #8]
 80045ee:	2d00      	cmp	r5, #0
 80045f0:	bfa2      	ittt	ge
 80045f2:	6821      	ldrge	r1, [r4, #0]
 80045f4:	f021 0104 	bicge.w	r1, r1, #4
 80045f8:	6021      	strge	r1, [r4, #0]
 80045fa:	b90e      	cbnz	r6, 8004600 <_printf_i+0x114>
 80045fc:	2d00      	cmp	r5, #0
 80045fe:	d04b      	beq.n	8004698 <_printf_i+0x1ac>
 8004600:	4615      	mov	r5, r2
 8004602:	fbb6 f1f3 	udiv	r1, r6, r3
 8004606:	fb03 6711 	mls	r7, r3, r1, r6
 800460a:	5dc7      	ldrb	r7, [r0, r7]
 800460c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004610:	4637      	mov	r7, r6
 8004612:	42bb      	cmp	r3, r7
 8004614:	460e      	mov	r6, r1
 8004616:	d9f4      	bls.n	8004602 <_printf_i+0x116>
 8004618:	2b08      	cmp	r3, #8
 800461a:	d10b      	bne.n	8004634 <_printf_i+0x148>
 800461c:	6823      	ldr	r3, [r4, #0]
 800461e:	07de      	lsls	r6, r3, #31
 8004620:	d508      	bpl.n	8004634 <_printf_i+0x148>
 8004622:	6923      	ldr	r3, [r4, #16]
 8004624:	6861      	ldr	r1, [r4, #4]
 8004626:	4299      	cmp	r1, r3
 8004628:	bfde      	ittt	le
 800462a:	2330      	movle	r3, #48	; 0x30
 800462c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004630:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004634:	1b52      	subs	r2, r2, r5
 8004636:	6122      	str	r2, [r4, #16]
 8004638:	f8cd a000 	str.w	sl, [sp]
 800463c:	464b      	mov	r3, r9
 800463e:	aa03      	add	r2, sp, #12
 8004640:	4621      	mov	r1, r4
 8004642:	4640      	mov	r0, r8
 8004644:	f7ff fee4 	bl	8004410 <_printf_common>
 8004648:	3001      	adds	r0, #1
 800464a:	d14a      	bne.n	80046e2 <_printf_i+0x1f6>
 800464c:	f04f 30ff 	mov.w	r0, #4294967295
 8004650:	b004      	add	sp, #16
 8004652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004656:	6823      	ldr	r3, [r4, #0]
 8004658:	f043 0320 	orr.w	r3, r3, #32
 800465c:	6023      	str	r3, [r4, #0]
 800465e:	4833      	ldr	r0, [pc, #204]	; (800472c <_printf_i+0x240>)
 8004660:	2778      	movs	r7, #120	; 0x78
 8004662:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004666:	6823      	ldr	r3, [r4, #0]
 8004668:	6829      	ldr	r1, [r5, #0]
 800466a:	061f      	lsls	r7, r3, #24
 800466c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004670:	d402      	bmi.n	8004678 <_printf_i+0x18c>
 8004672:	065f      	lsls	r7, r3, #25
 8004674:	bf48      	it	mi
 8004676:	b2b6      	uxthmi	r6, r6
 8004678:	07df      	lsls	r7, r3, #31
 800467a:	bf48      	it	mi
 800467c:	f043 0320 	orrmi.w	r3, r3, #32
 8004680:	6029      	str	r1, [r5, #0]
 8004682:	bf48      	it	mi
 8004684:	6023      	strmi	r3, [r4, #0]
 8004686:	b91e      	cbnz	r6, 8004690 <_printf_i+0x1a4>
 8004688:	6823      	ldr	r3, [r4, #0]
 800468a:	f023 0320 	bic.w	r3, r3, #32
 800468e:	6023      	str	r3, [r4, #0]
 8004690:	2310      	movs	r3, #16
 8004692:	e7a7      	b.n	80045e4 <_printf_i+0xf8>
 8004694:	4824      	ldr	r0, [pc, #144]	; (8004728 <_printf_i+0x23c>)
 8004696:	e7e4      	b.n	8004662 <_printf_i+0x176>
 8004698:	4615      	mov	r5, r2
 800469a:	e7bd      	b.n	8004618 <_printf_i+0x12c>
 800469c:	682b      	ldr	r3, [r5, #0]
 800469e:	6826      	ldr	r6, [r4, #0]
 80046a0:	6961      	ldr	r1, [r4, #20]
 80046a2:	1d18      	adds	r0, r3, #4
 80046a4:	6028      	str	r0, [r5, #0]
 80046a6:	0635      	lsls	r5, r6, #24
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	d501      	bpl.n	80046b0 <_printf_i+0x1c4>
 80046ac:	6019      	str	r1, [r3, #0]
 80046ae:	e002      	b.n	80046b6 <_printf_i+0x1ca>
 80046b0:	0670      	lsls	r0, r6, #25
 80046b2:	d5fb      	bpl.n	80046ac <_printf_i+0x1c0>
 80046b4:	8019      	strh	r1, [r3, #0]
 80046b6:	2300      	movs	r3, #0
 80046b8:	6123      	str	r3, [r4, #16]
 80046ba:	4615      	mov	r5, r2
 80046bc:	e7bc      	b.n	8004638 <_printf_i+0x14c>
 80046be:	682b      	ldr	r3, [r5, #0]
 80046c0:	1d1a      	adds	r2, r3, #4
 80046c2:	602a      	str	r2, [r5, #0]
 80046c4:	681d      	ldr	r5, [r3, #0]
 80046c6:	6862      	ldr	r2, [r4, #4]
 80046c8:	2100      	movs	r1, #0
 80046ca:	4628      	mov	r0, r5
 80046cc:	f7fb fd80 	bl	80001d0 <memchr>
 80046d0:	b108      	cbz	r0, 80046d6 <_printf_i+0x1ea>
 80046d2:	1b40      	subs	r0, r0, r5
 80046d4:	6060      	str	r0, [r4, #4]
 80046d6:	6863      	ldr	r3, [r4, #4]
 80046d8:	6123      	str	r3, [r4, #16]
 80046da:	2300      	movs	r3, #0
 80046dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046e0:	e7aa      	b.n	8004638 <_printf_i+0x14c>
 80046e2:	6923      	ldr	r3, [r4, #16]
 80046e4:	462a      	mov	r2, r5
 80046e6:	4649      	mov	r1, r9
 80046e8:	4640      	mov	r0, r8
 80046ea:	47d0      	blx	sl
 80046ec:	3001      	adds	r0, #1
 80046ee:	d0ad      	beq.n	800464c <_printf_i+0x160>
 80046f0:	6823      	ldr	r3, [r4, #0]
 80046f2:	079b      	lsls	r3, r3, #30
 80046f4:	d413      	bmi.n	800471e <_printf_i+0x232>
 80046f6:	68e0      	ldr	r0, [r4, #12]
 80046f8:	9b03      	ldr	r3, [sp, #12]
 80046fa:	4298      	cmp	r0, r3
 80046fc:	bfb8      	it	lt
 80046fe:	4618      	movlt	r0, r3
 8004700:	e7a6      	b.n	8004650 <_printf_i+0x164>
 8004702:	2301      	movs	r3, #1
 8004704:	4632      	mov	r2, r6
 8004706:	4649      	mov	r1, r9
 8004708:	4640      	mov	r0, r8
 800470a:	47d0      	blx	sl
 800470c:	3001      	adds	r0, #1
 800470e:	d09d      	beq.n	800464c <_printf_i+0x160>
 8004710:	3501      	adds	r5, #1
 8004712:	68e3      	ldr	r3, [r4, #12]
 8004714:	9903      	ldr	r1, [sp, #12]
 8004716:	1a5b      	subs	r3, r3, r1
 8004718:	42ab      	cmp	r3, r5
 800471a:	dcf2      	bgt.n	8004702 <_printf_i+0x216>
 800471c:	e7eb      	b.n	80046f6 <_printf_i+0x20a>
 800471e:	2500      	movs	r5, #0
 8004720:	f104 0619 	add.w	r6, r4, #25
 8004724:	e7f5      	b.n	8004712 <_printf_i+0x226>
 8004726:	bf00      	nop
 8004728:	080048b1 	.word	0x080048b1
 800472c:	080048c2 	.word	0x080048c2

08004730 <memmove>:
 8004730:	4288      	cmp	r0, r1
 8004732:	b510      	push	{r4, lr}
 8004734:	eb01 0402 	add.w	r4, r1, r2
 8004738:	d902      	bls.n	8004740 <memmove+0x10>
 800473a:	4284      	cmp	r4, r0
 800473c:	4623      	mov	r3, r4
 800473e:	d807      	bhi.n	8004750 <memmove+0x20>
 8004740:	1e43      	subs	r3, r0, #1
 8004742:	42a1      	cmp	r1, r4
 8004744:	d008      	beq.n	8004758 <memmove+0x28>
 8004746:	f811 2b01 	ldrb.w	r2, [r1], #1
 800474a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800474e:	e7f8      	b.n	8004742 <memmove+0x12>
 8004750:	4402      	add	r2, r0
 8004752:	4601      	mov	r1, r0
 8004754:	428a      	cmp	r2, r1
 8004756:	d100      	bne.n	800475a <memmove+0x2a>
 8004758:	bd10      	pop	{r4, pc}
 800475a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800475e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004762:	e7f7      	b.n	8004754 <memmove+0x24>

08004764 <_sbrk_r>:
 8004764:	b538      	push	{r3, r4, r5, lr}
 8004766:	4d06      	ldr	r5, [pc, #24]	; (8004780 <_sbrk_r+0x1c>)
 8004768:	2300      	movs	r3, #0
 800476a:	4604      	mov	r4, r0
 800476c:	4608      	mov	r0, r1
 800476e:	602b      	str	r3, [r5, #0]
 8004770:	f7fc fb00 	bl	8000d74 <_sbrk>
 8004774:	1c43      	adds	r3, r0, #1
 8004776:	d102      	bne.n	800477e <_sbrk_r+0x1a>
 8004778:	682b      	ldr	r3, [r5, #0]
 800477a:	b103      	cbz	r3, 800477e <_sbrk_r+0x1a>
 800477c:	6023      	str	r3, [r4, #0]
 800477e:	bd38      	pop	{r3, r4, r5, pc}
 8004780:	200002a4 	.word	0x200002a4

08004784 <memcpy>:
 8004784:	440a      	add	r2, r1
 8004786:	4291      	cmp	r1, r2
 8004788:	f100 33ff 	add.w	r3, r0, #4294967295
 800478c:	d100      	bne.n	8004790 <memcpy+0xc>
 800478e:	4770      	bx	lr
 8004790:	b510      	push	{r4, lr}
 8004792:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004796:	f803 4f01 	strb.w	r4, [r3, #1]!
 800479a:	4291      	cmp	r1, r2
 800479c:	d1f9      	bne.n	8004792 <memcpy+0xe>
 800479e:	bd10      	pop	{r4, pc}

080047a0 <_realloc_r>:
 80047a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047a4:	4680      	mov	r8, r0
 80047a6:	4614      	mov	r4, r2
 80047a8:	460e      	mov	r6, r1
 80047aa:	b921      	cbnz	r1, 80047b6 <_realloc_r+0x16>
 80047ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80047b0:	4611      	mov	r1, r2
 80047b2:	f7ff bc49 	b.w	8004048 <_malloc_r>
 80047b6:	b92a      	cbnz	r2, 80047c4 <_realloc_r+0x24>
 80047b8:	f7ff fbda 	bl	8003f70 <_free_r>
 80047bc:	4625      	mov	r5, r4
 80047be:	4628      	mov	r0, r5
 80047c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047c4:	f000 f81b 	bl	80047fe <_malloc_usable_size_r>
 80047c8:	4284      	cmp	r4, r0
 80047ca:	4607      	mov	r7, r0
 80047cc:	d802      	bhi.n	80047d4 <_realloc_r+0x34>
 80047ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80047d2:	d812      	bhi.n	80047fa <_realloc_r+0x5a>
 80047d4:	4621      	mov	r1, r4
 80047d6:	4640      	mov	r0, r8
 80047d8:	f7ff fc36 	bl	8004048 <_malloc_r>
 80047dc:	4605      	mov	r5, r0
 80047de:	2800      	cmp	r0, #0
 80047e0:	d0ed      	beq.n	80047be <_realloc_r+0x1e>
 80047e2:	42bc      	cmp	r4, r7
 80047e4:	4622      	mov	r2, r4
 80047e6:	4631      	mov	r1, r6
 80047e8:	bf28      	it	cs
 80047ea:	463a      	movcs	r2, r7
 80047ec:	f7ff ffca 	bl	8004784 <memcpy>
 80047f0:	4631      	mov	r1, r6
 80047f2:	4640      	mov	r0, r8
 80047f4:	f7ff fbbc 	bl	8003f70 <_free_r>
 80047f8:	e7e1      	b.n	80047be <_realloc_r+0x1e>
 80047fa:	4635      	mov	r5, r6
 80047fc:	e7df      	b.n	80047be <_realloc_r+0x1e>

080047fe <_malloc_usable_size_r>:
 80047fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004802:	1f18      	subs	r0, r3, #4
 8004804:	2b00      	cmp	r3, #0
 8004806:	bfbc      	itt	lt
 8004808:	580b      	ldrlt	r3, [r1, r0]
 800480a:	18c0      	addlt	r0, r0, r3
 800480c:	4770      	bx	lr
	...

08004810 <_init>:
 8004810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004812:	bf00      	nop
 8004814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004816:	bc08      	pop	{r3}
 8004818:	469e      	mov	lr, r3
 800481a:	4770      	bx	lr

0800481c <_fini>:
 800481c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800481e:	bf00      	nop
 8004820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004822:	bc08      	pop	{r3}
 8004824:	469e      	mov	lr, r3
 8004826:	4770      	bx	lr
