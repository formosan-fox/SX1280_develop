
SX1280_RX_L476.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  08006778  08006778  00016778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006944  08006944  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08006944  08006944  00016944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800694c  0800694c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800694c  0800694c  0001694c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08006954  08006954  00016954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800695c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f0  20000060  080069b8  00020060  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000450  080069b8  00020450  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022575  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003eb4  00000000  00000000  00042644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001418  00000000  00000000  000464f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fa6  00000000  00000000  00047910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c17a  00000000  00000000  000488b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018e76  00000000  00000000  00074a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ff68f  00000000  00000000  0008d8a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005d10  00000000  00000000  0018cf38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00192c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006760 	.word	0x08006760

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08006760 	.word	0x08006760

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_uldivmod>:
 8000a4c:	b953      	cbnz	r3, 8000a64 <__aeabi_uldivmod+0x18>
 8000a4e:	b94a      	cbnz	r2, 8000a64 <__aeabi_uldivmod+0x18>
 8000a50:	2900      	cmp	r1, #0
 8000a52:	bf08      	it	eq
 8000a54:	2800      	cmpeq	r0, #0
 8000a56:	bf1c      	itt	ne
 8000a58:	f04f 31ff 	movne.w	r1, #4294967295
 8000a5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a60:	f000 b970 	b.w	8000d44 <__aeabi_idiv0>
 8000a64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a6c:	f000 f806 	bl	8000a7c <__udivmoddi4>
 8000a70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a78:	b004      	add	sp, #16
 8000a7a:	4770      	bx	lr

08000a7c <__udivmoddi4>:
 8000a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a80:	9e08      	ldr	r6, [sp, #32]
 8000a82:	460d      	mov	r5, r1
 8000a84:	4604      	mov	r4, r0
 8000a86:	460f      	mov	r7, r1
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d14a      	bne.n	8000b22 <__udivmoddi4+0xa6>
 8000a8c:	428a      	cmp	r2, r1
 8000a8e:	4694      	mov	ip, r2
 8000a90:	d965      	bls.n	8000b5e <__udivmoddi4+0xe2>
 8000a92:	fab2 f382 	clz	r3, r2
 8000a96:	b143      	cbz	r3, 8000aaa <__udivmoddi4+0x2e>
 8000a98:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a9c:	f1c3 0220 	rsb	r2, r3, #32
 8000aa0:	409f      	lsls	r7, r3
 8000aa2:	fa20 f202 	lsr.w	r2, r0, r2
 8000aa6:	4317      	orrs	r7, r2
 8000aa8:	409c      	lsls	r4, r3
 8000aaa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000aae:	fa1f f58c 	uxth.w	r5, ip
 8000ab2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ab6:	0c22      	lsrs	r2, r4, #16
 8000ab8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000abc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ac0:	fb01 f005 	mul.w	r0, r1, r5
 8000ac4:	4290      	cmp	r0, r2
 8000ac6:	d90a      	bls.n	8000ade <__udivmoddi4+0x62>
 8000ac8:	eb1c 0202 	adds.w	r2, ip, r2
 8000acc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ad0:	f080 811c 	bcs.w	8000d0c <__udivmoddi4+0x290>
 8000ad4:	4290      	cmp	r0, r2
 8000ad6:	f240 8119 	bls.w	8000d0c <__udivmoddi4+0x290>
 8000ada:	3902      	subs	r1, #2
 8000adc:	4462      	add	r2, ip
 8000ade:	1a12      	subs	r2, r2, r0
 8000ae0:	b2a4      	uxth	r4, r4
 8000ae2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ae6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aea:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000aee:	fb00 f505 	mul.w	r5, r0, r5
 8000af2:	42a5      	cmp	r5, r4
 8000af4:	d90a      	bls.n	8000b0c <__udivmoddi4+0x90>
 8000af6:	eb1c 0404 	adds.w	r4, ip, r4
 8000afa:	f100 32ff 	add.w	r2, r0, #4294967295
 8000afe:	f080 8107 	bcs.w	8000d10 <__udivmoddi4+0x294>
 8000b02:	42a5      	cmp	r5, r4
 8000b04:	f240 8104 	bls.w	8000d10 <__udivmoddi4+0x294>
 8000b08:	4464      	add	r4, ip
 8000b0a:	3802      	subs	r0, #2
 8000b0c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b10:	1b64      	subs	r4, r4, r5
 8000b12:	2100      	movs	r1, #0
 8000b14:	b11e      	cbz	r6, 8000b1e <__udivmoddi4+0xa2>
 8000b16:	40dc      	lsrs	r4, r3
 8000b18:	2300      	movs	r3, #0
 8000b1a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b22:	428b      	cmp	r3, r1
 8000b24:	d908      	bls.n	8000b38 <__udivmoddi4+0xbc>
 8000b26:	2e00      	cmp	r6, #0
 8000b28:	f000 80ed 	beq.w	8000d06 <__udivmoddi4+0x28a>
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b32:	4608      	mov	r0, r1
 8000b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b38:	fab3 f183 	clz	r1, r3
 8000b3c:	2900      	cmp	r1, #0
 8000b3e:	d149      	bne.n	8000bd4 <__udivmoddi4+0x158>
 8000b40:	42ab      	cmp	r3, r5
 8000b42:	d302      	bcc.n	8000b4a <__udivmoddi4+0xce>
 8000b44:	4282      	cmp	r2, r0
 8000b46:	f200 80f8 	bhi.w	8000d3a <__udivmoddi4+0x2be>
 8000b4a:	1a84      	subs	r4, r0, r2
 8000b4c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b50:	2001      	movs	r0, #1
 8000b52:	4617      	mov	r7, r2
 8000b54:	2e00      	cmp	r6, #0
 8000b56:	d0e2      	beq.n	8000b1e <__udivmoddi4+0xa2>
 8000b58:	e9c6 4700 	strd	r4, r7, [r6]
 8000b5c:	e7df      	b.n	8000b1e <__udivmoddi4+0xa2>
 8000b5e:	b902      	cbnz	r2, 8000b62 <__udivmoddi4+0xe6>
 8000b60:	deff      	udf	#255	; 0xff
 8000b62:	fab2 f382 	clz	r3, r2
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	f040 8090 	bne.w	8000c8c <__udivmoddi4+0x210>
 8000b6c:	1a8a      	subs	r2, r1, r2
 8000b6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b72:	fa1f fe8c 	uxth.w	lr, ip
 8000b76:	2101      	movs	r1, #1
 8000b78:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b7c:	fb07 2015 	mls	r0, r7, r5, r2
 8000b80:	0c22      	lsrs	r2, r4, #16
 8000b82:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b86:	fb0e f005 	mul.w	r0, lr, r5
 8000b8a:	4290      	cmp	r0, r2
 8000b8c:	d908      	bls.n	8000ba0 <__udivmoddi4+0x124>
 8000b8e:	eb1c 0202 	adds.w	r2, ip, r2
 8000b92:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x122>
 8000b98:	4290      	cmp	r0, r2
 8000b9a:	f200 80cb 	bhi.w	8000d34 <__udivmoddi4+0x2b8>
 8000b9e:	4645      	mov	r5, r8
 8000ba0:	1a12      	subs	r2, r2, r0
 8000ba2:	b2a4      	uxth	r4, r4
 8000ba4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ba8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bb4:	45a6      	cmp	lr, r4
 8000bb6:	d908      	bls.n	8000bca <__udivmoddi4+0x14e>
 8000bb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bbc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bc0:	d202      	bcs.n	8000bc8 <__udivmoddi4+0x14c>
 8000bc2:	45a6      	cmp	lr, r4
 8000bc4:	f200 80bb 	bhi.w	8000d3e <__udivmoddi4+0x2c2>
 8000bc8:	4610      	mov	r0, r2
 8000bca:	eba4 040e 	sub.w	r4, r4, lr
 8000bce:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000bd2:	e79f      	b.n	8000b14 <__udivmoddi4+0x98>
 8000bd4:	f1c1 0720 	rsb	r7, r1, #32
 8000bd8:	408b      	lsls	r3, r1
 8000bda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bde:	ea4c 0c03 	orr.w	ip, ip, r3
 8000be2:	fa05 f401 	lsl.w	r4, r5, r1
 8000be6:	fa20 f307 	lsr.w	r3, r0, r7
 8000bea:	40fd      	lsrs	r5, r7
 8000bec:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bf0:	4323      	orrs	r3, r4
 8000bf2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bf6:	fa1f fe8c 	uxth.w	lr, ip
 8000bfa:	fb09 5518 	mls	r5, r9, r8, r5
 8000bfe:	0c1c      	lsrs	r4, r3, #16
 8000c00:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c04:	fb08 f50e 	mul.w	r5, r8, lr
 8000c08:	42a5      	cmp	r5, r4
 8000c0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c0e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c12:	d90b      	bls.n	8000c2c <__udivmoddi4+0x1b0>
 8000c14:	eb1c 0404 	adds.w	r4, ip, r4
 8000c18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c1c:	f080 8088 	bcs.w	8000d30 <__udivmoddi4+0x2b4>
 8000c20:	42a5      	cmp	r5, r4
 8000c22:	f240 8085 	bls.w	8000d30 <__udivmoddi4+0x2b4>
 8000c26:	f1a8 0802 	sub.w	r8, r8, #2
 8000c2a:	4464      	add	r4, ip
 8000c2c:	1b64      	subs	r4, r4, r5
 8000c2e:	b29d      	uxth	r5, r3
 8000c30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c34:	fb09 4413 	mls	r4, r9, r3, r4
 8000c38:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c3c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c40:	45a6      	cmp	lr, r4
 8000c42:	d908      	bls.n	8000c56 <__udivmoddi4+0x1da>
 8000c44:	eb1c 0404 	adds.w	r4, ip, r4
 8000c48:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c4c:	d26c      	bcs.n	8000d28 <__udivmoddi4+0x2ac>
 8000c4e:	45a6      	cmp	lr, r4
 8000c50:	d96a      	bls.n	8000d28 <__udivmoddi4+0x2ac>
 8000c52:	3b02      	subs	r3, #2
 8000c54:	4464      	add	r4, ip
 8000c56:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c5e:	eba4 040e 	sub.w	r4, r4, lr
 8000c62:	42ac      	cmp	r4, r5
 8000c64:	46c8      	mov	r8, r9
 8000c66:	46ae      	mov	lr, r5
 8000c68:	d356      	bcc.n	8000d18 <__udivmoddi4+0x29c>
 8000c6a:	d053      	beq.n	8000d14 <__udivmoddi4+0x298>
 8000c6c:	b156      	cbz	r6, 8000c84 <__udivmoddi4+0x208>
 8000c6e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c72:	eb64 040e 	sbc.w	r4, r4, lr
 8000c76:	fa04 f707 	lsl.w	r7, r4, r7
 8000c7a:	40ca      	lsrs	r2, r1
 8000c7c:	40cc      	lsrs	r4, r1
 8000c7e:	4317      	orrs	r7, r2
 8000c80:	e9c6 7400 	strd	r7, r4, [r6]
 8000c84:	4618      	mov	r0, r3
 8000c86:	2100      	movs	r1, #0
 8000c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8c:	f1c3 0120 	rsb	r1, r3, #32
 8000c90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c94:	fa20 f201 	lsr.w	r2, r0, r1
 8000c98:	fa25 f101 	lsr.w	r1, r5, r1
 8000c9c:	409d      	lsls	r5, r3
 8000c9e:	432a      	orrs	r2, r5
 8000ca0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca4:	fa1f fe8c 	uxth.w	lr, ip
 8000ca8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cac:	fb07 1510 	mls	r5, r7, r0, r1
 8000cb0:	0c11      	lsrs	r1, r2, #16
 8000cb2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cb6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cba:	428d      	cmp	r5, r1
 8000cbc:	fa04 f403 	lsl.w	r4, r4, r3
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0x258>
 8000cc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cca:	d22f      	bcs.n	8000d2c <__udivmoddi4+0x2b0>
 8000ccc:	428d      	cmp	r5, r1
 8000cce:	d92d      	bls.n	8000d2c <__udivmoddi4+0x2b0>
 8000cd0:	3802      	subs	r0, #2
 8000cd2:	4461      	add	r1, ip
 8000cd4:	1b49      	subs	r1, r1, r5
 8000cd6:	b292      	uxth	r2, r2
 8000cd8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cdc:	fb07 1115 	mls	r1, r7, r5, r1
 8000ce0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ce4:	fb05 f10e 	mul.w	r1, r5, lr
 8000ce8:	4291      	cmp	r1, r2
 8000cea:	d908      	bls.n	8000cfe <__udivmoddi4+0x282>
 8000cec:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf4:	d216      	bcs.n	8000d24 <__udivmoddi4+0x2a8>
 8000cf6:	4291      	cmp	r1, r2
 8000cf8:	d914      	bls.n	8000d24 <__udivmoddi4+0x2a8>
 8000cfa:	3d02      	subs	r5, #2
 8000cfc:	4462      	add	r2, ip
 8000cfe:	1a52      	subs	r2, r2, r1
 8000d00:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d04:	e738      	b.n	8000b78 <__udivmoddi4+0xfc>
 8000d06:	4631      	mov	r1, r6
 8000d08:	4630      	mov	r0, r6
 8000d0a:	e708      	b.n	8000b1e <__udivmoddi4+0xa2>
 8000d0c:	4639      	mov	r1, r7
 8000d0e:	e6e6      	b.n	8000ade <__udivmoddi4+0x62>
 8000d10:	4610      	mov	r0, r2
 8000d12:	e6fb      	b.n	8000b0c <__udivmoddi4+0x90>
 8000d14:	4548      	cmp	r0, r9
 8000d16:	d2a9      	bcs.n	8000c6c <__udivmoddi4+0x1f0>
 8000d18:	ebb9 0802 	subs.w	r8, r9, r2
 8000d1c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d20:	3b01      	subs	r3, #1
 8000d22:	e7a3      	b.n	8000c6c <__udivmoddi4+0x1f0>
 8000d24:	4645      	mov	r5, r8
 8000d26:	e7ea      	b.n	8000cfe <__udivmoddi4+0x282>
 8000d28:	462b      	mov	r3, r5
 8000d2a:	e794      	b.n	8000c56 <__udivmoddi4+0x1da>
 8000d2c:	4640      	mov	r0, r8
 8000d2e:	e7d1      	b.n	8000cd4 <__udivmoddi4+0x258>
 8000d30:	46d0      	mov	r8, sl
 8000d32:	e77b      	b.n	8000c2c <__udivmoddi4+0x1b0>
 8000d34:	3d02      	subs	r5, #2
 8000d36:	4462      	add	r2, ip
 8000d38:	e732      	b.n	8000ba0 <__udivmoddi4+0x124>
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e70a      	b.n	8000b54 <__udivmoddi4+0xd8>
 8000d3e:	4464      	add	r4, ip
 8000d40:	3802      	subs	r0, #2
 8000d42:	e742      	b.n	8000bca <__udivmoddi4+0x14e>

08000d44 <__aeabi_idiv0>:
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <_ZN6SX128x8HalPreTxEv>:
	virtual void HalGpioWrite(GpioPinFunction_t func, uint8_t value) = 0;
	virtual void HalSpiTransfer(uint8_t *buffer_in, const uint8_t *buffer_out, uint16_t size) = 0;
	void HalSpiRead(uint8_t *buffer_in, uint16_t size);
	void HalSpiWrite(const uint8_t *buffer_out, uint16_t size);

	virtual void HalPreTx() {}
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <_ZN6SX128x8HalPreRxEv>:
	virtual void HalPreRx() {}
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <_ZN6SX128x9HalPostTxEv>:
	virtual void HalPostTx() {}
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <_ZN6SX128x9HalPostRxEv>:
	virtual void HalPostRx() {}
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <_ZN6SX128x12GetDioStatusEv>:
	virtual void WriteRegister(uint16_t address, uint8_t value);
	virtual void ReadRegister(uint16_t address, uint8_t *buffer, uint16_t size);
	virtual uint8_t ReadRegister(uint16_t address);
	virtual void WriteBuffer(uint8_t offset, uint8_t *buffer, uint8_t size);
	virtual void ReadBuffer(uint8_t offset, uint8_t *buffer, uint8_t size);
	virtual uint8_t GetDioStatus(void) {
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
		return 0;
 8000da0:	2300      	movs	r3, #0
	}
 8000da2:	4618      	mov	r0, r3
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <_ZN6SX128x18GetFirmwareVersionEv>:
//		WriteRegister( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
//	}
//}

uint16_t SX128x::GetFirmwareVersion(void )
{
 8000dae:	b590      	push	{r4, r7, lr}
 8000db0:	b083      	sub	sp, #12
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
	return( ( ( ReadRegister( REG_LR_FIRMWARE_VERSION_MSB ) ) << 8 ) | ( ReadRegister( REG_LR_FIRMWARE_VERSION_MSB + 1 ) ) );
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	3344      	adds	r3, #68	; 0x44
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f240 1153 	movw	r1, #339	; 0x153
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	4798      	blx	r3
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	021b      	lsls	r3, r3, #8
 8000dca:	b21c      	sxth	r4, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	3344      	adds	r3, #68	; 0x44
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	4798      	blx	r3
 8000ddc:	4603      	mov	r3, r0
 8000dde:	b21b      	sxth	r3, r3
 8000de0:	4323      	orrs	r3, r4
 8000de2:	b21b      	sxth	r3, r3
 8000de4:	b29b      	uxth	r3, r3
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd90      	pop	{r4, r7, pc}

08000dee <_ZN6SX128x9GetStatusEv>:

SX128x::RadioStatus_t SX128x::GetStatus(void )
{
 8000dee:	b590      	push	{r4, r7, lr}
 8000df0:	b085      	sub	sp, #20
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
	uint8_t stat = 0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	73fb      	strb	r3, [r7, #15]
	RadioStatus_t status;

	ReadCommand( RADIO_GET_STATUS, ( uint8_t * )&stat, 1 );
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	3334      	adds	r3, #52	; 0x34
 8000e00:	681c      	ldr	r4, [r3, #0]
 8000e02:	f107 020f 	add.w	r2, r7, #15
 8000e06:	2301      	movs	r3, #1
 8000e08:	21c0      	movs	r1, #192	; 0xc0
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	47a0      	blx	r4
	status.Value = stat;
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
 8000e10:	733b      	strb	r3, [r7, #12]
	return( status );
 8000e12:	7b3b      	ldrb	r3, [r7, #12]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3714      	adds	r7, #20
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd90      	pop	{r4, r7, pc}

08000e1c <_ZN6SX128x9GetOpModeEv>:

SX128x::RadioOperatingModes_t SX128x::GetOpMode(void )
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
	return( OperatingMode );
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <_ZN6SX128x10SetStandbyENS_19RadioStandbyModes_tE>:
	OperatingMode = MODE_SLEEP;
	WriteCommand( RADIO_SET_SLEEP, &sleep, 1 );
}

void SX128x::SetStandby(RadioStandbyModes_t standbyConfig )
{
 8000e36:	b590      	push	{r4, r7, lr}
 8000e38:	b083      	sub	sp, #12
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
 8000e3e:	460b      	mov	r3, r1
 8000e40:	70fb      	strb	r3, [r7, #3]
	// std::lock_guard<std::mutex> lg(IOLock2);

	WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	3330      	adds	r3, #48	; 0x30
 8000e48:	681c      	ldr	r4, [r3, #0]
 8000e4a:	1cfa      	adds	r2, r7, #3
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	2180      	movs	r1, #128	; 0x80
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	47a0      	blx	r4
	if (standbyConfig == STDBY_RC )
 8000e54:	78fb      	ldrb	r3, [r7, #3]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d104      	bne.n	8000e64 <_ZN6SX128x10SetStandbyENS_19RadioStandbyModes_tE+0x2e>
	{
		OperatingMode = MODE_STDBY_RC;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2202      	movs	r2, #2
 8000e5e:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	}
	else
	{
		OperatingMode = MODE_STDBY_XOSC;
	}
}
 8000e62:	e003      	b.n	8000e6c <_ZN6SX128x10SetStandbyENS_19RadioStandbyModes_tE+0x36>
		OperatingMode = MODE_STDBY_XOSC;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2203      	movs	r2, #3
 8000e68:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
}
 8000e6c:	bf00      	nop
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd90      	pop	{r4, r7, pc}

08000e74 <_ZN6SX128x5SetRxENS_10TickTime_sE>:
	WriteCommand( RADIO_SET_TX, buf, 3 );
	OperatingMode = MODE_TX;
}

void SX128x::SetRx(TickTime_t timeout )
{
 8000e74:	b590      	push	{r4, r7, lr}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]
	// std::lock_guard<std::mutex> lg(IOLock2);

	uint8_t buf[3];
	buf[0] = timeout.PeriodBase;
 8000e7e:	783b      	ldrb	r3, [r7, #0]
 8000e80:	733b      	strb	r3, [r7, #12]
	buf[1] = ( uint8_t )( ( timeout.PeriodBaseCount >> 8 ) & 0x00FF );
 8000e82:	887b      	ldrh	r3, [r7, #2]
 8000e84:	0a1b      	lsrs	r3, r3, #8
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	737b      	strb	r3, [r7, #13]
	buf[2] = ( uint8_t )( timeout.PeriodBaseCount & 0x00FF );
 8000e8c:	887b      	ldrh	r3, [r7, #2]
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	73bb      	strb	r3, [r7, #14]

	ClearIrqStatus( IRQ_RADIO_ALL );
 8000e92:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f000 fa75 	bl	8001386 <_ZN6SX128x14ClearIrqStatusEt>
//	if (GetPacketType( true ) == PACKET_TYPE_RANGING )
//	{
////		SetRangingRole( RADIO_RANGING_ROLE_SLAVE );
//	}

	HalPostTx();
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	3314      	adds	r3, #20
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	4798      	blx	r3
	HalPreRx();
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	3310      	adds	r3, #16
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	4798      	blx	r3
	WriteCommand( RADIO_SET_RX, buf, 3 );
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	3330      	adds	r3, #48	; 0x30
 8000eba:	681c      	ldr	r4, [r3, #0]
 8000ebc:	f107 020c 	add.w	r2, r7, #12
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	2182      	movs	r1, #130	; 0x82
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	47a0      	blx	r4
	OperatingMode = MODE_RX;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2205      	movs	r2, #5
 8000ecc:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
}
 8000ed0:	bf00      	nop
 8000ed2:	3714      	adds	r7, #20
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd90      	pop	{r4, r7, pc}

08000ed8 <_ZN6SX128x13SetPacketTypeENS_18RadioPacketTypes_tE>:
	HalPreTx();
	WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
}

void SX128x::SetPacketType(RadioPacketTypes_t packetType )
{
 8000ed8:	b590      	push	{r4, r7, lr}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	70fb      	strb	r3, [r7, #3]
	// Save packet type internally to avoid questioning the radio
	this->PacketType = packetType;
 8000ee4:	78fa      	ldrb	r2, [r7, #3]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9

	WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	3330      	adds	r3, #48	; 0x30
 8000ef2:	681c      	ldr	r4, [r3, #0]
 8000ef4:	1cfa      	adds	r2, r7, #3
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	218a      	movs	r1, #138	; 0x8a
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	47a0      	blx	r4
}
 8000efe:	bf00      	nop
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd90      	pop	{r4, r7, pc}

08000f06 <_ZN6SX128x13GetPacketTypeEb>:

SX128x::RadioPacketTypes_t SX128x::GetPacketType(bool returnLocalCopy )
{
 8000f06:	b590      	push	{r4, r7, lr}
 8000f08:	b085      	sub	sp, #20
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
 8000f0e:	460b      	mov	r3, r1
 8000f10:	70fb      	strb	r3, [r7, #3]
	RadioPacketTypes_t packetType = PACKET_TYPE_NONE;
 8000f12:	230f      	movs	r3, #15
 8000f14:	73fb      	strb	r3, [r7, #15]
	if (returnLocalCopy == false )
 8000f16:	78fb      	ldrb	r3, [r7, #3]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d114      	bne.n	8000f46 <_ZN6SX128x13GetPacketTypeEb+0x40>
	{
		ReadCommand( RADIO_GET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	3334      	adds	r3, #52	; 0x34
 8000f22:	681c      	ldr	r4, [r3, #0]
 8000f24:	f107 020f 	add.w	r2, r7, #15
 8000f28:	2301      	movs	r3, #1
 8000f2a:	2103      	movs	r1, #3
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	47a0      	blx	r4
		if (this->PacketType != packetType )
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 8000f36:	7bfb      	ldrb	r3, [r7, #15]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d008      	beq.n	8000f4e <_ZN6SX128x13GetPacketTypeEb+0x48>
		{
			this->PacketType = packetType;
 8000f3c:	7bfa      	ldrb	r2, [r7, #15]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
 8000f44:	e003      	b.n	8000f4e <_ZN6SX128x13GetPacketTypeEb+0x48>
		}
	}
	else
	{
		packetType = this->PacketType;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8000f4c:	73fb      	strb	r3, [r7, #15]
	}
	return packetType;
 8000f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3714      	adds	r7, #20
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd90      	pop	{r4, r7, pc}

08000f58 <_ZN6SX128x14SetRfFrequencyEm>:

void SX128x::SetRfFrequency(uint32_t rfFrequency )
{
 8000f58:	b590      	push	{r4, r7, lr}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
	uint8_t buf[3];
	uint32_t freq = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]

	freq = ( uint32_t )( ( double )rfFrequency / ( double )FREQ_STEP );
 8000f66:	6838      	ldr	r0, [r7, #0]
 8000f68:	f7ff fac4 	bl	80004f4 <__aeabi_ui2d>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000f72:	f7ff fc63 	bl	800083c <__aeabi_ddiv>
 8000f76:	4602      	mov	r2, r0
 8000f78:	460b      	mov	r3, r1
 8000f7a:	4610      	mov	r0, r2
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f7ff fd45 	bl	8000a0c <__aeabi_d2uiz>
 8000f82:	4603      	mov	r3, r0
 8000f84:	60fb      	str	r3, [r7, #12]
	buf[0] = ( uint8_t )( ( freq >> 16 ) & 0xFF );
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	0c1b      	lsrs	r3, r3, #16
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	723b      	strb	r3, [r7, #8]
	buf[1] = ( uint8_t )( ( freq >> 8 ) & 0xFF );
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	0a1b      	lsrs	r3, r3, #8
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	727b      	strb	r3, [r7, #9]
	buf[2] = ( uint8_t )( freq & 0xFF );
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	72bb      	strb	r3, [r7, #10]
	WriteCommand( RADIO_SET_RFFREQUENCY, buf, 3 );
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	3330      	adds	r3, #48	; 0x30
 8000fa2:	681c      	ldr	r4, [r3, #0]
 8000fa4:	f107 0208 	add.w	r2, r7, #8
 8000fa8:	2303      	movs	r3, #3
 8000faa:	2186      	movs	r1, #134	; 0x86
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	47a0      	blx	r4
}
 8000fb0:	bf00      	nop
 8000fb2:	3714      	adds	r7, #20
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd90      	pop	{r4, r7, pc}

08000fb8 <_ZN6SX128x22SetBufferBaseAddressesEhh>:
	WriteCommand( RADIO_SET_CADPARAMS, ( uint8_t* )&cadSymbolNum, 1 );
	OperatingMode = MODE_CAD;
}

void SX128x::SetBufferBaseAddresses(uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8000fb8:	b590      	push	{r4, r7, lr}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	70fb      	strb	r3, [r7, #3]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	70bb      	strb	r3, [r7, #2]
	uint8_t buf[2];

	buf[0] = txBaseAddress;
 8000fc8:	78fb      	ldrb	r3, [r7, #3]
 8000fca:	733b      	strb	r3, [r7, #12]
	buf[1] = rxBaseAddress;
 8000fcc:	78bb      	ldrb	r3, [r7, #2]
 8000fce:	737b      	strb	r3, [r7, #13]
	WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	3330      	adds	r3, #48	; 0x30
 8000fd6:	681c      	ldr	r4, [r3, #0]
 8000fd8:	f107 020c 	add.w	r2, r7, #12
 8000fdc:	2302      	movs	r3, #2
 8000fde:	218f      	movs	r1, #143	; 0x8f
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	47a0      	blx	r4
}
 8000fe4:	bf00      	nop
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd90      	pop	{r4, r7, pc}

08000fec <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE>:

void SX128x::SetModulationParams(const ModulationParams_t& modParams )
{
 8000fec:	b590      	push	{r4, r7, lr}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
	uint8_t buf[3];

	// Check if required configuration corresponds to the stored packet type
	// If not, silently update radio packet type
	if (this->PacketType != modParams.PacketType )
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	429a      	cmp	r2, r3
 8001002:	d005      	beq.n	8001010 <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE+0x24>
	{
		this->SetPacketType( modParams.PacketType );
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	4619      	mov	r1, r3
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff ff64 	bl	8000ed8 <_ZN6SX128x13SetPacketTypeENS_18RadioPacketTypes_tE>
	}

	switch( modParams.PacketType )
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b0f      	cmp	r3, #15
 8001016:	d857      	bhi.n	80010c8 <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE+0xdc>
 8001018:	a201      	add	r2, pc, #4	; (adr r2, 8001020 <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE+0x34>)
 800101a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800101e:	bf00      	nop
 8001020:	08001061 	.word	0x08001061
 8001024:	08001075 	.word	0x08001075
 8001028:	08001075 	.word	0x08001075
 800102c:	08001093 	.word	0x08001093
 8001030:	080010a7 	.word	0x080010a7
 8001034:	080010c9 	.word	0x080010c9
 8001038:	080010c9 	.word	0x080010c9
 800103c:	080010c9 	.word	0x080010c9
 8001040:	080010c9 	.word	0x080010c9
 8001044:	080010c9 	.word	0x080010c9
 8001048:	080010c9 	.word	0x080010c9
 800104c:	080010c9 	.word	0x080010c9
 8001050:	080010c9 	.word	0x080010c9
 8001054:	080010c9 	.word	0x080010c9
 8001058:	080010c9 	.word	0x080010c9
 800105c:	080010bb 	.word	0x080010bb
	{
		case PACKET_TYPE_GFSK:
			buf[0] = modParams.Params.Gfsk.BitrateBandwidth;
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	785b      	ldrb	r3, [r3, #1]
 8001064:	733b      	strb	r3, [r7, #12]
			buf[1] = modParams.Params.Gfsk.ModulationIndex;
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	789b      	ldrb	r3, [r3, #2]
 800106a:	737b      	strb	r3, [r7, #13]
			buf[2] = modParams.Params.Gfsk.ModulationShaping;
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	78db      	ldrb	r3, [r3, #3]
 8001070:	73bb      	strb	r3, [r7, #14]
			break;
 8001072:	e029      	b.n	80010c8 <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE+0xdc>
		case PACKET_TYPE_LORA:
		case PACKET_TYPE_RANGING:
			buf[0] = modParams.Params.LoRa.SpreadingFactor;
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	791b      	ldrb	r3, [r3, #4]
 8001078:	733b      	strb	r3, [r7, #12]
			buf[1] = modParams.Params.LoRa.Bandwidth;
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	795b      	ldrb	r3, [r3, #5]
 800107e:	737b      	strb	r3, [r7, #13]
			buf[2] = modParams.Params.LoRa.CodingRate;
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	799b      	ldrb	r3, [r3, #6]
 8001084:	73bb      	strb	r3, [r7, #14]
			this->LoRaBandwidth = modParams.Params.LoRa.Bandwidth;
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	795a      	ldrb	r2, [r3, #5]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
			break;
 8001090:	e01a      	b.n	80010c8 <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE+0xdc>
		case PACKET_TYPE_FLRC:
			buf[0] = modParams.Params.Flrc.BitrateBandwidth;
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	79db      	ldrb	r3, [r3, #7]
 8001096:	733b      	strb	r3, [r7, #12]
			buf[1] = modParams.Params.Flrc.CodingRate;
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	7a1b      	ldrb	r3, [r3, #8]
 800109c:	737b      	strb	r3, [r7, #13]
			buf[2] = modParams.Params.Flrc.ModulationShaping;
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	7a5b      	ldrb	r3, [r3, #9]
 80010a2:	73bb      	strb	r3, [r7, #14]
			break;
 80010a4:	e010      	b.n	80010c8 <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE+0xdc>
		case PACKET_TYPE_BLE:
			buf[0] = modParams.Params.Ble.BitrateBandwidth;
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	7a9b      	ldrb	r3, [r3, #10]
 80010aa:	733b      	strb	r3, [r7, #12]
			buf[1] = modParams.Params.Ble.ModulationIndex;
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	7adb      	ldrb	r3, [r3, #11]
 80010b0:	737b      	strb	r3, [r7, #13]
			buf[2] = modParams.Params.Ble.ModulationShaping;
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	7b1b      	ldrb	r3, [r3, #12]
 80010b6:	73bb      	strb	r3, [r7, #14]
			break;
 80010b8:	e006      	b.n	80010c8 <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE+0xdc>
		case PACKET_TYPE_NONE:
			buf[0] = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	733b      	strb	r3, [r7, #12]
			buf[1] = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	737b      	strb	r3, [r7, #13]
			buf[2] = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	73bb      	strb	r3, [r7, #14]
			break;
 80010c6:	bf00      	nop
	}
	WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, 3 );
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	3330      	adds	r3, #48	; 0x30
 80010ce:	681c      	ldr	r4, [r3, #0]
 80010d0:	f107 020c 	add.w	r2, r7, #12
 80010d4:	2303      	movs	r3, #3
 80010d6:	218b      	movs	r1, #139	; 0x8b
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	47a0      	blx	r4
	CurrentModParams = modParams;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	683a      	ldr	r2, [r7, #0]
 80010e0:	33ab      	adds	r3, #171	; 0xab
 80010e2:	6814      	ldr	r4, [r2, #0]
 80010e4:	6850      	ldr	r0, [r2, #4]
 80010e6:	6891      	ldr	r1, [r2, #8]
 80010e8:	601c      	str	r4, [r3, #0]
 80010ea:	6058      	str	r0, [r3, #4]
 80010ec:	6099      	str	r1, [r3, #8]
 80010ee:	7b12      	ldrb	r2, [r2, #12]
 80010f0:	731a      	strb	r2, [r3, #12]
}
 80010f2:	bf00      	nop
 80010f4:	3714      	adds	r7, #20
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd90      	pop	{r4, r7, pc}
 80010fa:	bf00      	nop

080010fc <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE>:

void SX128x::SetPacketParams(const PacketParams_t& packetParams)
{
 80010fc:	b5b0      	push	{r4, r5, r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
	uint8_t buf[7];
	// Check if required configuration corresponds to the stored packet type
	// If not, silently update radio packet type
	if (this->PacketType != packetParams.PacketType )
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	429a      	cmp	r2, r3
 8001112:	d005      	beq.n	8001120 <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE+0x24>
	{
		this->SetPacketType( packetParams.PacketType );
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	4619      	mov	r1, r3
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff fedc 	bl	8000ed8 <_ZN6SX128x13SetPacketTypeENS_18RadioPacketTypes_tE>
	}

	switch( packetParams.PacketType )
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b0f      	cmp	r3, #15
 8001126:	f200 8085 	bhi.w	8001234 <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE+0x138>
 800112a:	a201      	add	r2, pc, #4	; (adr r2, 8001130 <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE+0x34>)
 800112c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001130:	08001171 	.word	0x08001171
 8001134:	0800119d 	.word	0x0800119d
 8001138:	0800119d 	.word	0x0800119d
 800113c:	080011c5 	.word	0x080011c5
 8001140:	080011f1 	.word	0x080011f1
 8001144:	08001235 	.word	0x08001235
 8001148:	08001235 	.word	0x08001235
 800114c:	08001235 	.word	0x08001235
 8001150:	08001235 	.word	0x08001235
 8001154:	08001235 	.word	0x08001235
 8001158:	08001235 	.word	0x08001235
 800115c:	08001235 	.word	0x08001235
 8001160:	08001235 	.word	0x08001235
 8001164:	08001235 	.word	0x08001235
 8001168:	08001235 	.word	0x08001235
 800116c:	08001217 	.word	0x08001217
	{
		case PACKET_TYPE_GFSK:
			buf[0] = packetParams.Params.Gfsk.PreambleLength;
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	785b      	ldrb	r3, [r3, #1]
 8001174:	723b      	strb	r3, [r7, #8]
			buf[1] = packetParams.Params.Gfsk.SyncWordLength;
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	789b      	ldrb	r3, [r3, #2]
 800117a:	727b      	strb	r3, [r7, #9]
			buf[2] = packetParams.Params.Gfsk.SyncWordMatch;
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	78db      	ldrb	r3, [r3, #3]
 8001180:	72bb      	strb	r3, [r7, #10]
			buf[3] = packetParams.Params.Gfsk.HeaderType;
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	791b      	ldrb	r3, [r3, #4]
 8001186:	72fb      	strb	r3, [r7, #11]
			buf[4] = packetParams.Params.Gfsk.PayloadLength;
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	795b      	ldrb	r3, [r3, #5]
 800118c:	733b      	strb	r3, [r7, #12]
			buf[5] = packetParams.Params.Gfsk.CrcLength;
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	799b      	ldrb	r3, [r3, #6]
 8001192:	737b      	strb	r3, [r7, #13]
			buf[6] = packetParams.Params.Gfsk.Whitening;
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	79db      	ldrb	r3, [r3, #7]
 8001198:	73bb      	strb	r3, [r7, #14]
			break;
 800119a:	e04b      	b.n	8001234 <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE+0x138>
		case PACKET_TYPE_LORA:
		case PACKET_TYPE_RANGING:
			buf[0] = packetParams.Params.LoRa.PreambleLength;
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	7a1b      	ldrb	r3, [r3, #8]
 80011a0:	723b      	strb	r3, [r7, #8]
			buf[1] = packetParams.Params.LoRa.HeaderType;
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	7a5b      	ldrb	r3, [r3, #9]
 80011a6:	727b      	strb	r3, [r7, #9]
			buf[2] = packetParams.Params.LoRa.PayloadLength;
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	7a9b      	ldrb	r3, [r3, #10]
 80011ac:	72bb      	strb	r3, [r7, #10]
			buf[3] = packetParams.Params.LoRa.Crc;
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	7adb      	ldrb	r3, [r3, #11]
 80011b2:	72fb      	strb	r3, [r7, #11]
			buf[4] = packetParams.Params.LoRa.InvertIQ;
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	7b1b      	ldrb	r3, [r3, #12]
 80011b8:	733b      	strb	r3, [r7, #12]
			buf[5] = 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	737b      	strb	r3, [r7, #13]
			buf[6] = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	73bb      	strb	r3, [r7, #14]
			break;
 80011c2:	e037      	b.n	8001234 <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE+0x138>
		case PACKET_TYPE_FLRC:
			buf[0] = packetParams.Params.Flrc.PreambleLength;
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	7b5b      	ldrb	r3, [r3, #13]
 80011c8:	723b      	strb	r3, [r7, #8]
			buf[1] = packetParams.Params.Flrc.SyncWordLength;
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	7b9b      	ldrb	r3, [r3, #14]
 80011ce:	727b      	strb	r3, [r7, #9]
			buf[2] = packetParams.Params.Flrc.SyncWordMatch;
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	7bdb      	ldrb	r3, [r3, #15]
 80011d4:	72bb      	strb	r3, [r7, #10]
			buf[3] = packetParams.Params.Flrc.HeaderType;
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	7c1b      	ldrb	r3, [r3, #16]
 80011da:	72fb      	strb	r3, [r7, #11]
			buf[4] = packetParams.Params.Flrc.PayloadLength;
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	7c5b      	ldrb	r3, [r3, #17]
 80011e0:	733b      	strb	r3, [r7, #12]
			buf[5] = packetParams.Params.Flrc.CrcLength;
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	7c9b      	ldrb	r3, [r3, #18]
 80011e6:	737b      	strb	r3, [r7, #13]
			buf[6] = packetParams.Params.Flrc.Whitening;
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	7cdb      	ldrb	r3, [r3, #19]
 80011ec:	73bb      	strb	r3, [r7, #14]
			break;
 80011ee:	e021      	b.n	8001234 <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE+0x138>
		case PACKET_TYPE_BLE:
			buf[0] = packetParams.Params.Ble.ConnectionState;
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	7d1b      	ldrb	r3, [r3, #20]
 80011f4:	723b      	strb	r3, [r7, #8]
			buf[1] = packetParams.Params.Ble.CrcLength;
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	7d5b      	ldrb	r3, [r3, #21]
 80011fa:	727b      	strb	r3, [r7, #9]
			buf[2] = packetParams.Params.Ble.BleTestPayload;
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	7d9b      	ldrb	r3, [r3, #22]
 8001200:	72bb      	strb	r3, [r7, #10]
			buf[3] = packetParams.Params.Ble.Whitening;
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	7ddb      	ldrb	r3, [r3, #23]
 8001206:	72fb      	strb	r3, [r7, #11]
			buf[4] = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	733b      	strb	r3, [r7, #12]
			buf[5] = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	737b      	strb	r3, [r7, #13]
			buf[6] = 0;
 8001210:	2300      	movs	r3, #0
 8001212:	73bb      	strb	r3, [r7, #14]
			break;
 8001214:	e00e      	b.n	8001234 <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE+0x138>
		case PACKET_TYPE_NONE:
			buf[0] = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	723b      	strb	r3, [r7, #8]
			buf[1] = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	727b      	strb	r3, [r7, #9]
			buf[2] = 0;
 800121e:	2300      	movs	r3, #0
 8001220:	72bb      	strb	r3, [r7, #10]
			buf[3] = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	72fb      	strb	r3, [r7, #11]
			buf[4] = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	733b      	strb	r3, [r7, #12]
			buf[5] = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	737b      	strb	r3, [r7, #13]
			buf[6] = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	73bb      	strb	r3, [r7, #14]
			break;
 8001232:	bf00      	nop
	}
	WriteCommand( RADIO_SET_PACKETPARAMS, buf, 7 );
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	3330      	adds	r3, #48	; 0x30
 800123a:	681c      	ldr	r4, [r3, #0]
 800123c:	f107 0208 	add.w	r2, r7, #8
 8001240:	2307      	movs	r3, #7
 8001242:	218c      	movs	r1, #140	; 0x8c
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	47a0      	blx	r4
	CurrentPacketParams = packetParams;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	683a      	ldr	r2, [r7, #0]
 800124c:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 8001250:	4615      	mov	r5, r2
 8001252:	6828      	ldr	r0, [r5, #0]
 8001254:	6869      	ldr	r1, [r5, #4]
 8001256:	68aa      	ldr	r2, [r5, #8]
 8001258:	68eb      	ldr	r3, [r5, #12]
 800125a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800125c:	6928      	ldr	r0, [r5, #16]
 800125e:	6969      	ldr	r1, [r5, #20]
 8001260:	c403      	stmia	r4!, {r0, r1}
}
 8001262:	bf00      	nop
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bdb0      	pop	{r4, r5, r7, pc}
 800126a:	bf00      	nop

0800126c <_ZN6SX128x17GetRxBufferStatusEPhS0_>:
{
	this->WriteRegister( REG_LR_PREAMBLELENGTH, ( this->ReadRegister( REG_LR_PREAMBLELENGTH ) & MASK_FORCE_PREAMBLELENGTH ) | preambleLength );
}

void SX128x::GetRxBufferStatus(uint8_t *rxPayloadLength, uint8_t *rxStartBufferPointer )
{
 800126c:	b590      	push	{r4, r7, lr}
 800126e:	b087      	sub	sp, #28
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
	uint8_t status[2];

	ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	3334      	adds	r3, #52	; 0x34
 800127e:	681c      	ldr	r4, [r3, #0]
 8001280:	f107 0214 	add.w	r2, r7, #20
 8001284:	2302      	movs	r3, #2
 8001286:	2117      	movs	r1, #23
 8001288:	68f8      	ldr	r0, [r7, #12]
 800128a:	47a0      	blx	r4

	// In case of LORA fixed header, the rxPayloadLength is obtained by reading
	// the register REG_LR_PAYLOADLENGTH
	if (( this -> GetPacketType( true ) == PACKET_TYPE_LORA ) && ( ReadRegister( REG_LR_PACKETPARAMS ) >> 7 == 1 ) )
 800128c:	2101      	movs	r1, #1
 800128e:	68f8      	ldr	r0, [r7, #12]
 8001290:	f7ff fe39 	bl	8000f06 <_ZN6SX128x13GetPacketTypeEb>
 8001294:	4603      	mov	r3, r0
 8001296:	2b01      	cmp	r3, #1
 8001298:	d10e      	bne.n	80012b8 <_ZN6SX128x17GetRxBufferStatusEPhS0_+0x4c>
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	3344      	adds	r3, #68	; 0x44
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f640 1103 	movw	r1, #2307	; 0x903
 80012a6:	68f8      	ldr	r0, [r7, #12]
 80012a8:	4798      	blx	r3
 80012aa:	4603      	mov	r3, r0
 80012ac:	09db      	lsrs	r3, r3, #7
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d101      	bne.n	80012b8 <_ZN6SX128x17GetRxBufferStatusEPhS0_+0x4c>
 80012b4:	2301      	movs	r3, #1
 80012b6:	e000      	b.n	80012ba <_ZN6SX128x17GetRxBufferStatusEPhS0_+0x4e>
 80012b8:	2300      	movs	r3, #0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d00c      	beq.n	80012d8 <_ZN6SX128x17GetRxBufferStatusEPhS0_+0x6c>
	{
		*rxPayloadLength = ReadRegister( REG_LR_PAYLOADLENGTH );
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	3344      	adds	r3, #68	; 0x44
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f640 1101 	movw	r1, #2305	; 0x901
 80012ca:	68f8      	ldr	r0, [r7, #12]
 80012cc:	4798      	blx	r3
 80012ce:	4603      	mov	r3, r0
 80012d0:	461a      	mov	r2, r3
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	701a      	strb	r2, [r3, #0]
 80012d6:	e014      	b.n	8001302 <_ZN6SX128x17GetRxBufferStatusEPhS0_+0x96>
	}
	else if (this -> GetPacketType( true ) == PACKET_TYPE_BLE )
 80012d8:	2101      	movs	r1, #1
 80012da:	68f8      	ldr	r0, [r7, #12]
 80012dc:	f7ff fe13 	bl	8000f06 <_ZN6SX128x13GetPacketTypeEb>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b04      	cmp	r3, #4
 80012e4:	bf0c      	ite	eq
 80012e6:	2301      	moveq	r3, #1
 80012e8:	2300      	movne	r3, #0
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d005      	beq.n	80012fc <_ZN6SX128x17GetRxBufferStatusEPhS0_+0x90>
	{
		// In the case of BLE, the size returned in status[0] do not include the 2-byte length PDU header
		// so it is added there
		*rxPayloadLength = status[0] + 2;
 80012f0:	7d3b      	ldrb	r3, [r7, #20]
 80012f2:	3302      	adds	r3, #2
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	701a      	strb	r2, [r3, #0]
 80012fa:	e002      	b.n	8001302 <_ZN6SX128x17GetRxBufferStatusEPhS0_+0x96>
	}
	else
	{
		*rxPayloadLength = status[0];
 80012fc:	7d3a      	ldrb	r2, [r7, #20]
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	701a      	strb	r2, [r3, #0]
	}

	*rxStartBufferPointer = status[1];
 8001302:	7d7a      	ldrb	r2, [r7, #21]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	701a      	strb	r2, [r3, #0]
}
 8001308:	bf00      	nop
 800130a:	371c      	adds	r7, #28
 800130c:	46bd      	mov	sp, r7
 800130e:	bd90      	pop	{r4, r7, pc}

08001310 <_ZN6SX128x15SetDioIrqParamsEtttt>:

	return ( int8_t ) ( -raw / 2 );
}

void SX128x::SetDioIrqParams(uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8001310:	b590      	push	{r4, r7, lr}
 8001312:	b087      	sub	sp, #28
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	4608      	mov	r0, r1
 800131a:	4611      	mov	r1, r2
 800131c:	461a      	mov	r2, r3
 800131e:	4603      	mov	r3, r0
 8001320:	817b      	strh	r3, [r7, #10]
 8001322:	460b      	mov	r3, r1
 8001324:	813b      	strh	r3, [r7, #8]
 8001326:	4613      	mov	r3, r2
 8001328:	80fb      	strh	r3, [r7, #6]
	uint8_t buf[8];

	buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800132a:	897b      	ldrh	r3, [r7, #10]
 800132c:	0a1b      	lsrs	r3, r3, #8
 800132e:	b29b      	uxth	r3, r3
 8001330:	b2db      	uxtb	r3, r3
 8001332:	743b      	strb	r3, [r7, #16]
	buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8001334:	897b      	ldrh	r3, [r7, #10]
 8001336:	b2db      	uxtb	r3, r3
 8001338:	747b      	strb	r3, [r7, #17]
	buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800133a:	893b      	ldrh	r3, [r7, #8]
 800133c:	0a1b      	lsrs	r3, r3, #8
 800133e:	b29b      	uxth	r3, r3
 8001340:	b2db      	uxtb	r3, r3
 8001342:	74bb      	strb	r3, [r7, #18]
	buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8001344:	893b      	ldrh	r3, [r7, #8]
 8001346:	b2db      	uxtb	r3, r3
 8001348:	74fb      	strb	r3, [r7, #19]
	buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800134a:	88fb      	ldrh	r3, [r7, #6]
 800134c:	0a1b      	lsrs	r3, r3, #8
 800134e:	b29b      	uxth	r3, r3
 8001350:	b2db      	uxtb	r3, r3
 8001352:	753b      	strb	r3, [r7, #20]
	buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8001354:	88fb      	ldrh	r3, [r7, #6]
 8001356:	b2db      	uxtb	r3, r3
 8001358:	757b      	strb	r3, [r7, #21]
	buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800135a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800135c:	0a1b      	lsrs	r3, r3, #8
 800135e:	b29b      	uxth	r3, r3
 8001360:	b2db      	uxtb	r3, r3
 8001362:	75bb      	strb	r3, [r7, #22]
	buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8001364:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001366:	b2db      	uxtb	r3, r3
 8001368:	75fb      	strb	r3, [r7, #23]
	WriteCommand( RADIO_SET_DIOIRQPARAMS, buf, 8 );
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	3330      	adds	r3, #48	; 0x30
 8001370:	681c      	ldr	r4, [r3, #0]
 8001372:	f107 0210 	add.w	r2, r7, #16
 8001376:	2308      	movs	r3, #8
 8001378:	218d      	movs	r1, #141	; 0x8d
 800137a:	68f8      	ldr	r0, [r7, #12]
 800137c:	47a0      	blx	r4
}
 800137e:	bf00      	nop
 8001380:	371c      	adds	r7, #28
 8001382:	46bd      	mov	sp, r7
 8001384:	bd90      	pop	{r4, r7, pc}

08001386 <_ZN6SX128x14ClearIrqStatusEt>:
	ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
	return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SX128x::ClearIrqStatus(uint16_t irqMask )
{
 8001386:	b590      	push	{r4, r7, lr}
 8001388:	b085      	sub	sp, #20
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
 800138e:	460b      	mov	r3, r1
 8001390:	807b      	strh	r3, [r7, #2]
	uint8_t buf[2];

	buf[0] = ( uint8_t )( ( ( uint16_t )irqMask >> 8 ) & 0x00FF );
 8001392:	887b      	ldrh	r3, [r7, #2]
 8001394:	0a1b      	lsrs	r3, r3, #8
 8001396:	b29b      	uxth	r3, r3
 8001398:	b2db      	uxtb	r3, r3
 800139a:	733b      	strb	r3, [r7, #12]
	buf[1] = ( uint8_t )( ( uint16_t )irqMask & 0x00FF );
 800139c:	887b      	ldrh	r3, [r7, #2]
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	737b      	strb	r3, [r7, #13]
	WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	3330      	adds	r3, #48	; 0x30
 80013a8:	681c      	ldr	r4, [r3, #0]
 80013aa:	f107 020c 	add.w	r2, r7, #12
 80013ae:	2302      	movs	r3, #2
 80013b0:	2197      	movs	r1, #151	; 0x97
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	47a0      	blx	r4
}
 80013b6:	bf00      	nop
 80013b8:	3714      	adds	r7, #20
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd90      	pop	{r4, r7, pc}

080013be <_ZN6SX128x11HalSpiWriteEPKht>:
	uint8_t useless[size];
	memset(useless, 0, size);
	HalSpiTransfer(buffer_in, useless, size);
}

void SX128x::HalSpiWrite(const uint8_t *buffer_out, uint16_t size) {
 80013be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013c2:	b087      	sub	sp, #28
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	4613      	mov	r3, r2
 80013cc:	80fb      	strh	r3, [r7, #6]
	uint8_t useless[size];
	HalSpiTransfer(useless, buffer_out, size);
}
 80013ce:	466b      	mov	r3, sp
 80013d0:	461e      	mov	r6, r3
	uint8_t useless[size];
 80013d2:	88f9      	ldrh	r1, [r7, #6]
 80013d4:	460b      	mov	r3, r1
 80013d6:	3b01      	subs	r3, #1
 80013d8:	617b      	str	r3, [r7, #20]
 80013da:	b28b      	uxth	r3, r1
 80013dc:	2200      	movs	r2, #0
 80013de:	4698      	mov	r8, r3
 80013e0:	4691      	mov	r9, r2
 80013e2:	f04f 0200 	mov.w	r2, #0
 80013e6:	f04f 0300 	mov.w	r3, #0
 80013ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80013ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80013f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80013f6:	b28b      	uxth	r3, r1
 80013f8:	2200      	movs	r2, #0
 80013fa:	461c      	mov	r4, r3
 80013fc:	4615      	mov	r5, r2
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	f04f 0300 	mov.w	r3, #0
 8001406:	00eb      	lsls	r3, r5, #3
 8001408:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800140c:	00e2      	lsls	r2, r4, #3
 800140e:	460b      	mov	r3, r1
 8001410:	3307      	adds	r3, #7
 8001412:	08db      	lsrs	r3, r3, #3
 8001414:	00db      	lsls	r3, r3, #3
 8001416:	ebad 0d03 	sub.w	sp, sp, r3
 800141a:	466b      	mov	r3, sp
 800141c:	3300      	adds	r3, #0
 800141e:	613b      	str	r3, [r7, #16]
	HalSpiTransfer(useless, buffer_out, size);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	3308      	adds	r3, #8
 8001426:	681c      	ldr	r4, [r3, #0]
 8001428:	88fb      	ldrh	r3, [r7, #6]
 800142a:	68ba      	ldr	r2, [r7, #8]
 800142c:	6939      	ldr	r1, [r7, #16]
 800142e:	68f8      	ldr	r0, [r7, #12]
 8001430:	47a0      	blx	r4
 8001432:	46b5      	mov	sp, r6
}
 8001434:	bf00      	nop
 8001436:	371c      	adds	r7, #28
 8001438:	46bd      	mov	sp, r7
 800143a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800143e <_ZN6SX128x10WaitOnBusyEv>:

inline void SX128x::WaitOnBusy() {
 800143e:	b580      	push	{r7, lr}
 8001440:	b082      	sub	sp, #8
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
	while (HalGpioRead(GPIO_PIN_BUSY));
 8001446:	bf00      	nop
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2101      	movs	r1, #1
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	4798      	blx	r3
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	bf14      	ite	ne
 800145a:	2301      	movne	r3, #1
 800145c:	2300      	moveq	r3, #0
 800145e:	b2db      	uxtb	r3, r3
 8001460:	2b00      	cmp	r3, #0
 8001462:	d1f1      	bne.n	8001448 <_ZN6SX128x10WaitOnBusyEv+0xa>
//	HAL_Delay(1);
//	for(int i = 0; i < 100; i++);
}
 8001464:	bf00      	nop
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <_ZN6SX128x14WaitOnBusyLongEv>:

inline void SX128x::WaitOnBusyLong() {
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
	while (HalGpioRead(GPIO_PIN_BUSY))
 8001476:	e002      	b.n	800147e <_ZN6SX128x14WaitOnBusyLongEv+0x10>
		HAL_Delay(10);
 8001478:	200a      	movs	r0, #10
 800147a:	f001 fa11 	bl	80028a0 <HAL_Delay>
	while (HalGpioRead(GPIO_PIN_BUSY))
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2101      	movs	r1, #1
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	4798      	blx	r3
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	bf14      	ite	ne
 8001490:	2301      	movne	r3, #1
 8001492:	2300      	moveq	r3, #0
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1ee      	bne.n	8001478 <_ZN6SX128x14WaitOnBusyLongEv+0xa>
}
 800149a:	bf00      	nop
 800149c:	bf00      	nop
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <_ZN6SX128x5ResetEv>:

void SX128x::Reset(void) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
	HalGpioWrite(GPIO_PIN_RESET, 1);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	3304      	adds	r3, #4
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2201      	movs	r2, #1
 80014b6:	2100      	movs	r1, #0
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	4798      	blx	r3
	HAL_Delay(10);
 80014bc:	200a      	movs	r0, #10
 80014be:	f001 f9ef 	bl	80028a0 <HAL_Delay>
	HalGpioWrite(GPIO_PIN_RESET, 0);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	3304      	adds	r3, #4
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2200      	movs	r2, #0
 80014cc:	2100      	movs	r1, #0
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	4798      	blx	r3
	HAL_Delay(10);
 80014d2:	200a      	movs	r0, #10
 80014d4:	f001 f9e4 	bl	80028a0 <HAL_Delay>
	HalGpioWrite(GPIO_PIN_RESET, 1);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	3304      	adds	r3, #4
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2201      	movs	r2, #1
 80014e2:	2100      	movs	r1, #0
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	4798      	blx	r3
	HAL_Delay(10);
 80014e8:	200a      	movs	r0, #10
 80014ea:	f001 f9d9 	bl	80028a0 <HAL_Delay>
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <_ZN6SX128x6WakeupEv>:

void SX128x::Wakeup(void) {
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b084      	sub	sp, #16
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
	uint8_t buf[2] = {RADIO_GET_STATUS, 0};
 80014fe:	23c0      	movs	r3, #192	; 0xc0
 8001500:	81bb      	strh	r3, [r7, #12]
	HalSpiWrite(buf, 2);
 8001502:	f107 030c 	add.w	r3, r7, #12
 8001506:	2202      	movs	r2, #2
 8001508:	4619      	mov	r1, r3
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f7ff ff57 	bl	80013be <_ZN6SX128x11HalSpiWriteEPKht>
	WaitOnBusyLong();
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7ff ffac 	bl	800146e <_ZN6SX128x14WaitOnBusyLongEv>
}
 8001516:	bf00      	nop
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <_ZN6SX128x12WriteCommandENS_15RadioCommands_uEPht>:

void SX128x::WriteCommand(SX128x::RadioCommands_t opcode, uint8_t *buffer, uint16_t size) {
 800151e:	b580      	push	{r7, lr}
 8001520:	b086      	sub	sp, #24
 8001522:	af00      	add	r7, sp, #0
 8001524:	60f8      	str	r0, [r7, #12]
 8001526:	607a      	str	r2, [r7, #4]
 8001528:	461a      	mov	r2, r3
 800152a:	460b      	mov	r3, r1
 800152c:	72fb      	strb	r3, [r7, #11]
 800152e:	4613      	mov	r3, r2
 8001530:	813b      	strh	r3, [r7, #8]
	auto *merged_buf = (uint8_t *)alloca(size+1);
 8001532:	893b      	ldrh	r3, [r7, #8]
 8001534:	3301      	adds	r3, #1
 8001536:	3307      	adds	r3, #7
 8001538:	08db      	lsrs	r3, r3, #3
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	ebad 0d03 	sub.w	sp, sp, r3
 8001540:	466b      	mov	r3, sp
 8001542:	3307      	adds	r3, #7
 8001544:	08db      	lsrs	r3, r3, #3
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	617b      	str	r3, [r7, #20]

	merged_buf[0] = opcode;
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	7afa      	ldrb	r2, [r7, #11]
 800154e:	701a      	strb	r2, [r3, #0]
	memcpy(merged_buf+1, buffer, size);
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	3301      	adds	r3, #1
 8001554:	893a      	ldrh	r2, [r7, #8]
 8001556:	6879      	ldr	r1, [r7, #4]
 8001558:	4618      	mov	r0, r3
 800155a:	f004 fd6d 	bl	8006038 <memcpy>

	WaitOnBusy();
 800155e:	68f8      	ldr	r0, [r7, #12]
 8001560:	f7ff ff6d 	bl	800143e <_ZN6SX128x10WaitOnBusyEv>
	HalSpiWrite(merged_buf, size+1);
 8001564:	893b      	ldrh	r3, [r7, #8]
 8001566:	3301      	adds	r3, #1
 8001568:	b29b      	uxth	r3, r3
 800156a:	461a      	mov	r2, r3
 800156c:	6979      	ldr	r1, [r7, #20]
 800156e:	68f8      	ldr	r0, [r7, #12]
 8001570:	f7ff ff25 	bl	80013be <_ZN6SX128x11HalSpiWriteEPKht>
}
 8001574:	bf00      	nop
 8001576:	3718      	adds	r7, #24
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <_ZN6SX128x11ReadCommandENS_15RadioCommands_uEPht>:

void SX128x::ReadCommand(SX128x::RadioCommands_t opcode, uint8_t *buffer, uint16_t size) {
 800157c:	b590      	push	{r4, r7, lr}
 800157e:	b08b      	sub	sp, #44	; 0x2c
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	607a      	str	r2, [r7, #4]
 8001586:	461a      	mov	r2, r3
 8001588:	460b      	mov	r3, r1
 800158a:	72fb      	strb	r3, [r7, #11]
 800158c:	4613      	mov	r3, r2
 800158e:	813b      	strh	r3, [r7, #8]

	if (opcode == RADIO_GET_STATUS) {
 8001590:	7afb      	ldrb	r3, [r7, #11]
 8001592:	2bc0      	cmp	r3, #192	; 0xc0
 8001594:	d11a      	bne.n	80015cc <_ZN6SX128x11ReadCommandENS_15RadioCommands_uEPht+0x50>
		uint8_t buf_out[3] = {static_cast<uint8_t>(opcode), 0, 0};
 8001596:	f107 0318 	add.w	r3, r7, #24
 800159a:	2100      	movs	r1, #0
 800159c:	460a      	mov	r2, r1
 800159e:	801a      	strh	r2, [r3, #0]
 80015a0:	460a      	mov	r2, r1
 80015a2:	709a      	strb	r2, [r3, #2]
 80015a4:	7afb      	ldrb	r3, [r7, #11]
 80015a6:	763b      	strb	r3, [r7, #24]
		uint8_t buf_in[3];

		WaitOnBusy();
 80015a8:	68f8      	ldr	r0, [r7, #12]
 80015aa:	f7ff ff48 	bl	800143e <_ZN6SX128x10WaitOnBusyEv>
		HalSpiTransfer(buf_in, buf_out, 3);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	3308      	adds	r3, #8
 80015b4:	681c      	ldr	r4, [r3, #0]
 80015b6:	f107 0218 	add.w	r2, r7, #24
 80015ba:	f107 0114 	add.w	r1, r7, #20
 80015be:	2303      	movs	r3, #3
 80015c0:	68f8      	ldr	r0, [r7, #12]
 80015c2:	47a0      	blx	r4
		buffer[0] = buf_in[0];
 80015c4:	7d3a      	ldrb	r2, [r7, #20]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	701a      	strb	r2, [r3, #0]

		WaitOnBusy(); // wait until not busy before spi transfer
		HalSpiTransfer(buf_in, buf_out, total_transfer_size);
		memcpy(buffer, buf_in+2, size);
	}
}
 80015ca:	e035      	b.n	8001638 <_ZN6SX128x11ReadCommandENS_15RadioCommands_uEPht+0xbc>
		auto total_transfer_size = 2+size;
 80015cc:	893b      	ldrh	r3, [r7, #8]
 80015ce:	3302      	adds	r3, #2
 80015d0:	627b      	str	r3, [r7, #36]	; 0x24
		auto *buf_out = (uint8_t *)alloca(total_transfer_size);
 80015d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d4:	3307      	adds	r3, #7
 80015d6:	08db      	lsrs	r3, r3, #3
 80015d8:	00db      	lsls	r3, r3, #3
 80015da:	ebad 0d03 	sub.w	sp, sp, r3
 80015de:	466b      	mov	r3, sp
 80015e0:	3307      	adds	r3, #7
 80015e2:	08db      	lsrs	r3, r3, #3
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	623b      	str	r3, [r7, #32]
		auto *buf_in = (uint8_t *)alloca(total_transfer_size);
 80015e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ea:	3307      	adds	r3, #7
 80015ec:	08db      	lsrs	r3, r3, #3
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	ebad 0d03 	sub.w	sp, sp, r3
 80015f4:	466b      	mov	r3, sp
 80015f6:	3307      	adds	r3, #7
 80015f8:	08db      	lsrs	r3, r3, #3
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	61fb      	str	r3, [r7, #28]
		memset(buf_out, 0, total_transfer_size);
 80015fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001600:	461a      	mov	r2, r3
 8001602:	2100      	movs	r1, #0
 8001604:	6a38      	ldr	r0, [r7, #32]
 8001606:	f004 fcd3 	bl	8005fb0 <memset>
		buf_out[0] = opcode;
 800160a:	6a3b      	ldr	r3, [r7, #32]
 800160c:	7afa      	ldrb	r2, [r7, #11]
 800160e:	701a      	strb	r2, [r3, #0]
		WaitOnBusy(); // wait until not busy before spi transfer
 8001610:	68f8      	ldr	r0, [r7, #12]
 8001612:	f7ff ff14 	bl	800143e <_ZN6SX128x10WaitOnBusyEv>
		HalSpiTransfer(buf_in, buf_out, total_transfer_size);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	3308      	adds	r3, #8
 800161c:	681c      	ldr	r4, [r3, #0]
 800161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001620:	b29b      	uxth	r3, r3
 8001622:	6a3a      	ldr	r2, [r7, #32]
 8001624:	69f9      	ldr	r1, [r7, #28]
 8001626:	68f8      	ldr	r0, [r7, #12]
 8001628:	47a0      	blx	r4
		memcpy(buffer, buf_in+2, size);
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	3302      	adds	r3, #2
 800162e:	893a      	ldrh	r2, [r7, #8]
 8001630:	4619      	mov	r1, r3
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f004 fd00 	bl	8006038 <memcpy>
}
 8001638:	bf00      	nop
 800163a:	372c      	adds	r7, #44	; 0x2c
 800163c:	46bd      	mov	sp, r7
 800163e:	bd90      	pop	{r4, r7, pc}

08001640 <_ZN6SX128x13WriteRegisterEtPht>:

void SX128x::WriteRegister(uint16_t address, uint8_t *buffer, uint16_t size) {
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	607a      	str	r2, [r7, #4]
 800164a:	461a      	mov	r2, r3
 800164c:	460b      	mov	r3, r1
 800164e:	817b      	strh	r3, [r7, #10]
 8001650:	4613      	mov	r3, r2
 8001652:	813b      	strh	r3, [r7, #8]
	auto total_transfer_size = 3+size;
 8001654:	893b      	ldrh	r3, [r7, #8]
 8001656:	3303      	adds	r3, #3
 8001658:	617b      	str	r3, [r7, #20]
	auto *buf_out = (uint8_t *)alloca(total_transfer_size);
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	3307      	adds	r3, #7
 800165e:	08db      	lsrs	r3, r3, #3
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	ebad 0d03 	sub.w	sp, sp, r3
 8001666:	466b      	mov	r3, sp
 8001668:	3307      	adds	r3, #7
 800166a:	08db      	lsrs	r3, r3, #3
 800166c:	00db      	lsls	r3, r3, #3
 800166e:	613b      	str	r3, [r7, #16]

	buf_out[0] = RADIO_WRITE_REGISTER;
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	2218      	movs	r2, #24
 8001674:	701a      	strb	r2, [r3, #0]
	buf_out[1] = ((address & 0xFF00) >> 8);
 8001676:	897b      	ldrh	r3, [r7, #10]
 8001678:	0a1b      	lsrs	r3, r3, #8
 800167a:	b29a      	uxth	r2, r3
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	3301      	adds	r3, #1
 8001680:	b2d2      	uxtb	r2, r2
 8001682:	701a      	strb	r2, [r3, #0]
	buf_out[2] = (address & 0x00FF);
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	3302      	adds	r3, #2
 8001688:	897a      	ldrh	r2, [r7, #10]
 800168a:	b2d2      	uxtb	r2, r2
 800168c:	701a      	strb	r2, [r3, #0]
	memcpy(buf_out+3, buffer, size);
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	3303      	adds	r3, #3
 8001692:	893a      	ldrh	r2, [r7, #8]
 8001694:	6879      	ldr	r1, [r7, #4]
 8001696:	4618      	mov	r0, r3
 8001698:	f004 fcce 	bl	8006038 <memcpy>

	WaitOnBusy(); // wait until not busy before spi transfer
 800169c:	68f8      	ldr	r0, [r7, #12]
 800169e:	f7ff fece 	bl	800143e <_ZN6SX128x10WaitOnBusyEv>
	HalSpiWrite(buf_out, total_transfer_size);
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	461a      	mov	r2, r3
 80016a8:	6939      	ldr	r1, [r7, #16]
 80016aa:	68f8      	ldr	r0, [r7, #12]
 80016ac:	f7ff fe87 	bl	80013be <_ZN6SX128x11HalSpiWriteEPKht>
}
 80016b0:	bf00      	nop
 80016b2:	3718      	adds	r7, #24
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <_ZN6SX128x13WriteRegisterEth>:

inline void SX128x::WriteRegister(uint16_t address, uint8_t value) {
 80016b8:	b590      	push	{r4, r7, lr}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	460b      	mov	r3, r1
 80016c2:	807b      	strh	r3, [r7, #2]
 80016c4:	4613      	mov	r3, r2
 80016c6:	707b      	strb	r3, [r7, #1]
	WriteRegister(address, &value, 1);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	3338      	adds	r3, #56	; 0x38
 80016ce:	681c      	ldr	r4, [r3, #0]
 80016d0:	1c7a      	adds	r2, r7, #1
 80016d2:	8879      	ldrh	r1, [r7, #2]
 80016d4:	2301      	movs	r3, #1
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	47a0      	blx	r4
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd90      	pop	{r4, r7, pc}

080016e2 <_ZN6SX128x12ReadRegisterEtPht>:

void SX128x::ReadRegister(uint16_t address, uint8_t *buffer, uint16_t size) {
 80016e2:	b590      	push	{r4, r7, lr}
 80016e4:	b089      	sub	sp, #36	; 0x24
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	60f8      	str	r0, [r7, #12]
 80016ea:	607a      	str	r2, [r7, #4]
 80016ec:	461a      	mov	r2, r3
 80016ee:	460b      	mov	r3, r1
 80016f0:	817b      	strh	r3, [r7, #10]
 80016f2:	4613      	mov	r3, r2
 80016f4:	813b      	strh	r3, [r7, #8]
	
	auto total_transfer_size = 4+size;
 80016f6:	893b      	ldrh	r3, [r7, #8]
 80016f8:	3304      	adds	r3, #4
 80016fa:	61fb      	str	r3, [r7, #28]
	auto *buf_out = (uint8_t *)alloca(total_transfer_size);
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	3307      	adds	r3, #7
 8001700:	08db      	lsrs	r3, r3, #3
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	ebad 0d03 	sub.w	sp, sp, r3
 8001708:	466b      	mov	r3, sp
 800170a:	3307      	adds	r3, #7
 800170c:	08db      	lsrs	r3, r3, #3
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	61bb      	str	r3, [r7, #24]
	auto *buf_in = (uint8_t *)alloca(total_transfer_size);
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	3307      	adds	r3, #7
 8001716:	08db      	lsrs	r3, r3, #3
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	ebad 0d03 	sub.w	sp, sp, r3
 800171e:	466b      	mov	r3, sp
 8001720:	3307      	adds	r3, #7
 8001722:	08db      	lsrs	r3, r3, #3
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	617b      	str	r3, [r7, #20]

	memset(buf_out, 0, total_transfer_size);
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	461a      	mov	r2, r3
 800172c:	2100      	movs	r1, #0
 800172e:	69b8      	ldr	r0, [r7, #24]
 8001730:	f004 fc3e 	bl	8005fb0 <memset>
	buf_out[0] = RADIO_READ_REGISTER;
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	2219      	movs	r2, #25
 8001738:	701a      	strb	r2, [r3, #0]
	buf_out[1] = ((address & 0xFF00) >> 8);
 800173a:	897b      	ldrh	r3, [r7, #10]
 800173c:	0a1b      	lsrs	r3, r3, #8
 800173e:	b29a      	uxth	r2, r3
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	3301      	adds	r3, #1
 8001744:	b2d2      	uxtb	r2, r2
 8001746:	701a      	strb	r2, [r3, #0]
	buf_out[2] = (address & 0x00FF);
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	3302      	adds	r3, #2
 800174c:	897a      	ldrh	r2, [r7, #10]
 800174e:	b2d2      	uxtb	r2, r2
 8001750:	701a      	strb	r2, [r3, #0]

	WaitOnBusy(); // wait until not busy before spi transfer
 8001752:	68f8      	ldr	r0, [r7, #12]
 8001754:	f7ff fe73 	bl	800143e <_ZN6SX128x10WaitOnBusyEv>
	HalSpiTransfer(buf_in, buf_out, total_transfer_size);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	3308      	adds	r3, #8
 800175e:	681c      	ldr	r4, [r3, #0]
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	b29b      	uxth	r3, r3
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	6979      	ldr	r1, [r7, #20]
 8001768:	68f8      	ldr	r0, [r7, #12]
 800176a:	47a0      	blx	r4

	memcpy(buffer, buf_in+4, size);
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	3304      	adds	r3, #4
 8001770:	893a      	ldrh	r2, [r7, #8]
 8001772:	4619      	mov	r1, r3
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f004 fc5f 	bl	8006038 <memcpy>
}
 800177a:	bf00      	nop
 800177c:	3724      	adds	r7, #36	; 0x24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd90      	pop	{r4, r7, pc}

08001782 <_ZN6SX128x12ReadRegisterEt>:

inline uint8_t SX128x::ReadRegister(uint16_t address) {
 8001782:	b590      	push	{r4, r7, lr}
 8001784:	b085      	sub	sp, #20
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
 800178a:	460b      	mov	r3, r1
 800178c:	807b      	strh	r3, [r7, #2]
	uint8_t data;
	ReadRegister( address, &data, 1 );
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	3340      	adds	r3, #64	; 0x40
 8001794:	681c      	ldr	r4, [r3, #0]
 8001796:	f107 020f 	add.w	r2, r7, #15
 800179a:	8879      	ldrh	r1, [r7, #2]
 800179c:	2301      	movs	r3, #1
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	47a0      	blx	r4
	return data;
 80017a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3714      	adds	r7, #20
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd90      	pop	{r4, r7, pc}

080017ac <_ZN6SX128x11WriteBufferEhPhh>:

void SX128x::WriteBuffer(uint8_t offset, uint8_t *buffer, uint8_t size) {
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	607a      	str	r2, [r7, #4]
 80017b6:	461a      	mov	r2, r3
 80017b8:	460b      	mov	r3, r1
 80017ba:	72fb      	strb	r3, [r7, #11]
 80017bc:	4613      	mov	r3, r2
 80017be:	72bb      	strb	r3, [r7, #10]
	auto total_transfer_size = 2+size;
 80017c0:	7abb      	ldrb	r3, [r7, #10]
 80017c2:	3302      	adds	r3, #2
 80017c4:	617b      	str	r3, [r7, #20]
	auto *buf_out = (uint8_t *)alloca(total_transfer_size);
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	3307      	adds	r3, #7
 80017ca:	08db      	lsrs	r3, r3, #3
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	ebad 0d03 	sub.w	sp, sp, r3
 80017d2:	466b      	mov	r3, sp
 80017d4:	3307      	adds	r3, #7
 80017d6:	08db      	lsrs	r3, r3, #3
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	613b      	str	r3, [r7, #16]

	buf_out[0] = RADIO_WRITE_BUFFER;
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	221a      	movs	r2, #26
 80017e0:	701a      	strb	r2, [r3, #0]
	buf_out[1] = offset;
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	3301      	adds	r3, #1
 80017e6:	7afa      	ldrb	r2, [r7, #11]
 80017e8:	701a      	strb	r2, [r3, #0]

	memcpy(buf_out+2, buffer, size);
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	3302      	adds	r3, #2
 80017ee:	7aba      	ldrb	r2, [r7, #10]
 80017f0:	6879      	ldr	r1, [r7, #4]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f004 fc20 	bl	8006038 <memcpy>
	
	WaitOnBusy();
 80017f8:	68f8      	ldr	r0, [r7, #12]
 80017fa:	f7ff fe20 	bl	800143e <_ZN6SX128x10WaitOnBusyEv>
	HalSpiWrite(buf_out, total_transfer_size);
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	b29b      	uxth	r3, r3
 8001802:	461a      	mov	r2, r3
 8001804:	6939      	ldr	r1, [r7, #16]
 8001806:	68f8      	ldr	r0, [r7, #12]
 8001808:	f7ff fdd9 	bl	80013be <_ZN6SX128x11HalSpiWriteEPKht>
}
 800180c:	bf00      	nop
 800180e:	3718      	adds	r7, #24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <_ZN6SX128x10ReadBufferEhPhh>:

void SX128x::ReadBuffer(uint8_t offset, uint8_t *buffer, uint8_t size) {
 8001814:	b590      	push	{r4, r7, lr}
 8001816:	b089      	sub	sp, #36	; 0x24
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	607a      	str	r2, [r7, #4]
 800181e:	461a      	mov	r2, r3
 8001820:	460b      	mov	r3, r1
 8001822:	72fb      	strb	r3, [r7, #11]
 8001824:	4613      	mov	r3, r2
 8001826:	72bb      	strb	r3, [r7, #10]
	auto total_transfer_size = 3+size;
 8001828:	7abb      	ldrb	r3, [r7, #10]
 800182a:	3303      	adds	r3, #3
 800182c:	61fb      	str	r3, [r7, #28]
	auto *buf_out = (uint8_t *)alloca(total_transfer_size);
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	3307      	adds	r3, #7
 8001832:	08db      	lsrs	r3, r3, #3
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	ebad 0d03 	sub.w	sp, sp, r3
 800183a:	466b      	mov	r3, sp
 800183c:	3307      	adds	r3, #7
 800183e:	08db      	lsrs	r3, r3, #3
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	61bb      	str	r3, [r7, #24]
	auto *buf_in = (uint8_t *)alloca(total_transfer_size);
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	3307      	adds	r3, #7
 8001848:	08db      	lsrs	r3, r3, #3
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	ebad 0d03 	sub.w	sp, sp, r3
 8001850:	466b      	mov	r3, sp
 8001852:	3307      	adds	r3, #7
 8001854:	08db      	lsrs	r3, r3, #3
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	617b      	str	r3, [r7, #20]

	memset(buf_out, 0, total_transfer_size);
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	461a      	mov	r2, r3
 800185e:	2100      	movs	r1, #0
 8001860:	69b8      	ldr	r0, [r7, #24]
 8001862:	f004 fba5 	bl	8005fb0 <memset>

	buf_out[0] = RADIO_READ_BUFFER;
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	221b      	movs	r2, #27
 800186a:	701a      	strb	r2, [r3, #0]
	buf_out[1] = offset;
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	3301      	adds	r3, #1
 8001870:	7afa      	ldrb	r2, [r7, #11]
 8001872:	701a      	strb	r2, [r3, #0]

	WaitOnBusy();
 8001874:	68f8      	ldr	r0, [r7, #12]
 8001876:	f7ff fde2 	bl	800143e <_ZN6SX128x10WaitOnBusyEv>
	HalSpiTransfer(buf_in, buf_out, total_transfer_size);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	3308      	adds	r3, #8
 8001880:	681c      	ldr	r4, [r3, #0]
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	b29b      	uxth	r3, r3
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	6979      	ldr	r1, [r7, #20]
 800188a:	68f8      	ldr	r0, [r7, #12]
 800188c:	47a0      	blx	r4

	memcpy(buffer, buf_in+3, size);
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	3303      	adds	r3, #3
 8001892:	7aba      	ldrb	r2, [r7, #10]
 8001894:	4619      	mov	r1, r3
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f004 fbce 	bl	8006038 <memcpy>
}
 800189c:	bf00      	nop
 800189e:	3724      	adds	r7, #36	; 0x24
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd90      	pop	{r4, r7, pc}

080018a4 <_ZN10SX128x_OBJ24CommonTransceiverSettingEv>:

extern TIM_HandleTypeDef htim1;
extern int irq_timeout_times;

void SX128x_OBJ::CommonTransceiverSetting()
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
    SetStandby((RadioStandbyModes_t)MODE_STDBY_XOSC);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2103      	movs	r1, #3
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff fac0 	bl	8000e36 <_ZN6SX128x10SetStandbyENS_19RadioStandbyModes_tE>
    SetPacketType(PACKET_TYPE_LORA);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2101      	movs	r1, #1
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff fb0c 	bl	8000ed8 <_ZN6SX128x13SetPacketTypeENS_18RadioPacketTypes_tE>
    SetRfFrequency(RfFrequency);
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80018c8:	4619      	mov	r1, r3
 80018ca:	4610      	mov	r0, r2
 80018cc:	f7ff fb44 	bl	8000f58 <_ZN6SX128x14SetRfFrequencyEm>
    SetBufferBaseAddresses(0x80, 0x00);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	2180      	movs	r1, #128	; 0x80
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff fb6e 	bl	8000fb8 <_ZN6SX128x22SetBufferBaseAddressesEhh>
    SetModulationParams(mparams);
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80018e4:	4619      	mov	r1, r3
 80018e6:	4610      	mov	r0, r2
 80018e8:	f7ff fb80 	bl	8000fec <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE>
    SetPacketParams(pparams);
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f203 132d 	addw	r3, r3, #301	; 0x12d
 80018f4:	4619      	mov	r1, r3
 80018f6:	4610      	mov	r0, r2
 80018f8:	f7ff fc00 	bl	80010fc <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE>
}
 80018fc:	bf00      	nop
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <_ZN10SX128x_OBJ16InterruptSettingEv>:
	ClearIrqStatus(0xFFFF);
	return 0;
}

inline void SX128x_OBJ::InterruptSetting()
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af02      	add	r7, sp, #8
 800190a:	6078      	str	r0, [r7, #4]
	SetDioIrqParams(0x0003, 0x0003, 0x0000, 0x0000);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	2300      	movs	r3, #0
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	2300      	movs	r3, #0
 8001914:	2203      	movs	r2, #3
 8001916:	2103      	movs	r1, #3
 8001918:	f7ff fcfa 	bl	8001310 <_ZN6SX128x15SetDioIrqParamsEtttt>
}
 800191c:	bf00      	nop
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <_ZN10SX128x_OBJ4InitEv>:
{
	ClearIrqStatus(0xFFFF);
}

uint8_t SX128x_OBJ::Init()
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
	Reset();
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	3328      	adds	r3, #40	; 0x28
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4610      	mov	r0, r2
 8001938:	4798      	blx	r3
	// Wakeup();
	// SetRegistersDefault();

	uint8_t rx[2], tx[2];
	*(uint32_t*)tx = 0x80 | 0x01 << 8;
 800193a:	f107 0310 	add.w	r3, r7, #16
 800193e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001942:	601a      	str	r2, [r3, #0]
	HalSpiTransferDelay(rx, tx, 2);
 8001944:	f107 0210 	add.w	r2, r7, #16
 8001948:	f107 0114 	add.w	r1, r7, #20
 800194c:	2302      	movs	r3, #2
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f000 fa4e 	bl	8001df0 <_ZN10SX128x_OBJ19HalSpiTransferDelayEPhPKht>
	RadioStatus_t status;
	status = GetStatus();
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	3358      	adds	r3, #88	; 0x58
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4610      	mov	r0, r2
 8001960:	4798      	blx	r3
 8001962:	4603      	mov	r3, r0
 8001964:	733b      	strb	r3, [r7, #12]
	if(status.Fields.CmdStatus != 0x01)
 8001966:	7b3b      	ldrb	r3, [r7, #12]
 8001968:	f003 031c 	and.w	r3, r3, #28
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b04      	cmp	r3, #4
 8001970:	d001      	beq.n	8001976 <_ZN10SX128x_OBJ4InitEv+0x52>
		return 1;
 8001972:	2301      	movs	r3, #1
 8001974:	e00b      	b.n	800198e <_ZN10SX128x_OBJ4InitEv+0x6a>
	if(status.Fields.ChipMode != 0x03)
 8001976:	7b3b      	ldrb	r3, [r7, #12]
 8001978:	f023 031f 	bic.w	r3, r3, #31
 800197c:	b2db      	uxtb	r3, r3
 800197e:	2b60      	cmp	r3, #96	; 0x60
 8001980:	d001      	beq.n	8001986 <_ZN10SX128x_OBJ4InitEv+0x62>
		return 1;
 8001982:	2301      	movs	r3, #1
 8001984:	e003      	b.n	800198e <_ZN10SX128x_OBJ4InitEv+0x6a>

	CommonTransceiverSetting();
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f7ff ff8c 	bl	80018a4 <_ZN10SX128x_OBJ24CommonTransceiverSettingEv>
	return 0;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3718      	adds	r7, #24
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <_ZN6SX128xUt0_C1Ev>:
	struct {
 8001996:	b580      	push	{r7, lr}
 8001998:	b082      	sub	sp, #8
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f000 f938 	bl	8001c16 <_ZNSt8functionIFvvEEC1Ev>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	3310      	adds	r3, #16
 80019aa:	4618      	mov	r0, r3
 80019ac:	f000 f933 	bl	8001c16 <_ZNSt8functionIFvvEEC1Ev>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3320      	adds	r3, #32
 80019b4:	4618      	mov	r0, r3
 80019b6:	f000 f92e 	bl	8001c16 <_ZNSt8functionIFvvEEC1Ev>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3330      	adds	r3, #48	; 0x30
 80019be:	4618      	mov	r0, r3
 80019c0:	f000 f929 	bl	8001c16 <_ZNSt8functionIFvvEEC1Ev>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3340      	adds	r3, #64	; 0x40
 80019c8:	4618      	mov	r0, r3
 80019ca:	f000 f924 	bl	8001c16 <_ZNSt8functionIFvvEEC1Ev>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	3350      	adds	r3, #80	; 0x50
 80019d2:	4618      	mov	r0, r3
 80019d4:	f000 f91f 	bl	8001c16 <_ZNSt8functionIFvvEEC1Ev>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3360      	adds	r3, #96	; 0x60
 80019dc:	4618      	mov	r0, r3
 80019de:	f000 f930 	bl	8001c42 <_ZNSt8functionIFvN6SX128x14IrqErrorCode_tEEEC1Ev>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	3370      	adds	r3, #112	; 0x70
 80019e6:	4618      	mov	r0, r3
 80019e8:	f000 f941 	bl	8001c6e <_ZNSt8functionIFvN6SX128x16IrqRangingCode_tEEEC1Ev>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3380      	adds	r3, #128	; 0x80
 80019f0:	4618      	mov	r0, r3
 80019f2:	f000 f952 	bl	8001c9a <_ZNSt8functionIFvbEEC1Ev>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4618      	mov	r0, r3
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <_ZN6SX128xC1Ev>:
	SX128x() = default;
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	4a1f      	ldr	r2, [pc, #124]	; (8001a88 <_ZN6SX128xC1Ev+0x88>)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	6879      	ldr	r1, [r7, #4]
 8001a10:	a31b      	add	r3, pc, #108	; (adr r3, 8001a80 <_ZN6SX128xC1Ev+0x80>)
 8001a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a16:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	741a      	strb	r2, [r3, #16]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a26:	825a      	strh	r2, [r3, #18]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	751a      	strb	r2, [r3, #20]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	82da      	strh	r2, [r3, #22]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3318      	adds	r3, #24
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff ffac 	bl	8001996 <_ZN6SX128xUt0_C1Ev>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2202      	movs	r2, #2
 8001a42:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	220f      	movs	r2, #15
 8001a4a:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	220a      	movs	r2, #10
 8001a52:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	33ab      	adds	r3, #171	; 0xab
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]
 8001a60:	609a      	str	r2, [r3, #8]
 8001a62:	731a      	strb	r2, [r3, #12]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	33b8      	adds	r3, #184	; 0xb8
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	60da      	str	r2, [r3, #12]
 8001a72:	611a      	str	r2, [r3, #16]
 8001a74:	615a      	str	r2, [r3, #20]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	00000000 	.word	0x00000000
 8001a84:	4068cba8 	.word	0x4068cba8
 8001a88:	08006808 	.word	0x08006808

08001a8c <_ZN10SX128x_OBJC1Ev>:

SX128x_OBJ::SX128x_OBJ()
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff ffb2 	bl	8001a00 <_ZN6SX128xC1Ev>
 8001a9c:	4a27      	ldr	r2, [pc, #156]	; (8001b3c <_ZN10SX128x_OBJC1Ev+0xb0>)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	33d0      	adds	r3, #208	; 0xd0
 8001aa6:	2240      	movs	r2, #64	; 0x40
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f004 fa80 	bl	8005fb0 <memset>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4a19      	ldr	r2, [pc, #100]	; (8001b40 <_ZN10SX128x_OBJC1Ev+0xb4>)
 8001adc:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
{
	mparams.PacketType = PACKET_TYPE_LORA;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
    mparams.Params.LoRa.SpreadingFactor = LORA_SF7;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2270      	movs	r2, #112	; 0x70
 8001aec:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
	mparams.Params.LoRa.Bandwidth = LORA_BW_0800;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2218      	movs	r2, #24
 8001af4:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
	mparams.Params.LoRa.CodingRate = LORA_CR_4_5;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126

	pparams.PacketType = PACKET_TYPE_LORA;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
	pparams.Params.LoRa.HeaderType = LORA_PACKET_FIXED_LENGTH;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2280      	movs	r2, #128	; 0x80
 8001b0c:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
	pparams.Params.LoRa.InvertIQ = LORA_IQ_NORMAL;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2240      	movs	r2, #64	; 0x40
 8001b14:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
	pparams.Params.LoRa.Crc = LORA_CRC_ON;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2220      	movs	r2, #32
 8001b1c:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	pparams.Params.LoRa.PayloadLength = PACKET_SIZE;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2208      	movs	r2, #8
 8001b24:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
	pparams.Params.LoRa.PreambleLength = 12;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	220c      	movs	r2, #12
 8001b2c:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135

//	callbacks.txDone = &tx_recursion();
	
}
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	0800686c 	.word	0x0800686c
 8001b40:	8f0d1800 	.word	0x8f0d1800

08001b44 <_ZN10SX128x_OBJ9RxSettingEv>:
	SendPayload(tx_sprt, 8, t, 0x80);

}

void SX128x_OBJ::RxSetting()
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
//	SetTxParams(13, RADIO_RAMP_02_US);
	InterruptSetting();
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f7ff fed9 	bl	8001904 <_ZN10SX128x_OBJ16InterruptSettingEv>
//	SetDioIrqParams(0xFFFF, 0xFFFF, 0x0000, 0x0000);
}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <_ZN10SX128x_OBJ10RxBlockingEPhh>:

uint8_t SX128x_OBJ::RxBlocking(uint8_t* data_in, uint8_t max_len)
{
 8001b5a:	b590      	push	{r4, r7, lr}
 8001b5c:	b089      	sub	sp, #36	; 0x24
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	60f8      	str	r0, [r7, #12]
 8001b62:	60b9      	str	r1, [r7, #8]
 8001b64:	4613      	mov	r3, r2
 8001b66:	71fb      	strb	r3, [r7, #7]
	// set tx mode
	TickTime_t timeout;
	timeout.PeriodBase = RADIO_TICK_SIZE_0015_US;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	773b      	strb	r3, [r7, #28]
	timeout.PeriodBaseCount = 0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	83fb      	strh	r3, [r7, #30]
	SetRx(timeout);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	69f9      	ldr	r1, [r7, #28]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff f97d 	bl	8000e74 <_ZN6SX128x5SetRxENS_10TickTime_sE>

	// wait message
	// while(!HAL_GPIO_ReadPin(GPIOA, GPIO_Pin_8));
	uint8_t tx[4] = {};
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61bb      	str	r3, [r7, #24]
	uint8_t rx[4] = {};
 8001b7e:	2300      	movs	r3, #0
 8001b80:	617b      	str	r3, [r7, #20]
	while(1)
	{
		*(uint32_t*)tx = 0x15 | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
 8001b82:	f107 0318 	add.w	r3, r7, #24
 8001b86:	2215      	movs	r2, #21
 8001b88:	601a      	str	r2, [r3, #0]
		HalSpiTransfer(rx, tx, 4);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	3308      	adds	r3, #8
 8001b90:	681c      	ldr	r4, [r3, #0]
 8001b92:	f107 0218 	add.w	r2, r7, #24
 8001b96:	f107 0114 	add.w	r1, r7, #20
 8001b9a:	2304      	movs	r3, #4
 8001b9c:	68f8      	ldr	r0, [r7, #12]
 8001b9e:	47a0      	blx	r4
		if(rx[3] & 0x02) break;
 8001ba0:	7dfb      	ldrb	r3, [r7, #23]
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d100      	bne.n	8001bac <_ZN10SX128x_OBJ10RxBlockingEPhh+0x52>
		*(uint32_t*)tx = 0x15 | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
 8001baa:	e7ea      	b.n	8001b82 <_ZN10SX128x_OBJ10RxBlockingEPhh+0x28>
		if(rx[3] & 0x02) break;
 8001bac:	bf00      	nop
	}

	// GetPacketStatus

	// ClrIrqStatus
	ClearIrqStatus(IRQ_RX_DONE);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2102      	movs	r1, #2
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff fbe7 	bl	8001386 <_ZN6SX128x14ClearIrqStatusEt>

	// GetRxBufferStatus
	uint8_t payload_length, rx_pointer;
	GetRxBufferStatus(&payload_length, &rx_pointer);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f107 0212 	add.w	r2, r7, #18
 8001bbe:	f107 0113 	add.w	r1, r7, #19
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff fb52 	bl	800126c <_ZN6SX128x17GetRxBufferStatusEPhS0_>

	// ReadBuffer
	if(payload_length > max_len) return 0;
 8001bc8:	7cfb      	ldrb	r3, [r7, #19]
 8001bca:	79fa      	ldrb	r2, [r7, #7]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d201      	bcs.n	8001bd4 <_ZN10SX128x_OBJ10RxBlockingEPhh+0x7a>
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	e009      	b.n	8001be8 <_ZN10SX128x_OBJ10RxBlockingEPhh+0x8e>
	ReadBuffer(rx_pointer, data_in, payload_length);
 8001bd4:	68f8      	ldr	r0, [r7, #12]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	334c      	adds	r3, #76	; 0x4c
 8001bdc:	681c      	ldr	r4, [r3, #0]
 8001bde:	7cb9      	ldrb	r1, [r7, #18]
 8001be0:	7cfb      	ldrb	r3, [r7, #19]
 8001be2:	68ba      	ldr	r2, [r7, #8]
 8001be4:	47a0      	blx	r4

	// FrequencyError

	return payload_length;
 8001be6:	7cfb      	ldrb	r3, [r7, #19]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3724      	adds	r7, #36	; 0x24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd90      	pop	{r4, r7, pc}

08001bf0 <_ZNSt14_Function_baseC1Ev>:
	  static bool
	  _M_not_empty_function(const _Tp&)
	  { return true; }
      };

    _Function_base() = default;
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	6013      	str	r3, [r2, #0]
 8001c00:	6053      	str	r3, [r2, #4]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	609a      	str	r2, [r3, #8]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <_ZNSt8functionIFvvEEC1Ev>:

      /**
       *  @brief Default construct creates an empty function call wrapper.
       *  @post `!(bool)*this`
       */
      function() noexcept
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b082      	sub	sp, #8
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	461a      	mov	r2, r3
 8001c22:	2300      	movs	r3, #0
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	6053      	str	r3, [r2, #4]
 8001c28:	6093      	str	r3, [r2, #8]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff ffdf 	bl	8001bf0 <_ZNSt14_Function_baseC1Ev>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	60da      	str	r2, [r3, #12]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <_ZNSt8functionIFvN6SX128x14IrqErrorCode_tEEEC1Ev>:
      function() noexcept
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b082      	sub	sp, #8
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	2300      	movs	r3, #0
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	6053      	str	r3, [r2, #4]
 8001c54:	6093      	str	r3, [r2, #8]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff ffc9 	bl	8001bf0 <_ZNSt14_Function_baseC1Ev>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	60da      	str	r2, [r3, #12]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4618      	mov	r0, r3
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <_ZNSt8functionIFvN6SX128x16IrqRangingCode_tEEEC1Ev>:
      function() noexcept
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b082      	sub	sp, #8
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	6013      	str	r3, [r2, #0]
 8001c7e:	6053      	str	r3, [r2, #4]
 8001c80:	6093      	str	r3, [r2, #8]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff ffb3 	bl	8001bf0 <_ZNSt14_Function_baseC1Ev>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	60da      	str	r2, [r3, #12]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4618      	mov	r0, r3
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <_ZNSt8functionIFvbEEC1Ev>:
      function() noexcept
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b082      	sub	sp, #8
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	6013      	str	r3, [r2, #0]
 8001caa:	6053      	str	r3, [r2, #4]
 8001cac:	6093      	str	r3, [r2, #8]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff ff9d 	bl	8001bf0 <_ZNSt14_Function_baseC1Ev>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	60da      	str	r2, [r3, #12]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b082      	sub	sp, #8
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
      if (_M_manager)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d005      	beq.n	8001ce2 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	6879      	ldr	r1, [r7, #4]
 8001cde:	2203      	movs	r2, #3
 8001ce0:	4798      	blx	r3
    }
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <_ZN10SX128x_OBJ11HalGpioReadEN6SX128x17GpioPinFunction_tE>:

#elif defined NUCLEO_L476
extern SPI_HandleTypeDef hspi1;

uint8_t SX128x_OBJ::HalGpioRead(GpioPinFunction_t func)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	70fb      	strb	r3, [r7, #3]
	switch (func)
 8001cf8:	78fb      	ldrb	r3, [r7, #3]
 8001cfa:	2b04      	cmp	r3, #4
 8001cfc:	d820      	bhi.n	8001d40 <_ZN10SX128x_OBJ11HalGpioReadEN6SX128x17GpioPinFunction_tE+0x54>
 8001cfe:	a201      	add	r2, pc, #4	; (adr r2, 8001d04 <_ZN10SX128x_OBJ11HalGpioReadEN6SX128x17GpioPinFunction_tE+0x18>)
 8001d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d04:	08001d19 	.word	0x08001d19
 8001d08:	08001d25 	.word	0x08001d25
 8001d0c:	08001d35 	.word	0x08001d35
 8001d10:	08001d39 	.word	0x08001d39
 8001d14:	08001d3d 	.word	0x08001d3d
	{
		case GPIO_PIN_RESET:
			return HAL_GPIO_ReadPin(SX1280_RST_GPIO_Port, SX1280_RST_Pin);
 8001d18:	2180      	movs	r1, #128	; 0x80
 8001d1a:	480c      	ldr	r0, [pc, #48]	; (8001d4c <_ZN10SX128x_OBJ11HalGpioReadEN6SX128x17GpioPinFunction_tE+0x60>)
 8001d1c:	f001 f874 	bl	8002e08 <HAL_GPIO_ReadPin>
 8001d20:	4603      	mov	r3, r0
 8001d22:	e00e      	b.n	8001d42 <_ZN10SX128x_OBJ11HalGpioReadEN6SX128x17GpioPinFunction_tE+0x56>
		case GPIO_PIN_BUSY:
			return HAL_GPIO_ReadPin(SX1280_BUSY_GPIO_Port, SX1280_BUSY_Pin);
 8001d24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d2c:	f001 f86c 	bl	8002e08 <HAL_GPIO_ReadPin>
 8001d30:	4603      	mov	r3, r0
 8001d32:	e006      	b.n	8001d42 <_ZN10SX128x_OBJ11HalGpioReadEN6SX128x17GpioPinFunction_tE+0x56>
		case GPIO_PIN_DIO1:
			return 0;
 8001d34:	2300      	movs	r3, #0
 8001d36:	e004      	b.n	8001d42 <_ZN10SX128x_OBJ11HalGpioReadEN6SX128x17GpioPinFunction_tE+0x56>
		case GPIO_PIN_DIO2:
			return 0;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	e002      	b.n	8001d42 <_ZN10SX128x_OBJ11HalGpioReadEN6SX128x17GpioPinFunction_tE+0x56>
		case GPIO_PIN_DIO3:
			return 0;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	e000      	b.n	8001d42 <_ZN10SX128x_OBJ11HalGpioReadEN6SX128x17GpioPinFunction_tE+0x56>
		default:
			return 0;
 8001d40:	2300      	movs	r3, #0
	}
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	48000800 	.word	0x48000800

08001d50 <_ZN10SX128x_OBJ12HalGpioWriteEN6SX128x17GpioPinFunction_tEh>:


void SX128x_OBJ::HalGpioWrite(GpioPinFunction_t func, register uint8_t value)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	460a      	mov	r2, r1
 8001d5c:	70fa      	strb	r2, [r7, #3]
	switch (func)
 8001d5e:	78fa      	ldrb	r2, [r7, #3]
 8001d60:	2a04      	cmp	r2, #4
 8001d62:	d81b      	bhi.n	8001d9c <_ZN10SX128x_OBJ12HalGpioWriteEN6SX128x17GpioPinFunction_tEh+0x4c>
 8001d64:	a101      	add	r1, pc, #4	; (adr r1, 8001d6c <_ZN10SX128x_OBJ12HalGpioWriteEN6SX128x17GpioPinFunction_tEh+0x1c>)
 8001d66:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8001d6a:	bf00      	nop
 8001d6c:	08001d81 	.word	0x08001d81
 8001d70:	08001d8d 	.word	0x08001d8d
 8001d74:	08001d9d 	.word	0x08001d9d
 8001d78:	08001d9d 	.word	0x08001d9d
 8001d7c:	08001d9d 	.word	0x08001d9d
	{
	case GPIO_PIN_RESET:
		HAL_GPIO_WritePin(SX1280_RST_GPIO_Port, SX1280_RST_Pin, (GPIO_PinState)value);
 8001d80:	461a      	mov	r2, r3
 8001d82:	2180      	movs	r1, #128	; 0x80
 8001d84:	4808      	ldr	r0, [pc, #32]	; (8001da8 <_ZN10SX128x_OBJ12HalGpioWriteEN6SX128x17GpioPinFunction_tEh+0x58>)
 8001d86:	f001 f857 	bl	8002e38 <HAL_GPIO_WritePin>
		break;
 8001d8a:	e008      	b.n	8001d9e <_ZN10SX128x_OBJ12HalGpioWriteEN6SX128x17GpioPinFunction_tEh+0x4e>
	case GPIO_PIN_BUSY:
		HAL_GPIO_WritePin(SX1280_BUSY_GPIO_Port, SX1280_BUSY_Pin, (GPIO_PinState)value);
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d96:	f001 f84f 	bl	8002e38 <HAL_GPIO_WritePin>
		break;
 8001d9a:	e000      	b.n	8001d9e <_ZN10SX128x_OBJ12HalGpioWriteEN6SX128x17GpioPinFunction_tEh+0x4e>
	case GPIO_PIN_DIO2:
		break;
	case GPIO_PIN_DIO3:
		break;
	default:
		break;
 8001d9c:	bf00      	nop
	}
}
 8001d9e:	bf00      	nop
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	48000800 	.word	0x48000800

08001dac <_ZN10SX128x_OBJ14HalSpiTransferEPhPKht>:

void SX128x_OBJ::HalSpiTransfer(uint8_t *buffer_in, const uint8_t *buffer_out, uint16_t size)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af02      	add	r7, sp, #8
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
 8001db8:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(SX1280_NSS_GPIO_Port, SX1280_NSS_Pin, (GPIO_PinState)0);
 8001dba:	2200      	movs	r2, #0
 8001dbc:	2140      	movs	r1, #64	; 0x40
 8001dbe:	480a      	ldr	r0, [pc, #40]	; (8001de8 <_ZN10SX128x_OBJ14HalSpiTransferEPhPKht+0x3c>)
 8001dc0:	f001 f83a 	bl	8002e38 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)buffer_out, buffer_in, size, 1);
 8001dc4:	887b      	ldrh	r3, [r7, #2]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	9200      	str	r2, [sp, #0]
 8001dca:	68ba      	ldr	r2, [r7, #8]
 8001dcc:	6879      	ldr	r1, [r7, #4]
 8001dce:	4807      	ldr	r0, [pc, #28]	; (8001dec <_ZN10SX128x_OBJ14HalSpiTransferEPhPKht+0x40>)
 8001dd0:	f002 fc0d 	bl	80045ee <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SX1280_NSS_GPIO_Port, SX1280_NSS_Pin, (GPIO_PinState)1);
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	2140      	movs	r1, #64	; 0x40
 8001dd8:	4803      	ldr	r0, [pc, #12]	; (8001de8 <_ZN10SX128x_OBJ14HalSpiTransferEPhPKht+0x3c>)
 8001dda:	f001 f82d 	bl	8002e38 <HAL_GPIO_WritePin>
}
 8001dde:	bf00      	nop
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	48000400 	.word	0x48000400
 8001dec:	2000007c 	.word	0x2000007c

08001df0 <_ZN10SX128x_OBJ19HalSpiTransferDelayEPhPKht>:

void SX128x_OBJ::HalSpiTransferDelay(uint8_t *buffer_in, const uint8_t *buffer_out, uint16_t size)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af02      	add	r7, sp, #8
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
 8001dfc:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(SX1280_NSS_GPIO_Port, SX1280_NSS_Pin, (GPIO_PinState)0);
 8001dfe:	2200      	movs	r2, #0
 8001e00:	2140      	movs	r1, #64	; 0x40
 8001e02:	480b      	ldr	r0, [pc, #44]	; (8001e30 <_ZN10SX128x_OBJ19HalSpiTransferDelayEPhPKht+0x40>)
 8001e04:	f001 f818 	bl	8002e38 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001e08:	200a      	movs	r0, #10
 8001e0a:	f000 fd49 	bl	80028a0 <HAL_Delay>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)buffer_out, buffer_in, size, 1);
 8001e0e:	887b      	ldrh	r3, [r7, #2]
 8001e10:	2201      	movs	r2, #1
 8001e12:	9200      	str	r2, [sp, #0]
 8001e14:	68ba      	ldr	r2, [r7, #8]
 8001e16:	6879      	ldr	r1, [r7, #4]
 8001e18:	4806      	ldr	r0, [pc, #24]	; (8001e34 <_ZN10SX128x_OBJ19HalSpiTransferDelayEPhPKht+0x44>)
 8001e1a:	f002 fbe8 	bl	80045ee <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SX1280_NSS_GPIO_Port, SX1280_NSS_Pin, (GPIO_PinState)1);
 8001e1e:	2201      	movs	r2, #1
 8001e20:	2140      	movs	r1, #64	; 0x40
 8001e22:	4803      	ldr	r0, [pc, #12]	; (8001e30 <_ZN10SX128x_OBJ19HalSpiTransferDelayEPhPKht+0x40>)
 8001e24:	f001 f808 	bl	8002e38 <HAL_GPIO_WritePin>
}
 8001e28:	bf00      	nop
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	48000400 	.word	0x48000400
 8001e34:	2000007c 	.word	0x2000007c

08001e38 <_ZNSt8functionIFvvEED1Ev>:
    class function<_Res(_ArgTypes...)>
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff ff3f 	bl	8001cc6 <_ZNSt14_Function_baseD1Ev>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <_ZNSt8functionIFvN6SX128x14IrqErrorCode_tEEED1Ev>:
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff ff32 	bl	8001cc6 <_ZNSt14_Function_baseD1Ev>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4618      	mov	r0, r3
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <_ZNSt8functionIFvN6SX128x16IrqRangingCode_tEEED1Ev>:
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff ff25 	bl	8001cc6 <_ZNSt14_Function_baseD1Ev>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <_ZNSt8functionIFvbEED1Ev>:
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b082      	sub	sp, #8
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff ff18 	bl	8001cc6 <_ZNSt14_Function_baseD1Ev>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <_ZN6SX128xUt0_D1Ev>:
	struct {
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3380      	adds	r3, #128	; 0x80
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff ffea 	bl	8001e86 <_ZNSt8functionIFvbEED1Ev>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	3370      	adds	r3, #112	; 0x70
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff ffd8 	bl	8001e6c <_ZNSt8functionIFvN6SX128x16IrqRangingCode_tEEED1Ev>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3360      	adds	r3, #96	; 0x60
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff ffc6 	bl	8001e52 <_ZNSt8functionIFvN6SX128x14IrqErrorCode_tEEED1Ev>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	3350      	adds	r3, #80	; 0x50
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff ffb4 	bl	8001e38 <_ZNSt8functionIFvvEED1Ev>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3340      	adds	r3, #64	; 0x40
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff ffaf 	bl	8001e38 <_ZNSt8functionIFvvEED1Ev>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	3330      	adds	r3, #48	; 0x30
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff ffaa 	bl	8001e38 <_ZNSt8functionIFvvEED1Ev>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	3320      	adds	r3, #32
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff ffa5 	bl	8001e38 <_ZNSt8functionIFvvEED1Ev>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	3310      	adds	r3, #16
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff ffa0 	bl	8001e38 <_ZNSt8functionIFvvEED1Ev>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff ff9c 	bl	8001e38 <_ZNSt8functionIFvvEED1Ev>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4618      	mov	r0, r3
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
	...

08001f0c <_ZN6SX128xD1Ev>:
	virtual ~SX128x() = default;
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	4a06      	ldr	r2, [pc, #24]	; (8001f30 <_ZN6SX128xD1Ev+0x24>)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	3318      	adds	r3, #24
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff ffbe 	bl	8001ea0 <_ZN6SX128xUt0_D1Ev>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4618      	mov	r0, r3
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	08006808 	.word	0x08006808

08001f34 <_ZN6SX128xD0Ev>:
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f7ff ffe5 	bl	8001f0c <_ZN6SX128xD1Ev>
 8001f42:	21d0      	movs	r1, #208	; 0xd0
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f003 ff5a 	bl	8005dfe <_ZdlPvj>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <_ZN10SX128x_OBJD1Ev>:

#define PACKET_SIZE 8
#define FIFO_SIZE 8
#define IS_TX

class SX128x_OBJ : public SX128x
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	4a05      	ldr	r2, [pc, #20]	; (8001f74 <_ZN10SX128x_OBJD1Ev+0x20>)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff ffd1 	bl	8001f0c <_ZN6SX128xD1Ev>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	0800686c 	.word	0x0800686c

08001f78 <_ZN10SX128x_OBJD0Ev>:
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f7ff ffe7 	bl	8001f54 <_ZN10SX128x_OBJD1Ev>
 8001f86:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f003 ff37 	bl	8005dfe <_ZdlPvj>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4618      	mov	r0, r3
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
	...

08001f9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f9e:	b0a5      	sub	sp, #148	; 0x94
 8001fa0:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fa2:	f000 fc01 	bl	80027a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fa6:	f000 f87b 	bl	80020a0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001faa:	f000 f9b1 	bl	8002310 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8001fae:	f000 f97b 	bl	80022a8 <_ZL19MX_USART2_UART_Initv>
  MX_SPI1_Init();
 8001fb2:	f000 f8d5 	bl	8002160 <_ZL12MX_SPI1_Initv>
  MX_TIM1_Init();
 8001fb6:	f000 f915 	bl	80021e4 <_ZL12MX_TIM1_Initv>
  char uart_buf[100];
  int uart_buf_len;
//  int received;
  uint8_t rx_buffer[8];

  uart_buf_len = sprintf(uart_buf, "SX1280 RX bit rate test\r\n");
 8001fba:	f107 030c 	add.w	r3, r7, #12
 8001fbe:	4932      	ldr	r1, [pc, #200]	; (8002088 <main+0xec>)
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f003 ffd5 	bl	8005f70 <siprintf>
 8001fc6:	6778      	str	r0, [r7, #116]	; 0x74
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8001fc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	f107 010c 	add.w	r1, r7, #12
 8001fd0:	2364      	movs	r3, #100	; 0x64
 8001fd2:	482e      	ldr	r0, [pc, #184]	; (800208c <main+0xf0>)
 8001fd4:	f003 f9bc 	bl	8005350 <HAL_UART_Transmit>
  //===========================================
  //===========================================

  uint8_t rx;

  rx = sx1280.Init();
 8001fd8:	482d      	ldr	r0, [pc, #180]	; (8002090 <main+0xf4>)
 8001fda:	f7ff fca3 	bl	8001924 <_ZN10SX128x_OBJ4InitEv>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  if(rx == 0)
 8001fe4:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d112      	bne.n	8002012 <main+0x76>
  {
	  uart_buf_len = sprintf(uart_buf, "SX1280 Initialize success\r\n");
 8001fec:	f107 030c 	add.w	r3, r7, #12
 8001ff0:	4928      	ldr	r1, [pc, #160]	; (8002094 <main+0xf8>)
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f003 ffbc 	bl	8005f70 <siprintf>
 8001ff8:	6778      	str	r0, [r7, #116]	; 0x74
	  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8001ffa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	f107 010c 	add.w	r1, r7, #12
 8002002:	2364      	movs	r3, #100	; 0x64
 8002004:	4821      	ldr	r0, [pc, #132]	; (800208c <main+0xf0>)
 8002006:	f003 f9a3 	bl	8005350 <HAL_UART_Transmit>

    //===========================================
    // Rx Setting and Operations
    //===========================================

  	sx1280.RxSetting();
 800200a:	4821      	ldr	r0, [pc, #132]	; (8002090 <main+0xf4>)
 800200c:	f7ff fd9a 	bl	8001b44 <_ZN10SX128x_OBJ9RxSettingEv>
 8002010:	e00f      	b.n	8002032 <main+0x96>
	  uart_buf_len = sprintf(uart_buf, "SX1280 Initialize fail\r\n");
 8002012:	f107 030c 	add.w	r3, r7, #12
 8002016:	4920      	ldr	r1, [pc, #128]	; (8002098 <main+0xfc>)
 8002018:	4618      	mov	r0, r3
 800201a:	f003 ffa9 	bl	8005f70 <siprintf>
 800201e:	6778      	str	r0, [r7, #116]	; 0x74
	  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8002020:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002022:	b29a      	uxth	r2, r3
 8002024:	f107 010c 	add.w	r1, r7, #12
 8002028:	2364      	movs	r3, #100	; 0x64
 800202a:	4818      	ldr	r0, [pc, #96]	; (800208c <main+0xf0>)
 800202c:	f003 f990 	bl	8005350 <HAL_UART_Transmit>
	  while(1);
 8002030:	e7fe      	b.n	8002030 <main+0x94>
//		*(uint32_t*)(tx+4) = 0x00 | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
//		*(uint32_t*)(tx+8) = 0x00 | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
//		SPI1_TRANSCEIVER(tx, rx, 11);
//
//		received = *(int*) (rx+3);
	   	sx1280.RxBlocking(rx_buffer, 8);
 8002032:	1d3b      	adds	r3, r7, #4
 8002034:	2208      	movs	r2, #8
 8002036:	4619      	mov	r1, r3
 8002038:	4815      	ldr	r0, [pc, #84]	; (8002090 <main+0xf4>)
 800203a:	f7ff fd8e 	bl	8001b5a <_ZN10SX128x_OBJ10RxBlockingEPhh>
		uart_buf_len = sprintf(uart_buf, "received: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
				rx_buffer[0], rx_buffer[1], rx_buffer[2], rx_buffer[3], rx_buffer[4], rx_buffer[5], rx_buffer[6], rx_buffer[7]);
 800203e:	793b      	ldrb	r3, [r7, #4]
		uart_buf_len = sprintf(uart_buf, "received: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
 8002040:	469c      	mov	ip, r3
				rx_buffer[0], rx_buffer[1], rx_buffer[2], rx_buffer[3], rx_buffer[4], rx_buffer[5], rx_buffer[6], rx_buffer[7]);
 8002042:	797b      	ldrb	r3, [r7, #5]
		uart_buf_len = sprintf(uart_buf, "received: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
 8002044:	469e      	mov	lr, r3
				rx_buffer[0], rx_buffer[1], rx_buffer[2], rx_buffer[3], rx_buffer[4], rx_buffer[5], rx_buffer[6], rx_buffer[7]);
 8002046:	79bb      	ldrb	r3, [r7, #6]
 8002048:	79fa      	ldrb	r2, [r7, #7]
 800204a:	7a39      	ldrb	r1, [r7, #8]
 800204c:	7a78      	ldrb	r0, [r7, #9]
		uart_buf_len = sprintf(uart_buf, "received: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
 800204e:	4604      	mov	r4, r0
				rx_buffer[0], rx_buffer[1], rx_buffer[2], rx_buffer[3], rx_buffer[4], rx_buffer[5], rx_buffer[6], rx_buffer[7]);
 8002050:	7ab8      	ldrb	r0, [r7, #10]
		uart_buf_len = sprintf(uart_buf, "received: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
 8002052:	4605      	mov	r5, r0
				rx_buffer[0], rx_buffer[1], rx_buffer[2], rx_buffer[3], rx_buffer[4], rx_buffer[5], rx_buffer[6], rx_buffer[7]);
 8002054:	7af8      	ldrb	r0, [r7, #11]
		uart_buf_len = sprintf(uart_buf, "received: %02X %02X %02X %02X %02X %02X %02X %02X\r\n",
 8002056:	4606      	mov	r6, r0
 8002058:	f107 000c 	add.w	r0, r7, #12
 800205c:	9605      	str	r6, [sp, #20]
 800205e:	9504      	str	r5, [sp, #16]
 8002060:	9403      	str	r4, [sp, #12]
 8002062:	9102      	str	r1, [sp, #8]
 8002064:	9201      	str	r2, [sp, #4]
 8002066:	9300      	str	r3, [sp, #0]
 8002068:	4673      	mov	r3, lr
 800206a:	4662      	mov	r2, ip
 800206c:	490b      	ldr	r1, [pc, #44]	; (800209c <main+0x100>)
 800206e:	f003 ff7f 	bl	8005f70 <siprintf>
 8002072:	6778      	str	r0, [r7, #116]	; 0x74
		HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8002074:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002076:	b29a      	uxth	r2, r3
 8002078:	f107 010c 	add.w	r1, r7, #12
 800207c:	2364      	movs	r3, #100	; 0x64
 800207e:	4803      	ldr	r0, [pc, #12]	; (800208c <main+0xf0>)
 8002080:	f003 f966 	bl	8005350 <HAL_UART_Transmit>
	   	sx1280.RxBlocking(rx_buffer, 8);
 8002084:	e7d5      	b.n	8002032 <main+0x96>
 8002086:	bf00      	nop
 8002088:	08006778 	.word	0x08006778
 800208c:	2000012c 	.word	0x2000012c
 8002090:	200001b8 	.word	0x200001b8
 8002094:	08006794 	.word	0x08006794
 8002098:	080067b0 	.word	0x080067b0
 800209c:	080067cc 	.word	0x080067cc

080020a0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b096      	sub	sp, #88	; 0x58
 80020a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020a6:	f107 0314 	add.w	r3, r7, #20
 80020aa:	2244      	movs	r2, #68	; 0x44
 80020ac:	2100      	movs	r1, #0
 80020ae:	4618      	mov	r0, r3
 80020b0:	f003 ff7e 	bl	8005fb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020b4:	463b      	mov	r3, r7
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]
 80020ba:	605a      	str	r2, [r3, #4]
 80020bc:	609a      	str	r2, [r3, #8]
 80020be:	60da      	str	r2, [r3, #12]
 80020c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80020c2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80020c6:	f000 fedd 	bl	8002e84 <HAL_PWREx_ControlVoltageScaling>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	bf14      	ite	ne
 80020d0:	2301      	movne	r3, #1
 80020d2:	2300      	moveq	r3, #0
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 80020da:	f000 f9af 	bl	800243c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80020de:	2302      	movs	r3, #2
 80020e0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020e8:	2310      	movs	r3, #16
 80020ea:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020ec:	2302      	movs	r3, #2
 80020ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80020f0:	2302      	movs	r3, #2
 80020f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80020f4:	2301      	movs	r3, #1
 80020f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80020f8:	230a      	movs	r3, #10
 80020fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80020fc:	2307      	movs	r3, #7
 80020fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002100:	2302      	movs	r3, #2
 8002102:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002104:	2302      	movs	r3, #2
 8002106:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002108:	f107 0314 	add.w	r3, r7, #20
 800210c:	4618      	mov	r0, r3
 800210e:	f000 ff0f 	bl	8002f30 <HAL_RCC_OscConfig>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	bf14      	ite	ne
 8002118:	2301      	movne	r3, #1
 800211a:	2300      	moveq	r3, #0
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <_Z18SystemClock_Configv+0x86>
  {
    Error_Handler();
 8002122:	f000 f98b 	bl	800243c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002126:	230f      	movs	r3, #15
 8002128:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800212a:	2303      	movs	r3, #3
 800212c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800212e:	2300      	movs	r3, #0
 8002130:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002132:	2300      	movs	r3, #0
 8002134:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002136:	2300      	movs	r3, #0
 8002138:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800213a:	463b      	mov	r3, r7
 800213c:	2104      	movs	r1, #4
 800213e:	4618      	mov	r0, r3
 8002140:	f001 fad2 	bl	80036e8 <HAL_RCC_ClockConfig>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	bf14      	ite	ne
 800214a:	2301      	movne	r3, #1
 800214c:	2300      	moveq	r3, #0
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <_Z18SystemClock_Configv+0xb8>
  {
    Error_Handler();
 8002154:	f000 f972 	bl	800243c <Error_Handler>
  }
}
 8002158:	bf00      	nop
 800215a:	3758      	adds	r7, #88	; 0x58
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002164:	4b1d      	ldr	r3, [pc, #116]	; (80021dc <_ZL12MX_SPI1_Initv+0x7c>)
 8002166:	4a1e      	ldr	r2, [pc, #120]	; (80021e0 <_ZL12MX_SPI1_Initv+0x80>)
 8002168:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800216a:	4b1c      	ldr	r3, [pc, #112]	; (80021dc <_ZL12MX_SPI1_Initv+0x7c>)
 800216c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002170:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002172:	4b1a      	ldr	r3, [pc, #104]	; (80021dc <_ZL12MX_SPI1_Initv+0x7c>)
 8002174:	2200      	movs	r2, #0
 8002176:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8002178:	4b18      	ldr	r3, [pc, #96]	; (80021dc <_ZL12MX_SPI1_Initv+0x7c>)
 800217a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800217e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002180:	4b16      	ldr	r3, [pc, #88]	; (80021dc <_ZL12MX_SPI1_Initv+0x7c>)
 8002182:	2200      	movs	r2, #0
 8002184:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002186:	4b15      	ldr	r3, [pc, #84]	; (80021dc <_ZL12MX_SPI1_Initv+0x7c>)
 8002188:	2200      	movs	r2, #0
 800218a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800218c:	4b13      	ldr	r3, [pc, #76]	; (80021dc <_ZL12MX_SPI1_Initv+0x7c>)
 800218e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002192:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002194:	4b11      	ldr	r3, [pc, #68]	; (80021dc <_ZL12MX_SPI1_Initv+0x7c>)
 8002196:	2210      	movs	r2, #16
 8002198:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800219a:	4b10      	ldr	r3, [pc, #64]	; (80021dc <_ZL12MX_SPI1_Initv+0x7c>)
 800219c:	2200      	movs	r2, #0
 800219e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80021a0:	4b0e      	ldr	r3, [pc, #56]	; (80021dc <_ZL12MX_SPI1_Initv+0x7c>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021a6:	4b0d      	ldr	r3, [pc, #52]	; (80021dc <_ZL12MX_SPI1_Initv+0x7c>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80021ac:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <_ZL12MX_SPI1_Initv+0x7c>)
 80021ae:	2207      	movs	r2, #7
 80021b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80021b2:	4b0a      	ldr	r3, [pc, #40]	; (80021dc <_ZL12MX_SPI1_Initv+0x7c>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80021b8:	4b08      	ldr	r3, [pc, #32]	; (80021dc <_ZL12MX_SPI1_Initv+0x7c>)
 80021ba:	2208      	movs	r2, #8
 80021bc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80021be:	4807      	ldr	r0, [pc, #28]	; (80021dc <_ZL12MX_SPI1_Initv+0x7c>)
 80021c0:	f002 f972 	bl	80044a8 <HAL_SPI_Init>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	bf14      	ite	ne
 80021ca:	2301      	movne	r3, #1
 80021cc:	2300      	moveq	r3, #0
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <_ZL12MX_SPI1_Initv+0x78>
  {
    Error_Handler();
 80021d4:	f000 f932 	bl	800243c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80021d8:	bf00      	nop
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	2000007c 	.word	0x2000007c
 80021e0:	40013000 	.word	0x40013000

080021e4 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b088      	sub	sp, #32
 80021e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021ea:	f107 0310 	add.w	r3, r7, #16
 80021ee:	2200      	movs	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	605a      	str	r2, [r3, #4]
 80021f4:	609a      	str	r2, [r3, #8]
 80021f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021f8:	1d3b      	adds	r3, r7, #4
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	605a      	str	r2, [r3, #4]
 8002200:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002202:	4b27      	ldr	r3, [pc, #156]	; (80022a0 <_ZL12MX_TIM1_Initv+0xbc>)
 8002204:	4a27      	ldr	r2, [pc, #156]	; (80022a4 <_ZL12MX_TIM1_Initv+0xc0>)
 8002206:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 8002208:	4b25      	ldr	r3, [pc, #148]	; (80022a0 <_ZL12MX_TIM1_Initv+0xbc>)
 800220a:	224f      	movs	r2, #79	; 0x4f
 800220c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800220e:	4b24      	ldr	r3, [pc, #144]	; (80022a0 <_ZL12MX_TIM1_Initv+0xbc>)
 8002210:	2200      	movs	r2, #0
 8002212:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002214:	4b22      	ldr	r3, [pc, #136]	; (80022a0 <_ZL12MX_TIM1_Initv+0xbc>)
 8002216:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800221a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800221c:	4b20      	ldr	r3, [pc, #128]	; (80022a0 <_ZL12MX_TIM1_Initv+0xbc>)
 800221e:	2200      	movs	r2, #0
 8002220:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002222:	4b1f      	ldr	r3, [pc, #124]	; (80022a0 <_ZL12MX_TIM1_Initv+0xbc>)
 8002224:	2200      	movs	r2, #0
 8002226:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002228:	4b1d      	ldr	r3, [pc, #116]	; (80022a0 <_ZL12MX_TIM1_Initv+0xbc>)
 800222a:	2200      	movs	r2, #0
 800222c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800222e:	481c      	ldr	r0, [pc, #112]	; (80022a0 <_ZL12MX_TIM1_Initv+0xbc>)
 8002230:	f002 fd64 	bl	8004cfc <HAL_TIM_Base_Init>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	bf14      	ite	ne
 800223a:	2301      	movne	r3, #1
 800223c:	2300      	moveq	r3, #0
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <_ZL12MX_TIM1_Initv+0x64>
  {
    Error_Handler();
 8002244:	f000 f8fa 	bl	800243c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002248:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800224c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800224e:	f107 0310 	add.w	r3, r7, #16
 8002252:	4619      	mov	r1, r3
 8002254:	4812      	ldr	r0, [pc, #72]	; (80022a0 <_ZL12MX_TIM1_Initv+0xbc>)
 8002256:	f002 fda8 	bl	8004daa <HAL_TIM_ConfigClockSource>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	bf14      	ite	ne
 8002260:	2301      	movne	r3, #1
 8002262:	2300      	moveq	r3, #0
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <_ZL12MX_TIM1_Initv+0x8a>
  {
    Error_Handler();
 800226a:	f000 f8e7 	bl	800243c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800226e:	2300      	movs	r3, #0
 8002270:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002272:	2300      	movs	r3, #0
 8002274:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002276:	2300      	movs	r3, #0
 8002278:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800227a:	1d3b      	adds	r3, r7, #4
 800227c:	4619      	mov	r1, r3
 800227e:	4808      	ldr	r0, [pc, #32]	; (80022a0 <_ZL12MX_TIM1_Initv+0xbc>)
 8002280:	f002 ff90 	bl	80051a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	bf14      	ite	ne
 800228a:	2301      	movne	r3, #1
 800228c:	2300      	moveq	r3, #0
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <_ZL12MX_TIM1_Initv+0xb4>
  {
    Error_Handler();
 8002294:	f000 f8d2 	bl	800243c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002298:	bf00      	nop
 800229a:	3720      	adds	r7, #32
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	200000e0 	.word	0x200000e0
 80022a4:	40012c00 	.word	0x40012c00

080022a8 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022ac:	4b16      	ldr	r3, [pc, #88]	; (8002308 <_ZL19MX_USART2_UART_Initv+0x60>)
 80022ae:	4a17      	ldr	r2, [pc, #92]	; (800230c <_ZL19MX_USART2_UART_Initv+0x64>)
 80022b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80022b2:	4b15      	ldr	r3, [pc, #84]	; (8002308 <_ZL19MX_USART2_UART_Initv+0x60>)
 80022b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022ba:	4b13      	ldr	r3, [pc, #76]	; (8002308 <_ZL19MX_USART2_UART_Initv+0x60>)
 80022bc:	2200      	movs	r2, #0
 80022be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022c0:	4b11      	ldr	r3, [pc, #68]	; (8002308 <_ZL19MX_USART2_UART_Initv+0x60>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022c6:	4b10      	ldr	r3, [pc, #64]	; (8002308 <_ZL19MX_USART2_UART_Initv+0x60>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022cc:	4b0e      	ldr	r3, [pc, #56]	; (8002308 <_ZL19MX_USART2_UART_Initv+0x60>)
 80022ce:	220c      	movs	r2, #12
 80022d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022d2:	4b0d      	ldr	r3, [pc, #52]	; (8002308 <_ZL19MX_USART2_UART_Initv+0x60>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022d8:	4b0b      	ldr	r3, [pc, #44]	; (8002308 <_ZL19MX_USART2_UART_Initv+0x60>)
 80022da:	2200      	movs	r2, #0
 80022dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022de:	4b0a      	ldr	r3, [pc, #40]	; (8002308 <_ZL19MX_USART2_UART_Initv+0x60>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022e4:	4b08      	ldr	r3, [pc, #32]	; (8002308 <_ZL19MX_USART2_UART_Initv+0x60>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022ea:	4807      	ldr	r0, [pc, #28]	; (8002308 <_ZL19MX_USART2_UART_Initv+0x60>)
 80022ec:	f002 ffe2 	bl	80052b4 <HAL_UART_Init>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	bf14      	ite	ne
 80022f6:	2301      	movne	r3, #1
 80022f8:	2300      	moveq	r3, #0
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 8002300:	f000 f89c 	bl	800243c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002304:	bf00      	nop
 8002306:	bd80      	pop	{r7, pc}
 8002308:	2000012c 	.word	0x2000012c
 800230c:	40004400 	.word	0x40004400

08002310 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b08a      	sub	sp, #40	; 0x28
 8002314:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002316:	f107 0314 	add.w	r3, r7, #20
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	605a      	str	r2, [r3, #4]
 8002320:	609a      	str	r2, [r3, #8]
 8002322:	60da      	str	r2, [r3, #12]
 8002324:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002326:	4b42      	ldr	r3, [pc, #264]	; (8002430 <_ZL12MX_GPIO_Initv+0x120>)
 8002328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232a:	4a41      	ldr	r2, [pc, #260]	; (8002430 <_ZL12MX_GPIO_Initv+0x120>)
 800232c:	f043 0304 	orr.w	r3, r3, #4
 8002330:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002332:	4b3f      	ldr	r3, [pc, #252]	; (8002430 <_ZL12MX_GPIO_Initv+0x120>)
 8002334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002336:	f003 0304 	and.w	r3, r3, #4
 800233a:	613b      	str	r3, [r7, #16]
 800233c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800233e:	4b3c      	ldr	r3, [pc, #240]	; (8002430 <_ZL12MX_GPIO_Initv+0x120>)
 8002340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002342:	4a3b      	ldr	r2, [pc, #236]	; (8002430 <_ZL12MX_GPIO_Initv+0x120>)
 8002344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002348:	64d3      	str	r3, [r2, #76]	; 0x4c
 800234a:	4b39      	ldr	r3, [pc, #228]	; (8002430 <_ZL12MX_GPIO_Initv+0x120>)
 800234c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800234e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002356:	4b36      	ldr	r3, [pc, #216]	; (8002430 <_ZL12MX_GPIO_Initv+0x120>)
 8002358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800235a:	4a35      	ldr	r2, [pc, #212]	; (8002430 <_ZL12MX_GPIO_Initv+0x120>)
 800235c:	f043 0301 	orr.w	r3, r3, #1
 8002360:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002362:	4b33      	ldr	r3, [pc, #204]	; (8002430 <_ZL12MX_GPIO_Initv+0x120>)
 8002364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	60bb      	str	r3, [r7, #8]
 800236c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800236e:	4b30      	ldr	r3, [pc, #192]	; (8002430 <_ZL12MX_GPIO_Initv+0x120>)
 8002370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002372:	4a2f      	ldr	r2, [pc, #188]	; (8002430 <_ZL12MX_GPIO_Initv+0x120>)
 8002374:	f043 0302 	orr.w	r3, r3, #2
 8002378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800237a:	4b2d      	ldr	r3, [pc, #180]	; (8002430 <_ZL12MX_GPIO_Initv+0x120>)
 800237c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	607b      	str	r3, [r7, #4]
 8002384:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SX1280_RST_GPIO_Port, SX1280_RST_Pin, GPIO_PIN_SET);
 8002386:	2201      	movs	r2, #1
 8002388:	2180      	movs	r1, #128	; 0x80
 800238a:	482a      	ldr	r0, [pc, #168]	; (8002434 <_ZL12MX_GPIO_Initv+0x124>)
 800238c:	f000 fd54 	bl	8002e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SX1280_NSS_GPIO_Port, SX1280_NSS_Pin, GPIO_PIN_SET);
 8002390:	2201      	movs	r2, #1
 8002392:	2140      	movs	r1, #64	; 0x40
 8002394:	4828      	ldr	r0, [pc, #160]	; (8002438 <_ZL12MX_GPIO_Initv+0x128>)
 8002396:	f000 fd4f 	bl	8002e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800239a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800239e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80023a0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80023a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a6:	2300      	movs	r3, #0
 80023a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80023aa:	f107 0314 	add.w	r3, r7, #20
 80023ae:	4619      	mov	r1, r3
 80023b0:	4820      	ldr	r0, [pc, #128]	; (8002434 <_ZL12MX_GPIO_Initv+0x124>)
 80023b2:	f000 fb7f 	bl	8002ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX1280_RST_Pin */
  GPIO_InitStruct.Pin = SX1280_RST_Pin;
 80023b6:	2380      	movs	r3, #128	; 0x80
 80023b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ba:	2301      	movs	r3, #1
 80023bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023be:	2300      	movs	r3, #0
 80023c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c2:	2303      	movs	r3, #3
 80023c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SX1280_RST_GPIO_Port, &GPIO_InitStruct);
 80023c6:	f107 0314 	add.w	r3, r7, #20
 80023ca:	4619      	mov	r1, r3
 80023cc:	4819      	ldr	r0, [pc, #100]	; (8002434 <_ZL12MX_GPIO_Initv+0x124>)
 80023ce:	f000 fb71 	bl	8002ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80023d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80023d8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80023dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023de:	2300      	movs	r3, #0
 80023e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e2:	f107 0314 	add.w	r3, r7, #20
 80023e6:	4619      	mov	r1, r3
 80023e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023ec:	f000 fb62 	bl	8002ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX1280_BUSY_Pin */
  GPIO_InitStruct.Pin = SX1280_BUSY_Pin;
 80023f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023f6:	2300      	movs	r3, #0
 80023f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fa:	2300      	movs	r3, #0
 80023fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SX1280_BUSY_GPIO_Port, &GPIO_InitStruct);
 80023fe:	f107 0314 	add.w	r3, r7, #20
 8002402:	4619      	mov	r1, r3
 8002404:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002408:	f000 fb54 	bl	8002ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX1280_NSS_Pin */
  GPIO_InitStruct.Pin = SX1280_NSS_Pin;
 800240c:	2340      	movs	r3, #64	; 0x40
 800240e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002410:	2301      	movs	r3, #1
 8002412:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002414:	2300      	movs	r3, #0
 8002416:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002418:	2303      	movs	r3, #3
 800241a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SX1280_NSS_GPIO_Port, &GPIO_InitStruct);
 800241c:	f107 0314 	add.w	r3, r7, #20
 8002420:	4619      	mov	r1, r3
 8002422:	4805      	ldr	r0, [pc, #20]	; (8002438 <_ZL12MX_GPIO_Initv+0x128>)
 8002424:	f000 fb46 	bl	8002ab4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002428:	bf00      	nop
 800242a:	3728      	adds	r7, #40	; 0x28
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40021000 	.word	0x40021000
 8002434:	48000800 	.word	0x48000800
 8002438:	48000400 	.word	0x48000400

0800243c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002440:	b672      	cpsid	i
}
 8002442:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002444:	e7fe      	b.n	8002444 <Error_Handler+0x8>
	...

08002448 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d107      	bne.n	8002468 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800245e:	4293      	cmp	r3, r2
 8002460:	d102      	bne.n	8002468 <_Z41__static_initialization_and_destruction_0ii+0x20>
SX128x_OBJ sx1280;
 8002462:	4809      	ldr	r0, [pc, #36]	; (8002488 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002464:	f7ff fb12 	bl	8001a8c <_ZN10SX128x_OBJC1Ev>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d107      	bne.n	800247e <_Z41__static_initialization_and_destruction_0ii+0x36>
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002474:	4293      	cmp	r3, r2
 8002476:	d102      	bne.n	800247e <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002478:	4803      	ldr	r0, [pc, #12]	; (8002488 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800247a:	f7ff fd6b 	bl	8001f54 <_ZN10SX128x_OBJD1Ev>
}
 800247e:	bf00      	nop
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	200001b8 	.word	0x200001b8

0800248c <_GLOBAL__sub_I_hspi1>:
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
 8002490:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002494:	2001      	movs	r0, #1
 8002496:	f7ff ffd7 	bl	8002448 <_Z41__static_initialization_and_destruction_0ii>
 800249a:	bd80      	pop	{r7, pc}

0800249c <_GLOBAL__sub_D_hspi1>:
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
 80024a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80024a4:	2000      	movs	r0, #0
 80024a6:	f7ff ffcf 	bl	8002448 <_Z41__static_initialization_and_destruction_0ii>
 80024aa:	bd80      	pop	{r7, pc}

080024ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024b2:	4b0f      	ldr	r3, [pc, #60]	; (80024f0 <HAL_MspInit+0x44>)
 80024b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024b6:	4a0e      	ldr	r2, [pc, #56]	; (80024f0 <HAL_MspInit+0x44>)
 80024b8:	f043 0301 	orr.w	r3, r3, #1
 80024bc:	6613      	str	r3, [r2, #96]	; 0x60
 80024be:	4b0c      	ldr	r3, [pc, #48]	; (80024f0 <HAL_MspInit+0x44>)
 80024c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	607b      	str	r3, [r7, #4]
 80024c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024ca:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <HAL_MspInit+0x44>)
 80024cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ce:	4a08      	ldr	r2, [pc, #32]	; (80024f0 <HAL_MspInit+0x44>)
 80024d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d4:	6593      	str	r3, [r2, #88]	; 0x58
 80024d6:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <HAL_MspInit+0x44>)
 80024d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024de:	603b      	str	r3, [r7, #0]
 80024e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	40021000 	.word	0x40021000

080024f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b08a      	sub	sp, #40	; 0x28
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024fc:	f107 0314 	add.w	r3, r7, #20
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	605a      	str	r2, [r3, #4]
 8002506:	609a      	str	r2, [r3, #8]
 8002508:	60da      	str	r2, [r3, #12]
 800250a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a17      	ldr	r2, [pc, #92]	; (8002570 <HAL_SPI_MspInit+0x7c>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d128      	bne.n	8002568 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002516:	4b17      	ldr	r3, [pc, #92]	; (8002574 <HAL_SPI_MspInit+0x80>)
 8002518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800251a:	4a16      	ldr	r2, [pc, #88]	; (8002574 <HAL_SPI_MspInit+0x80>)
 800251c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002520:	6613      	str	r3, [r2, #96]	; 0x60
 8002522:	4b14      	ldr	r3, [pc, #80]	; (8002574 <HAL_SPI_MspInit+0x80>)
 8002524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002526:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800252a:	613b      	str	r3, [r7, #16]
 800252c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800252e:	4b11      	ldr	r3, [pc, #68]	; (8002574 <HAL_SPI_MspInit+0x80>)
 8002530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002532:	4a10      	ldr	r2, [pc, #64]	; (8002574 <HAL_SPI_MspInit+0x80>)
 8002534:	f043 0301 	orr.w	r3, r3, #1
 8002538:	64d3      	str	r3, [r2, #76]	; 0x4c
 800253a:	4b0e      	ldr	r3, [pc, #56]	; (8002574 <HAL_SPI_MspInit+0x80>)
 800253c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002546:	23e0      	movs	r3, #224	; 0xe0
 8002548:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254a:	2302      	movs	r3, #2
 800254c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800254e:	2302      	movs	r3, #2
 8002550:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002552:	2303      	movs	r3, #3
 8002554:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002556:	2305      	movs	r3, #5
 8002558:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800255a:	f107 0314 	add.w	r3, r7, #20
 800255e:	4619      	mov	r1, r3
 8002560:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002564:	f000 faa6 	bl	8002ab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002568:	bf00      	nop
 800256a:	3728      	adds	r7, #40	; 0x28
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40013000 	.word	0x40013000
 8002574:	40021000 	.word	0x40021000

08002578 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a0a      	ldr	r2, [pc, #40]	; (80025b0 <HAL_TIM_Base_MspInit+0x38>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d10b      	bne.n	80025a2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800258a:	4b0a      	ldr	r3, [pc, #40]	; (80025b4 <HAL_TIM_Base_MspInit+0x3c>)
 800258c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800258e:	4a09      	ldr	r2, [pc, #36]	; (80025b4 <HAL_TIM_Base_MspInit+0x3c>)
 8002590:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002594:	6613      	str	r3, [r2, #96]	; 0x60
 8002596:	4b07      	ldr	r3, [pc, #28]	; (80025b4 <HAL_TIM_Base_MspInit+0x3c>)
 8002598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800259a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800259e:	60fb      	str	r3, [r7, #12]
 80025a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80025a2:	bf00      	nop
 80025a4:	3714      	adds	r7, #20
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	40012c00 	.word	0x40012c00
 80025b4:	40021000 	.word	0x40021000

080025b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b0ac      	sub	sp, #176	; 0xb0
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	605a      	str	r2, [r3, #4]
 80025ca:	609a      	str	r2, [r3, #8]
 80025cc:	60da      	str	r2, [r3, #12]
 80025ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025d0:	f107 0314 	add.w	r3, r7, #20
 80025d4:	2288      	movs	r2, #136	; 0x88
 80025d6:	2100      	movs	r1, #0
 80025d8:	4618      	mov	r0, r3
 80025da:	f003 fce9 	bl	8005fb0 <memset>
  if(huart->Instance==USART2)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a21      	ldr	r2, [pc, #132]	; (8002668 <HAL_UART_MspInit+0xb0>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d13b      	bne.n	8002660 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80025e8:	2302      	movs	r3, #2
 80025ea:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80025ec:	2300      	movs	r3, #0
 80025ee:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025f0:	f107 0314 	add.w	r3, r7, #20
 80025f4:	4618      	mov	r0, r3
 80025f6:	f001 fa9b 	bl	8003b30 <HAL_RCCEx_PeriphCLKConfig>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002600:	f7ff ff1c 	bl	800243c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002604:	4b19      	ldr	r3, [pc, #100]	; (800266c <HAL_UART_MspInit+0xb4>)
 8002606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002608:	4a18      	ldr	r2, [pc, #96]	; (800266c <HAL_UART_MspInit+0xb4>)
 800260a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800260e:	6593      	str	r3, [r2, #88]	; 0x58
 8002610:	4b16      	ldr	r3, [pc, #88]	; (800266c <HAL_UART_MspInit+0xb4>)
 8002612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002618:	613b      	str	r3, [r7, #16]
 800261a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800261c:	4b13      	ldr	r3, [pc, #76]	; (800266c <HAL_UART_MspInit+0xb4>)
 800261e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002620:	4a12      	ldr	r2, [pc, #72]	; (800266c <HAL_UART_MspInit+0xb4>)
 8002622:	f043 0301 	orr.w	r3, r3, #1
 8002626:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002628:	4b10      	ldr	r3, [pc, #64]	; (800266c <HAL_UART_MspInit+0xb4>)
 800262a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	60fb      	str	r3, [r7, #12]
 8002632:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002634:	230c      	movs	r3, #12
 8002636:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263a:	2302      	movs	r3, #2
 800263c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002640:	2300      	movs	r3, #0
 8002642:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002646:	2303      	movs	r3, #3
 8002648:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800264c:	2307      	movs	r3, #7
 800264e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002652:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002656:	4619      	mov	r1, r3
 8002658:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800265c:	f000 fa2a 	bl	8002ab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002660:	bf00      	nop
 8002662:	37b0      	adds	r7, #176	; 0xb0
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40004400 	.word	0x40004400
 800266c:	40021000 	.word	0x40021000

08002670 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002674:	e7fe      	b.n	8002674 <NMI_Handler+0x4>

08002676 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002676:	b480      	push	{r7}
 8002678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800267a:	e7fe      	b.n	800267a <HardFault_Handler+0x4>

0800267c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002680:	e7fe      	b.n	8002680 <MemManage_Handler+0x4>

08002682 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002682:	b480      	push	{r7}
 8002684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002686:	e7fe      	b.n	8002686 <BusFault_Handler+0x4>

08002688 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800268c:	e7fe      	b.n	800268c <UsageFault_Handler+0x4>

0800268e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800268e:	b480      	push	{r7}
 8002690:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002692:	bf00      	nop
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026a0:	bf00      	nop
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr

080026aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026aa:	b480      	push	{r7}
 80026ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026ae:	bf00      	nop
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026bc:	f000 f8d0 	bl	8002860 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026c0:	bf00      	nop
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026cc:	4a14      	ldr	r2, [pc, #80]	; (8002720 <_sbrk+0x5c>)
 80026ce:	4b15      	ldr	r3, [pc, #84]	; (8002724 <_sbrk+0x60>)
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026d8:	4b13      	ldr	r3, [pc, #76]	; (8002728 <_sbrk+0x64>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d102      	bne.n	80026e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026e0:	4b11      	ldr	r3, [pc, #68]	; (8002728 <_sbrk+0x64>)
 80026e2:	4a12      	ldr	r2, [pc, #72]	; (800272c <_sbrk+0x68>)
 80026e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026e6:	4b10      	ldr	r3, [pc, #64]	; (8002728 <_sbrk+0x64>)
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4413      	add	r3, r2
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d207      	bcs.n	8002704 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026f4:	f003 fc74 	bl	8005fe0 <__errno>
 80026f8:	4603      	mov	r3, r0
 80026fa:	220c      	movs	r2, #12
 80026fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002702:	e009      	b.n	8002718 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002704:	4b08      	ldr	r3, [pc, #32]	; (8002728 <_sbrk+0x64>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800270a:	4b07      	ldr	r3, [pc, #28]	; (8002728 <_sbrk+0x64>)
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4413      	add	r3, r2
 8002712:	4a05      	ldr	r2, [pc, #20]	; (8002728 <_sbrk+0x64>)
 8002714:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002716:	68fb      	ldr	r3, [r7, #12]
}
 8002718:	4618      	mov	r0, r3
 800271a:	3718      	adds	r7, #24
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	20018000 	.word	0x20018000
 8002724:	00000400 	.word	0x00000400
 8002728:	20000300 	.word	0x20000300
 800272c:	20000450 	.word	0x20000450

08002730 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002734:	4b06      	ldr	r3, [pc, #24]	; (8002750 <SystemInit+0x20>)
 8002736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800273a:	4a05      	ldr	r2, [pc, #20]	; (8002750 <SystemInit+0x20>)
 800273c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002740:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002744:	bf00      	nop
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	e000ed00 	.word	0xe000ed00

08002754 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002754:	f8df d034 	ldr.w	sp, [pc, #52]	; 800278c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002758:	f7ff ffea 	bl	8002730 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800275c:	480c      	ldr	r0, [pc, #48]	; (8002790 <LoopForever+0x6>)
  ldr r1, =_edata
 800275e:	490d      	ldr	r1, [pc, #52]	; (8002794 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002760:	4a0d      	ldr	r2, [pc, #52]	; (8002798 <LoopForever+0xe>)
  movs r3, #0
 8002762:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002764:	e002      	b.n	800276c <LoopCopyDataInit>

08002766 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002766:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002768:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800276a:	3304      	adds	r3, #4

0800276c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800276c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800276e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002770:	d3f9      	bcc.n	8002766 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002772:	4a0a      	ldr	r2, [pc, #40]	; (800279c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002774:	4c0a      	ldr	r4, [pc, #40]	; (80027a0 <LoopForever+0x16>)
  movs r3, #0
 8002776:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002778:	e001      	b.n	800277e <LoopFillZerobss>

0800277a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800277a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800277c:	3204      	adds	r2, #4

0800277e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800277e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002780:	d3fb      	bcc.n	800277a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002782:	f003 fc33 	bl	8005fec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002786:	f7ff fc09 	bl	8001f9c <main>

0800278a <LoopForever>:

LoopForever:
    b LoopForever
 800278a:	e7fe      	b.n	800278a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800278c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002790:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002794:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002798:	0800695c 	.word	0x0800695c
  ldr r2, =_sbss
 800279c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80027a0:	20000450 	.word	0x20000450

080027a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80027a4:	e7fe      	b.n	80027a4 <ADC1_2_IRQHandler>
	...

080027a8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80027ae:	2300      	movs	r3, #0
 80027b0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027b2:	4b0c      	ldr	r3, [pc, #48]	; (80027e4 <HAL_Init+0x3c>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a0b      	ldr	r2, [pc, #44]	; (80027e4 <HAL_Init+0x3c>)
 80027b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027bc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027be:	2003      	movs	r0, #3
 80027c0:	f000 f944 	bl	8002a4c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027c4:	2000      	movs	r0, #0
 80027c6:	f000 f80f 	bl	80027e8 <HAL_InitTick>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d002      	beq.n	80027d6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	71fb      	strb	r3, [r7, #7]
 80027d4:	e001      	b.n	80027da <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80027d6:	f7ff fe69 	bl	80024ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80027da:	79fb      	ldrb	r3, [r7, #7]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3708      	adds	r7, #8
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	40022000 	.word	0x40022000

080027e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80027f0:	2300      	movs	r3, #0
 80027f2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80027f4:	4b17      	ldr	r3, [pc, #92]	; (8002854 <HAL_InitTick+0x6c>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d023      	beq.n	8002844 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80027fc:	4b16      	ldr	r3, [pc, #88]	; (8002858 <HAL_InitTick+0x70>)
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	4b14      	ldr	r3, [pc, #80]	; (8002854 <HAL_InitTick+0x6c>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	4619      	mov	r1, r3
 8002806:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800280a:	fbb3 f3f1 	udiv	r3, r3, r1
 800280e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002812:	4618      	mov	r0, r3
 8002814:	f000 f941 	bl	8002a9a <HAL_SYSTICK_Config>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10f      	bne.n	800283e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2b0f      	cmp	r3, #15
 8002822:	d809      	bhi.n	8002838 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002824:	2200      	movs	r2, #0
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	f04f 30ff 	mov.w	r0, #4294967295
 800282c:	f000 f919 	bl	8002a62 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002830:	4a0a      	ldr	r2, [pc, #40]	; (800285c <HAL_InitTick+0x74>)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6013      	str	r3, [r2, #0]
 8002836:	e007      	b.n	8002848 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	73fb      	strb	r3, [r7, #15]
 800283c:	e004      	b.n	8002848 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	73fb      	strb	r3, [r7, #15]
 8002842:	e001      	b.n	8002848 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002848:	7bfb      	ldrb	r3, [r7, #15]
}
 800284a:	4618      	mov	r0, r3
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	20000008 	.word	0x20000008
 8002858:	20000000 	.word	0x20000000
 800285c:	20000004 	.word	0x20000004

08002860 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002864:	4b06      	ldr	r3, [pc, #24]	; (8002880 <HAL_IncTick+0x20>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	461a      	mov	r2, r3
 800286a:	4b06      	ldr	r3, [pc, #24]	; (8002884 <HAL_IncTick+0x24>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4413      	add	r3, r2
 8002870:	4a04      	ldr	r2, [pc, #16]	; (8002884 <HAL_IncTick+0x24>)
 8002872:	6013      	str	r3, [r2, #0]
}
 8002874:	bf00      	nop
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	20000008 	.word	0x20000008
 8002884:	20000304 	.word	0x20000304

08002888 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  return uwTick;
 800288c:	4b03      	ldr	r3, [pc, #12]	; (800289c <HAL_GetTick+0x14>)
 800288e:	681b      	ldr	r3, [r3, #0]
}
 8002890:	4618      	mov	r0, r3
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	20000304 	.word	0x20000304

080028a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028a8:	f7ff ffee 	bl	8002888 <HAL_GetTick>
 80028ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b8:	d005      	beq.n	80028c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80028ba:	4b0a      	ldr	r3, [pc, #40]	; (80028e4 <HAL_Delay+0x44>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	461a      	mov	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	4413      	add	r3, r2
 80028c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028c6:	bf00      	nop
 80028c8:	f7ff ffde 	bl	8002888 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d8f7      	bhi.n	80028c8 <HAL_Delay+0x28>
  {
  }
}
 80028d8:	bf00      	nop
 80028da:	bf00      	nop
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	20000008 	.word	0x20000008

080028e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f003 0307 	and.w	r3, r3, #7
 80028f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028f8:	4b0c      	ldr	r3, [pc, #48]	; (800292c <__NVIC_SetPriorityGrouping+0x44>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028fe:	68ba      	ldr	r2, [r7, #8]
 8002900:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002904:	4013      	ands	r3, r2
 8002906:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002910:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002918:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800291a:	4a04      	ldr	r2, [pc, #16]	; (800292c <__NVIC_SetPriorityGrouping+0x44>)
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	60d3      	str	r3, [r2, #12]
}
 8002920:	bf00      	nop
 8002922:	3714      	adds	r7, #20
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	e000ed00 	.word	0xe000ed00

08002930 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002934:	4b04      	ldr	r3, [pc, #16]	; (8002948 <__NVIC_GetPriorityGrouping+0x18>)
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	0a1b      	lsrs	r3, r3, #8
 800293a:	f003 0307 	and.w	r3, r3, #7
}
 800293e:	4618      	mov	r0, r3
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr
 8002948:	e000ed00 	.word	0xe000ed00

0800294c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	4603      	mov	r3, r0
 8002954:	6039      	str	r1, [r7, #0]
 8002956:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295c:	2b00      	cmp	r3, #0
 800295e:	db0a      	blt.n	8002976 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	b2da      	uxtb	r2, r3
 8002964:	490c      	ldr	r1, [pc, #48]	; (8002998 <__NVIC_SetPriority+0x4c>)
 8002966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296a:	0112      	lsls	r2, r2, #4
 800296c:	b2d2      	uxtb	r2, r2
 800296e:	440b      	add	r3, r1
 8002970:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002974:	e00a      	b.n	800298c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	b2da      	uxtb	r2, r3
 800297a:	4908      	ldr	r1, [pc, #32]	; (800299c <__NVIC_SetPriority+0x50>)
 800297c:	79fb      	ldrb	r3, [r7, #7]
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	3b04      	subs	r3, #4
 8002984:	0112      	lsls	r2, r2, #4
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	440b      	add	r3, r1
 800298a:	761a      	strb	r2, [r3, #24]
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	e000e100 	.word	0xe000e100
 800299c:	e000ed00 	.word	0xe000ed00

080029a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b089      	sub	sp, #36	; 0x24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f003 0307 	and.w	r3, r3, #7
 80029b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	f1c3 0307 	rsb	r3, r3, #7
 80029ba:	2b04      	cmp	r3, #4
 80029bc:	bf28      	it	cs
 80029be:	2304      	movcs	r3, #4
 80029c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	3304      	adds	r3, #4
 80029c6:	2b06      	cmp	r3, #6
 80029c8:	d902      	bls.n	80029d0 <NVIC_EncodePriority+0x30>
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	3b03      	subs	r3, #3
 80029ce:	e000      	b.n	80029d2 <NVIC_EncodePriority+0x32>
 80029d0:	2300      	movs	r3, #0
 80029d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d4:	f04f 32ff 	mov.w	r2, #4294967295
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	43da      	mvns	r2, r3
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	401a      	ands	r2, r3
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029e8:	f04f 31ff 	mov.w	r1, #4294967295
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	fa01 f303 	lsl.w	r3, r1, r3
 80029f2:	43d9      	mvns	r1, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f8:	4313      	orrs	r3, r2
         );
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3724      	adds	r7, #36	; 0x24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
	...

08002a08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	3b01      	subs	r3, #1
 8002a14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a18:	d301      	bcc.n	8002a1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e00f      	b.n	8002a3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a1e:	4a0a      	ldr	r2, [pc, #40]	; (8002a48 <SysTick_Config+0x40>)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	3b01      	subs	r3, #1
 8002a24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a26:	210f      	movs	r1, #15
 8002a28:	f04f 30ff 	mov.w	r0, #4294967295
 8002a2c:	f7ff ff8e 	bl	800294c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a30:	4b05      	ldr	r3, [pc, #20]	; (8002a48 <SysTick_Config+0x40>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a36:	4b04      	ldr	r3, [pc, #16]	; (8002a48 <SysTick_Config+0x40>)
 8002a38:	2207      	movs	r2, #7
 8002a3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	e000e010 	.word	0xe000e010

08002a4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f7ff ff47 	bl	80028e8 <__NVIC_SetPriorityGrouping>
}
 8002a5a:	bf00      	nop
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b086      	sub	sp, #24
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	4603      	mov	r3, r0
 8002a6a:	60b9      	str	r1, [r7, #8]
 8002a6c:	607a      	str	r2, [r7, #4]
 8002a6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a70:	2300      	movs	r3, #0
 8002a72:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a74:	f7ff ff5c 	bl	8002930 <__NVIC_GetPriorityGrouping>
 8002a78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	68b9      	ldr	r1, [r7, #8]
 8002a7e:	6978      	ldr	r0, [r7, #20]
 8002a80:	f7ff ff8e 	bl	80029a0 <NVIC_EncodePriority>
 8002a84:	4602      	mov	r2, r0
 8002a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a8a:	4611      	mov	r1, r2
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff ff5d 	bl	800294c <__NVIC_SetPriority>
}
 8002a92:	bf00      	nop
 8002a94:	3718      	adds	r7, #24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b082      	sub	sp, #8
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f7ff ffb0 	bl	8002a08 <SysTick_Config>
 8002aa8:	4603      	mov	r3, r0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
	...

08002ab4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b087      	sub	sp, #28
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ac2:	e17f      	b.n	8002dc4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	2101      	movs	r1, #1
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 8171 	beq.w	8002dbe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f003 0303 	and.w	r3, r3, #3
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d005      	beq.n	8002af4 <HAL_GPIO_Init+0x40>
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f003 0303 	and.w	r3, r3, #3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d130      	bne.n	8002b56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	2203      	movs	r2, #3
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	43db      	mvns	r3, r3
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	68da      	ldr	r2, [r3, #12]
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	43db      	mvns	r3, r3
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	4013      	ands	r3, r2
 8002b38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	091b      	lsrs	r3, r3, #4
 8002b40:	f003 0201 	and.w	r2, r3, #1
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f003 0303 	and.w	r3, r3, #3
 8002b5e:	2b03      	cmp	r3, #3
 8002b60:	d118      	bne.n	8002b94 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002b68:	2201      	movs	r2, #1
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	43db      	mvns	r3, r3
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	4013      	ands	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	08db      	lsrs	r3, r3, #3
 8002b7e:	f003 0201 	and.w	r2, r3, #1
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f003 0303 	and.w	r3, r3, #3
 8002b9c:	2b03      	cmp	r3, #3
 8002b9e:	d017      	beq.n	8002bd0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	2203      	movs	r2, #3
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	689a      	ldr	r2, [r3, #8]
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f003 0303 	and.w	r3, r3, #3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d123      	bne.n	8002c24 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	08da      	lsrs	r2, r3, #3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3208      	adds	r2, #8
 8002be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002be8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	f003 0307 	and.w	r3, r3, #7
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	220f      	movs	r2, #15
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	43db      	mvns	r3, r3
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	691a      	ldr	r2, [r3, #16]
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	08da      	lsrs	r2, r3, #3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	3208      	adds	r2, #8
 8002c1e:	6939      	ldr	r1, [r7, #16]
 8002c20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	2203      	movs	r2, #3
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	43db      	mvns	r3, r3
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f003 0203 	and.w	r2, r3, #3
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f000 80ac 	beq.w	8002dbe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c66:	4b5f      	ldr	r3, [pc, #380]	; (8002de4 <HAL_GPIO_Init+0x330>)
 8002c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c6a:	4a5e      	ldr	r2, [pc, #376]	; (8002de4 <HAL_GPIO_Init+0x330>)
 8002c6c:	f043 0301 	orr.w	r3, r3, #1
 8002c70:	6613      	str	r3, [r2, #96]	; 0x60
 8002c72:	4b5c      	ldr	r3, [pc, #368]	; (8002de4 <HAL_GPIO_Init+0x330>)
 8002c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	60bb      	str	r3, [r7, #8]
 8002c7c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c7e:	4a5a      	ldr	r2, [pc, #360]	; (8002de8 <HAL_GPIO_Init+0x334>)
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	089b      	lsrs	r3, r3, #2
 8002c84:	3302      	adds	r3, #2
 8002c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	f003 0303 	and.w	r3, r3, #3
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	220f      	movs	r2, #15
 8002c96:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ca8:	d025      	beq.n	8002cf6 <HAL_GPIO_Init+0x242>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a4f      	ldr	r2, [pc, #316]	; (8002dec <HAL_GPIO_Init+0x338>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d01f      	beq.n	8002cf2 <HAL_GPIO_Init+0x23e>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a4e      	ldr	r2, [pc, #312]	; (8002df0 <HAL_GPIO_Init+0x33c>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d019      	beq.n	8002cee <HAL_GPIO_Init+0x23a>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a4d      	ldr	r2, [pc, #308]	; (8002df4 <HAL_GPIO_Init+0x340>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d013      	beq.n	8002cea <HAL_GPIO_Init+0x236>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a4c      	ldr	r2, [pc, #304]	; (8002df8 <HAL_GPIO_Init+0x344>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d00d      	beq.n	8002ce6 <HAL_GPIO_Init+0x232>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a4b      	ldr	r2, [pc, #300]	; (8002dfc <HAL_GPIO_Init+0x348>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d007      	beq.n	8002ce2 <HAL_GPIO_Init+0x22e>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a4a      	ldr	r2, [pc, #296]	; (8002e00 <HAL_GPIO_Init+0x34c>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d101      	bne.n	8002cde <HAL_GPIO_Init+0x22a>
 8002cda:	2306      	movs	r3, #6
 8002cdc:	e00c      	b.n	8002cf8 <HAL_GPIO_Init+0x244>
 8002cde:	2307      	movs	r3, #7
 8002ce0:	e00a      	b.n	8002cf8 <HAL_GPIO_Init+0x244>
 8002ce2:	2305      	movs	r3, #5
 8002ce4:	e008      	b.n	8002cf8 <HAL_GPIO_Init+0x244>
 8002ce6:	2304      	movs	r3, #4
 8002ce8:	e006      	b.n	8002cf8 <HAL_GPIO_Init+0x244>
 8002cea:	2303      	movs	r3, #3
 8002cec:	e004      	b.n	8002cf8 <HAL_GPIO_Init+0x244>
 8002cee:	2302      	movs	r3, #2
 8002cf0:	e002      	b.n	8002cf8 <HAL_GPIO_Init+0x244>
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <HAL_GPIO_Init+0x244>
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	697a      	ldr	r2, [r7, #20]
 8002cfa:	f002 0203 	and.w	r2, r2, #3
 8002cfe:	0092      	lsls	r2, r2, #2
 8002d00:	4093      	lsls	r3, r2
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d08:	4937      	ldr	r1, [pc, #220]	; (8002de8 <HAL_GPIO_Init+0x334>)
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	089b      	lsrs	r3, r3, #2
 8002d0e:	3302      	adds	r3, #2
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d16:	4b3b      	ldr	r3, [pc, #236]	; (8002e04 <HAL_GPIO_Init+0x350>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	43db      	mvns	r3, r3
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	4013      	ands	r3, r2
 8002d24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d003      	beq.n	8002d3a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d3a:	4a32      	ldr	r2, [pc, #200]	; (8002e04 <HAL_GPIO_Init+0x350>)
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d40:	4b30      	ldr	r3, [pc, #192]	; (8002e04 <HAL_GPIO_Init+0x350>)
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d003      	beq.n	8002d64 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d64:	4a27      	ldr	r2, [pc, #156]	; (8002e04 <HAL_GPIO_Init+0x350>)
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002d6a:	4b26      	ldr	r3, [pc, #152]	; (8002e04 <HAL_GPIO_Init+0x350>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	43db      	mvns	r3, r3
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	4013      	ands	r3, r2
 8002d78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d8e:	4a1d      	ldr	r2, [pc, #116]	; (8002e04 <HAL_GPIO_Init+0x350>)
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002d94:	4b1b      	ldr	r3, [pc, #108]	; (8002e04 <HAL_GPIO_Init+0x350>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	4013      	ands	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002db8:	4a12      	ldr	r2, [pc, #72]	; (8002e04 <HAL_GPIO_Init+0x350>)
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	fa22 f303 	lsr.w	r3, r2, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f47f ae78 	bne.w	8002ac4 <HAL_GPIO_Init+0x10>
  }
}
 8002dd4:	bf00      	nop
 8002dd6:	bf00      	nop
 8002dd8:	371c      	adds	r7, #28
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	40021000 	.word	0x40021000
 8002de8:	40010000 	.word	0x40010000
 8002dec:	48000400 	.word	0x48000400
 8002df0:	48000800 	.word	0x48000800
 8002df4:	48000c00 	.word	0x48000c00
 8002df8:	48001000 	.word	0x48001000
 8002dfc:	48001400 	.word	0x48001400
 8002e00:	48001800 	.word	0x48001800
 8002e04:	40010400 	.word	0x40010400

08002e08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	460b      	mov	r3, r1
 8002e12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	691a      	ldr	r2, [r3, #16]
 8002e18:	887b      	ldrh	r3, [r7, #2]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d002      	beq.n	8002e26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e20:	2301      	movs	r3, #1
 8002e22:	73fb      	strb	r3, [r7, #15]
 8002e24:	e001      	b.n	8002e2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e26:	2300      	movs	r3, #0
 8002e28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3714      	adds	r7, #20
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	460b      	mov	r3, r1
 8002e42:	807b      	strh	r3, [r7, #2]
 8002e44:	4613      	mov	r3, r2
 8002e46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e48:	787b      	ldrb	r3, [r7, #1]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d003      	beq.n	8002e56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e4e:	887a      	ldrh	r2, [r7, #2]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e54:	e002      	b.n	8002e5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e56:	887a      	ldrh	r2, [r7, #2]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002e6c:	4b04      	ldr	r3, [pc, #16]	; (8002e80 <HAL_PWREx_GetVoltageRange+0x18>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	40007000 	.word	0x40007000

08002e84 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e92:	d130      	bne.n	8002ef6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e94:	4b23      	ldr	r3, [pc, #140]	; (8002f24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ea0:	d038      	beq.n	8002f14 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ea2:	4b20      	ldr	r3, [pc, #128]	; (8002f24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002eaa:	4a1e      	ldr	r2, [pc, #120]	; (8002f24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002eac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eb0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002eb2:	4b1d      	ldr	r3, [pc, #116]	; (8002f28 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2232      	movs	r2, #50	; 0x32
 8002eb8:	fb02 f303 	mul.w	r3, r2, r3
 8002ebc:	4a1b      	ldr	r2, [pc, #108]	; (8002f2c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec2:	0c9b      	lsrs	r3, r3, #18
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ec8:	e002      	b.n	8002ed0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ed0:	4b14      	ldr	r3, [pc, #80]	; (8002f24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ed2:	695b      	ldr	r3, [r3, #20]
 8002ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ed8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002edc:	d102      	bne.n	8002ee4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1f2      	bne.n	8002eca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ee4:	4b0f      	ldr	r3, [pc, #60]	; (8002f24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ef0:	d110      	bne.n	8002f14 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e00f      	b.n	8002f16 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ef6:	4b0b      	ldr	r3, [pc, #44]	; (8002f24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002efe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f02:	d007      	beq.n	8002f14 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f04:	4b07      	ldr	r3, [pc, #28]	; (8002f24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f0c:	4a05      	ldr	r2, [pc, #20]	; (8002f24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f12:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3714      	adds	r7, #20
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	40007000 	.word	0x40007000
 8002f28:	20000000 	.word	0x20000000
 8002f2c:	431bde83 	.word	0x431bde83

08002f30 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b088      	sub	sp, #32
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e3ca      	b.n	80036d8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f42:	4b97      	ldr	r3, [pc, #604]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f003 030c 	and.w	r3, r3, #12
 8002f4a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f4c:	4b94      	ldr	r3, [pc, #592]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	f003 0303 	and.w	r3, r3, #3
 8002f54:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0310 	and.w	r3, r3, #16
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	f000 80e4 	beq.w	800312c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d007      	beq.n	8002f7a <HAL_RCC_OscConfig+0x4a>
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	2b0c      	cmp	r3, #12
 8002f6e:	f040 808b 	bne.w	8003088 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	f040 8087 	bne.w	8003088 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f7a:	4b89      	ldr	r3, [pc, #548]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d005      	beq.n	8002f92 <HAL_RCC_OscConfig+0x62>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e3a2      	b.n	80036d8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a1a      	ldr	r2, [r3, #32]
 8002f96:	4b82      	ldr	r3, [pc, #520]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0308 	and.w	r3, r3, #8
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d004      	beq.n	8002fac <HAL_RCC_OscConfig+0x7c>
 8002fa2:	4b7f      	ldr	r3, [pc, #508]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002faa:	e005      	b.n	8002fb8 <HAL_RCC_OscConfig+0x88>
 8002fac:	4b7c      	ldr	r3, [pc, #496]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8002fae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fb2:	091b      	lsrs	r3, r3, #4
 8002fb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d223      	bcs.n	8003004 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f000 fd55 	bl	8003a70 <RCC_SetFlashLatencyFromMSIRange>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e383      	b.n	80036d8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fd0:	4b73      	ldr	r3, [pc, #460]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a72      	ldr	r2, [pc, #456]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8002fd6:	f043 0308 	orr.w	r3, r3, #8
 8002fda:	6013      	str	r3, [r2, #0]
 8002fdc:	4b70      	ldr	r3, [pc, #448]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
 8002fe8:	496d      	ldr	r1, [pc, #436]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fee:	4b6c      	ldr	r3, [pc, #432]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	69db      	ldr	r3, [r3, #28]
 8002ffa:	021b      	lsls	r3, r3, #8
 8002ffc:	4968      	ldr	r1, [pc, #416]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	604b      	str	r3, [r1, #4]
 8003002:	e025      	b.n	8003050 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003004:	4b66      	ldr	r3, [pc, #408]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a65      	ldr	r2, [pc, #404]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 800300a:	f043 0308 	orr.w	r3, r3, #8
 800300e:	6013      	str	r3, [r2, #0]
 8003010:	4b63      	ldr	r3, [pc, #396]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	4960      	ldr	r1, [pc, #384]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 800301e:	4313      	orrs	r3, r2
 8003020:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003022:	4b5f      	ldr	r3, [pc, #380]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	021b      	lsls	r3, r3, #8
 8003030:	495b      	ldr	r1, [pc, #364]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8003032:	4313      	orrs	r3, r2
 8003034:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d109      	bne.n	8003050 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a1b      	ldr	r3, [r3, #32]
 8003040:	4618      	mov	r0, r3
 8003042:	f000 fd15 	bl	8003a70 <RCC_SetFlashLatencyFromMSIRange>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e343      	b.n	80036d8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003050:	f000 fc4a 	bl	80038e8 <HAL_RCC_GetSysClockFreq>
 8003054:	4602      	mov	r2, r0
 8003056:	4b52      	ldr	r3, [pc, #328]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	091b      	lsrs	r3, r3, #4
 800305c:	f003 030f 	and.w	r3, r3, #15
 8003060:	4950      	ldr	r1, [pc, #320]	; (80031a4 <HAL_RCC_OscConfig+0x274>)
 8003062:	5ccb      	ldrb	r3, [r1, r3]
 8003064:	f003 031f 	and.w	r3, r3, #31
 8003068:	fa22 f303 	lsr.w	r3, r2, r3
 800306c:	4a4e      	ldr	r2, [pc, #312]	; (80031a8 <HAL_RCC_OscConfig+0x278>)
 800306e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003070:	4b4e      	ldr	r3, [pc, #312]	; (80031ac <HAL_RCC_OscConfig+0x27c>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff fbb7 	bl	80027e8 <HAL_InitTick>
 800307a:	4603      	mov	r3, r0
 800307c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800307e:	7bfb      	ldrb	r3, [r7, #15]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d052      	beq.n	800312a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003084:	7bfb      	ldrb	r3, [r7, #15]
 8003086:	e327      	b.n	80036d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d032      	beq.n	80030f6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003090:	4b43      	ldr	r3, [pc, #268]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a42      	ldr	r2, [pc, #264]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8003096:	f043 0301 	orr.w	r3, r3, #1
 800309a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800309c:	f7ff fbf4 	bl	8002888 <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030a4:	f7ff fbf0 	bl	8002888 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e310      	b.n	80036d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030b6:	4b3a      	ldr	r3, [pc, #232]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0f0      	beq.n	80030a4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030c2:	4b37      	ldr	r3, [pc, #220]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a36      	ldr	r2, [pc, #216]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 80030c8:	f043 0308 	orr.w	r3, r3, #8
 80030cc:	6013      	str	r3, [r2, #0]
 80030ce:	4b34      	ldr	r3, [pc, #208]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a1b      	ldr	r3, [r3, #32]
 80030da:	4931      	ldr	r1, [pc, #196]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030e0:	4b2f      	ldr	r3, [pc, #188]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	69db      	ldr	r3, [r3, #28]
 80030ec:	021b      	lsls	r3, r3, #8
 80030ee:	492c      	ldr	r1, [pc, #176]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	604b      	str	r3, [r1, #4]
 80030f4:	e01a      	b.n	800312c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80030f6:	4b2a      	ldr	r3, [pc, #168]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a29      	ldr	r2, [pc, #164]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 80030fc:	f023 0301 	bic.w	r3, r3, #1
 8003100:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003102:	f7ff fbc1 	bl	8002888 <HAL_GetTick>
 8003106:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003108:	e008      	b.n	800311c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800310a:	f7ff fbbd 	bl	8002888 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e2dd      	b.n	80036d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800311c:	4b20      	ldr	r3, [pc, #128]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1f0      	bne.n	800310a <HAL_RCC_OscConfig+0x1da>
 8003128:	e000      	b.n	800312c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800312a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	2b00      	cmp	r3, #0
 8003136:	d074      	beq.n	8003222 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	2b08      	cmp	r3, #8
 800313c:	d005      	beq.n	800314a <HAL_RCC_OscConfig+0x21a>
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	2b0c      	cmp	r3, #12
 8003142:	d10e      	bne.n	8003162 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	2b03      	cmp	r3, #3
 8003148:	d10b      	bne.n	8003162 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800314a:	4b15      	ldr	r3, [pc, #84]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d064      	beq.n	8003220 <HAL_RCC_OscConfig+0x2f0>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d160      	bne.n	8003220 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e2ba      	b.n	80036d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800316a:	d106      	bne.n	800317a <HAL_RCC_OscConfig+0x24a>
 800316c:	4b0c      	ldr	r3, [pc, #48]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a0b      	ldr	r2, [pc, #44]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8003172:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003176:	6013      	str	r3, [r2, #0]
 8003178:	e026      	b.n	80031c8 <HAL_RCC_OscConfig+0x298>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003182:	d115      	bne.n	80031b0 <HAL_RCC_OscConfig+0x280>
 8003184:	4b06      	ldr	r3, [pc, #24]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a05      	ldr	r2, [pc, #20]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 800318a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800318e:	6013      	str	r3, [r2, #0]
 8003190:	4b03      	ldr	r3, [pc, #12]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a02      	ldr	r2, [pc, #8]	; (80031a0 <HAL_RCC_OscConfig+0x270>)
 8003196:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800319a:	6013      	str	r3, [r2, #0]
 800319c:	e014      	b.n	80031c8 <HAL_RCC_OscConfig+0x298>
 800319e:	bf00      	nop
 80031a0:	40021000 	.word	0x40021000
 80031a4:	080068c8 	.word	0x080068c8
 80031a8:	20000000 	.word	0x20000000
 80031ac:	20000004 	.word	0x20000004
 80031b0:	4ba0      	ldr	r3, [pc, #640]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a9f      	ldr	r2, [pc, #636]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 80031b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ba:	6013      	str	r3, [r2, #0]
 80031bc:	4b9d      	ldr	r3, [pc, #628]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a9c      	ldr	r2, [pc, #624]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 80031c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d013      	beq.n	80031f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d0:	f7ff fb5a 	bl	8002888 <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031d6:	e008      	b.n	80031ea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031d8:	f7ff fb56 	bl	8002888 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b64      	cmp	r3, #100	; 0x64
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e276      	b.n	80036d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031ea:	4b92      	ldr	r3, [pc, #584]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d0f0      	beq.n	80031d8 <HAL_RCC_OscConfig+0x2a8>
 80031f6:	e014      	b.n	8003222 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f8:	f7ff fb46 	bl	8002888 <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003200:	f7ff fb42 	bl	8002888 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b64      	cmp	r3, #100	; 0x64
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e262      	b.n	80036d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003212:	4b88      	ldr	r3, [pc, #544]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1f0      	bne.n	8003200 <HAL_RCC_OscConfig+0x2d0>
 800321e:	e000      	b.n	8003222 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003220:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d060      	beq.n	80032f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	2b04      	cmp	r3, #4
 8003232:	d005      	beq.n	8003240 <HAL_RCC_OscConfig+0x310>
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	2b0c      	cmp	r3, #12
 8003238:	d119      	bne.n	800326e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	2b02      	cmp	r3, #2
 800323e:	d116      	bne.n	800326e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003240:	4b7c      	ldr	r3, [pc, #496]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003248:	2b00      	cmp	r3, #0
 800324a:	d005      	beq.n	8003258 <HAL_RCC_OscConfig+0x328>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e23f      	b.n	80036d8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003258:	4b76      	ldr	r3, [pc, #472]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	061b      	lsls	r3, r3, #24
 8003266:	4973      	ldr	r1, [pc, #460]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 8003268:	4313      	orrs	r3, r2
 800326a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800326c:	e040      	b.n	80032f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d023      	beq.n	80032be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003276:	4b6f      	ldr	r3, [pc, #444]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a6e      	ldr	r2, [pc, #440]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 800327c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003280:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003282:	f7ff fb01 	bl	8002888 <HAL_GetTick>
 8003286:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003288:	e008      	b.n	800329c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800328a:	f7ff fafd 	bl	8002888 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d901      	bls.n	800329c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e21d      	b.n	80036d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800329c:	4b65      	ldr	r3, [pc, #404]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d0f0      	beq.n	800328a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032a8:	4b62      	ldr	r3, [pc, #392]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	061b      	lsls	r3, r3, #24
 80032b6:	495f      	ldr	r1, [pc, #380]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	604b      	str	r3, [r1, #4]
 80032bc:	e018      	b.n	80032f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032be:	4b5d      	ldr	r3, [pc, #372]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a5c      	ldr	r2, [pc, #368]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 80032c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ca:	f7ff fadd 	bl	8002888 <HAL_GetTick>
 80032ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032d0:	e008      	b.n	80032e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032d2:	f7ff fad9 	bl	8002888 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d901      	bls.n	80032e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e1f9      	b.n	80036d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032e4:	4b53      	ldr	r3, [pc, #332]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1f0      	bne.n	80032d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0308 	and.w	r3, r3, #8
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d03c      	beq.n	8003376 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	695b      	ldr	r3, [r3, #20]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d01c      	beq.n	800333e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003304:	4b4b      	ldr	r3, [pc, #300]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 8003306:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800330a:	4a4a      	ldr	r2, [pc, #296]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 800330c:	f043 0301 	orr.w	r3, r3, #1
 8003310:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003314:	f7ff fab8 	bl	8002888 <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800331c:	f7ff fab4 	bl	8002888 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e1d4      	b.n	80036d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800332e:	4b41      	ldr	r3, [pc, #260]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 8003330:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d0ef      	beq.n	800331c <HAL_RCC_OscConfig+0x3ec>
 800333c:	e01b      	b.n	8003376 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800333e:	4b3d      	ldr	r3, [pc, #244]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 8003340:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003344:	4a3b      	ldr	r2, [pc, #236]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 8003346:	f023 0301 	bic.w	r3, r3, #1
 800334a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800334e:	f7ff fa9b 	bl	8002888 <HAL_GetTick>
 8003352:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003354:	e008      	b.n	8003368 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003356:	f7ff fa97 	bl	8002888 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d901      	bls.n	8003368 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e1b7      	b.n	80036d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003368:	4b32      	ldr	r3, [pc, #200]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 800336a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1ef      	bne.n	8003356 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0304 	and.w	r3, r3, #4
 800337e:	2b00      	cmp	r3, #0
 8003380:	f000 80a6 	beq.w	80034d0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003384:	2300      	movs	r3, #0
 8003386:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003388:	4b2a      	ldr	r3, [pc, #168]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 800338a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800338c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d10d      	bne.n	80033b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003394:	4b27      	ldr	r3, [pc, #156]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 8003396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003398:	4a26      	ldr	r2, [pc, #152]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 800339a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800339e:	6593      	str	r3, [r2, #88]	; 0x58
 80033a0:	4b24      	ldr	r3, [pc, #144]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 80033a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033a8:	60bb      	str	r3, [r7, #8]
 80033aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033ac:	2301      	movs	r3, #1
 80033ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033b0:	4b21      	ldr	r3, [pc, #132]	; (8003438 <HAL_RCC_OscConfig+0x508>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d118      	bne.n	80033ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033bc:	4b1e      	ldr	r3, [pc, #120]	; (8003438 <HAL_RCC_OscConfig+0x508>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a1d      	ldr	r2, [pc, #116]	; (8003438 <HAL_RCC_OscConfig+0x508>)
 80033c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033c8:	f7ff fa5e 	bl	8002888 <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033d0:	f7ff fa5a 	bl	8002888 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e17a      	b.n	80036d8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033e2:	4b15      	ldr	r3, [pc, #84]	; (8003438 <HAL_RCC_OscConfig+0x508>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d0f0      	beq.n	80033d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d108      	bne.n	8003408 <HAL_RCC_OscConfig+0x4d8>
 80033f6:	4b0f      	ldr	r3, [pc, #60]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 80033f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033fc:	4a0d      	ldr	r2, [pc, #52]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 80033fe:	f043 0301 	orr.w	r3, r3, #1
 8003402:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003406:	e029      	b.n	800345c <HAL_RCC_OscConfig+0x52c>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	2b05      	cmp	r3, #5
 800340e:	d115      	bne.n	800343c <HAL_RCC_OscConfig+0x50c>
 8003410:	4b08      	ldr	r3, [pc, #32]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 8003412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003416:	4a07      	ldr	r2, [pc, #28]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 8003418:	f043 0304 	orr.w	r3, r3, #4
 800341c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003420:	4b04      	ldr	r3, [pc, #16]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 8003422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003426:	4a03      	ldr	r2, [pc, #12]	; (8003434 <HAL_RCC_OscConfig+0x504>)
 8003428:	f043 0301 	orr.w	r3, r3, #1
 800342c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003430:	e014      	b.n	800345c <HAL_RCC_OscConfig+0x52c>
 8003432:	bf00      	nop
 8003434:	40021000 	.word	0x40021000
 8003438:	40007000 	.word	0x40007000
 800343c:	4b9c      	ldr	r3, [pc, #624]	; (80036b0 <HAL_RCC_OscConfig+0x780>)
 800343e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003442:	4a9b      	ldr	r2, [pc, #620]	; (80036b0 <HAL_RCC_OscConfig+0x780>)
 8003444:	f023 0301 	bic.w	r3, r3, #1
 8003448:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800344c:	4b98      	ldr	r3, [pc, #608]	; (80036b0 <HAL_RCC_OscConfig+0x780>)
 800344e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003452:	4a97      	ldr	r2, [pc, #604]	; (80036b0 <HAL_RCC_OscConfig+0x780>)
 8003454:	f023 0304 	bic.w	r3, r3, #4
 8003458:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d016      	beq.n	8003492 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003464:	f7ff fa10 	bl	8002888 <HAL_GetTick>
 8003468:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800346a:	e00a      	b.n	8003482 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800346c:	f7ff fa0c 	bl	8002888 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	f241 3288 	movw	r2, #5000	; 0x1388
 800347a:	4293      	cmp	r3, r2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e12a      	b.n	80036d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003482:	4b8b      	ldr	r3, [pc, #556]	; (80036b0 <HAL_RCC_OscConfig+0x780>)
 8003484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d0ed      	beq.n	800346c <HAL_RCC_OscConfig+0x53c>
 8003490:	e015      	b.n	80034be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003492:	f7ff f9f9 	bl	8002888 <HAL_GetTick>
 8003496:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003498:	e00a      	b.n	80034b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800349a:	f7ff f9f5 	bl	8002888 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e113      	b.n	80036d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034b0:	4b7f      	ldr	r3, [pc, #508]	; (80036b0 <HAL_RCC_OscConfig+0x780>)
 80034b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1ed      	bne.n	800349a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034be:	7ffb      	ldrb	r3, [r7, #31]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d105      	bne.n	80034d0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034c4:	4b7a      	ldr	r3, [pc, #488]	; (80036b0 <HAL_RCC_OscConfig+0x780>)
 80034c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c8:	4a79      	ldr	r2, [pc, #484]	; (80036b0 <HAL_RCC_OscConfig+0x780>)
 80034ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034ce:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f000 80fe 	beq.w	80036d6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034de:	2b02      	cmp	r3, #2
 80034e0:	f040 80d0 	bne.w	8003684 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80034e4:	4b72      	ldr	r3, [pc, #456]	; (80036b0 <HAL_RCC_OscConfig+0x780>)
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	f003 0203 	and.w	r2, r3, #3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d130      	bne.n	800355a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003502:	3b01      	subs	r3, #1
 8003504:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003506:	429a      	cmp	r2, r3
 8003508:	d127      	bne.n	800355a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003514:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003516:	429a      	cmp	r2, r3
 8003518:	d11f      	bne.n	800355a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003524:	2a07      	cmp	r2, #7
 8003526:	bf14      	ite	ne
 8003528:	2201      	movne	r2, #1
 800352a:	2200      	moveq	r2, #0
 800352c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800352e:	4293      	cmp	r3, r2
 8003530:	d113      	bne.n	800355a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800353c:	085b      	lsrs	r3, r3, #1
 800353e:	3b01      	subs	r3, #1
 8003540:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003542:	429a      	cmp	r2, r3
 8003544:	d109      	bne.n	800355a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003550:	085b      	lsrs	r3, r3, #1
 8003552:	3b01      	subs	r3, #1
 8003554:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003556:	429a      	cmp	r2, r3
 8003558:	d06e      	beq.n	8003638 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	2b0c      	cmp	r3, #12
 800355e:	d069      	beq.n	8003634 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003560:	4b53      	ldr	r3, [pc, #332]	; (80036b0 <HAL_RCC_OscConfig+0x780>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d105      	bne.n	8003578 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800356c:	4b50      	ldr	r3, [pc, #320]	; (80036b0 <HAL_RCC_OscConfig+0x780>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d001      	beq.n	800357c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e0ad      	b.n	80036d8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800357c:	4b4c      	ldr	r3, [pc, #304]	; (80036b0 <HAL_RCC_OscConfig+0x780>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a4b      	ldr	r2, [pc, #300]	; (80036b0 <HAL_RCC_OscConfig+0x780>)
 8003582:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003586:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003588:	f7ff f97e 	bl	8002888 <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800358e:	e008      	b.n	80035a2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003590:	f7ff f97a 	bl	8002888 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e09a      	b.n	80036d8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035a2:	4b43      	ldr	r3, [pc, #268]	; (80036b0 <HAL_RCC_OscConfig+0x780>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1f0      	bne.n	8003590 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035ae:	4b40      	ldr	r3, [pc, #256]	; (80036b0 <HAL_RCC_OscConfig+0x780>)
 80035b0:	68da      	ldr	r2, [r3, #12]
 80035b2:	4b40      	ldr	r3, [pc, #256]	; (80036b4 <HAL_RCC_OscConfig+0x784>)
 80035b4:	4013      	ands	r3, r2
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80035be:	3a01      	subs	r2, #1
 80035c0:	0112      	lsls	r2, r2, #4
 80035c2:	4311      	orrs	r1, r2
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035c8:	0212      	lsls	r2, r2, #8
 80035ca:	4311      	orrs	r1, r2
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80035d0:	0852      	lsrs	r2, r2, #1
 80035d2:	3a01      	subs	r2, #1
 80035d4:	0552      	lsls	r2, r2, #21
 80035d6:	4311      	orrs	r1, r2
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80035dc:	0852      	lsrs	r2, r2, #1
 80035de:	3a01      	subs	r2, #1
 80035e0:	0652      	lsls	r2, r2, #25
 80035e2:	4311      	orrs	r1, r2
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035e8:	0912      	lsrs	r2, r2, #4
 80035ea:	0452      	lsls	r2, r2, #17
 80035ec:	430a      	orrs	r2, r1
 80035ee:	4930      	ldr	r1, [pc, #192]	; (80036b0 <HAL_RCC_OscConfig+0x780>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80035f4:	4b2e      	ldr	r3, [pc, #184]	; (80036b0 <HAL_RCC_OscConfig+0x780>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a2d      	ldr	r2, [pc, #180]	; (80036b0 <HAL_RCC_OscConfig+0x780>)
 80035fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035fe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003600:	4b2b      	ldr	r3, [pc, #172]	; (80036b0 <HAL_RCC_OscConfig+0x780>)
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	4a2a      	ldr	r2, [pc, #168]	; (80036b0 <HAL_RCC_OscConfig+0x780>)
 8003606:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800360a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800360c:	f7ff f93c 	bl	8002888 <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003614:	f7ff f938 	bl	8002888 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b02      	cmp	r3, #2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e058      	b.n	80036d8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003626:	4b22      	ldr	r3, [pc, #136]	; (80036b0 <HAL_RCC_OscConfig+0x780>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d0f0      	beq.n	8003614 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003632:	e050      	b.n	80036d6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e04f      	b.n	80036d8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003638:	4b1d      	ldr	r3, [pc, #116]	; (80036b0 <HAL_RCC_OscConfig+0x780>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d148      	bne.n	80036d6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003644:	4b1a      	ldr	r3, [pc, #104]	; (80036b0 <HAL_RCC_OscConfig+0x780>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a19      	ldr	r2, [pc, #100]	; (80036b0 <HAL_RCC_OscConfig+0x780>)
 800364a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800364e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003650:	4b17      	ldr	r3, [pc, #92]	; (80036b0 <HAL_RCC_OscConfig+0x780>)
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	4a16      	ldr	r2, [pc, #88]	; (80036b0 <HAL_RCC_OscConfig+0x780>)
 8003656:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800365a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800365c:	f7ff f914 	bl	8002888 <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003662:	e008      	b.n	8003676 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003664:	f7ff f910 	bl	8002888 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b02      	cmp	r3, #2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e030      	b.n	80036d8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003676:	4b0e      	ldr	r3, [pc, #56]	; (80036b0 <HAL_RCC_OscConfig+0x780>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d0f0      	beq.n	8003664 <HAL_RCC_OscConfig+0x734>
 8003682:	e028      	b.n	80036d6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	2b0c      	cmp	r3, #12
 8003688:	d023      	beq.n	80036d2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800368a:	4b09      	ldr	r3, [pc, #36]	; (80036b0 <HAL_RCC_OscConfig+0x780>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a08      	ldr	r2, [pc, #32]	; (80036b0 <HAL_RCC_OscConfig+0x780>)
 8003690:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003694:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003696:	f7ff f8f7 	bl	8002888 <HAL_GetTick>
 800369a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800369c:	e00c      	b.n	80036b8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800369e:	f7ff f8f3 	bl	8002888 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d905      	bls.n	80036b8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e013      	b.n	80036d8 <HAL_RCC_OscConfig+0x7a8>
 80036b0:	40021000 	.word	0x40021000
 80036b4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036b8:	4b09      	ldr	r3, [pc, #36]	; (80036e0 <HAL_RCC_OscConfig+0x7b0>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1ec      	bne.n	800369e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80036c4:	4b06      	ldr	r3, [pc, #24]	; (80036e0 <HAL_RCC_OscConfig+0x7b0>)
 80036c6:	68da      	ldr	r2, [r3, #12]
 80036c8:	4905      	ldr	r1, [pc, #20]	; (80036e0 <HAL_RCC_OscConfig+0x7b0>)
 80036ca:	4b06      	ldr	r3, [pc, #24]	; (80036e4 <HAL_RCC_OscConfig+0x7b4>)
 80036cc:	4013      	ands	r3, r2
 80036ce:	60cb      	str	r3, [r1, #12]
 80036d0:	e001      	b.n	80036d6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e000      	b.n	80036d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3720      	adds	r7, #32
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	40021000 	.word	0x40021000
 80036e4:	feeefffc 	.word	0xfeeefffc

080036e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d101      	bne.n	80036fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e0e7      	b.n	80038cc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036fc:	4b75      	ldr	r3, [pc, #468]	; (80038d4 <HAL_RCC_ClockConfig+0x1ec>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0307 	and.w	r3, r3, #7
 8003704:	683a      	ldr	r2, [r7, #0]
 8003706:	429a      	cmp	r2, r3
 8003708:	d910      	bls.n	800372c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800370a:	4b72      	ldr	r3, [pc, #456]	; (80038d4 <HAL_RCC_ClockConfig+0x1ec>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f023 0207 	bic.w	r2, r3, #7
 8003712:	4970      	ldr	r1, [pc, #448]	; (80038d4 <HAL_RCC_ClockConfig+0x1ec>)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	4313      	orrs	r3, r2
 8003718:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800371a:	4b6e      	ldr	r3, [pc, #440]	; (80038d4 <HAL_RCC_ClockConfig+0x1ec>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0307 	and.w	r3, r3, #7
 8003722:	683a      	ldr	r2, [r7, #0]
 8003724:	429a      	cmp	r2, r3
 8003726:	d001      	beq.n	800372c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e0cf      	b.n	80038cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d010      	beq.n	800375a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	4b66      	ldr	r3, [pc, #408]	; (80038d8 <HAL_RCC_ClockConfig+0x1f0>)
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003744:	429a      	cmp	r2, r3
 8003746:	d908      	bls.n	800375a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003748:	4b63      	ldr	r3, [pc, #396]	; (80038d8 <HAL_RCC_ClockConfig+0x1f0>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	4960      	ldr	r1, [pc, #384]	; (80038d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003756:	4313      	orrs	r3, r2
 8003758:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	2b00      	cmp	r3, #0
 8003764:	d04c      	beq.n	8003800 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2b03      	cmp	r3, #3
 800376c:	d107      	bne.n	800377e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800376e:	4b5a      	ldr	r3, [pc, #360]	; (80038d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d121      	bne.n	80037be <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e0a6      	b.n	80038cc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2b02      	cmp	r3, #2
 8003784:	d107      	bne.n	8003796 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003786:	4b54      	ldr	r3, [pc, #336]	; (80038d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d115      	bne.n	80037be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e09a      	b.n	80038cc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d107      	bne.n	80037ae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800379e:	4b4e      	ldr	r3, [pc, #312]	; (80038d8 <HAL_RCC_ClockConfig+0x1f0>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d109      	bne.n	80037be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e08e      	b.n	80038cc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037ae:	4b4a      	ldr	r3, [pc, #296]	; (80038d8 <HAL_RCC_ClockConfig+0x1f0>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e086      	b.n	80038cc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037be:	4b46      	ldr	r3, [pc, #280]	; (80038d8 <HAL_RCC_ClockConfig+0x1f0>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f023 0203 	bic.w	r2, r3, #3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	4943      	ldr	r1, [pc, #268]	; (80038d8 <HAL_RCC_ClockConfig+0x1f0>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037d0:	f7ff f85a 	bl	8002888 <HAL_GetTick>
 80037d4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037d6:	e00a      	b.n	80037ee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037d8:	f7ff f856 	bl	8002888 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e06e      	b.n	80038cc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ee:	4b3a      	ldr	r3, [pc, #232]	; (80038d8 <HAL_RCC_ClockConfig+0x1f0>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f003 020c 	and.w	r2, r3, #12
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d1eb      	bne.n	80037d8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0302 	and.w	r3, r3, #2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d010      	beq.n	800382e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	4b31      	ldr	r3, [pc, #196]	; (80038d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003818:	429a      	cmp	r2, r3
 800381a:	d208      	bcs.n	800382e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800381c:	4b2e      	ldr	r3, [pc, #184]	; (80038d8 <HAL_RCC_ClockConfig+0x1f0>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	492b      	ldr	r1, [pc, #172]	; (80038d8 <HAL_RCC_ClockConfig+0x1f0>)
 800382a:	4313      	orrs	r3, r2
 800382c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800382e:	4b29      	ldr	r3, [pc, #164]	; (80038d4 <HAL_RCC_ClockConfig+0x1ec>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0307 	and.w	r3, r3, #7
 8003836:	683a      	ldr	r2, [r7, #0]
 8003838:	429a      	cmp	r2, r3
 800383a:	d210      	bcs.n	800385e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800383c:	4b25      	ldr	r3, [pc, #148]	; (80038d4 <HAL_RCC_ClockConfig+0x1ec>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f023 0207 	bic.w	r2, r3, #7
 8003844:	4923      	ldr	r1, [pc, #140]	; (80038d4 <HAL_RCC_ClockConfig+0x1ec>)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	4313      	orrs	r3, r2
 800384a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800384c:	4b21      	ldr	r3, [pc, #132]	; (80038d4 <HAL_RCC_ClockConfig+0x1ec>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0307 	and.w	r3, r3, #7
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	429a      	cmp	r2, r3
 8003858:	d001      	beq.n	800385e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e036      	b.n	80038cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0304 	and.w	r3, r3, #4
 8003866:	2b00      	cmp	r3, #0
 8003868:	d008      	beq.n	800387c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800386a:	4b1b      	ldr	r3, [pc, #108]	; (80038d8 <HAL_RCC_ClockConfig+0x1f0>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	4918      	ldr	r1, [pc, #96]	; (80038d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003878:	4313      	orrs	r3, r2
 800387a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0308 	and.w	r3, r3, #8
 8003884:	2b00      	cmp	r3, #0
 8003886:	d009      	beq.n	800389c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003888:	4b13      	ldr	r3, [pc, #76]	; (80038d8 <HAL_RCC_ClockConfig+0x1f0>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	00db      	lsls	r3, r3, #3
 8003896:	4910      	ldr	r1, [pc, #64]	; (80038d8 <HAL_RCC_ClockConfig+0x1f0>)
 8003898:	4313      	orrs	r3, r2
 800389a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800389c:	f000 f824 	bl	80038e8 <HAL_RCC_GetSysClockFreq>
 80038a0:	4602      	mov	r2, r0
 80038a2:	4b0d      	ldr	r3, [pc, #52]	; (80038d8 <HAL_RCC_ClockConfig+0x1f0>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	091b      	lsrs	r3, r3, #4
 80038a8:	f003 030f 	and.w	r3, r3, #15
 80038ac:	490b      	ldr	r1, [pc, #44]	; (80038dc <HAL_RCC_ClockConfig+0x1f4>)
 80038ae:	5ccb      	ldrb	r3, [r1, r3]
 80038b0:	f003 031f 	and.w	r3, r3, #31
 80038b4:	fa22 f303 	lsr.w	r3, r2, r3
 80038b8:	4a09      	ldr	r2, [pc, #36]	; (80038e0 <HAL_RCC_ClockConfig+0x1f8>)
 80038ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80038bc:	4b09      	ldr	r3, [pc, #36]	; (80038e4 <HAL_RCC_ClockConfig+0x1fc>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7fe ff91 	bl	80027e8 <HAL_InitTick>
 80038c6:	4603      	mov	r3, r0
 80038c8:	72fb      	strb	r3, [r7, #11]

  return status;
 80038ca:	7afb      	ldrb	r3, [r7, #11]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	40022000 	.word	0x40022000
 80038d8:	40021000 	.word	0x40021000
 80038dc:	080068c8 	.word	0x080068c8
 80038e0:	20000000 	.word	0x20000000
 80038e4:	20000004 	.word	0x20000004

080038e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b089      	sub	sp, #36	; 0x24
 80038ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80038ee:	2300      	movs	r3, #0
 80038f0:	61fb      	str	r3, [r7, #28]
 80038f2:	2300      	movs	r3, #0
 80038f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038f6:	4b3e      	ldr	r3, [pc, #248]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 030c 	and.w	r3, r3, #12
 80038fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003900:	4b3b      	ldr	r3, [pc, #236]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	f003 0303 	and.w	r3, r3, #3
 8003908:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d005      	beq.n	800391c <HAL_RCC_GetSysClockFreq+0x34>
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	2b0c      	cmp	r3, #12
 8003914:	d121      	bne.n	800395a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d11e      	bne.n	800395a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800391c:	4b34      	ldr	r3, [pc, #208]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0308 	and.w	r3, r3, #8
 8003924:	2b00      	cmp	r3, #0
 8003926:	d107      	bne.n	8003938 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003928:	4b31      	ldr	r3, [pc, #196]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800392a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800392e:	0a1b      	lsrs	r3, r3, #8
 8003930:	f003 030f 	and.w	r3, r3, #15
 8003934:	61fb      	str	r3, [r7, #28]
 8003936:	e005      	b.n	8003944 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003938:	4b2d      	ldr	r3, [pc, #180]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	091b      	lsrs	r3, r3, #4
 800393e:	f003 030f 	and.w	r3, r3, #15
 8003942:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003944:	4a2b      	ldr	r2, [pc, #172]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800394c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d10d      	bne.n	8003970 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003958:	e00a      	b.n	8003970 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	2b04      	cmp	r3, #4
 800395e:	d102      	bne.n	8003966 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003960:	4b25      	ldr	r3, [pc, #148]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003962:	61bb      	str	r3, [r7, #24]
 8003964:	e004      	b.n	8003970 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	2b08      	cmp	r3, #8
 800396a:	d101      	bne.n	8003970 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800396c:	4b23      	ldr	r3, [pc, #140]	; (80039fc <HAL_RCC_GetSysClockFreq+0x114>)
 800396e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	2b0c      	cmp	r3, #12
 8003974:	d134      	bne.n	80039e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003976:	4b1e      	ldr	r3, [pc, #120]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	f003 0303 	and.w	r3, r3, #3
 800397e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	2b02      	cmp	r3, #2
 8003984:	d003      	beq.n	800398e <HAL_RCC_GetSysClockFreq+0xa6>
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	2b03      	cmp	r3, #3
 800398a:	d003      	beq.n	8003994 <HAL_RCC_GetSysClockFreq+0xac>
 800398c:	e005      	b.n	800399a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800398e:	4b1a      	ldr	r3, [pc, #104]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003990:	617b      	str	r3, [r7, #20]
      break;
 8003992:	e005      	b.n	80039a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003994:	4b19      	ldr	r3, [pc, #100]	; (80039fc <HAL_RCC_GetSysClockFreq+0x114>)
 8003996:	617b      	str	r3, [r7, #20]
      break;
 8003998:	e002      	b.n	80039a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	617b      	str	r3, [r7, #20]
      break;
 800399e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039a0:	4b13      	ldr	r3, [pc, #76]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	091b      	lsrs	r3, r3, #4
 80039a6:	f003 0307 	and.w	r3, r3, #7
 80039aa:	3301      	adds	r3, #1
 80039ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80039ae:	4b10      	ldr	r3, [pc, #64]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	0a1b      	lsrs	r3, r3, #8
 80039b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	fb03 f202 	mul.w	r2, r3, r2
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039c6:	4b0a      	ldr	r3, [pc, #40]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	0e5b      	lsrs	r3, r3, #25
 80039cc:	f003 0303 	and.w	r3, r3, #3
 80039d0:	3301      	adds	r3, #1
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	fbb2 f3f3 	udiv	r3, r2, r3
 80039de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80039e0:	69bb      	ldr	r3, [r7, #24]
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3724      	adds	r7, #36	; 0x24
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	40021000 	.word	0x40021000
 80039f4:	080068e0 	.word	0x080068e0
 80039f8:	00f42400 	.word	0x00f42400
 80039fc:	007a1200 	.word	0x007a1200

08003a00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a00:	b480      	push	{r7}
 8003a02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a04:	4b03      	ldr	r3, [pc, #12]	; (8003a14 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a06:	681b      	ldr	r3, [r3, #0]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	20000000 	.word	0x20000000

08003a18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a1c:	f7ff fff0 	bl	8003a00 <HAL_RCC_GetHCLKFreq>
 8003a20:	4602      	mov	r2, r0
 8003a22:	4b06      	ldr	r3, [pc, #24]	; (8003a3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	0a1b      	lsrs	r3, r3, #8
 8003a28:	f003 0307 	and.w	r3, r3, #7
 8003a2c:	4904      	ldr	r1, [pc, #16]	; (8003a40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a2e:	5ccb      	ldrb	r3, [r1, r3]
 8003a30:	f003 031f 	and.w	r3, r3, #31
 8003a34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	080068d8 	.word	0x080068d8

08003a44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a48:	f7ff ffda 	bl	8003a00 <HAL_RCC_GetHCLKFreq>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	4b06      	ldr	r3, [pc, #24]	; (8003a68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	0adb      	lsrs	r3, r3, #11
 8003a54:	f003 0307 	and.w	r3, r3, #7
 8003a58:	4904      	ldr	r1, [pc, #16]	; (8003a6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a5a:	5ccb      	ldrb	r3, [r1, r3]
 8003a5c:	f003 031f 	and.w	r3, r3, #31
 8003a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	080068d8 	.word	0x080068d8

08003a70 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a78:	2300      	movs	r3, #0
 8003a7a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003a7c:	4b2a      	ldr	r3, [pc, #168]	; (8003b28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d003      	beq.n	8003a90 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003a88:	f7ff f9ee 	bl	8002e68 <HAL_PWREx_GetVoltageRange>
 8003a8c:	6178      	str	r0, [r7, #20]
 8003a8e:	e014      	b.n	8003aba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a90:	4b25      	ldr	r3, [pc, #148]	; (8003b28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a94:	4a24      	ldr	r2, [pc, #144]	; (8003b28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a9a:	6593      	str	r3, [r2, #88]	; 0x58
 8003a9c:	4b22      	ldr	r3, [pc, #136]	; (8003b28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa4:	60fb      	str	r3, [r7, #12]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003aa8:	f7ff f9de 	bl	8002e68 <HAL_PWREx_GetVoltageRange>
 8003aac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003aae:	4b1e      	ldr	r3, [pc, #120]	; (8003b28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab2:	4a1d      	ldr	r2, [pc, #116]	; (8003b28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ab4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ab8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ac0:	d10b      	bne.n	8003ada <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b80      	cmp	r3, #128	; 0x80
 8003ac6:	d919      	bls.n	8003afc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2ba0      	cmp	r3, #160	; 0xa0
 8003acc:	d902      	bls.n	8003ad4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ace:	2302      	movs	r3, #2
 8003ad0:	613b      	str	r3, [r7, #16]
 8003ad2:	e013      	b.n	8003afc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	613b      	str	r3, [r7, #16]
 8003ad8:	e010      	b.n	8003afc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2b80      	cmp	r3, #128	; 0x80
 8003ade:	d902      	bls.n	8003ae6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	613b      	str	r3, [r7, #16]
 8003ae4:	e00a      	b.n	8003afc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2b80      	cmp	r3, #128	; 0x80
 8003aea:	d102      	bne.n	8003af2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003aec:	2302      	movs	r3, #2
 8003aee:	613b      	str	r3, [r7, #16]
 8003af0:	e004      	b.n	8003afc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2b70      	cmp	r3, #112	; 0x70
 8003af6:	d101      	bne.n	8003afc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003af8:	2301      	movs	r3, #1
 8003afa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003afc:	4b0b      	ldr	r3, [pc, #44]	; (8003b2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f023 0207 	bic.w	r2, r3, #7
 8003b04:	4909      	ldr	r1, [pc, #36]	; (8003b2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b0c:	4b07      	ldr	r3, [pc, #28]	; (8003b2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0307 	and.w	r3, r3, #7
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d001      	beq.n	8003b1e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e000      	b.n	8003b20 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3718      	adds	r7, #24
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	40022000 	.word	0x40022000

08003b30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b086      	sub	sp, #24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b38:	2300      	movs	r3, #0
 8003b3a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d041      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b50:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b54:	d02a      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003b56:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b5a:	d824      	bhi.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b5c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b60:	d008      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003b62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b66:	d81e      	bhi.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00a      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003b6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b70:	d010      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003b72:	e018      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b74:	4b86      	ldr	r3, [pc, #536]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	4a85      	ldr	r2, [pc, #532]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b7e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b80:	e015      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	3304      	adds	r3, #4
 8003b86:	2100      	movs	r1, #0
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f000 fabb 	bl	8004104 <RCCEx_PLLSAI1_Config>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b92:	e00c      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	3320      	adds	r3, #32
 8003b98:	2100      	movs	r1, #0
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f000 fba6 	bl	80042ec <RCCEx_PLLSAI2_Config>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ba4:	e003      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	74fb      	strb	r3, [r7, #19]
      break;
 8003baa:	e000      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003bac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bae:	7cfb      	ldrb	r3, [r7, #19]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d10b      	bne.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bb4:	4b76      	ldr	r3, [pc, #472]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bc2:	4973      	ldr	r1, [pc, #460]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003bca:	e001      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bcc:	7cfb      	ldrb	r3, [r7, #19]
 8003bce:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d041      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003be0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003be4:	d02a      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003be6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003bea:	d824      	bhi.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003bec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bf0:	d008      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003bf2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bf6:	d81e      	bhi.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00a      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003bfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c00:	d010      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c02:	e018      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c04:	4b62      	ldr	r3, [pc, #392]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	4a61      	ldr	r2, [pc, #388]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c0e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c10:	e015      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	3304      	adds	r3, #4
 8003c16:	2100      	movs	r1, #0
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f000 fa73 	bl	8004104 <RCCEx_PLLSAI1_Config>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c22:	e00c      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	3320      	adds	r3, #32
 8003c28:	2100      	movs	r1, #0
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f000 fb5e 	bl	80042ec <RCCEx_PLLSAI2_Config>
 8003c30:	4603      	mov	r3, r0
 8003c32:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c34:	e003      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	74fb      	strb	r3, [r7, #19]
      break;
 8003c3a:	e000      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003c3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c3e:	7cfb      	ldrb	r3, [r7, #19]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d10b      	bne.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c44:	4b52      	ldr	r3, [pc, #328]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c4a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c52:	494f      	ldr	r1, [pc, #316]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003c5a:	e001      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c5c:	7cfb      	ldrb	r3, [r7, #19]
 8003c5e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f000 80a0 	beq.w	8003dae <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c72:	4b47      	ldr	r3, [pc, #284]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e000      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003c82:	2300      	movs	r3, #0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00d      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c88:	4b41      	ldr	r3, [pc, #260]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c8c:	4a40      	ldr	r2, [pc, #256]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c92:	6593      	str	r3, [r2, #88]	; 0x58
 8003c94:	4b3e      	ldr	r3, [pc, #248]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c9c:	60bb      	str	r3, [r7, #8]
 8003c9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ca4:	4b3b      	ldr	r3, [pc, #236]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a3a      	ldr	r2, [pc, #232]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003caa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cb0:	f7fe fdea 	bl	8002888 <HAL_GetTick>
 8003cb4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cb6:	e009      	b.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cb8:	f7fe fde6 	bl	8002888 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d902      	bls.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	74fb      	strb	r3, [r7, #19]
        break;
 8003cca:	e005      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ccc:	4b31      	ldr	r3, [pc, #196]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d0ef      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003cd8:	7cfb      	ldrb	r3, [r7, #19]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d15c      	bne.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003cde:	4b2c      	ldr	r3, [pc, #176]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ce8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d01f      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d019      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003cfc:	4b24      	ldr	r3, [pc, #144]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d06:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d08:	4b21      	ldr	r3, [pc, #132]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d0e:	4a20      	ldr	r2, [pc, #128]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d18:	4b1d      	ldr	r3, [pc, #116]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d1e:	4a1c      	ldr	r2, [pc, #112]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d28:	4a19      	ldr	r2, [pc, #100]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d016      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d3a:	f7fe fda5 	bl	8002888 <HAL_GetTick>
 8003d3e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d40:	e00b      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d42:	f7fe fda1 	bl	8002888 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d902      	bls.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	74fb      	strb	r3, [r7, #19]
            break;
 8003d58:	e006      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d5a:	4b0d      	ldr	r3, [pc, #52]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d0ec      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003d68:	7cfb      	ldrb	r3, [r7, #19]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d10c      	bne.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d6e:	4b08      	ldr	r3, [pc, #32]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d7e:	4904      	ldr	r1, [pc, #16]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003d86:	e009      	b.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d88:	7cfb      	ldrb	r3, [r7, #19]
 8003d8a:	74bb      	strb	r3, [r7, #18]
 8003d8c:	e006      	b.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003d8e:	bf00      	nop
 8003d90:	40021000 	.word	0x40021000
 8003d94:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d98:	7cfb      	ldrb	r3, [r7, #19]
 8003d9a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d9c:	7c7b      	ldrb	r3, [r7, #17]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d105      	bne.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003da2:	4b9e      	ldr	r3, [pc, #632]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da6:	4a9d      	ldr	r2, [pc, #628]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003da8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00a      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dba:	4b98      	ldr	r3, [pc, #608]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dc0:	f023 0203 	bic.w	r2, r3, #3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc8:	4994      	ldr	r1, [pc, #592]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00a      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ddc:	4b8f      	ldr	r3, [pc, #572]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de2:	f023 020c 	bic.w	r2, r3, #12
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dea:	498c      	ldr	r1, [pc, #560]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0304 	and.w	r3, r3, #4
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00a      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003dfe:	4b87      	ldr	r3, [pc, #540]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e04:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0c:	4983      	ldr	r1, [pc, #524]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0308 	and.w	r3, r3, #8
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00a      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e20:	4b7e      	ldr	r3, [pc, #504]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e26:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2e:	497b      	ldr	r1, [pc, #492]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0310 	and.w	r3, r3, #16
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00a      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e42:	4b76      	ldr	r3, [pc, #472]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e50:	4972      	ldr	r1, [pc, #456]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0320 	and.w	r3, r3, #32
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00a      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e64:	4b6d      	ldr	r3, [pc, #436]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e6a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e72:	496a      	ldr	r1, [pc, #424]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00a      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e86:	4b65      	ldr	r3, [pc, #404]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e94:	4961      	ldr	r1, [pc, #388]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00a      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ea8:	4b5c      	ldr	r3, [pc, #368]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eb6:	4959      	ldr	r1, [pc, #356]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00a      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003eca:	4b54      	ldr	r3, [pc, #336]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ed8:	4950      	ldr	r1, [pc, #320]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00a      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003eec:	4b4b      	ldr	r3, [pc, #300]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003efa:	4948      	ldr	r1, [pc, #288]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00a      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f0e:	4b43      	ldr	r3, [pc, #268]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f1c:	493f      	ldr	r1, [pc, #252]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d028      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f30:	4b3a      	ldr	r3, [pc, #232]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f3e:	4937      	ldr	r1, [pc, #220]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f4e:	d106      	bne.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f50:	4b32      	ldr	r3, [pc, #200]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	4a31      	ldr	r2, [pc, #196]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f5a:	60d3      	str	r3, [r2, #12]
 8003f5c:	e011      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f66:	d10c      	bne.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	3304      	adds	r3, #4
 8003f6c:	2101      	movs	r1, #1
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f000 f8c8 	bl	8004104 <RCCEx_PLLSAI1_Config>
 8003f74:	4603      	mov	r3, r0
 8003f76:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003f78:	7cfb      	ldrb	r3, [r7, #19]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003f7e:	7cfb      	ldrb	r3, [r7, #19]
 8003f80:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d028      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f8e:	4b23      	ldr	r3, [pc, #140]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f94:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9c:	491f      	ldr	r1, [pc, #124]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fac:	d106      	bne.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fae:	4b1b      	ldr	r3, [pc, #108]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	4a1a      	ldr	r2, [pc, #104]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fb8:	60d3      	str	r3, [r2, #12]
 8003fba:	e011      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fc4:	d10c      	bne.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	3304      	adds	r3, #4
 8003fca:	2101      	movs	r1, #1
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f000 f899 	bl	8004104 <RCCEx_PLLSAI1_Config>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fd6:	7cfb      	ldrb	r3, [r7, #19]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d001      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003fdc:	7cfb      	ldrb	r3, [r7, #19]
 8003fde:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d02b      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003fec:	4b0b      	ldr	r3, [pc, #44]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ffa:	4908      	ldr	r1, [pc, #32]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004006:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800400a:	d109      	bne.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800400c:	4b03      	ldr	r3, [pc, #12]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	4a02      	ldr	r2, [pc, #8]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004012:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004016:	60d3      	str	r3, [r2, #12]
 8004018:	e014      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800401a:	bf00      	nop
 800401c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004024:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004028:	d10c      	bne.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	3304      	adds	r3, #4
 800402e:	2101      	movs	r1, #1
 8004030:	4618      	mov	r0, r3
 8004032:	f000 f867 	bl	8004104 <RCCEx_PLLSAI1_Config>
 8004036:	4603      	mov	r3, r0
 8004038:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800403a:	7cfb      	ldrb	r3, [r7, #19]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d001      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004040:	7cfb      	ldrb	r3, [r7, #19]
 8004042:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d02f      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004050:	4b2b      	ldr	r3, [pc, #172]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004056:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800405e:	4928      	ldr	r1, [pc, #160]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004060:	4313      	orrs	r3, r2
 8004062:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800406a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800406e:	d10d      	bne.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	3304      	adds	r3, #4
 8004074:	2102      	movs	r1, #2
 8004076:	4618      	mov	r0, r3
 8004078:	f000 f844 	bl	8004104 <RCCEx_PLLSAI1_Config>
 800407c:	4603      	mov	r3, r0
 800407e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004080:	7cfb      	ldrb	r3, [r7, #19]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d014      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004086:	7cfb      	ldrb	r3, [r7, #19]
 8004088:	74bb      	strb	r3, [r7, #18]
 800408a:	e011      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004090:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004094:	d10c      	bne.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	3320      	adds	r3, #32
 800409a:	2102      	movs	r1, #2
 800409c:	4618      	mov	r0, r3
 800409e:	f000 f925 	bl	80042ec <RCCEx_PLLSAI2_Config>
 80040a2:	4603      	mov	r3, r0
 80040a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040a6:	7cfb      	ldrb	r3, [r7, #19]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d001      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80040ac:	7cfb      	ldrb	r3, [r7, #19]
 80040ae:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00a      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80040bc:	4b10      	ldr	r3, [pc, #64]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040ca:	490d      	ldr	r1, [pc, #52]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00b      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040de:	4b08      	ldr	r3, [pc, #32]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040ee:	4904      	ldr	r1, [pc, #16]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80040f6:	7cbb      	ldrb	r3, [r7, #18]
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3718      	adds	r7, #24
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	40021000 	.word	0x40021000

08004104 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800410e:	2300      	movs	r3, #0
 8004110:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004112:	4b75      	ldr	r3, [pc, #468]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	f003 0303 	and.w	r3, r3, #3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d018      	beq.n	8004150 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800411e:	4b72      	ldr	r3, [pc, #456]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	f003 0203 	and.w	r2, r3, #3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	429a      	cmp	r2, r3
 800412c:	d10d      	bne.n	800414a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
       ||
 8004132:	2b00      	cmp	r3, #0
 8004134:	d009      	beq.n	800414a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004136:	4b6c      	ldr	r3, [pc, #432]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	091b      	lsrs	r3, r3, #4
 800413c:	f003 0307 	and.w	r3, r3, #7
 8004140:	1c5a      	adds	r2, r3, #1
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
       ||
 8004146:	429a      	cmp	r2, r3
 8004148:	d047      	beq.n	80041da <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	73fb      	strb	r3, [r7, #15]
 800414e:	e044      	b.n	80041da <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2b03      	cmp	r3, #3
 8004156:	d018      	beq.n	800418a <RCCEx_PLLSAI1_Config+0x86>
 8004158:	2b03      	cmp	r3, #3
 800415a:	d825      	bhi.n	80041a8 <RCCEx_PLLSAI1_Config+0xa4>
 800415c:	2b01      	cmp	r3, #1
 800415e:	d002      	beq.n	8004166 <RCCEx_PLLSAI1_Config+0x62>
 8004160:	2b02      	cmp	r3, #2
 8004162:	d009      	beq.n	8004178 <RCCEx_PLLSAI1_Config+0x74>
 8004164:	e020      	b.n	80041a8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004166:	4b60      	ldr	r3, [pc, #384]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d11d      	bne.n	80041ae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004176:	e01a      	b.n	80041ae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004178:	4b5b      	ldr	r3, [pc, #364]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004180:	2b00      	cmp	r3, #0
 8004182:	d116      	bne.n	80041b2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004188:	e013      	b.n	80041b2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800418a:	4b57      	ldr	r3, [pc, #348]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d10f      	bne.n	80041b6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004196:	4b54      	ldr	r3, [pc, #336]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d109      	bne.n	80041b6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041a6:	e006      	b.n	80041b6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	73fb      	strb	r3, [r7, #15]
      break;
 80041ac:	e004      	b.n	80041b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041ae:	bf00      	nop
 80041b0:	e002      	b.n	80041b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041b2:	bf00      	nop
 80041b4:	e000      	b.n	80041b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80041b8:	7bfb      	ldrb	r3, [r7, #15]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10d      	bne.n	80041da <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80041be:	4b4a      	ldr	r3, [pc, #296]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6819      	ldr	r1, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	3b01      	subs	r3, #1
 80041d0:	011b      	lsls	r3, r3, #4
 80041d2:	430b      	orrs	r3, r1
 80041d4:	4944      	ldr	r1, [pc, #272]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80041da:	7bfb      	ldrb	r3, [r7, #15]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d17d      	bne.n	80042dc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80041e0:	4b41      	ldr	r3, [pc, #260]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a40      	ldr	r2, [pc, #256]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041ec:	f7fe fb4c 	bl	8002888 <HAL_GetTick>
 80041f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041f2:	e009      	b.n	8004208 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041f4:	f7fe fb48 	bl	8002888 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d902      	bls.n	8004208 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	73fb      	strb	r3, [r7, #15]
        break;
 8004206:	e005      	b.n	8004214 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004208:	4b37      	ldr	r3, [pc, #220]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1ef      	bne.n	80041f4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004214:	7bfb      	ldrb	r3, [r7, #15]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d160      	bne.n	80042dc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d111      	bne.n	8004244 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004220:	4b31      	ldr	r3, [pc, #196]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004228:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	6892      	ldr	r2, [r2, #8]
 8004230:	0211      	lsls	r1, r2, #8
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	68d2      	ldr	r2, [r2, #12]
 8004236:	0912      	lsrs	r2, r2, #4
 8004238:	0452      	lsls	r2, r2, #17
 800423a:	430a      	orrs	r2, r1
 800423c:	492a      	ldr	r1, [pc, #168]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800423e:	4313      	orrs	r3, r2
 8004240:	610b      	str	r3, [r1, #16]
 8004242:	e027      	b.n	8004294 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	2b01      	cmp	r3, #1
 8004248:	d112      	bne.n	8004270 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800424a:	4b27      	ldr	r3, [pc, #156]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004252:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	6892      	ldr	r2, [r2, #8]
 800425a:	0211      	lsls	r1, r2, #8
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	6912      	ldr	r2, [r2, #16]
 8004260:	0852      	lsrs	r2, r2, #1
 8004262:	3a01      	subs	r2, #1
 8004264:	0552      	lsls	r2, r2, #21
 8004266:	430a      	orrs	r2, r1
 8004268:	491f      	ldr	r1, [pc, #124]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800426a:	4313      	orrs	r3, r2
 800426c:	610b      	str	r3, [r1, #16]
 800426e:	e011      	b.n	8004294 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004270:	4b1d      	ldr	r3, [pc, #116]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004278:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	6892      	ldr	r2, [r2, #8]
 8004280:	0211      	lsls	r1, r2, #8
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	6952      	ldr	r2, [r2, #20]
 8004286:	0852      	lsrs	r2, r2, #1
 8004288:	3a01      	subs	r2, #1
 800428a:	0652      	lsls	r2, r2, #25
 800428c:	430a      	orrs	r2, r1
 800428e:	4916      	ldr	r1, [pc, #88]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004290:	4313      	orrs	r3, r2
 8004292:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004294:	4b14      	ldr	r3, [pc, #80]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a13      	ldr	r2, [pc, #76]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800429a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800429e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a0:	f7fe faf2 	bl	8002888 <HAL_GetTick>
 80042a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042a6:	e009      	b.n	80042bc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042a8:	f7fe faee 	bl	8002888 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d902      	bls.n	80042bc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	73fb      	strb	r3, [r7, #15]
          break;
 80042ba:	e005      	b.n	80042c8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042bc:	4b0a      	ldr	r3, [pc, #40]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d0ef      	beq.n	80042a8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80042c8:	7bfb      	ldrb	r3, [r7, #15]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d106      	bne.n	80042dc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80042ce:	4b06      	ldr	r3, [pc, #24]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042d0:	691a      	ldr	r2, [r3, #16]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	4904      	ldr	r1, [pc, #16]	; (80042e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80042dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	40021000 	.word	0x40021000

080042ec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042f6:	2300      	movs	r3, #0
 80042f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80042fa:	4b6a      	ldr	r3, [pc, #424]	; (80044a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	f003 0303 	and.w	r3, r3, #3
 8004302:	2b00      	cmp	r3, #0
 8004304:	d018      	beq.n	8004338 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004306:	4b67      	ldr	r3, [pc, #412]	; (80044a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	f003 0203 	and.w	r2, r3, #3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	429a      	cmp	r2, r3
 8004314:	d10d      	bne.n	8004332 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
       ||
 800431a:	2b00      	cmp	r3, #0
 800431c:	d009      	beq.n	8004332 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800431e:	4b61      	ldr	r3, [pc, #388]	; (80044a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	091b      	lsrs	r3, r3, #4
 8004324:	f003 0307 	and.w	r3, r3, #7
 8004328:	1c5a      	adds	r2, r3, #1
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
       ||
 800432e:	429a      	cmp	r2, r3
 8004330:	d047      	beq.n	80043c2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	73fb      	strb	r3, [r7, #15]
 8004336:	e044      	b.n	80043c2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2b03      	cmp	r3, #3
 800433e:	d018      	beq.n	8004372 <RCCEx_PLLSAI2_Config+0x86>
 8004340:	2b03      	cmp	r3, #3
 8004342:	d825      	bhi.n	8004390 <RCCEx_PLLSAI2_Config+0xa4>
 8004344:	2b01      	cmp	r3, #1
 8004346:	d002      	beq.n	800434e <RCCEx_PLLSAI2_Config+0x62>
 8004348:	2b02      	cmp	r3, #2
 800434a:	d009      	beq.n	8004360 <RCCEx_PLLSAI2_Config+0x74>
 800434c:	e020      	b.n	8004390 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800434e:	4b55      	ldr	r3, [pc, #340]	; (80044a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0302 	and.w	r3, r3, #2
 8004356:	2b00      	cmp	r3, #0
 8004358:	d11d      	bne.n	8004396 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800435e:	e01a      	b.n	8004396 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004360:	4b50      	ldr	r3, [pc, #320]	; (80044a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004368:	2b00      	cmp	r3, #0
 800436a:	d116      	bne.n	800439a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004370:	e013      	b.n	800439a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004372:	4b4c      	ldr	r3, [pc, #304]	; (80044a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10f      	bne.n	800439e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800437e:	4b49      	ldr	r3, [pc, #292]	; (80044a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d109      	bne.n	800439e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800438e:	e006      	b.n	800439e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	73fb      	strb	r3, [r7, #15]
      break;
 8004394:	e004      	b.n	80043a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004396:	bf00      	nop
 8004398:	e002      	b.n	80043a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800439a:	bf00      	nop
 800439c:	e000      	b.n	80043a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800439e:	bf00      	nop
    }

    if(status == HAL_OK)
 80043a0:	7bfb      	ldrb	r3, [r7, #15]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d10d      	bne.n	80043c2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80043a6:	4b3f      	ldr	r3, [pc, #252]	; (80044a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6819      	ldr	r1, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	3b01      	subs	r3, #1
 80043b8:	011b      	lsls	r3, r3, #4
 80043ba:	430b      	orrs	r3, r1
 80043bc:	4939      	ldr	r1, [pc, #228]	; (80044a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80043c2:	7bfb      	ldrb	r3, [r7, #15]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d167      	bne.n	8004498 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80043c8:	4b36      	ldr	r3, [pc, #216]	; (80044a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a35      	ldr	r2, [pc, #212]	; (80044a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043d4:	f7fe fa58 	bl	8002888 <HAL_GetTick>
 80043d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80043da:	e009      	b.n	80043f0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80043dc:	f7fe fa54 	bl	8002888 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d902      	bls.n	80043f0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	73fb      	strb	r3, [r7, #15]
        break;
 80043ee:	e005      	b.n	80043fc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80043f0:	4b2c      	ldr	r3, [pc, #176]	; (80044a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1ef      	bne.n	80043dc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80043fc:	7bfb      	ldrb	r3, [r7, #15]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d14a      	bne.n	8004498 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d111      	bne.n	800442c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004408:	4b26      	ldr	r3, [pc, #152]	; (80044a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800440a:	695b      	ldr	r3, [r3, #20]
 800440c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004410:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	6892      	ldr	r2, [r2, #8]
 8004418:	0211      	lsls	r1, r2, #8
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	68d2      	ldr	r2, [r2, #12]
 800441e:	0912      	lsrs	r2, r2, #4
 8004420:	0452      	lsls	r2, r2, #17
 8004422:	430a      	orrs	r2, r1
 8004424:	491f      	ldr	r1, [pc, #124]	; (80044a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004426:	4313      	orrs	r3, r2
 8004428:	614b      	str	r3, [r1, #20]
 800442a:	e011      	b.n	8004450 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800442c:	4b1d      	ldr	r3, [pc, #116]	; (80044a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800442e:	695b      	ldr	r3, [r3, #20]
 8004430:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004434:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	6892      	ldr	r2, [r2, #8]
 800443c:	0211      	lsls	r1, r2, #8
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	6912      	ldr	r2, [r2, #16]
 8004442:	0852      	lsrs	r2, r2, #1
 8004444:	3a01      	subs	r2, #1
 8004446:	0652      	lsls	r2, r2, #25
 8004448:	430a      	orrs	r2, r1
 800444a:	4916      	ldr	r1, [pc, #88]	; (80044a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800444c:	4313      	orrs	r3, r2
 800444e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004450:	4b14      	ldr	r3, [pc, #80]	; (80044a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a13      	ldr	r2, [pc, #76]	; (80044a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004456:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800445a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800445c:	f7fe fa14 	bl	8002888 <HAL_GetTick>
 8004460:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004462:	e009      	b.n	8004478 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004464:	f7fe fa10 	bl	8002888 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b02      	cmp	r3, #2
 8004470:	d902      	bls.n	8004478 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	73fb      	strb	r3, [r7, #15]
          break;
 8004476:	e005      	b.n	8004484 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004478:	4b0a      	ldr	r3, [pc, #40]	; (80044a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d0ef      	beq.n	8004464 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004484:	7bfb      	ldrb	r3, [r7, #15]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d106      	bne.n	8004498 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800448a:	4b06      	ldr	r3, [pc, #24]	; (80044a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800448c:	695a      	ldr	r2, [r3, #20]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	4904      	ldr	r1, [pc, #16]	; (80044a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004494:	4313      	orrs	r3, r2
 8004496:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004498:	7bfb      	ldrb	r3, [r7, #15]
}
 800449a:	4618      	mov	r0, r3
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	40021000 	.word	0x40021000

080044a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e095      	b.n	80045e6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d108      	bne.n	80044d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044ca:	d009      	beq.n	80044e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	61da      	str	r2, [r3, #28]
 80044d2:	e005      	b.n	80044e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d106      	bne.n	8004500 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f7fd fffa 	bl	80024f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2202      	movs	r2, #2
 8004504:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004516:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004520:	d902      	bls.n	8004528 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004522:	2300      	movs	r3, #0
 8004524:	60fb      	str	r3, [r7, #12]
 8004526:	e002      	b.n	800452e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004528:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800452c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004536:	d007      	beq.n	8004548 <HAL_SPI_Init+0xa0>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004540:	d002      	beq.n	8004548 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004558:	431a      	orrs	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	431a      	orrs	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	695b      	ldr	r3, [r3, #20]
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	431a      	orrs	r2, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004576:	431a      	orrs	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	69db      	ldr	r3, [r3, #28]
 800457c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004580:	431a      	orrs	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800458a:	ea42 0103 	orr.w	r1, r2, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004592:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	0c1b      	lsrs	r3, r3, #16
 80045a4:	f003 0204 	and.w	r2, r3, #4
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ac:	f003 0310 	and.w	r3, r3, #16
 80045b0:	431a      	orrs	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045b6:	f003 0308 	and.w	r3, r3, #8
 80045ba:	431a      	orrs	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80045c4:	ea42 0103 	orr.w	r1, r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	430a      	orrs	r2, r1
 80045d4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b08a      	sub	sp, #40	; 0x28
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	60f8      	str	r0, [r7, #12]
 80045f6:	60b9      	str	r1, [r7, #8]
 80045f8:	607a      	str	r2, [r7, #4]
 80045fa:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80045fc:	2301      	movs	r3, #1
 80045fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004600:	2300      	movs	r3, #0
 8004602:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800460c:	2b01      	cmp	r3, #1
 800460e:	d101      	bne.n	8004614 <HAL_SPI_TransmitReceive+0x26>
 8004610:	2302      	movs	r3, #2
 8004612:	e20a      	b.n	8004a2a <HAL_SPI_TransmitReceive+0x43c>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800461c:	f7fe f934 	bl	8002888 <HAL_GetTick>
 8004620:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004628:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004630:	887b      	ldrh	r3, [r7, #2]
 8004632:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004634:	887b      	ldrh	r3, [r7, #2]
 8004636:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004638:	7efb      	ldrb	r3, [r7, #27]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d00e      	beq.n	800465c <HAL_SPI_TransmitReceive+0x6e>
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004644:	d106      	bne.n	8004654 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d102      	bne.n	8004654 <HAL_SPI_TransmitReceive+0x66>
 800464e:	7efb      	ldrb	r3, [r7, #27]
 8004650:	2b04      	cmp	r3, #4
 8004652:	d003      	beq.n	800465c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004654:	2302      	movs	r3, #2
 8004656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800465a:	e1e0      	b.n	8004a1e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d005      	beq.n	800466e <HAL_SPI_TransmitReceive+0x80>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d002      	beq.n	800466e <HAL_SPI_TransmitReceive+0x80>
 8004668:	887b      	ldrh	r3, [r7, #2]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d103      	bne.n	8004676 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004674:	e1d3      	b.n	8004a1e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800467c:	b2db      	uxtb	r3, r3
 800467e:	2b04      	cmp	r3, #4
 8004680:	d003      	beq.n	800468a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2205      	movs	r2, #5
 8004686:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	887a      	ldrh	r2, [r7, #2]
 800469a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	887a      	ldrh	r2, [r7, #2]
 80046a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	68ba      	ldr	r2, [r7, #8]
 80046aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	887a      	ldrh	r2, [r7, #2]
 80046b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	887a      	ldrh	r2, [r7, #2]
 80046b6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80046cc:	d802      	bhi.n	80046d4 <HAL_SPI_TransmitReceive+0xe6>
 80046ce:	8a3b      	ldrh	r3, [r7, #16]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d908      	bls.n	80046e6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	685a      	ldr	r2, [r3, #4]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046e2:	605a      	str	r2, [r3, #4]
 80046e4:	e007      	b.n	80046f6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	685a      	ldr	r2, [r3, #4]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80046f4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004700:	2b40      	cmp	r3, #64	; 0x40
 8004702:	d007      	beq.n	8004714 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004712:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800471c:	f240 8081 	bls.w	8004822 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d002      	beq.n	800472e <HAL_SPI_TransmitReceive+0x140>
 8004728:	8a7b      	ldrh	r3, [r7, #18]
 800472a:	2b01      	cmp	r3, #1
 800472c:	d16d      	bne.n	800480a <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004732:	881a      	ldrh	r2, [r3, #0]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473e:	1c9a      	adds	r2, r3, #2
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004748:	b29b      	uxth	r3, r3
 800474a:	3b01      	subs	r3, #1
 800474c:	b29a      	uxth	r2, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004752:	e05a      	b.n	800480a <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b02      	cmp	r3, #2
 8004760:	d11b      	bne.n	800479a <HAL_SPI_TransmitReceive+0x1ac>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004766:	b29b      	uxth	r3, r3
 8004768:	2b00      	cmp	r3, #0
 800476a:	d016      	beq.n	800479a <HAL_SPI_TransmitReceive+0x1ac>
 800476c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476e:	2b01      	cmp	r3, #1
 8004770:	d113      	bne.n	800479a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004776:	881a      	ldrh	r2, [r3, #0]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004782:	1c9a      	adds	r2, r3, #2
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800478c:	b29b      	uxth	r3, r3
 800478e:	3b01      	subs	r3, #1
 8004790:	b29a      	uxth	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004796:	2300      	movs	r3, #0
 8004798:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f003 0301 	and.w	r3, r3, #1
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d11c      	bne.n	80047e2 <HAL_SPI_TransmitReceive+0x1f4>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d016      	beq.n	80047e2 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68da      	ldr	r2, [r3, #12]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047be:	b292      	uxth	r2, r2
 80047c0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c6:	1c9a      	adds	r2, r3, #2
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	3b01      	subs	r3, #1
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80047de:	2301      	movs	r3, #1
 80047e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80047e2:	f7fe f851 	bl	8002888 <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d80b      	bhi.n	800480a <HAL_SPI_TransmitReceive+0x21c>
 80047f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f8:	d007      	beq.n	800480a <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004808:	e109      	b.n	8004a1e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800480e:	b29b      	uxth	r3, r3
 8004810:	2b00      	cmp	r3, #0
 8004812:	d19f      	bne.n	8004754 <HAL_SPI_TransmitReceive+0x166>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800481a:	b29b      	uxth	r3, r3
 800481c:	2b00      	cmp	r3, #0
 800481e:	d199      	bne.n	8004754 <HAL_SPI_TransmitReceive+0x166>
 8004820:	e0e3      	b.n	80049ea <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d003      	beq.n	8004832 <HAL_SPI_TransmitReceive+0x244>
 800482a:	8a7b      	ldrh	r3, [r7, #18]
 800482c:	2b01      	cmp	r3, #1
 800482e:	f040 80cf 	bne.w	80049d0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004836:	b29b      	uxth	r3, r3
 8004838:	2b01      	cmp	r3, #1
 800483a:	d912      	bls.n	8004862 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004840:	881a      	ldrh	r2, [r3, #0]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484c:	1c9a      	adds	r2, r3, #2
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004856:	b29b      	uxth	r3, r3
 8004858:	3b02      	subs	r3, #2
 800485a:	b29a      	uxth	r2, r3
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004860:	e0b6      	b.n	80049d0 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	330c      	adds	r3, #12
 800486c:	7812      	ldrb	r2, [r2, #0]
 800486e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004874:	1c5a      	adds	r2, r3, #1
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800487e:	b29b      	uxth	r3, r3
 8004880:	3b01      	subs	r3, #1
 8004882:	b29a      	uxth	r2, r3
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004888:	e0a2      	b.n	80049d0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f003 0302 	and.w	r3, r3, #2
 8004894:	2b02      	cmp	r3, #2
 8004896:	d134      	bne.n	8004902 <HAL_SPI_TransmitReceive+0x314>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800489c:	b29b      	uxth	r3, r3
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d02f      	beq.n	8004902 <HAL_SPI_TransmitReceive+0x314>
 80048a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d12c      	bne.n	8004902 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d912      	bls.n	80048d8 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b6:	881a      	ldrh	r2, [r3, #0]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c2:	1c9a      	adds	r2, r3, #2
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	3b02      	subs	r3, #2
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80048d6:	e012      	b.n	80048fe <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	330c      	adds	r3, #12
 80048e2:	7812      	ldrb	r2, [r2, #0]
 80048e4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ea:	1c5a      	adds	r2, r3, #1
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	3b01      	subs	r3, #1
 80048f8:	b29a      	uxth	r2, r3
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80048fe:	2300      	movs	r3, #0
 8004900:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f003 0301 	and.w	r3, r3, #1
 800490c:	2b01      	cmp	r3, #1
 800490e:	d148      	bne.n	80049a2 <HAL_SPI_TransmitReceive+0x3b4>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004916:	b29b      	uxth	r3, r3
 8004918:	2b00      	cmp	r3, #0
 800491a:	d042      	beq.n	80049a2 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004922:	b29b      	uxth	r3, r3
 8004924:	2b01      	cmp	r3, #1
 8004926:	d923      	bls.n	8004970 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68da      	ldr	r2, [r3, #12]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004932:	b292      	uxth	r2, r2
 8004934:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493a:	1c9a      	adds	r2, r3, #2
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004946:	b29b      	uxth	r3, r3
 8004948:	3b02      	subs	r3, #2
 800494a:	b29a      	uxth	r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004958:	b29b      	uxth	r3, r3
 800495a:	2b01      	cmp	r3, #1
 800495c:	d81f      	bhi.n	800499e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	685a      	ldr	r2, [r3, #4]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800496c:	605a      	str	r2, [r3, #4]
 800496e:	e016      	b.n	800499e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f103 020c 	add.w	r2, r3, #12
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497c:	7812      	ldrb	r2, [r2, #0]
 800497e:	b2d2      	uxtb	r2, r2
 8004980:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004986:	1c5a      	adds	r2, r3, #1
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004992:	b29b      	uxth	r3, r3
 8004994:	3b01      	subs	r3, #1
 8004996:	b29a      	uxth	r2, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800499e:	2301      	movs	r3, #1
 80049a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80049a2:	f7fd ff71 	bl	8002888 <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d803      	bhi.n	80049ba <HAL_SPI_TransmitReceive+0x3cc>
 80049b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b8:	d102      	bne.n	80049c0 <HAL_SPI_TransmitReceive+0x3d2>
 80049ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d107      	bne.n	80049d0 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80049ce:	e026      	b.n	8004a1e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	f47f af57 	bne.w	800488a <HAL_SPI_TransmitReceive+0x29c>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f47f af50 	bne.w	800488a <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049ea:	69fa      	ldr	r2, [r7, #28]
 80049ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f000 f93e 	bl	8004c70 <SPI_EndRxTxTransaction>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d005      	beq.n	8004a06 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2220      	movs	r2, #32
 8004a04:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d003      	beq.n	8004a16 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a14:	e003      	b.n	8004a1e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004a26:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3728      	adds	r7, #40	; 0x28
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
	...

08004a34 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b088      	sub	sp, #32
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	603b      	str	r3, [r7, #0]
 8004a40:	4613      	mov	r3, r2
 8004a42:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a44:	f7fd ff20 	bl	8002888 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4c:	1a9b      	subs	r3, r3, r2
 8004a4e:	683a      	ldr	r2, [r7, #0]
 8004a50:	4413      	add	r3, r2
 8004a52:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004a54:	f7fd ff18 	bl	8002888 <HAL_GetTick>
 8004a58:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004a5a:	4b39      	ldr	r3, [pc, #228]	; (8004b40 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	015b      	lsls	r3, r3, #5
 8004a60:	0d1b      	lsrs	r3, r3, #20
 8004a62:	69fa      	ldr	r2, [r7, #28]
 8004a64:	fb02 f303 	mul.w	r3, r2, r3
 8004a68:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a6a:	e054      	b.n	8004b16 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a72:	d050      	beq.n	8004b16 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a74:	f7fd ff08 	bl	8002888 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	69fa      	ldr	r2, [r7, #28]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d902      	bls.n	8004a8a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d13d      	bne.n	8004b06 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	685a      	ldr	r2, [r3, #4]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a98:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004aa2:	d111      	bne.n	8004ac8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aac:	d004      	beq.n	8004ab8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ab6:	d107      	bne.n	8004ac8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ac6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004acc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ad0:	d10f      	bne.n	8004af2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ae0:	601a      	str	r2, [r3, #0]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004af0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2201      	movs	r2, #1
 8004af6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e017      	b.n	8004b36 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d101      	bne.n	8004b10 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	3b01      	subs	r3, #1
 8004b14:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	689a      	ldr	r2, [r3, #8]
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	4013      	ands	r3, r2
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	bf0c      	ite	eq
 8004b26:	2301      	moveq	r3, #1
 8004b28:	2300      	movne	r3, #0
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	79fb      	ldrb	r3, [r7, #7]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d19b      	bne.n	8004a6c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3720      	adds	r7, #32
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	20000000 	.word	0x20000000

08004b44 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b08a      	sub	sp, #40	; 0x28
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
 8004b50:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004b52:	2300      	movs	r3, #0
 8004b54:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004b56:	f7fd fe97 	bl	8002888 <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5e:	1a9b      	subs	r3, r3, r2
 8004b60:	683a      	ldr	r2, [r7, #0]
 8004b62:	4413      	add	r3, r2
 8004b64:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004b66:	f7fd fe8f 	bl	8002888 <HAL_GetTick>
 8004b6a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	330c      	adds	r3, #12
 8004b72:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004b74:	4b3d      	ldr	r3, [pc, #244]	; (8004c6c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	4613      	mov	r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	4413      	add	r3, r2
 8004b7e:	00da      	lsls	r2, r3, #3
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	0d1b      	lsrs	r3, r3, #20
 8004b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b86:	fb02 f303 	mul.w	r3, r2, r3
 8004b8a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004b8c:	e060      	b.n	8004c50 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004b94:	d107      	bne.n	8004ba6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d104      	bne.n	8004ba6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004ba4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bac:	d050      	beq.n	8004c50 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004bae:	f7fd fe6b 	bl	8002888 <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	6a3b      	ldr	r3, [r7, #32]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d902      	bls.n	8004bc4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d13d      	bne.n	8004c40 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	685a      	ldr	r2, [r3, #4]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004bd2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bdc:	d111      	bne.n	8004c02 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004be6:	d004      	beq.n	8004bf2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bf0:	d107      	bne.n	8004c02 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c00:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c0a:	d10f      	bne.n	8004c2c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c1a:	601a      	str	r2, [r3, #0]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c2a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e010      	b.n	8004c62 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d101      	bne.n	8004c4a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004c46:	2300      	movs	r3, #0
 8004c48:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	689a      	ldr	r2, [r3, #8]
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	4013      	ands	r3, r2
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d196      	bne.n	8004b8e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3728      	adds	r7, #40	; 0x28
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	20000000 	.word	0x20000000

08004c70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b086      	sub	sp, #24
 8004c74:	af02      	add	r7, sp, #8
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	9300      	str	r3, [sp, #0]
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004c88:	68f8      	ldr	r0, [r7, #12]
 8004c8a:	f7ff ff5b 	bl	8004b44 <SPI_WaitFifoStateUntilTimeout>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d007      	beq.n	8004ca4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c98:	f043 0220 	orr.w	r2, r3, #32
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e027      	b.n	8004cf4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	9300      	str	r3, [sp, #0]
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	2200      	movs	r2, #0
 8004cac:	2180      	movs	r1, #128	; 0x80
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	f7ff fec0 	bl	8004a34 <SPI_WaitFlagStateUntilTimeout>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d007      	beq.n	8004cca <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cbe:	f043 0220 	orr.w	r2, r3, #32
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e014      	b.n	8004cf4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	9300      	str	r3, [sp, #0]
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	f7ff ff34 	bl	8004b44 <SPI_WaitFifoStateUntilTimeout>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d007      	beq.n	8004cf2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ce6:	f043 0220 	orr.w	r2, r3, #32
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e000      	b.n	8004cf4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3710      	adds	r7, #16
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d101      	bne.n	8004d0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e049      	b.n	8004da2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d106      	bne.n	8004d28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f7fd fc28 	bl	8002578 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	3304      	adds	r3, #4
 8004d38:	4619      	mov	r1, r3
 8004d3a:	4610      	mov	r0, r2
 8004d3c:	f000 f8fe 	bl	8004f3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3708      	adds	r7, #8
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004daa:	b580      	push	{r7, lr}
 8004dac:	b084      	sub	sp, #16
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
 8004db2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004db4:	2300      	movs	r3, #0
 8004db6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d101      	bne.n	8004dc6 <HAL_TIM_ConfigClockSource+0x1c>
 8004dc2:	2302      	movs	r3, #2
 8004dc4:	e0b6      	b.n	8004f34 <HAL_TIM_ConfigClockSource+0x18a>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2202      	movs	r2, #2
 8004dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004de4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004de8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004df0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68ba      	ldr	r2, [r7, #8]
 8004df8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e02:	d03e      	beq.n	8004e82 <HAL_TIM_ConfigClockSource+0xd8>
 8004e04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e08:	f200 8087 	bhi.w	8004f1a <HAL_TIM_ConfigClockSource+0x170>
 8004e0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e10:	f000 8086 	beq.w	8004f20 <HAL_TIM_ConfigClockSource+0x176>
 8004e14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e18:	d87f      	bhi.n	8004f1a <HAL_TIM_ConfigClockSource+0x170>
 8004e1a:	2b70      	cmp	r3, #112	; 0x70
 8004e1c:	d01a      	beq.n	8004e54 <HAL_TIM_ConfigClockSource+0xaa>
 8004e1e:	2b70      	cmp	r3, #112	; 0x70
 8004e20:	d87b      	bhi.n	8004f1a <HAL_TIM_ConfigClockSource+0x170>
 8004e22:	2b60      	cmp	r3, #96	; 0x60
 8004e24:	d050      	beq.n	8004ec8 <HAL_TIM_ConfigClockSource+0x11e>
 8004e26:	2b60      	cmp	r3, #96	; 0x60
 8004e28:	d877      	bhi.n	8004f1a <HAL_TIM_ConfigClockSource+0x170>
 8004e2a:	2b50      	cmp	r3, #80	; 0x50
 8004e2c:	d03c      	beq.n	8004ea8 <HAL_TIM_ConfigClockSource+0xfe>
 8004e2e:	2b50      	cmp	r3, #80	; 0x50
 8004e30:	d873      	bhi.n	8004f1a <HAL_TIM_ConfigClockSource+0x170>
 8004e32:	2b40      	cmp	r3, #64	; 0x40
 8004e34:	d058      	beq.n	8004ee8 <HAL_TIM_ConfigClockSource+0x13e>
 8004e36:	2b40      	cmp	r3, #64	; 0x40
 8004e38:	d86f      	bhi.n	8004f1a <HAL_TIM_ConfigClockSource+0x170>
 8004e3a:	2b30      	cmp	r3, #48	; 0x30
 8004e3c:	d064      	beq.n	8004f08 <HAL_TIM_ConfigClockSource+0x15e>
 8004e3e:	2b30      	cmp	r3, #48	; 0x30
 8004e40:	d86b      	bhi.n	8004f1a <HAL_TIM_ConfigClockSource+0x170>
 8004e42:	2b20      	cmp	r3, #32
 8004e44:	d060      	beq.n	8004f08 <HAL_TIM_ConfigClockSource+0x15e>
 8004e46:	2b20      	cmp	r3, #32
 8004e48:	d867      	bhi.n	8004f1a <HAL_TIM_ConfigClockSource+0x170>
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d05c      	beq.n	8004f08 <HAL_TIM_ConfigClockSource+0x15e>
 8004e4e:	2b10      	cmp	r3, #16
 8004e50:	d05a      	beq.n	8004f08 <HAL_TIM_ConfigClockSource+0x15e>
 8004e52:	e062      	b.n	8004f1a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e64:	f000 f97e 	bl	8005164 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e76:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68ba      	ldr	r2, [r7, #8]
 8004e7e:	609a      	str	r2, [r3, #8]
      break;
 8004e80:	e04f      	b.n	8004f22 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e92:	f000 f967 	bl	8005164 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	689a      	ldr	r2, [r3, #8]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ea4:	609a      	str	r2, [r3, #8]
      break;
 8004ea6:	e03c      	b.n	8004f22 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	f000 f8db 	bl	8005070 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2150      	movs	r1, #80	; 0x50
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f000 f934 	bl	800512e <TIM_ITRx_SetConfig>
      break;
 8004ec6:	e02c      	b.n	8004f22 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	f000 f8fa 	bl	80050ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2160      	movs	r1, #96	; 0x60
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f000 f924 	bl	800512e <TIM_ITRx_SetConfig>
      break;
 8004ee6:	e01c      	b.n	8004f22 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	f000 f8bb 	bl	8005070 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2140      	movs	r1, #64	; 0x40
 8004f00:	4618      	mov	r0, r3
 8004f02:	f000 f914 	bl	800512e <TIM_ITRx_SetConfig>
      break;
 8004f06:	e00c      	b.n	8004f22 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4619      	mov	r1, r3
 8004f12:	4610      	mov	r0, r2
 8004f14:	f000 f90b 	bl	800512e <TIM_ITRx_SetConfig>
      break;
 8004f18:	e003      	b.n	8004f22 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	73fb      	strb	r3, [r7, #15]
      break;
 8004f1e:	e000      	b.n	8004f22 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004f20:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3710      	adds	r7, #16
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a40      	ldr	r2, [pc, #256]	; (8005050 <TIM_Base_SetConfig+0x114>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d013      	beq.n	8004f7c <TIM_Base_SetConfig+0x40>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f5a:	d00f      	beq.n	8004f7c <TIM_Base_SetConfig+0x40>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a3d      	ldr	r2, [pc, #244]	; (8005054 <TIM_Base_SetConfig+0x118>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d00b      	beq.n	8004f7c <TIM_Base_SetConfig+0x40>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a3c      	ldr	r2, [pc, #240]	; (8005058 <TIM_Base_SetConfig+0x11c>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d007      	beq.n	8004f7c <TIM_Base_SetConfig+0x40>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a3b      	ldr	r2, [pc, #236]	; (800505c <TIM_Base_SetConfig+0x120>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d003      	beq.n	8004f7c <TIM_Base_SetConfig+0x40>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a3a      	ldr	r2, [pc, #232]	; (8005060 <TIM_Base_SetConfig+0x124>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d108      	bne.n	8004f8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a2f      	ldr	r2, [pc, #188]	; (8005050 <TIM_Base_SetConfig+0x114>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d01f      	beq.n	8004fd6 <TIM_Base_SetConfig+0x9a>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f9c:	d01b      	beq.n	8004fd6 <TIM_Base_SetConfig+0x9a>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a2c      	ldr	r2, [pc, #176]	; (8005054 <TIM_Base_SetConfig+0x118>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d017      	beq.n	8004fd6 <TIM_Base_SetConfig+0x9a>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a2b      	ldr	r2, [pc, #172]	; (8005058 <TIM_Base_SetConfig+0x11c>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d013      	beq.n	8004fd6 <TIM_Base_SetConfig+0x9a>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a2a      	ldr	r2, [pc, #168]	; (800505c <TIM_Base_SetConfig+0x120>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d00f      	beq.n	8004fd6 <TIM_Base_SetConfig+0x9a>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a29      	ldr	r2, [pc, #164]	; (8005060 <TIM_Base_SetConfig+0x124>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d00b      	beq.n	8004fd6 <TIM_Base_SetConfig+0x9a>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a28      	ldr	r2, [pc, #160]	; (8005064 <TIM_Base_SetConfig+0x128>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d007      	beq.n	8004fd6 <TIM_Base_SetConfig+0x9a>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a27      	ldr	r2, [pc, #156]	; (8005068 <TIM_Base_SetConfig+0x12c>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d003      	beq.n	8004fd6 <TIM_Base_SetConfig+0x9a>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a26      	ldr	r2, [pc, #152]	; (800506c <TIM_Base_SetConfig+0x130>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d108      	bne.n	8004fe8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	689a      	ldr	r2, [r3, #8]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a10      	ldr	r2, [pc, #64]	; (8005050 <TIM_Base_SetConfig+0x114>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d00f      	beq.n	8005034 <TIM_Base_SetConfig+0xf8>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a12      	ldr	r2, [pc, #72]	; (8005060 <TIM_Base_SetConfig+0x124>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d00b      	beq.n	8005034 <TIM_Base_SetConfig+0xf8>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a11      	ldr	r2, [pc, #68]	; (8005064 <TIM_Base_SetConfig+0x128>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d007      	beq.n	8005034 <TIM_Base_SetConfig+0xf8>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a10      	ldr	r2, [pc, #64]	; (8005068 <TIM_Base_SetConfig+0x12c>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d003      	beq.n	8005034 <TIM_Base_SetConfig+0xf8>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a0f      	ldr	r2, [pc, #60]	; (800506c <TIM_Base_SetConfig+0x130>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d103      	bne.n	800503c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	691a      	ldr	r2, [r3, #16]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	615a      	str	r2, [r3, #20]
}
 8005042:	bf00      	nop
 8005044:	3714      	adds	r7, #20
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	40012c00 	.word	0x40012c00
 8005054:	40000400 	.word	0x40000400
 8005058:	40000800 	.word	0x40000800
 800505c:	40000c00 	.word	0x40000c00
 8005060:	40013400 	.word	0x40013400
 8005064:	40014000 	.word	0x40014000
 8005068:	40014400 	.word	0x40014400
 800506c:	40014800 	.word	0x40014800

08005070 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005070:	b480      	push	{r7}
 8005072:	b087      	sub	sp, #28
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6a1b      	ldr	r3, [r3, #32]
 8005080:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	f023 0201 	bic.w	r2, r3, #1
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	699b      	ldr	r3, [r3, #24]
 8005092:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800509a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	011b      	lsls	r3, r3, #4
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	f023 030a 	bic.w	r3, r3, #10
 80050ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	693a      	ldr	r2, [r7, #16]
 80050ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	697a      	ldr	r2, [r7, #20]
 80050c0:	621a      	str	r2, [r3, #32]
}
 80050c2:	bf00      	nop
 80050c4:	371c      	adds	r7, #28
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr

080050ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050ce:	b480      	push	{r7}
 80050d0:	b087      	sub	sp, #28
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	60f8      	str	r0, [r7, #12]
 80050d6:	60b9      	str	r1, [r7, #8]
 80050d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6a1b      	ldr	r3, [r3, #32]
 80050de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6a1b      	ldr	r3, [r3, #32]
 80050e4:	f023 0210 	bic.w	r2, r3, #16
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	031b      	lsls	r3, r3, #12
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	4313      	orrs	r3, r2
 8005102:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800510a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	011b      	lsls	r3, r3, #4
 8005110:	697a      	ldr	r2, [r7, #20]
 8005112:	4313      	orrs	r3, r2
 8005114:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	697a      	ldr	r2, [r7, #20]
 8005120:	621a      	str	r2, [r3, #32]
}
 8005122:	bf00      	nop
 8005124:	371c      	adds	r7, #28
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr

0800512e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800512e:	b480      	push	{r7}
 8005130:	b085      	sub	sp, #20
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
 8005136:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005144:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005146:	683a      	ldr	r2, [r7, #0]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	4313      	orrs	r3, r2
 800514c:	f043 0307 	orr.w	r3, r3, #7
 8005150:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	609a      	str	r2, [r3, #8]
}
 8005158:	bf00      	nop
 800515a:	3714      	adds	r7, #20
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005164:	b480      	push	{r7}
 8005166:	b087      	sub	sp, #28
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
 8005170:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800517e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	021a      	lsls	r2, r3, #8
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	431a      	orrs	r2, r3
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	4313      	orrs	r3, r2
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	4313      	orrs	r3, r2
 8005190:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	697a      	ldr	r2, [r7, #20]
 8005196:	609a      	str	r2, [r3, #8]
}
 8005198:	bf00      	nop
 800519a:	371c      	adds	r7, #28
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d101      	bne.n	80051bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051b8:	2302      	movs	r3, #2
 80051ba:	e068      	b.n	800528e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2202      	movs	r2, #2
 80051c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a2e      	ldr	r2, [pc, #184]	; (800529c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d004      	beq.n	80051f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a2d      	ldr	r2, [pc, #180]	; (80052a0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d108      	bne.n	8005202 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80051f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	4313      	orrs	r3, r2
 8005200:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005208:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	4313      	orrs	r3, r2
 8005212:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a1e      	ldr	r2, [pc, #120]	; (800529c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d01d      	beq.n	8005262 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800522e:	d018      	beq.n	8005262 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a1b      	ldr	r2, [pc, #108]	; (80052a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d013      	beq.n	8005262 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a1a      	ldr	r2, [pc, #104]	; (80052a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d00e      	beq.n	8005262 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a18      	ldr	r2, [pc, #96]	; (80052ac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d009      	beq.n	8005262 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a13      	ldr	r2, [pc, #76]	; (80052a0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d004      	beq.n	8005262 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a14      	ldr	r2, [pc, #80]	; (80052b0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d10c      	bne.n	800527c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005268:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	68ba      	ldr	r2, [r7, #8]
 8005270:	4313      	orrs	r3, r2
 8005272:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68ba      	ldr	r2, [r7, #8]
 800527a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3714      	adds	r7, #20
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	40012c00 	.word	0x40012c00
 80052a0:	40013400 	.word	0x40013400
 80052a4:	40000400 	.word	0x40000400
 80052a8:	40000800 	.word	0x40000800
 80052ac:	40000c00 	.word	0x40000c00
 80052b0:	40014000 	.word	0x40014000

080052b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d101      	bne.n	80052c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e040      	b.n	8005348 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d106      	bne.n	80052dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f7fd f96e 	bl	80025b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2224      	movs	r2, #36	; 0x24
 80052e0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f022 0201 	bic.w	r2, r2, #1
 80052f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d002      	beq.n	8005300 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 fb6a 	bl	80059d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 f8af 	bl	8005464 <UART_SetConfig>
 8005306:	4603      	mov	r3, r0
 8005308:	2b01      	cmp	r3, #1
 800530a:	d101      	bne.n	8005310 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e01b      	b.n	8005348 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	685a      	ldr	r2, [r3, #4]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800531e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	689a      	ldr	r2, [r3, #8]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800532e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f042 0201 	orr.w	r2, r2, #1
 800533e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 fbe9 	bl	8005b18 <UART_CheckIdleState>
 8005346:	4603      	mov	r3, r0
}
 8005348:	4618      	mov	r0, r3
 800534a:	3708      	adds	r7, #8
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b08a      	sub	sp, #40	; 0x28
 8005354:	af02      	add	r7, sp, #8
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	603b      	str	r3, [r7, #0]
 800535c:	4613      	mov	r3, r2
 800535e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005364:	2b20      	cmp	r3, #32
 8005366:	d178      	bne.n	800545a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d002      	beq.n	8005374 <HAL_UART_Transmit+0x24>
 800536e:	88fb      	ldrh	r3, [r7, #6]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d101      	bne.n	8005378 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e071      	b.n	800545c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2200      	movs	r2, #0
 800537c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2221      	movs	r2, #33	; 0x21
 8005384:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005386:	f7fd fa7f 	bl	8002888 <HAL_GetTick>
 800538a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	88fa      	ldrh	r2, [r7, #6]
 8005390:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	88fa      	ldrh	r2, [r7, #6]
 8005398:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053a4:	d108      	bne.n	80053b8 <HAL_UART_Transmit+0x68>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d104      	bne.n	80053b8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80053ae:	2300      	movs	r3, #0
 80053b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	61bb      	str	r3, [r7, #24]
 80053b6:	e003      	b.n	80053c0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053bc:	2300      	movs	r3, #0
 80053be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80053c0:	e030      	b.n	8005424 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	9300      	str	r3, [sp, #0]
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	2200      	movs	r2, #0
 80053ca:	2180      	movs	r1, #128	; 0x80
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	f000 fc4b 	bl	8005c68 <UART_WaitOnFlagUntilTimeout>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d004      	beq.n	80053e2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2220      	movs	r2, #32
 80053dc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e03c      	b.n	800545c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d10b      	bne.n	8005400 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	881a      	ldrh	r2, [r3, #0]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053f4:	b292      	uxth	r2, r2
 80053f6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	3302      	adds	r3, #2
 80053fc:	61bb      	str	r3, [r7, #24]
 80053fe:	e008      	b.n	8005412 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	781a      	ldrb	r2, [r3, #0]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	b292      	uxth	r2, r2
 800540a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	3301      	adds	r3, #1
 8005410:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005418:	b29b      	uxth	r3, r3
 800541a:	3b01      	subs	r3, #1
 800541c:	b29a      	uxth	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800542a:	b29b      	uxth	r3, r3
 800542c:	2b00      	cmp	r3, #0
 800542e:	d1c8      	bne.n	80053c2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	9300      	str	r3, [sp, #0]
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	2200      	movs	r2, #0
 8005438:	2140      	movs	r1, #64	; 0x40
 800543a:	68f8      	ldr	r0, [r7, #12]
 800543c:	f000 fc14 	bl	8005c68 <UART_WaitOnFlagUntilTimeout>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d004      	beq.n	8005450 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2220      	movs	r2, #32
 800544a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	e005      	b.n	800545c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2220      	movs	r2, #32
 8005454:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005456:	2300      	movs	r3, #0
 8005458:	e000      	b.n	800545c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800545a:	2302      	movs	r3, #2
  }
}
 800545c:	4618      	mov	r0, r3
 800545e:	3720      	adds	r7, #32
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005464:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005468:	b08a      	sub	sp, #40	; 0x28
 800546a:	af00      	add	r7, sp, #0
 800546c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800546e:	2300      	movs	r3, #0
 8005470:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	689a      	ldr	r2, [r3, #8]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	431a      	orrs	r2, r3
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	431a      	orrs	r2, r3
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	69db      	ldr	r3, [r3, #28]
 8005488:	4313      	orrs	r3, r2
 800548a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	4ba4      	ldr	r3, [pc, #656]	; (8005724 <UART_SetConfig+0x2c0>)
 8005494:	4013      	ands	r3, r2
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	6812      	ldr	r2, [r2, #0]
 800549a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800549c:	430b      	orrs	r3, r1
 800549e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	68da      	ldr	r2, [r3, #12]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	430a      	orrs	r2, r1
 80054b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a99      	ldr	r2, [pc, #612]	; (8005728 <UART_SetConfig+0x2c4>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d004      	beq.n	80054d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054cc:	4313      	orrs	r3, r2
 80054ce:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054e0:	430a      	orrs	r2, r1
 80054e2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a90      	ldr	r2, [pc, #576]	; (800572c <UART_SetConfig+0x2c8>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d126      	bne.n	800553c <UART_SetConfig+0xd8>
 80054ee:	4b90      	ldr	r3, [pc, #576]	; (8005730 <UART_SetConfig+0x2cc>)
 80054f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f4:	f003 0303 	and.w	r3, r3, #3
 80054f8:	2b03      	cmp	r3, #3
 80054fa:	d81b      	bhi.n	8005534 <UART_SetConfig+0xd0>
 80054fc:	a201      	add	r2, pc, #4	; (adr r2, 8005504 <UART_SetConfig+0xa0>)
 80054fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005502:	bf00      	nop
 8005504:	08005515 	.word	0x08005515
 8005508:	08005525 	.word	0x08005525
 800550c:	0800551d 	.word	0x0800551d
 8005510:	0800552d 	.word	0x0800552d
 8005514:	2301      	movs	r3, #1
 8005516:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800551a:	e116      	b.n	800574a <UART_SetConfig+0x2e6>
 800551c:	2302      	movs	r3, #2
 800551e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005522:	e112      	b.n	800574a <UART_SetConfig+0x2e6>
 8005524:	2304      	movs	r3, #4
 8005526:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800552a:	e10e      	b.n	800574a <UART_SetConfig+0x2e6>
 800552c:	2308      	movs	r3, #8
 800552e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005532:	e10a      	b.n	800574a <UART_SetConfig+0x2e6>
 8005534:	2310      	movs	r3, #16
 8005536:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800553a:	e106      	b.n	800574a <UART_SetConfig+0x2e6>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a7c      	ldr	r2, [pc, #496]	; (8005734 <UART_SetConfig+0x2d0>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d138      	bne.n	80055b8 <UART_SetConfig+0x154>
 8005546:	4b7a      	ldr	r3, [pc, #488]	; (8005730 <UART_SetConfig+0x2cc>)
 8005548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800554c:	f003 030c 	and.w	r3, r3, #12
 8005550:	2b0c      	cmp	r3, #12
 8005552:	d82d      	bhi.n	80055b0 <UART_SetConfig+0x14c>
 8005554:	a201      	add	r2, pc, #4	; (adr r2, 800555c <UART_SetConfig+0xf8>)
 8005556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555a:	bf00      	nop
 800555c:	08005591 	.word	0x08005591
 8005560:	080055b1 	.word	0x080055b1
 8005564:	080055b1 	.word	0x080055b1
 8005568:	080055b1 	.word	0x080055b1
 800556c:	080055a1 	.word	0x080055a1
 8005570:	080055b1 	.word	0x080055b1
 8005574:	080055b1 	.word	0x080055b1
 8005578:	080055b1 	.word	0x080055b1
 800557c:	08005599 	.word	0x08005599
 8005580:	080055b1 	.word	0x080055b1
 8005584:	080055b1 	.word	0x080055b1
 8005588:	080055b1 	.word	0x080055b1
 800558c:	080055a9 	.word	0x080055a9
 8005590:	2300      	movs	r3, #0
 8005592:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005596:	e0d8      	b.n	800574a <UART_SetConfig+0x2e6>
 8005598:	2302      	movs	r3, #2
 800559a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800559e:	e0d4      	b.n	800574a <UART_SetConfig+0x2e6>
 80055a0:	2304      	movs	r3, #4
 80055a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055a6:	e0d0      	b.n	800574a <UART_SetConfig+0x2e6>
 80055a8:	2308      	movs	r3, #8
 80055aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055ae:	e0cc      	b.n	800574a <UART_SetConfig+0x2e6>
 80055b0:	2310      	movs	r3, #16
 80055b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055b6:	e0c8      	b.n	800574a <UART_SetConfig+0x2e6>
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a5e      	ldr	r2, [pc, #376]	; (8005738 <UART_SetConfig+0x2d4>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d125      	bne.n	800560e <UART_SetConfig+0x1aa>
 80055c2:	4b5b      	ldr	r3, [pc, #364]	; (8005730 <UART_SetConfig+0x2cc>)
 80055c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80055cc:	2b30      	cmp	r3, #48	; 0x30
 80055ce:	d016      	beq.n	80055fe <UART_SetConfig+0x19a>
 80055d0:	2b30      	cmp	r3, #48	; 0x30
 80055d2:	d818      	bhi.n	8005606 <UART_SetConfig+0x1a2>
 80055d4:	2b20      	cmp	r3, #32
 80055d6:	d00a      	beq.n	80055ee <UART_SetConfig+0x18a>
 80055d8:	2b20      	cmp	r3, #32
 80055da:	d814      	bhi.n	8005606 <UART_SetConfig+0x1a2>
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d002      	beq.n	80055e6 <UART_SetConfig+0x182>
 80055e0:	2b10      	cmp	r3, #16
 80055e2:	d008      	beq.n	80055f6 <UART_SetConfig+0x192>
 80055e4:	e00f      	b.n	8005606 <UART_SetConfig+0x1a2>
 80055e6:	2300      	movs	r3, #0
 80055e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055ec:	e0ad      	b.n	800574a <UART_SetConfig+0x2e6>
 80055ee:	2302      	movs	r3, #2
 80055f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055f4:	e0a9      	b.n	800574a <UART_SetConfig+0x2e6>
 80055f6:	2304      	movs	r3, #4
 80055f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055fc:	e0a5      	b.n	800574a <UART_SetConfig+0x2e6>
 80055fe:	2308      	movs	r3, #8
 8005600:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005604:	e0a1      	b.n	800574a <UART_SetConfig+0x2e6>
 8005606:	2310      	movs	r3, #16
 8005608:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800560c:	e09d      	b.n	800574a <UART_SetConfig+0x2e6>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a4a      	ldr	r2, [pc, #296]	; (800573c <UART_SetConfig+0x2d8>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d125      	bne.n	8005664 <UART_SetConfig+0x200>
 8005618:	4b45      	ldr	r3, [pc, #276]	; (8005730 <UART_SetConfig+0x2cc>)
 800561a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800561e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005622:	2bc0      	cmp	r3, #192	; 0xc0
 8005624:	d016      	beq.n	8005654 <UART_SetConfig+0x1f0>
 8005626:	2bc0      	cmp	r3, #192	; 0xc0
 8005628:	d818      	bhi.n	800565c <UART_SetConfig+0x1f8>
 800562a:	2b80      	cmp	r3, #128	; 0x80
 800562c:	d00a      	beq.n	8005644 <UART_SetConfig+0x1e0>
 800562e:	2b80      	cmp	r3, #128	; 0x80
 8005630:	d814      	bhi.n	800565c <UART_SetConfig+0x1f8>
 8005632:	2b00      	cmp	r3, #0
 8005634:	d002      	beq.n	800563c <UART_SetConfig+0x1d8>
 8005636:	2b40      	cmp	r3, #64	; 0x40
 8005638:	d008      	beq.n	800564c <UART_SetConfig+0x1e8>
 800563a:	e00f      	b.n	800565c <UART_SetConfig+0x1f8>
 800563c:	2300      	movs	r3, #0
 800563e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005642:	e082      	b.n	800574a <UART_SetConfig+0x2e6>
 8005644:	2302      	movs	r3, #2
 8005646:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800564a:	e07e      	b.n	800574a <UART_SetConfig+0x2e6>
 800564c:	2304      	movs	r3, #4
 800564e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005652:	e07a      	b.n	800574a <UART_SetConfig+0x2e6>
 8005654:	2308      	movs	r3, #8
 8005656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800565a:	e076      	b.n	800574a <UART_SetConfig+0x2e6>
 800565c:	2310      	movs	r3, #16
 800565e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005662:	e072      	b.n	800574a <UART_SetConfig+0x2e6>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a35      	ldr	r2, [pc, #212]	; (8005740 <UART_SetConfig+0x2dc>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d12a      	bne.n	80056c4 <UART_SetConfig+0x260>
 800566e:	4b30      	ldr	r3, [pc, #192]	; (8005730 <UART_SetConfig+0x2cc>)
 8005670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005674:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005678:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800567c:	d01a      	beq.n	80056b4 <UART_SetConfig+0x250>
 800567e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005682:	d81b      	bhi.n	80056bc <UART_SetConfig+0x258>
 8005684:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005688:	d00c      	beq.n	80056a4 <UART_SetConfig+0x240>
 800568a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800568e:	d815      	bhi.n	80056bc <UART_SetConfig+0x258>
 8005690:	2b00      	cmp	r3, #0
 8005692:	d003      	beq.n	800569c <UART_SetConfig+0x238>
 8005694:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005698:	d008      	beq.n	80056ac <UART_SetConfig+0x248>
 800569a:	e00f      	b.n	80056bc <UART_SetConfig+0x258>
 800569c:	2300      	movs	r3, #0
 800569e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056a2:	e052      	b.n	800574a <UART_SetConfig+0x2e6>
 80056a4:	2302      	movs	r3, #2
 80056a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056aa:	e04e      	b.n	800574a <UART_SetConfig+0x2e6>
 80056ac:	2304      	movs	r3, #4
 80056ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056b2:	e04a      	b.n	800574a <UART_SetConfig+0x2e6>
 80056b4:	2308      	movs	r3, #8
 80056b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056ba:	e046      	b.n	800574a <UART_SetConfig+0x2e6>
 80056bc:	2310      	movs	r3, #16
 80056be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056c2:	e042      	b.n	800574a <UART_SetConfig+0x2e6>
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a17      	ldr	r2, [pc, #92]	; (8005728 <UART_SetConfig+0x2c4>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d13a      	bne.n	8005744 <UART_SetConfig+0x2e0>
 80056ce:	4b18      	ldr	r3, [pc, #96]	; (8005730 <UART_SetConfig+0x2cc>)
 80056d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80056d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056dc:	d01a      	beq.n	8005714 <UART_SetConfig+0x2b0>
 80056de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056e2:	d81b      	bhi.n	800571c <UART_SetConfig+0x2b8>
 80056e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056e8:	d00c      	beq.n	8005704 <UART_SetConfig+0x2a0>
 80056ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056ee:	d815      	bhi.n	800571c <UART_SetConfig+0x2b8>
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d003      	beq.n	80056fc <UART_SetConfig+0x298>
 80056f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056f8:	d008      	beq.n	800570c <UART_SetConfig+0x2a8>
 80056fa:	e00f      	b.n	800571c <UART_SetConfig+0x2b8>
 80056fc:	2300      	movs	r3, #0
 80056fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005702:	e022      	b.n	800574a <UART_SetConfig+0x2e6>
 8005704:	2302      	movs	r3, #2
 8005706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800570a:	e01e      	b.n	800574a <UART_SetConfig+0x2e6>
 800570c:	2304      	movs	r3, #4
 800570e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005712:	e01a      	b.n	800574a <UART_SetConfig+0x2e6>
 8005714:	2308      	movs	r3, #8
 8005716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800571a:	e016      	b.n	800574a <UART_SetConfig+0x2e6>
 800571c:	2310      	movs	r3, #16
 800571e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005722:	e012      	b.n	800574a <UART_SetConfig+0x2e6>
 8005724:	efff69f3 	.word	0xefff69f3
 8005728:	40008000 	.word	0x40008000
 800572c:	40013800 	.word	0x40013800
 8005730:	40021000 	.word	0x40021000
 8005734:	40004400 	.word	0x40004400
 8005738:	40004800 	.word	0x40004800
 800573c:	40004c00 	.word	0x40004c00
 8005740:	40005000 	.word	0x40005000
 8005744:	2310      	movs	r3, #16
 8005746:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a9f      	ldr	r2, [pc, #636]	; (80059cc <UART_SetConfig+0x568>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d17a      	bne.n	800584a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005754:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005758:	2b08      	cmp	r3, #8
 800575a:	d824      	bhi.n	80057a6 <UART_SetConfig+0x342>
 800575c:	a201      	add	r2, pc, #4	; (adr r2, 8005764 <UART_SetConfig+0x300>)
 800575e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005762:	bf00      	nop
 8005764:	08005789 	.word	0x08005789
 8005768:	080057a7 	.word	0x080057a7
 800576c:	08005791 	.word	0x08005791
 8005770:	080057a7 	.word	0x080057a7
 8005774:	08005797 	.word	0x08005797
 8005778:	080057a7 	.word	0x080057a7
 800577c:	080057a7 	.word	0x080057a7
 8005780:	080057a7 	.word	0x080057a7
 8005784:	0800579f 	.word	0x0800579f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005788:	f7fe f946 	bl	8003a18 <HAL_RCC_GetPCLK1Freq>
 800578c:	61f8      	str	r0, [r7, #28]
        break;
 800578e:	e010      	b.n	80057b2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005790:	4b8f      	ldr	r3, [pc, #572]	; (80059d0 <UART_SetConfig+0x56c>)
 8005792:	61fb      	str	r3, [r7, #28]
        break;
 8005794:	e00d      	b.n	80057b2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005796:	f7fe f8a7 	bl	80038e8 <HAL_RCC_GetSysClockFreq>
 800579a:	61f8      	str	r0, [r7, #28]
        break;
 800579c:	e009      	b.n	80057b2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800579e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057a2:	61fb      	str	r3, [r7, #28]
        break;
 80057a4:	e005      	b.n	80057b2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80057a6:	2300      	movs	r3, #0
 80057a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80057b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f000 80fb 	beq.w	80059b0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	685a      	ldr	r2, [r3, #4]
 80057be:	4613      	mov	r3, r2
 80057c0:	005b      	lsls	r3, r3, #1
 80057c2:	4413      	add	r3, r2
 80057c4:	69fa      	ldr	r2, [r7, #28]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d305      	bcc.n	80057d6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80057d0:	69fa      	ldr	r2, [r7, #28]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d903      	bls.n	80057de <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80057dc:	e0e8      	b.n	80059b0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	2200      	movs	r2, #0
 80057e2:	461c      	mov	r4, r3
 80057e4:	4615      	mov	r5, r2
 80057e6:	f04f 0200 	mov.w	r2, #0
 80057ea:	f04f 0300 	mov.w	r3, #0
 80057ee:	022b      	lsls	r3, r5, #8
 80057f0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80057f4:	0222      	lsls	r2, r4, #8
 80057f6:	68f9      	ldr	r1, [r7, #12]
 80057f8:	6849      	ldr	r1, [r1, #4]
 80057fa:	0849      	lsrs	r1, r1, #1
 80057fc:	2000      	movs	r0, #0
 80057fe:	4688      	mov	r8, r1
 8005800:	4681      	mov	r9, r0
 8005802:	eb12 0a08 	adds.w	sl, r2, r8
 8005806:	eb43 0b09 	adc.w	fp, r3, r9
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	603b      	str	r3, [r7, #0]
 8005812:	607a      	str	r2, [r7, #4]
 8005814:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005818:	4650      	mov	r0, sl
 800581a:	4659      	mov	r1, fp
 800581c:	f7fb f916 	bl	8000a4c <__aeabi_uldivmod>
 8005820:	4602      	mov	r2, r0
 8005822:	460b      	mov	r3, r1
 8005824:	4613      	mov	r3, r2
 8005826:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800582e:	d308      	bcc.n	8005842 <UART_SetConfig+0x3de>
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005836:	d204      	bcs.n	8005842 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	69ba      	ldr	r2, [r7, #24]
 800583e:	60da      	str	r2, [r3, #12]
 8005840:	e0b6      	b.n	80059b0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005848:	e0b2      	b.n	80059b0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	69db      	ldr	r3, [r3, #28]
 800584e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005852:	d15e      	bne.n	8005912 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005854:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005858:	2b08      	cmp	r3, #8
 800585a:	d828      	bhi.n	80058ae <UART_SetConfig+0x44a>
 800585c:	a201      	add	r2, pc, #4	; (adr r2, 8005864 <UART_SetConfig+0x400>)
 800585e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005862:	bf00      	nop
 8005864:	08005889 	.word	0x08005889
 8005868:	08005891 	.word	0x08005891
 800586c:	08005899 	.word	0x08005899
 8005870:	080058af 	.word	0x080058af
 8005874:	0800589f 	.word	0x0800589f
 8005878:	080058af 	.word	0x080058af
 800587c:	080058af 	.word	0x080058af
 8005880:	080058af 	.word	0x080058af
 8005884:	080058a7 	.word	0x080058a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005888:	f7fe f8c6 	bl	8003a18 <HAL_RCC_GetPCLK1Freq>
 800588c:	61f8      	str	r0, [r7, #28]
        break;
 800588e:	e014      	b.n	80058ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005890:	f7fe f8d8 	bl	8003a44 <HAL_RCC_GetPCLK2Freq>
 8005894:	61f8      	str	r0, [r7, #28]
        break;
 8005896:	e010      	b.n	80058ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005898:	4b4d      	ldr	r3, [pc, #308]	; (80059d0 <UART_SetConfig+0x56c>)
 800589a:	61fb      	str	r3, [r7, #28]
        break;
 800589c:	e00d      	b.n	80058ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800589e:	f7fe f823 	bl	80038e8 <HAL_RCC_GetSysClockFreq>
 80058a2:	61f8      	str	r0, [r7, #28]
        break;
 80058a4:	e009      	b.n	80058ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058aa:	61fb      	str	r3, [r7, #28]
        break;
 80058ac:	e005      	b.n	80058ba <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80058ae:	2300      	movs	r3, #0
 80058b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80058b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d077      	beq.n	80059b0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	005a      	lsls	r2, r3, #1
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	085b      	lsrs	r3, r3, #1
 80058ca:	441a      	add	r2, r3
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058d4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	2b0f      	cmp	r3, #15
 80058da:	d916      	bls.n	800590a <UART_SetConfig+0x4a6>
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058e2:	d212      	bcs.n	800590a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	f023 030f 	bic.w	r3, r3, #15
 80058ec:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	085b      	lsrs	r3, r3, #1
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	f003 0307 	and.w	r3, r3, #7
 80058f8:	b29a      	uxth	r2, r3
 80058fa:	8afb      	ldrh	r3, [r7, #22]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	8afa      	ldrh	r2, [r7, #22]
 8005906:	60da      	str	r2, [r3, #12]
 8005908:	e052      	b.n	80059b0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005910:	e04e      	b.n	80059b0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005912:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005916:	2b08      	cmp	r3, #8
 8005918:	d827      	bhi.n	800596a <UART_SetConfig+0x506>
 800591a:	a201      	add	r2, pc, #4	; (adr r2, 8005920 <UART_SetConfig+0x4bc>)
 800591c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005920:	08005945 	.word	0x08005945
 8005924:	0800594d 	.word	0x0800594d
 8005928:	08005955 	.word	0x08005955
 800592c:	0800596b 	.word	0x0800596b
 8005930:	0800595b 	.word	0x0800595b
 8005934:	0800596b 	.word	0x0800596b
 8005938:	0800596b 	.word	0x0800596b
 800593c:	0800596b 	.word	0x0800596b
 8005940:	08005963 	.word	0x08005963
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005944:	f7fe f868 	bl	8003a18 <HAL_RCC_GetPCLK1Freq>
 8005948:	61f8      	str	r0, [r7, #28]
        break;
 800594a:	e014      	b.n	8005976 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800594c:	f7fe f87a 	bl	8003a44 <HAL_RCC_GetPCLK2Freq>
 8005950:	61f8      	str	r0, [r7, #28]
        break;
 8005952:	e010      	b.n	8005976 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005954:	4b1e      	ldr	r3, [pc, #120]	; (80059d0 <UART_SetConfig+0x56c>)
 8005956:	61fb      	str	r3, [r7, #28]
        break;
 8005958:	e00d      	b.n	8005976 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800595a:	f7fd ffc5 	bl	80038e8 <HAL_RCC_GetSysClockFreq>
 800595e:	61f8      	str	r0, [r7, #28]
        break;
 8005960:	e009      	b.n	8005976 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005962:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005966:	61fb      	str	r3, [r7, #28]
        break;
 8005968:	e005      	b.n	8005976 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800596a:	2300      	movs	r3, #0
 800596c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005974:	bf00      	nop
    }

    if (pclk != 0U)
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d019      	beq.n	80059b0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	085a      	lsrs	r2, r3, #1
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	441a      	add	r2, r3
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	fbb2 f3f3 	udiv	r3, r2, r3
 800598e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	2b0f      	cmp	r3, #15
 8005994:	d909      	bls.n	80059aa <UART_SetConfig+0x546>
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800599c:	d205      	bcs.n	80059aa <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	b29a      	uxth	r2, r3
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	60da      	str	r2, [r3, #12]
 80059a8:	e002      	b.n	80059b0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80059bc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3728      	adds	r7, #40	; 0x28
 80059c4:	46bd      	mov	sp, r7
 80059c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059ca:	bf00      	nop
 80059cc:	40008000 	.word	0x40008000
 80059d0:	00f42400 	.word	0x00f42400

080059d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e0:	f003 0308 	and.w	r3, r3, #8
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00a      	beq.n	80059fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	430a      	orrs	r2, r1
 80059fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a02:	f003 0301 	and.w	r3, r3, #1
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00a      	beq.n	8005a20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a24:	f003 0302 	and.w	r3, r3, #2
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00a      	beq.n	8005a42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a46:	f003 0304 	and.w	r3, r3, #4
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00a      	beq.n	8005a64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	430a      	orrs	r2, r1
 8005a62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a68:	f003 0310 	and.w	r3, r3, #16
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d00a      	beq.n	8005a86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	430a      	orrs	r2, r1
 8005a84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8a:	f003 0320 	and.w	r3, r3, #32
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00a      	beq.n	8005aa8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d01a      	beq.n	8005aea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ace:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ad2:	d10a      	bne.n	8005aea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	430a      	orrs	r2, r1
 8005ae8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d00a      	beq.n	8005b0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	430a      	orrs	r2, r1
 8005b0a:	605a      	str	r2, [r3, #4]
  }
}
 8005b0c:	bf00      	nop
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b098      	sub	sp, #96	; 0x60
 8005b1c:	af02      	add	r7, sp, #8
 8005b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b28:	f7fc feae 	bl	8002888 <HAL_GetTick>
 8005b2c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0308 	and.w	r3, r3, #8
 8005b38:	2b08      	cmp	r3, #8
 8005b3a:	d12e      	bne.n	8005b9a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b40:	9300      	str	r3, [sp, #0]
 8005b42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b44:	2200      	movs	r2, #0
 8005b46:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 f88c 	bl	8005c68 <UART_WaitOnFlagUntilTimeout>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d021      	beq.n	8005b9a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5e:	e853 3f00 	ldrex	r3, [r3]
 8005b62:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b6a:	653b      	str	r3, [r7, #80]	; 0x50
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	461a      	mov	r2, r3
 8005b72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b74:	647b      	str	r3, [r7, #68]	; 0x44
 8005b76:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b78:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b7c:	e841 2300 	strex	r3, r2, [r1]
 8005b80:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d1e6      	bne.n	8005b56 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2220      	movs	r2, #32
 8005b8c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e062      	b.n	8005c60 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 0304 	and.w	r3, r3, #4
 8005ba4:	2b04      	cmp	r3, #4
 8005ba6:	d149      	bne.n	8005c3c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ba8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005bac:	9300      	str	r3, [sp, #0]
 8005bae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 f856 	bl	8005c68 <UART_WaitOnFlagUntilTimeout>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d03c      	beq.n	8005c3c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bca:	e853 3f00 	ldrex	r3, [r3]
 8005bce:	623b      	str	r3, [r7, #32]
   return(result);
 8005bd0:	6a3b      	ldr	r3, [r7, #32]
 8005bd2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	461a      	mov	r2, r3
 8005bde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005be0:	633b      	str	r3, [r7, #48]	; 0x30
 8005be2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005be6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005be8:	e841 2300 	strex	r3, r2, [r1]
 8005bec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d1e6      	bne.n	8005bc2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	3308      	adds	r3, #8
 8005bfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	e853 3f00 	ldrex	r3, [r3]
 8005c02:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f023 0301 	bic.w	r3, r3, #1
 8005c0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	3308      	adds	r3, #8
 8005c12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c14:	61fa      	str	r2, [r7, #28]
 8005c16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c18:	69b9      	ldr	r1, [r7, #24]
 8005c1a:	69fa      	ldr	r2, [r7, #28]
 8005c1c:	e841 2300 	strex	r3, r2, [r1]
 8005c20:	617b      	str	r3, [r7, #20]
   return(result);
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d1e5      	bne.n	8005bf4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2220      	movs	r2, #32
 8005c2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	e011      	b.n	8005c60 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2220      	movs	r2, #32
 8005c40:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2220      	movs	r2, #32
 8005c46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3758      	adds	r7, #88	; 0x58
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	603b      	str	r3, [r7, #0]
 8005c74:	4613      	mov	r3, r2
 8005c76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c78:	e049      	b.n	8005d0e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c80:	d045      	beq.n	8005d0e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c82:	f7fc fe01 	bl	8002888 <HAL_GetTick>
 8005c86:	4602      	mov	r2, r0
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	69ba      	ldr	r2, [r7, #24]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d302      	bcc.n	8005c98 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d101      	bne.n	8005c9c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	e048      	b.n	8005d2e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0304 	and.w	r3, r3, #4
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d031      	beq.n	8005d0e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	69db      	ldr	r3, [r3, #28]
 8005cb0:	f003 0308 	and.w	r3, r3, #8
 8005cb4:	2b08      	cmp	r3, #8
 8005cb6:	d110      	bne.n	8005cda <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2208      	movs	r2, #8
 8005cbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005cc0:	68f8      	ldr	r0, [r7, #12]
 8005cc2:	f000 f838 	bl	8005d36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2208      	movs	r2, #8
 8005cca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e029      	b.n	8005d2e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	69db      	ldr	r3, [r3, #28]
 8005ce0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ce4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ce8:	d111      	bne.n	8005d0e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005cf2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005cf4:	68f8      	ldr	r0, [r7, #12]
 8005cf6:	f000 f81e 	bl	8005d36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2220      	movs	r2, #32
 8005cfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	e00f      	b.n	8005d2e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	69da      	ldr	r2, [r3, #28]
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	4013      	ands	r3, r2
 8005d18:	68ba      	ldr	r2, [r7, #8]
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	bf0c      	ite	eq
 8005d1e:	2301      	moveq	r3, #1
 8005d20:	2300      	movne	r3, #0
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	461a      	mov	r2, r3
 8005d26:	79fb      	ldrb	r3, [r7, #7]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d0a6      	beq.n	8005c7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3710      	adds	r7, #16
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}

08005d36 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d36:	b480      	push	{r7}
 8005d38:	b095      	sub	sp, #84	; 0x54
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d46:	e853 3f00 	ldrex	r3, [r3]
 8005d4a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	461a      	mov	r2, r3
 8005d5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d5c:	643b      	str	r3, [r7, #64]	; 0x40
 8005d5e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d60:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d64:	e841 2300 	strex	r3, r2, [r1]
 8005d68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d1e6      	bne.n	8005d3e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	3308      	adds	r3, #8
 8005d76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d78:	6a3b      	ldr	r3, [r7, #32]
 8005d7a:	e853 3f00 	ldrex	r3, [r3]
 8005d7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	f023 0301 	bic.w	r3, r3, #1
 8005d86:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	3308      	adds	r3, #8
 8005d8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d90:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d98:	e841 2300 	strex	r3, r2, [r1]
 8005d9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d1e5      	bne.n	8005d70 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d118      	bne.n	8005dde <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	e853 3f00 	ldrex	r3, [r3]
 8005db8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	f023 0310 	bic.w	r3, r3, #16
 8005dc0:	647b      	str	r3, [r7, #68]	; 0x44
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dca:	61bb      	str	r3, [r7, #24]
 8005dcc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dce:	6979      	ldr	r1, [r7, #20]
 8005dd0:	69ba      	ldr	r2, [r7, #24]
 8005dd2:	e841 2300 	strex	r3, r2, [r1]
 8005dd6:	613b      	str	r3, [r7, #16]
   return(result);
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d1e6      	bne.n	8005dac <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2220      	movs	r2, #32
 8005de2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005df2:	bf00      	nop
 8005df4:	3754      	adds	r7, #84	; 0x54
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr

08005dfe <_ZdlPvj>:
 8005dfe:	f000 b800 	b.w	8005e02 <_ZdlPv>

08005e02 <_ZdlPv>:
 8005e02:	f000 b801 	b.w	8005e08 <free>
	...

08005e08 <free>:
 8005e08:	4b02      	ldr	r3, [pc, #8]	; (8005e14 <free+0xc>)
 8005e0a:	4601      	mov	r1, r0
 8005e0c:	6818      	ldr	r0, [r3, #0]
 8005e0e:	f000 b921 	b.w	8006054 <_free_r>
 8005e12:	bf00      	nop
 8005e14:	20000058 	.word	0x20000058

08005e18 <sbrk_aligned>:
 8005e18:	b570      	push	{r4, r5, r6, lr}
 8005e1a:	4e0e      	ldr	r6, [pc, #56]	; (8005e54 <sbrk_aligned+0x3c>)
 8005e1c:	460c      	mov	r4, r1
 8005e1e:	6831      	ldr	r1, [r6, #0]
 8005e20:	4605      	mov	r5, r0
 8005e22:	b911      	cbnz	r1, 8005e2a <sbrk_aligned+0x12>
 8005e24:	f000 f8cc 	bl	8005fc0 <_sbrk_r>
 8005e28:	6030      	str	r0, [r6, #0]
 8005e2a:	4621      	mov	r1, r4
 8005e2c:	4628      	mov	r0, r5
 8005e2e:	f000 f8c7 	bl	8005fc0 <_sbrk_r>
 8005e32:	1c43      	adds	r3, r0, #1
 8005e34:	d00a      	beq.n	8005e4c <sbrk_aligned+0x34>
 8005e36:	1cc4      	adds	r4, r0, #3
 8005e38:	f024 0403 	bic.w	r4, r4, #3
 8005e3c:	42a0      	cmp	r0, r4
 8005e3e:	d007      	beq.n	8005e50 <sbrk_aligned+0x38>
 8005e40:	1a21      	subs	r1, r4, r0
 8005e42:	4628      	mov	r0, r5
 8005e44:	f000 f8bc 	bl	8005fc0 <_sbrk_r>
 8005e48:	3001      	adds	r0, #1
 8005e4a:	d101      	bne.n	8005e50 <sbrk_aligned+0x38>
 8005e4c:	f04f 34ff 	mov.w	r4, #4294967295
 8005e50:	4620      	mov	r0, r4
 8005e52:	bd70      	pop	{r4, r5, r6, pc}
 8005e54:	2000030c 	.word	0x2000030c

08005e58 <_malloc_r>:
 8005e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e5c:	1ccd      	adds	r5, r1, #3
 8005e5e:	f025 0503 	bic.w	r5, r5, #3
 8005e62:	3508      	adds	r5, #8
 8005e64:	2d0c      	cmp	r5, #12
 8005e66:	bf38      	it	cc
 8005e68:	250c      	movcc	r5, #12
 8005e6a:	2d00      	cmp	r5, #0
 8005e6c:	4607      	mov	r7, r0
 8005e6e:	db01      	blt.n	8005e74 <_malloc_r+0x1c>
 8005e70:	42a9      	cmp	r1, r5
 8005e72:	d905      	bls.n	8005e80 <_malloc_r+0x28>
 8005e74:	230c      	movs	r3, #12
 8005e76:	603b      	str	r3, [r7, #0]
 8005e78:	2600      	movs	r6, #0
 8005e7a:	4630      	mov	r0, r6
 8005e7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e80:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005f54 <_malloc_r+0xfc>
 8005e84:	f000 f868 	bl	8005f58 <__malloc_lock>
 8005e88:	f8d8 3000 	ldr.w	r3, [r8]
 8005e8c:	461c      	mov	r4, r3
 8005e8e:	bb5c      	cbnz	r4, 8005ee8 <_malloc_r+0x90>
 8005e90:	4629      	mov	r1, r5
 8005e92:	4638      	mov	r0, r7
 8005e94:	f7ff ffc0 	bl	8005e18 <sbrk_aligned>
 8005e98:	1c43      	adds	r3, r0, #1
 8005e9a:	4604      	mov	r4, r0
 8005e9c:	d155      	bne.n	8005f4a <_malloc_r+0xf2>
 8005e9e:	f8d8 4000 	ldr.w	r4, [r8]
 8005ea2:	4626      	mov	r6, r4
 8005ea4:	2e00      	cmp	r6, #0
 8005ea6:	d145      	bne.n	8005f34 <_malloc_r+0xdc>
 8005ea8:	2c00      	cmp	r4, #0
 8005eaa:	d048      	beq.n	8005f3e <_malloc_r+0xe6>
 8005eac:	6823      	ldr	r3, [r4, #0]
 8005eae:	4631      	mov	r1, r6
 8005eb0:	4638      	mov	r0, r7
 8005eb2:	eb04 0903 	add.w	r9, r4, r3
 8005eb6:	f000 f883 	bl	8005fc0 <_sbrk_r>
 8005eba:	4581      	cmp	r9, r0
 8005ebc:	d13f      	bne.n	8005f3e <_malloc_r+0xe6>
 8005ebe:	6821      	ldr	r1, [r4, #0]
 8005ec0:	1a6d      	subs	r5, r5, r1
 8005ec2:	4629      	mov	r1, r5
 8005ec4:	4638      	mov	r0, r7
 8005ec6:	f7ff ffa7 	bl	8005e18 <sbrk_aligned>
 8005eca:	3001      	adds	r0, #1
 8005ecc:	d037      	beq.n	8005f3e <_malloc_r+0xe6>
 8005ece:	6823      	ldr	r3, [r4, #0]
 8005ed0:	442b      	add	r3, r5
 8005ed2:	6023      	str	r3, [r4, #0]
 8005ed4:	f8d8 3000 	ldr.w	r3, [r8]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d038      	beq.n	8005f4e <_malloc_r+0xf6>
 8005edc:	685a      	ldr	r2, [r3, #4]
 8005ede:	42a2      	cmp	r2, r4
 8005ee0:	d12b      	bne.n	8005f3a <_malloc_r+0xe2>
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	605a      	str	r2, [r3, #4]
 8005ee6:	e00f      	b.n	8005f08 <_malloc_r+0xb0>
 8005ee8:	6822      	ldr	r2, [r4, #0]
 8005eea:	1b52      	subs	r2, r2, r5
 8005eec:	d41f      	bmi.n	8005f2e <_malloc_r+0xd6>
 8005eee:	2a0b      	cmp	r2, #11
 8005ef0:	d917      	bls.n	8005f22 <_malloc_r+0xca>
 8005ef2:	1961      	adds	r1, r4, r5
 8005ef4:	42a3      	cmp	r3, r4
 8005ef6:	6025      	str	r5, [r4, #0]
 8005ef8:	bf18      	it	ne
 8005efa:	6059      	strne	r1, [r3, #4]
 8005efc:	6863      	ldr	r3, [r4, #4]
 8005efe:	bf08      	it	eq
 8005f00:	f8c8 1000 	streq.w	r1, [r8]
 8005f04:	5162      	str	r2, [r4, r5]
 8005f06:	604b      	str	r3, [r1, #4]
 8005f08:	4638      	mov	r0, r7
 8005f0a:	f104 060b 	add.w	r6, r4, #11
 8005f0e:	f000 f829 	bl	8005f64 <__malloc_unlock>
 8005f12:	f026 0607 	bic.w	r6, r6, #7
 8005f16:	1d23      	adds	r3, r4, #4
 8005f18:	1af2      	subs	r2, r6, r3
 8005f1a:	d0ae      	beq.n	8005e7a <_malloc_r+0x22>
 8005f1c:	1b9b      	subs	r3, r3, r6
 8005f1e:	50a3      	str	r3, [r4, r2]
 8005f20:	e7ab      	b.n	8005e7a <_malloc_r+0x22>
 8005f22:	42a3      	cmp	r3, r4
 8005f24:	6862      	ldr	r2, [r4, #4]
 8005f26:	d1dd      	bne.n	8005ee4 <_malloc_r+0x8c>
 8005f28:	f8c8 2000 	str.w	r2, [r8]
 8005f2c:	e7ec      	b.n	8005f08 <_malloc_r+0xb0>
 8005f2e:	4623      	mov	r3, r4
 8005f30:	6864      	ldr	r4, [r4, #4]
 8005f32:	e7ac      	b.n	8005e8e <_malloc_r+0x36>
 8005f34:	4634      	mov	r4, r6
 8005f36:	6876      	ldr	r6, [r6, #4]
 8005f38:	e7b4      	b.n	8005ea4 <_malloc_r+0x4c>
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	e7cc      	b.n	8005ed8 <_malloc_r+0x80>
 8005f3e:	230c      	movs	r3, #12
 8005f40:	603b      	str	r3, [r7, #0]
 8005f42:	4638      	mov	r0, r7
 8005f44:	f000 f80e 	bl	8005f64 <__malloc_unlock>
 8005f48:	e797      	b.n	8005e7a <_malloc_r+0x22>
 8005f4a:	6025      	str	r5, [r4, #0]
 8005f4c:	e7dc      	b.n	8005f08 <_malloc_r+0xb0>
 8005f4e:	605b      	str	r3, [r3, #4]
 8005f50:	deff      	udf	#255	; 0xff
 8005f52:	bf00      	nop
 8005f54:	20000308 	.word	0x20000308

08005f58 <__malloc_lock>:
 8005f58:	4801      	ldr	r0, [pc, #4]	; (8005f60 <__malloc_lock+0x8>)
 8005f5a:	f000 b86b 	b.w	8006034 <__retarget_lock_acquire_recursive>
 8005f5e:	bf00      	nop
 8005f60:	2000044c 	.word	0x2000044c

08005f64 <__malloc_unlock>:
 8005f64:	4801      	ldr	r0, [pc, #4]	; (8005f6c <__malloc_unlock+0x8>)
 8005f66:	f000 b866 	b.w	8006036 <__retarget_lock_release_recursive>
 8005f6a:	bf00      	nop
 8005f6c:	2000044c 	.word	0x2000044c

08005f70 <siprintf>:
 8005f70:	b40e      	push	{r1, r2, r3}
 8005f72:	b500      	push	{lr}
 8005f74:	b09c      	sub	sp, #112	; 0x70
 8005f76:	ab1d      	add	r3, sp, #116	; 0x74
 8005f78:	9002      	str	r0, [sp, #8]
 8005f7a:	9006      	str	r0, [sp, #24]
 8005f7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005f80:	4809      	ldr	r0, [pc, #36]	; (8005fa8 <siprintf+0x38>)
 8005f82:	9107      	str	r1, [sp, #28]
 8005f84:	9104      	str	r1, [sp, #16]
 8005f86:	4909      	ldr	r1, [pc, #36]	; (8005fac <siprintf+0x3c>)
 8005f88:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f8c:	9105      	str	r1, [sp, #20]
 8005f8e:	6800      	ldr	r0, [r0, #0]
 8005f90:	9301      	str	r3, [sp, #4]
 8005f92:	a902      	add	r1, sp, #8
 8005f94:	f000 f904 	bl	80061a0 <_svfiprintf_r>
 8005f98:	9b02      	ldr	r3, [sp, #8]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	701a      	strb	r2, [r3, #0]
 8005f9e:	b01c      	add	sp, #112	; 0x70
 8005fa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005fa4:	b003      	add	sp, #12
 8005fa6:	4770      	bx	lr
 8005fa8:	20000058 	.word	0x20000058
 8005fac:	ffff0208 	.word	0xffff0208

08005fb0 <memset>:
 8005fb0:	4402      	add	r2, r0
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d100      	bne.n	8005fba <memset+0xa>
 8005fb8:	4770      	bx	lr
 8005fba:	f803 1b01 	strb.w	r1, [r3], #1
 8005fbe:	e7f9      	b.n	8005fb4 <memset+0x4>

08005fc0 <_sbrk_r>:
 8005fc0:	b538      	push	{r3, r4, r5, lr}
 8005fc2:	4d06      	ldr	r5, [pc, #24]	; (8005fdc <_sbrk_r+0x1c>)
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	4604      	mov	r4, r0
 8005fc8:	4608      	mov	r0, r1
 8005fca:	602b      	str	r3, [r5, #0]
 8005fcc:	f7fc fb7a 	bl	80026c4 <_sbrk>
 8005fd0:	1c43      	adds	r3, r0, #1
 8005fd2:	d102      	bne.n	8005fda <_sbrk_r+0x1a>
 8005fd4:	682b      	ldr	r3, [r5, #0]
 8005fd6:	b103      	cbz	r3, 8005fda <_sbrk_r+0x1a>
 8005fd8:	6023      	str	r3, [r4, #0]
 8005fda:	bd38      	pop	{r3, r4, r5, pc}
 8005fdc:	20000448 	.word	0x20000448

08005fe0 <__errno>:
 8005fe0:	4b01      	ldr	r3, [pc, #4]	; (8005fe8 <__errno+0x8>)
 8005fe2:	6818      	ldr	r0, [r3, #0]
 8005fe4:	4770      	bx	lr
 8005fe6:	bf00      	nop
 8005fe8:	20000058 	.word	0x20000058

08005fec <__libc_init_array>:
 8005fec:	b570      	push	{r4, r5, r6, lr}
 8005fee:	4d0d      	ldr	r5, [pc, #52]	; (8006024 <__libc_init_array+0x38>)
 8005ff0:	4c0d      	ldr	r4, [pc, #52]	; (8006028 <__libc_init_array+0x3c>)
 8005ff2:	1b64      	subs	r4, r4, r5
 8005ff4:	10a4      	asrs	r4, r4, #2
 8005ff6:	2600      	movs	r6, #0
 8005ff8:	42a6      	cmp	r6, r4
 8005ffa:	d109      	bne.n	8006010 <__libc_init_array+0x24>
 8005ffc:	4d0b      	ldr	r5, [pc, #44]	; (800602c <__libc_init_array+0x40>)
 8005ffe:	4c0c      	ldr	r4, [pc, #48]	; (8006030 <__libc_init_array+0x44>)
 8006000:	f000 fbae 	bl	8006760 <_init>
 8006004:	1b64      	subs	r4, r4, r5
 8006006:	10a4      	asrs	r4, r4, #2
 8006008:	2600      	movs	r6, #0
 800600a:	42a6      	cmp	r6, r4
 800600c:	d105      	bne.n	800601a <__libc_init_array+0x2e>
 800600e:	bd70      	pop	{r4, r5, r6, pc}
 8006010:	f855 3b04 	ldr.w	r3, [r5], #4
 8006014:	4798      	blx	r3
 8006016:	3601      	adds	r6, #1
 8006018:	e7ee      	b.n	8005ff8 <__libc_init_array+0xc>
 800601a:	f855 3b04 	ldr.w	r3, [r5], #4
 800601e:	4798      	blx	r3
 8006020:	3601      	adds	r6, #1
 8006022:	e7f2      	b.n	800600a <__libc_init_array+0x1e>
 8006024:	0800694c 	.word	0x0800694c
 8006028:	0800694c 	.word	0x0800694c
 800602c:	0800694c 	.word	0x0800694c
 8006030:	08006954 	.word	0x08006954

08006034 <__retarget_lock_acquire_recursive>:
 8006034:	4770      	bx	lr

08006036 <__retarget_lock_release_recursive>:
 8006036:	4770      	bx	lr

08006038 <memcpy>:
 8006038:	440a      	add	r2, r1
 800603a:	4291      	cmp	r1, r2
 800603c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006040:	d100      	bne.n	8006044 <memcpy+0xc>
 8006042:	4770      	bx	lr
 8006044:	b510      	push	{r4, lr}
 8006046:	f811 4b01 	ldrb.w	r4, [r1], #1
 800604a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800604e:	4291      	cmp	r1, r2
 8006050:	d1f9      	bne.n	8006046 <memcpy+0xe>
 8006052:	bd10      	pop	{r4, pc}

08006054 <_free_r>:
 8006054:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006056:	2900      	cmp	r1, #0
 8006058:	d044      	beq.n	80060e4 <_free_r+0x90>
 800605a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800605e:	9001      	str	r0, [sp, #4]
 8006060:	2b00      	cmp	r3, #0
 8006062:	f1a1 0404 	sub.w	r4, r1, #4
 8006066:	bfb8      	it	lt
 8006068:	18e4      	addlt	r4, r4, r3
 800606a:	f7ff ff75 	bl	8005f58 <__malloc_lock>
 800606e:	4a1e      	ldr	r2, [pc, #120]	; (80060e8 <_free_r+0x94>)
 8006070:	9801      	ldr	r0, [sp, #4]
 8006072:	6813      	ldr	r3, [r2, #0]
 8006074:	b933      	cbnz	r3, 8006084 <_free_r+0x30>
 8006076:	6063      	str	r3, [r4, #4]
 8006078:	6014      	str	r4, [r2, #0]
 800607a:	b003      	add	sp, #12
 800607c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006080:	f7ff bf70 	b.w	8005f64 <__malloc_unlock>
 8006084:	42a3      	cmp	r3, r4
 8006086:	d908      	bls.n	800609a <_free_r+0x46>
 8006088:	6825      	ldr	r5, [r4, #0]
 800608a:	1961      	adds	r1, r4, r5
 800608c:	428b      	cmp	r3, r1
 800608e:	bf01      	itttt	eq
 8006090:	6819      	ldreq	r1, [r3, #0]
 8006092:	685b      	ldreq	r3, [r3, #4]
 8006094:	1949      	addeq	r1, r1, r5
 8006096:	6021      	streq	r1, [r4, #0]
 8006098:	e7ed      	b.n	8006076 <_free_r+0x22>
 800609a:	461a      	mov	r2, r3
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	b10b      	cbz	r3, 80060a4 <_free_r+0x50>
 80060a0:	42a3      	cmp	r3, r4
 80060a2:	d9fa      	bls.n	800609a <_free_r+0x46>
 80060a4:	6811      	ldr	r1, [r2, #0]
 80060a6:	1855      	adds	r5, r2, r1
 80060a8:	42a5      	cmp	r5, r4
 80060aa:	d10b      	bne.n	80060c4 <_free_r+0x70>
 80060ac:	6824      	ldr	r4, [r4, #0]
 80060ae:	4421      	add	r1, r4
 80060b0:	1854      	adds	r4, r2, r1
 80060b2:	42a3      	cmp	r3, r4
 80060b4:	6011      	str	r1, [r2, #0]
 80060b6:	d1e0      	bne.n	800607a <_free_r+0x26>
 80060b8:	681c      	ldr	r4, [r3, #0]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	6053      	str	r3, [r2, #4]
 80060be:	440c      	add	r4, r1
 80060c0:	6014      	str	r4, [r2, #0]
 80060c2:	e7da      	b.n	800607a <_free_r+0x26>
 80060c4:	d902      	bls.n	80060cc <_free_r+0x78>
 80060c6:	230c      	movs	r3, #12
 80060c8:	6003      	str	r3, [r0, #0]
 80060ca:	e7d6      	b.n	800607a <_free_r+0x26>
 80060cc:	6825      	ldr	r5, [r4, #0]
 80060ce:	1961      	adds	r1, r4, r5
 80060d0:	428b      	cmp	r3, r1
 80060d2:	bf04      	itt	eq
 80060d4:	6819      	ldreq	r1, [r3, #0]
 80060d6:	685b      	ldreq	r3, [r3, #4]
 80060d8:	6063      	str	r3, [r4, #4]
 80060da:	bf04      	itt	eq
 80060dc:	1949      	addeq	r1, r1, r5
 80060de:	6021      	streq	r1, [r4, #0]
 80060e0:	6054      	str	r4, [r2, #4]
 80060e2:	e7ca      	b.n	800607a <_free_r+0x26>
 80060e4:	b003      	add	sp, #12
 80060e6:	bd30      	pop	{r4, r5, pc}
 80060e8:	20000308 	.word	0x20000308

080060ec <__ssputs_r>:
 80060ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060f0:	688e      	ldr	r6, [r1, #8]
 80060f2:	461f      	mov	r7, r3
 80060f4:	42be      	cmp	r6, r7
 80060f6:	680b      	ldr	r3, [r1, #0]
 80060f8:	4682      	mov	sl, r0
 80060fa:	460c      	mov	r4, r1
 80060fc:	4690      	mov	r8, r2
 80060fe:	d82c      	bhi.n	800615a <__ssputs_r+0x6e>
 8006100:	898a      	ldrh	r2, [r1, #12]
 8006102:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006106:	d026      	beq.n	8006156 <__ssputs_r+0x6a>
 8006108:	6965      	ldr	r5, [r4, #20]
 800610a:	6909      	ldr	r1, [r1, #16]
 800610c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006110:	eba3 0901 	sub.w	r9, r3, r1
 8006114:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006118:	1c7b      	adds	r3, r7, #1
 800611a:	444b      	add	r3, r9
 800611c:	106d      	asrs	r5, r5, #1
 800611e:	429d      	cmp	r5, r3
 8006120:	bf38      	it	cc
 8006122:	461d      	movcc	r5, r3
 8006124:	0553      	lsls	r3, r2, #21
 8006126:	d527      	bpl.n	8006178 <__ssputs_r+0x8c>
 8006128:	4629      	mov	r1, r5
 800612a:	f7ff fe95 	bl	8005e58 <_malloc_r>
 800612e:	4606      	mov	r6, r0
 8006130:	b360      	cbz	r0, 800618c <__ssputs_r+0xa0>
 8006132:	6921      	ldr	r1, [r4, #16]
 8006134:	464a      	mov	r2, r9
 8006136:	f7ff ff7f 	bl	8006038 <memcpy>
 800613a:	89a3      	ldrh	r3, [r4, #12]
 800613c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006144:	81a3      	strh	r3, [r4, #12]
 8006146:	6126      	str	r6, [r4, #16]
 8006148:	6165      	str	r5, [r4, #20]
 800614a:	444e      	add	r6, r9
 800614c:	eba5 0509 	sub.w	r5, r5, r9
 8006150:	6026      	str	r6, [r4, #0]
 8006152:	60a5      	str	r5, [r4, #8]
 8006154:	463e      	mov	r6, r7
 8006156:	42be      	cmp	r6, r7
 8006158:	d900      	bls.n	800615c <__ssputs_r+0x70>
 800615a:	463e      	mov	r6, r7
 800615c:	6820      	ldr	r0, [r4, #0]
 800615e:	4632      	mov	r2, r6
 8006160:	4641      	mov	r1, r8
 8006162:	f000 faab 	bl	80066bc <memmove>
 8006166:	68a3      	ldr	r3, [r4, #8]
 8006168:	1b9b      	subs	r3, r3, r6
 800616a:	60a3      	str	r3, [r4, #8]
 800616c:	6823      	ldr	r3, [r4, #0]
 800616e:	4433      	add	r3, r6
 8006170:	6023      	str	r3, [r4, #0]
 8006172:	2000      	movs	r0, #0
 8006174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006178:	462a      	mov	r2, r5
 800617a:	f000 fab9 	bl	80066f0 <_realloc_r>
 800617e:	4606      	mov	r6, r0
 8006180:	2800      	cmp	r0, #0
 8006182:	d1e0      	bne.n	8006146 <__ssputs_r+0x5a>
 8006184:	6921      	ldr	r1, [r4, #16]
 8006186:	4650      	mov	r0, sl
 8006188:	f7ff ff64 	bl	8006054 <_free_r>
 800618c:	230c      	movs	r3, #12
 800618e:	f8ca 3000 	str.w	r3, [sl]
 8006192:	89a3      	ldrh	r3, [r4, #12]
 8006194:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006198:	81a3      	strh	r3, [r4, #12]
 800619a:	f04f 30ff 	mov.w	r0, #4294967295
 800619e:	e7e9      	b.n	8006174 <__ssputs_r+0x88>

080061a0 <_svfiprintf_r>:
 80061a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061a4:	4698      	mov	r8, r3
 80061a6:	898b      	ldrh	r3, [r1, #12]
 80061a8:	061b      	lsls	r3, r3, #24
 80061aa:	b09d      	sub	sp, #116	; 0x74
 80061ac:	4607      	mov	r7, r0
 80061ae:	460d      	mov	r5, r1
 80061b0:	4614      	mov	r4, r2
 80061b2:	d50e      	bpl.n	80061d2 <_svfiprintf_r+0x32>
 80061b4:	690b      	ldr	r3, [r1, #16]
 80061b6:	b963      	cbnz	r3, 80061d2 <_svfiprintf_r+0x32>
 80061b8:	2140      	movs	r1, #64	; 0x40
 80061ba:	f7ff fe4d 	bl	8005e58 <_malloc_r>
 80061be:	6028      	str	r0, [r5, #0]
 80061c0:	6128      	str	r0, [r5, #16]
 80061c2:	b920      	cbnz	r0, 80061ce <_svfiprintf_r+0x2e>
 80061c4:	230c      	movs	r3, #12
 80061c6:	603b      	str	r3, [r7, #0]
 80061c8:	f04f 30ff 	mov.w	r0, #4294967295
 80061cc:	e0d0      	b.n	8006370 <_svfiprintf_r+0x1d0>
 80061ce:	2340      	movs	r3, #64	; 0x40
 80061d0:	616b      	str	r3, [r5, #20]
 80061d2:	2300      	movs	r3, #0
 80061d4:	9309      	str	r3, [sp, #36]	; 0x24
 80061d6:	2320      	movs	r3, #32
 80061d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80061dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80061e0:	2330      	movs	r3, #48	; 0x30
 80061e2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006388 <_svfiprintf_r+0x1e8>
 80061e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80061ea:	f04f 0901 	mov.w	r9, #1
 80061ee:	4623      	mov	r3, r4
 80061f0:	469a      	mov	sl, r3
 80061f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061f6:	b10a      	cbz	r2, 80061fc <_svfiprintf_r+0x5c>
 80061f8:	2a25      	cmp	r2, #37	; 0x25
 80061fa:	d1f9      	bne.n	80061f0 <_svfiprintf_r+0x50>
 80061fc:	ebba 0b04 	subs.w	fp, sl, r4
 8006200:	d00b      	beq.n	800621a <_svfiprintf_r+0x7a>
 8006202:	465b      	mov	r3, fp
 8006204:	4622      	mov	r2, r4
 8006206:	4629      	mov	r1, r5
 8006208:	4638      	mov	r0, r7
 800620a:	f7ff ff6f 	bl	80060ec <__ssputs_r>
 800620e:	3001      	adds	r0, #1
 8006210:	f000 80a9 	beq.w	8006366 <_svfiprintf_r+0x1c6>
 8006214:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006216:	445a      	add	r2, fp
 8006218:	9209      	str	r2, [sp, #36]	; 0x24
 800621a:	f89a 3000 	ldrb.w	r3, [sl]
 800621e:	2b00      	cmp	r3, #0
 8006220:	f000 80a1 	beq.w	8006366 <_svfiprintf_r+0x1c6>
 8006224:	2300      	movs	r3, #0
 8006226:	f04f 32ff 	mov.w	r2, #4294967295
 800622a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800622e:	f10a 0a01 	add.w	sl, sl, #1
 8006232:	9304      	str	r3, [sp, #16]
 8006234:	9307      	str	r3, [sp, #28]
 8006236:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800623a:	931a      	str	r3, [sp, #104]	; 0x68
 800623c:	4654      	mov	r4, sl
 800623e:	2205      	movs	r2, #5
 8006240:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006244:	4850      	ldr	r0, [pc, #320]	; (8006388 <_svfiprintf_r+0x1e8>)
 8006246:	f7f9 ffc3 	bl	80001d0 <memchr>
 800624a:	9a04      	ldr	r2, [sp, #16]
 800624c:	b9d8      	cbnz	r0, 8006286 <_svfiprintf_r+0xe6>
 800624e:	06d0      	lsls	r0, r2, #27
 8006250:	bf44      	itt	mi
 8006252:	2320      	movmi	r3, #32
 8006254:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006258:	0711      	lsls	r1, r2, #28
 800625a:	bf44      	itt	mi
 800625c:	232b      	movmi	r3, #43	; 0x2b
 800625e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006262:	f89a 3000 	ldrb.w	r3, [sl]
 8006266:	2b2a      	cmp	r3, #42	; 0x2a
 8006268:	d015      	beq.n	8006296 <_svfiprintf_r+0xf6>
 800626a:	9a07      	ldr	r2, [sp, #28]
 800626c:	4654      	mov	r4, sl
 800626e:	2000      	movs	r0, #0
 8006270:	f04f 0c0a 	mov.w	ip, #10
 8006274:	4621      	mov	r1, r4
 8006276:	f811 3b01 	ldrb.w	r3, [r1], #1
 800627a:	3b30      	subs	r3, #48	; 0x30
 800627c:	2b09      	cmp	r3, #9
 800627e:	d94d      	bls.n	800631c <_svfiprintf_r+0x17c>
 8006280:	b1b0      	cbz	r0, 80062b0 <_svfiprintf_r+0x110>
 8006282:	9207      	str	r2, [sp, #28]
 8006284:	e014      	b.n	80062b0 <_svfiprintf_r+0x110>
 8006286:	eba0 0308 	sub.w	r3, r0, r8
 800628a:	fa09 f303 	lsl.w	r3, r9, r3
 800628e:	4313      	orrs	r3, r2
 8006290:	9304      	str	r3, [sp, #16]
 8006292:	46a2      	mov	sl, r4
 8006294:	e7d2      	b.n	800623c <_svfiprintf_r+0x9c>
 8006296:	9b03      	ldr	r3, [sp, #12]
 8006298:	1d19      	adds	r1, r3, #4
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	9103      	str	r1, [sp, #12]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	bfbb      	ittet	lt
 80062a2:	425b      	neglt	r3, r3
 80062a4:	f042 0202 	orrlt.w	r2, r2, #2
 80062a8:	9307      	strge	r3, [sp, #28]
 80062aa:	9307      	strlt	r3, [sp, #28]
 80062ac:	bfb8      	it	lt
 80062ae:	9204      	strlt	r2, [sp, #16]
 80062b0:	7823      	ldrb	r3, [r4, #0]
 80062b2:	2b2e      	cmp	r3, #46	; 0x2e
 80062b4:	d10c      	bne.n	80062d0 <_svfiprintf_r+0x130>
 80062b6:	7863      	ldrb	r3, [r4, #1]
 80062b8:	2b2a      	cmp	r3, #42	; 0x2a
 80062ba:	d134      	bne.n	8006326 <_svfiprintf_r+0x186>
 80062bc:	9b03      	ldr	r3, [sp, #12]
 80062be:	1d1a      	adds	r2, r3, #4
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	9203      	str	r2, [sp, #12]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	bfb8      	it	lt
 80062c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80062cc:	3402      	adds	r4, #2
 80062ce:	9305      	str	r3, [sp, #20]
 80062d0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006398 <_svfiprintf_r+0x1f8>
 80062d4:	7821      	ldrb	r1, [r4, #0]
 80062d6:	2203      	movs	r2, #3
 80062d8:	4650      	mov	r0, sl
 80062da:	f7f9 ff79 	bl	80001d0 <memchr>
 80062de:	b138      	cbz	r0, 80062f0 <_svfiprintf_r+0x150>
 80062e0:	9b04      	ldr	r3, [sp, #16]
 80062e2:	eba0 000a 	sub.w	r0, r0, sl
 80062e6:	2240      	movs	r2, #64	; 0x40
 80062e8:	4082      	lsls	r2, r0
 80062ea:	4313      	orrs	r3, r2
 80062ec:	3401      	adds	r4, #1
 80062ee:	9304      	str	r3, [sp, #16]
 80062f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062f4:	4825      	ldr	r0, [pc, #148]	; (800638c <_svfiprintf_r+0x1ec>)
 80062f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80062fa:	2206      	movs	r2, #6
 80062fc:	f7f9 ff68 	bl	80001d0 <memchr>
 8006300:	2800      	cmp	r0, #0
 8006302:	d038      	beq.n	8006376 <_svfiprintf_r+0x1d6>
 8006304:	4b22      	ldr	r3, [pc, #136]	; (8006390 <_svfiprintf_r+0x1f0>)
 8006306:	bb1b      	cbnz	r3, 8006350 <_svfiprintf_r+0x1b0>
 8006308:	9b03      	ldr	r3, [sp, #12]
 800630a:	3307      	adds	r3, #7
 800630c:	f023 0307 	bic.w	r3, r3, #7
 8006310:	3308      	adds	r3, #8
 8006312:	9303      	str	r3, [sp, #12]
 8006314:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006316:	4433      	add	r3, r6
 8006318:	9309      	str	r3, [sp, #36]	; 0x24
 800631a:	e768      	b.n	80061ee <_svfiprintf_r+0x4e>
 800631c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006320:	460c      	mov	r4, r1
 8006322:	2001      	movs	r0, #1
 8006324:	e7a6      	b.n	8006274 <_svfiprintf_r+0xd4>
 8006326:	2300      	movs	r3, #0
 8006328:	3401      	adds	r4, #1
 800632a:	9305      	str	r3, [sp, #20]
 800632c:	4619      	mov	r1, r3
 800632e:	f04f 0c0a 	mov.w	ip, #10
 8006332:	4620      	mov	r0, r4
 8006334:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006338:	3a30      	subs	r2, #48	; 0x30
 800633a:	2a09      	cmp	r2, #9
 800633c:	d903      	bls.n	8006346 <_svfiprintf_r+0x1a6>
 800633e:	2b00      	cmp	r3, #0
 8006340:	d0c6      	beq.n	80062d0 <_svfiprintf_r+0x130>
 8006342:	9105      	str	r1, [sp, #20]
 8006344:	e7c4      	b.n	80062d0 <_svfiprintf_r+0x130>
 8006346:	fb0c 2101 	mla	r1, ip, r1, r2
 800634a:	4604      	mov	r4, r0
 800634c:	2301      	movs	r3, #1
 800634e:	e7f0      	b.n	8006332 <_svfiprintf_r+0x192>
 8006350:	ab03      	add	r3, sp, #12
 8006352:	9300      	str	r3, [sp, #0]
 8006354:	462a      	mov	r2, r5
 8006356:	4b0f      	ldr	r3, [pc, #60]	; (8006394 <_svfiprintf_r+0x1f4>)
 8006358:	a904      	add	r1, sp, #16
 800635a:	4638      	mov	r0, r7
 800635c:	f3af 8000 	nop.w
 8006360:	1c42      	adds	r2, r0, #1
 8006362:	4606      	mov	r6, r0
 8006364:	d1d6      	bne.n	8006314 <_svfiprintf_r+0x174>
 8006366:	89ab      	ldrh	r3, [r5, #12]
 8006368:	065b      	lsls	r3, r3, #25
 800636a:	f53f af2d 	bmi.w	80061c8 <_svfiprintf_r+0x28>
 800636e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006370:	b01d      	add	sp, #116	; 0x74
 8006372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006376:	ab03      	add	r3, sp, #12
 8006378:	9300      	str	r3, [sp, #0]
 800637a:	462a      	mov	r2, r5
 800637c:	4b05      	ldr	r3, [pc, #20]	; (8006394 <_svfiprintf_r+0x1f4>)
 800637e:	a904      	add	r1, sp, #16
 8006380:	4638      	mov	r0, r7
 8006382:	f000 f879 	bl	8006478 <_printf_i>
 8006386:	e7eb      	b.n	8006360 <_svfiprintf_r+0x1c0>
 8006388:	08006910 	.word	0x08006910
 800638c:	0800691a 	.word	0x0800691a
 8006390:	00000000 	.word	0x00000000
 8006394:	080060ed 	.word	0x080060ed
 8006398:	08006916 	.word	0x08006916

0800639c <_printf_common>:
 800639c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063a0:	4616      	mov	r6, r2
 80063a2:	4699      	mov	r9, r3
 80063a4:	688a      	ldr	r2, [r1, #8]
 80063a6:	690b      	ldr	r3, [r1, #16]
 80063a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80063ac:	4293      	cmp	r3, r2
 80063ae:	bfb8      	it	lt
 80063b0:	4613      	movlt	r3, r2
 80063b2:	6033      	str	r3, [r6, #0]
 80063b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80063b8:	4607      	mov	r7, r0
 80063ba:	460c      	mov	r4, r1
 80063bc:	b10a      	cbz	r2, 80063c2 <_printf_common+0x26>
 80063be:	3301      	adds	r3, #1
 80063c0:	6033      	str	r3, [r6, #0]
 80063c2:	6823      	ldr	r3, [r4, #0]
 80063c4:	0699      	lsls	r1, r3, #26
 80063c6:	bf42      	ittt	mi
 80063c8:	6833      	ldrmi	r3, [r6, #0]
 80063ca:	3302      	addmi	r3, #2
 80063cc:	6033      	strmi	r3, [r6, #0]
 80063ce:	6825      	ldr	r5, [r4, #0]
 80063d0:	f015 0506 	ands.w	r5, r5, #6
 80063d4:	d106      	bne.n	80063e4 <_printf_common+0x48>
 80063d6:	f104 0a19 	add.w	sl, r4, #25
 80063da:	68e3      	ldr	r3, [r4, #12]
 80063dc:	6832      	ldr	r2, [r6, #0]
 80063de:	1a9b      	subs	r3, r3, r2
 80063e0:	42ab      	cmp	r3, r5
 80063e2:	dc26      	bgt.n	8006432 <_printf_common+0x96>
 80063e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80063e8:	1e13      	subs	r3, r2, #0
 80063ea:	6822      	ldr	r2, [r4, #0]
 80063ec:	bf18      	it	ne
 80063ee:	2301      	movne	r3, #1
 80063f0:	0692      	lsls	r2, r2, #26
 80063f2:	d42b      	bmi.n	800644c <_printf_common+0xb0>
 80063f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063f8:	4649      	mov	r1, r9
 80063fa:	4638      	mov	r0, r7
 80063fc:	47c0      	blx	r8
 80063fe:	3001      	adds	r0, #1
 8006400:	d01e      	beq.n	8006440 <_printf_common+0xa4>
 8006402:	6823      	ldr	r3, [r4, #0]
 8006404:	6922      	ldr	r2, [r4, #16]
 8006406:	f003 0306 	and.w	r3, r3, #6
 800640a:	2b04      	cmp	r3, #4
 800640c:	bf02      	ittt	eq
 800640e:	68e5      	ldreq	r5, [r4, #12]
 8006410:	6833      	ldreq	r3, [r6, #0]
 8006412:	1aed      	subeq	r5, r5, r3
 8006414:	68a3      	ldr	r3, [r4, #8]
 8006416:	bf0c      	ite	eq
 8006418:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800641c:	2500      	movne	r5, #0
 800641e:	4293      	cmp	r3, r2
 8006420:	bfc4      	itt	gt
 8006422:	1a9b      	subgt	r3, r3, r2
 8006424:	18ed      	addgt	r5, r5, r3
 8006426:	2600      	movs	r6, #0
 8006428:	341a      	adds	r4, #26
 800642a:	42b5      	cmp	r5, r6
 800642c:	d11a      	bne.n	8006464 <_printf_common+0xc8>
 800642e:	2000      	movs	r0, #0
 8006430:	e008      	b.n	8006444 <_printf_common+0xa8>
 8006432:	2301      	movs	r3, #1
 8006434:	4652      	mov	r2, sl
 8006436:	4649      	mov	r1, r9
 8006438:	4638      	mov	r0, r7
 800643a:	47c0      	blx	r8
 800643c:	3001      	adds	r0, #1
 800643e:	d103      	bne.n	8006448 <_printf_common+0xac>
 8006440:	f04f 30ff 	mov.w	r0, #4294967295
 8006444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006448:	3501      	adds	r5, #1
 800644a:	e7c6      	b.n	80063da <_printf_common+0x3e>
 800644c:	18e1      	adds	r1, r4, r3
 800644e:	1c5a      	adds	r2, r3, #1
 8006450:	2030      	movs	r0, #48	; 0x30
 8006452:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006456:	4422      	add	r2, r4
 8006458:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800645c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006460:	3302      	adds	r3, #2
 8006462:	e7c7      	b.n	80063f4 <_printf_common+0x58>
 8006464:	2301      	movs	r3, #1
 8006466:	4622      	mov	r2, r4
 8006468:	4649      	mov	r1, r9
 800646a:	4638      	mov	r0, r7
 800646c:	47c0      	blx	r8
 800646e:	3001      	adds	r0, #1
 8006470:	d0e6      	beq.n	8006440 <_printf_common+0xa4>
 8006472:	3601      	adds	r6, #1
 8006474:	e7d9      	b.n	800642a <_printf_common+0x8e>
	...

08006478 <_printf_i>:
 8006478:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800647c:	7e0f      	ldrb	r7, [r1, #24]
 800647e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006480:	2f78      	cmp	r7, #120	; 0x78
 8006482:	4691      	mov	r9, r2
 8006484:	4680      	mov	r8, r0
 8006486:	460c      	mov	r4, r1
 8006488:	469a      	mov	sl, r3
 800648a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800648e:	d807      	bhi.n	80064a0 <_printf_i+0x28>
 8006490:	2f62      	cmp	r7, #98	; 0x62
 8006492:	d80a      	bhi.n	80064aa <_printf_i+0x32>
 8006494:	2f00      	cmp	r7, #0
 8006496:	f000 80d4 	beq.w	8006642 <_printf_i+0x1ca>
 800649a:	2f58      	cmp	r7, #88	; 0x58
 800649c:	f000 80c0 	beq.w	8006620 <_printf_i+0x1a8>
 80064a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80064a8:	e03a      	b.n	8006520 <_printf_i+0xa8>
 80064aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80064ae:	2b15      	cmp	r3, #21
 80064b0:	d8f6      	bhi.n	80064a0 <_printf_i+0x28>
 80064b2:	a101      	add	r1, pc, #4	; (adr r1, 80064b8 <_printf_i+0x40>)
 80064b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064b8:	08006511 	.word	0x08006511
 80064bc:	08006525 	.word	0x08006525
 80064c0:	080064a1 	.word	0x080064a1
 80064c4:	080064a1 	.word	0x080064a1
 80064c8:	080064a1 	.word	0x080064a1
 80064cc:	080064a1 	.word	0x080064a1
 80064d0:	08006525 	.word	0x08006525
 80064d4:	080064a1 	.word	0x080064a1
 80064d8:	080064a1 	.word	0x080064a1
 80064dc:	080064a1 	.word	0x080064a1
 80064e0:	080064a1 	.word	0x080064a1
 80064e4:	08006629 	.word	0x08006629
 80064e8:	08006551 	.word	0x08006551
 80064ec:	080065e3 	.word	0x080065e3
 80064f0:	080064a1 	.word	0x080064a1
 80064f4:	080064a1 	.word	0x080064a1
 80064f8:	0800664b 	.word	0x0800664b
 80064fc:	080064a1 	.word	0x080064a1
 8006500:	08006551 	.word	0x08006551
 8006504:	080064a1 	.word	0x080064a1
 8006508:	080064a1 	.word	0x080064a1
 800650c:	080065eb 	.word	0x080065eb
 8006510:	682b      	ldr	r3, [r5, #0]
 8006512:	1d1a      	adds	r2, r3, #4
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	602a      	str	r2, [r5, #0]
 8006518:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800651c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006520:	2301      	movs	r3, #1
 8006522:	e09f      	b.n	8006664 <_printf_i+0x1ec>
 8006524:	6820      	ldr	r0, [r4, #0]
 8006526:	682b      	ldr	r3, [r5, #0]
 8006528:	0607      	lsls	r7, r0, #24
 800652a:	f103 0104 	add.w	r1, r3, #4
 800652e:	6029      	str	r1, [r5, #0]
 8006530:	d501      	bpl.n	8006536 <_printf_i+0xbe>
 8006532:	681e      	ldr	r6, [r3, #0]
 8006534:	e003      	b.n	800653e <_printf_i+0xc6>
 8006536:	0646      	lsls	r6, r0, #25
 8006538:	d5fb      	bpl.n	8006532 <_printf_i+0xba>
 800653a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800653e:	2e00      	cmp	r6, #0
 8006540:	da03      	bge.n	800654a <_printf_i+0xd2>
 8006542:	232d      	movs	r3, #45	; 0x2d
 8006544:	4276      	negs	r6, r6
 8006546:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800654a:	485a      	ldr	r0, [pc, #360]	; (80066b4 <_printf_i+0x23c>)
 800654c:	230a      	movs	r3, #10
 800654e:	e012      	b.n	8006576 <_printf_i+0xfe>
 8006550:	682b      	ldr	r3, [r5, #0]
 8006552:	6820      	ldr	r0, [r4, #0]
 8006554:	1d19      	adds	r1, r3, #4
 8006556:	6029      	str	r1, [r5, #0]
 8006558:	0605      	lsls	r5, r0, #24
 800655a:	d501      	bpl.n	8006560 <_printf_i+0xe8>
 800655c:	681e      	ldr	r6, [r3, #0]
 800655e:	e002      	b.n	8006566 <_printf_i+0xee>
 8006560:	0641      	lsls	r1, r0, #25
 8006562:	d5fb      	bpl.n	800655c <_printf_i+0xe4>
 8006564:	881e      	ldrh	r6, [r3, #0]
 8006566:	4853      	ldr	r0, [pc, #332]	; (80066b4 <_printf_i+0x23c>)
 8006568:	2f6f      	cmp	r7, #111	; 0x6f
 800656a:	bf0c      	ite	eq
 800656c:	2308      	moveq	r3, #8
 800656e:	230a      	movne	r3, #10
 8006570:	2100      	movs	r1, #0
 8006572:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006576:	6865      	ldr	r5, [r4, #4]
 8006578:	60a5      	str	r5, [r4, #8]
 800657a:	2d00      	cmp	r5, #0
 800657c:	bfa2      	ittt	ge
 800657e:	6821      	ldrge	r1, [r4, #0]
 8006580:	f021 0104 	bicge.w	r1, r1, #4
 8006584:	6021      	strge	r1, [r4, #0]
 8006586:	b90e      	cbnz	r6, 800658c <_printf_i+0x114>
 8006588:	2d00      	cmp	r5, #0
 800658a:	d04b      	beq.n	8006624 <_printf_i+0x1ac>
 800658c:	4615      	mov	r5, r2
 800658e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006592:	fb03 6711 	mls	r7, r3, r1, r6
 8006596:	5dc7      	ldrb	r7, [r0, r7]
 8006598:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800659c:	4637      	mov	r7, r6
 800659e:	42bb      	cmp	r3, r7
 80065a0:	460e      	mov	r6, r1
 80065a2:	d9f4      	bls.n	800658e <_printf_i+0x116>
 80065a4:	2b08      	cmp	r3, #8
 80065a6:	d10b      	bne.n	80065c0 <_printf_i+0x148>
 80065a8:	6823      	ldr	r3, [r4, #0]
 80065aa:	07de      	lsls	r6, r3, #31
 80065ac:	d508      	bpl.n	80065c0 <_printf_i+0x148>
 80065ae:	6923      	ldr	r3, [r4, #16]
 80065b0:	6861      	ldr	r1, [r4, #4]
 80065b2:	4299      	cmp	r1, r3
 80065b4:	bfde      	ittt	le
 80065b6:	2330      	movle	r3, #48	; 0x30
 80065b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80065bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80065c0:	1b52      	subs	r2, r2, r5
 80065c2:	6122      	str	r2, [r4, #16]
 80065c4:	f8cd a000 	str.w	sl, [sp]
 80065c8:	464b      	mov	r3, r9
 80065ca:	aa03      	add	r2, sp, #12
 80065cc:	4621      	mov	r1, r4
 80065ce:	4640      	mov	r0, r8
 80065d0:	f7ff fee4 	bl	800639c <_printf_common>
 80065d4:	3001      	adds	r0, #1
 80065d6:	d14a      	bne.n	800666e <_printf_i+0x1f6>
 80065d8:	f04f 30ff 	mov.w	r0, #4294967295
 80065dc:	b004      	add	sp, #16
 80065de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065e2:	6823      	ldr	r3, [r4, #0]
 80065e4:	f043 0320 	orr.w	r3, r3, #32
 80065e8:	6023      	str	r3, [r4, #0]
 80065ea:	4833      	ldr	r0, [pc, #204]	; (80066b8 <_printf_i+0x240>)
 80065ec:	2778      	movs	r7, #120	; 0x78
 80065ee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80065f2:	6823      	ldr	r3, [r4, #0]
 80065f4:	6829      	ldr	r1, [r5, #0]
 80065f6:	061f      	lsls	r7, r3, #24
 80065f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80065fc:	d402      	bmi.n	8006604 <_printf_i+0x18c>
 80065fe:	065f      	lsls	r7, r3, #25
 8006600:	bf48      	it	mi
 8006602:	b2b6      	uxthmi	r6, r6
 8006604:	07df      	lsls	r7, r3, #31
 8006606:	bf48      	it	mi
 8006608:	f043 0320 	orrmi.w	r3, r3, #32
 800660c:	6029      	str	r1, [r5, #0]
 800660e:	bf48      	it	mi
 8006610:	6023      	strmi	r3, [r4, #0]
 8006612:	b91e      	cbnz	r6, 800661c <_printf_i+0x1a4>
 8006614:	6823      	ldr	r3, [r4, #0]
 8006616:	f023 0320 	bic.w	r3, r3, #32
 800661a:	6023      	str	r3, [r4, #0]
 800661c:	2310      	movs	r3, #16
 800661e:	e7a7      	b.n	8006570 <_printf_i+0xf8>
 8006620:	4824      	ldr	r0, [pc, #144]	; (80066b4 <_printf_i+0x23c>)
 8006622:	e7e4      	b.n	80065ee <_printf_i+0x176>
 8006624:	4615      	mov	r5, r2
 8006626:	e7bd      	b.n	80065a4 <_printf_i+0x12c>
 8006628:	682b      	ldr	r3, [r5, #0]
 800662a:	6826      	ldr	r6, [r4, #0]
 800662c:	6961      	ldr	r1, [r4, #20]
 800662e:	1d18      	adds	r0, r3, #4
 8006630:	6028      	str	r0, [r5, #0]
 8006632:	0635      	lsls	r5, r6, #24
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	d501      	bpl.n	800663c <_printf_i+0x1c4>
 8006638:	6019      	str	r1, [r3, #0]
 800663a:	e002      	b.n	8006642 <_printf_i+0x1ca>
 800663c:	0670      	lsls	r0, r6, #25
 800663e:	d5fb      	bpl.n	8006638 <_printf_i+0x1c0>
 8006640:	8019      	strh	r1, [r3, #0]
 8006642:	2300      	movs	r3, #0
 8006644:	6123      	str	r3, [r4, #16]
 8006646:	4615      	mov	r5, r2
 8006648:	e7bc      	b.n	80065c4 <_printf_i+0x14c>
 800664a:	682b      	ldr	r3, [r5, #0]
 800664c:	1d1a      	adds	r2, r3, #4
 800664e:	602a      	str	r2, [r5, #0]
 8006650:	681d      	ldr	r5, [r3, #0]
 8006652:	6862      	ldr	r2, [r4, #4]
 8006654:	2100      	movs	r1, #0
 8006656:	4628      	mov	r0, r5
 8006658:	f7f9 fdba 	bl	80001d0 <memchr>
 800665c:	b108      	cbz	r0, 8006662 <_printf_i+0x1ea>
 800665e:	1b40      	subs	r0, r0, r5
 8006660:	6060      	str	r0, [r4, #4]
 8006662:	6863      	ldr	r3, [r4, #4]
 8006664:	6123      	str	r3, [r4, #16]
 8006666:	2300      	movs	r3, #0
 8006668:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800666c:	e7aa      	b.n	80065c4 <_printf_i+0x14c>
 800666e:	6923      	ldr	r3, [r4, #16]
 8006670:	462a      	mov	r2, r5
 8006672:	4649      	mov	r1, r9
 8006674:	4640      	mov	r0, r8
 8006676:	47d0      	blx	sl
 8006678:	3001      	adds	r0, #1
 800667a:	d0ad      	beq.n	80065d8 <_printf_i+0x160>
 800667c:	6823      	ldr	r3, [r4, #0]
 800667e:	079b      	lsls	r3, r3, #30
 8006680:	d413      	bmi.n	80066aa <_printf_i+0x232>
 8006682:	68e0      	ldr	r0, [r4, #12]
 8006684:	9b03      	ldr	r3, [sp, #12]
 8006686:	4298      	cmp	r0, r3
 8006688:	bfb8      	it	lt
 800668a:	4618      	movlt	r0, r3
 800668c:	e7a6      	b.n	80065dc <_printf_i+0x164>
 800668e:	2301      	movs	r3, #1
 8006690:	4632      	mov	r2, r6
 8006692:	4649      	mov	r1, r9
 8006694:	4640      	mov	r0, r8
 8006696:	47d0      	blx	sl
 8006698:	3001      	adds	r0, #1
 800669a:	d09d      	beq.n	80065d8 <_printf_i+0x160>
 800669c:	3501      	adds	r5, #1
 800669e:	68e3      	ldr	r3, [r4, #12]
 80066a0:	9903      	ldr	r1, [sp, #12]
 80066a2:	1a5b      	subs	r3, r3, r1
 80066a4:	42ab      	cmp	r3, r5
 80066a6:	dcf2      	bgt.n	800668e <_printf_i+0x216>
 80066a8:	e7eb      	b.n	8006682 <_printf_i+0x20a>
 80066aa:	2500      	movs	r5, #0
 80066ac:	f104 0619 	add.w	r6, r4, #25
 80066b0:	e7f5      	b.n	800669e <_printf_i+0x226>
 80066b2:	bf00      	nop
 80066b4:	08006921 	.word	0x08006921
 80066b8:	08006932 	.word	0x08006932

080066bc <memmove>:
 80066bc:	4288      	cmp	r0, r1
 80066be:	b510      	push	{r4, lr}
 80066c0:	eb01 0402 	add.w	r4, r1, r2
 80066c4:	d902      	bls.n	80066cc <memmove+0x10>
 80066c6:	4284      	cmp	r4, r0
 80066c8:	4623      	mov	r3, r4
 80066ca:	d807      	bhi.n	80066dc <memmove+0x20>
 80066cc:	1e43      	subs	r3, r0, #1
 80066ce:	42a1      	cmp	r1, r4
 80066d0:	d008      	beq.n	80066e4 <memmove+0x28>
 80066d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80066da:	e7f8      	b.n	80066ce <memmove+0x12>
 80066dc:	4402      	add	r2, r0
 80066de:	4601      	mov	r1, r0
 80066e0:	428a      	cmp	r2, r1
 80066e2:	d100      	bne.n	80066e6 <memmove+0x2a>
 80066e4:	bd10      	pop	{r4, pc}
 80066e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80066ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80066ee:	e7f7      	b.n	80066e0 <memmove+0x24>

080066f0 <_realloc_r>:
 80066f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066f4:	4680      	mov	r8, r0
 80066f6:	4614      	mov	r4, r2
 80066f8:	460e      	mov	r6, r1
 80066fa:	b921      	cbnz	r1, 8006706 <_realloc_r+0x16>
 80066fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006700:	4611      	mov	r1, r2
 8006702:	f7ff bba9 	b.w	8005e58 <_malloc_r>
 8006706:	b92a      	cbnz	r2, 8006714 <_realloc_r+0x24>
 8006708:	f7ff fca4 	bl	8006054 <_free_r>
 800670c:	4625      	mov	r5, r4
 800670e:	4628      	mov	r0, r5
 8006710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006714:	f000 f81b 	bl	800674e <_malloc_usable_size_r>
 8006718:	4284      	cmp	r4, r0
 800671a:	4607      	mov	r7, r0
 800671c:	d802      	bhi.n	8006724 <_realloc_r+0x34>
 800671e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006722:	d812      	bhi.n	800674a <_realloc_r+0x5a>
 8006724:	4621      	mov	r1, r4
 8006726:	4640      	mov	r0, r8
 8006728:	f7ff fb96 	bl	8005e58 <_malloc_r>
 800672c:	4605      	mov	r5, r0
 800672e:	2800      	cmp	r0, #0
 8006730:	d0ed      	beq.n	800670e <_realloc_r+0x1e>
 8006732:	42bc      	cmp	r4, r7
 8006734:	4622      	mov	r2, r4
 8006736:	4631      	mov	r1, r6
 8006738:	bf28      	it	cs
 800673a:	463a      	movcs	r2, r7
 800673c:	f7ff fc7c 	bl	8006038 <memcpy>
 8006740:	4631      	mov	r1, r6
 8006742:	4640      	mov	r0, r8
 8006744:	f7ff fc86 	bl	8006054 <_free_r>
 8006748:	e7e1      	b.n	800670e <_realloc_r+0x1e>
 800674a:	4635      	mov	r5, r6
 800674c:	e7df      	b.n	800670e <_realloc_r+0x1e>

0800674e <_malloc_usable_size_r>:
 800674e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006752:	1f18      	subs	r0, r3, #4
 8006754:	2b00      	cmp	r3, #0
 8006756:	bfbc      	itt	lt
 8006758:	580b      	ldrlt	r3, [r1, r0]
 800675a:	18c0      	addlt	r0, r0, r3
 800675c:	4770      	bx	lr
	...

08006760 <_init>:
 8006760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006762:	bf00      	nop
 8006764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006766:	bc08      	pop	{r3}
 8006768:	469e      	mov	lr, r3
 800676a:	4770      	bx	lr

0800676c <_fini>:
 800676c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800676e:	bf00      	nop
 8006770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006772:	bc08      	pop	{r3}
 8006774:	469e      	mov	lr, r3
 8006776:	4770      	bx	lr
