
SOPHIA_V2_SX1280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058d4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08005aa4  08005aa4  00015aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bf8  08005bf8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005bf8  08005bf8  00015bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c00  08005c00  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005c00  08005c00  00015c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08005c08  08005c08  00015c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005c10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  20000078  08005c84  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200002d8  08005c84  000202d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024399  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041bb  00000000  00000000  0004443d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d8  00000000  00000000  000485f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011d0  00000000  00000000  000498d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028a6b  00000000  00000000  0004aaa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017ca5  00000000  00000000  0007350b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de8c9  00000000  00000000  0008b1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00169a79  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005844  00000000  00000000  00169acc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005a8c 	.word	0x08005a8c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08005a8c 	.word	0x08005a8c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa0:	f000 b974 	b.w	8000d8c <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9d08      	ldr	r5, [sp, #32]
 8000ac2:	4604      	mov	r4, r0
 8000ac4:	468e      	mov	lr, r1
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d14d      	bne.n	8000b66 <__udivmoddi4+0xaa>
 8000aca:	428a      	cmp	r2, r1
 8000acc:	4694      	mov	ip, r2
 8000ace:	d969      	bls.n	8000ba4 <__udivmoddi4+0xe8>
 8000ad0:	fab2 f282 	clz	r2, r2
 8000ad4:	b152      	cbz	r2, 8000aec <__udivmoddi4+0x30>
 8000ad6:	fa01 f302 	lsl.w	r3, r1, r2
 8000ada:	f1c2 0120 	rsb	r1, r2, #32
 8000ade:	fa20 f101 	lsr.w	r1, r0, r1
 8000ae2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aea:	4094      	lsls	r4, r2
 8000aec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000af0:	0c21      	lsrs	r1, r4, #16
 8000af2:	fbbe f6f8 	udiv	r6, lr, r8
 8000af6:	fa1f f78c 	uxth.w	r7, ip
 8000afa:	fb08 e316 	mls	r3, r8, r6, lr
 8000afe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b02:	fb06 f107 	mul.w	r1, r6, r7
 8000b06:	4299      	cmp	r1, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x64>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b12:	f080 811f 	bcs.w	8000d54 <__udivmoddi4+0x298>
 8000b16:	4299      	cmp	r1, r3
 8000b18:	f240 811c 	bls.w	8000d54 <__udivmoddi4+0x298>
 8000b1c:	3e02      	subs	r6, #2
 8000b1e:	4463      	add	r3, ip
 8000b20:	1a5b      	subs	r3, r3, r1
 8000b22:	b2a4      	uxth	r4, r4
 8000b24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b28:	fb08 3310 	mls	r3, r8, r0, r3
 8000b2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b30:	fb00 f707 	mul.w	r7, r0, r7
 8000b34:	42a7      	cmp	r7, r4
 8000b36:	d90a      	bls.n	8000b4e <__udivmoddi4+0x92>
 8000b38:	eb1c 0404 	adds.w	r4, ip, r4
 8000b3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b40:	f080 810a 	bcs.w	8000d58 <__udivmoddi4+0x29c>
 8000b44:	42a7      	cmp	r7, r4
 8000b46:	f240 8107 	bls.w	8000d58 <__udivmoddi4+0x29c>
 8000b4a:	4464      	add	r4, ip
 8000b4c:	3802      	subs	r0, #2
 8000b4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b52:	1be4      	subs	r4, r4, r7
 8000b54:	2600      	movs	r6, #0
 8000b56:	b11d      	cbz	r5, 8000b60 <__udivmoddi4+0xa4>
 8000b58:	40d4      	lsrs	r4, r2
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b60:	4631      	mov	r1, r6
 8000b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d909      	bls.n	8000b7e <__udivmoddi4+0xc2>
 8000b6a:	2d00      	cmp	r5, #0
 8000b6c:	f000 80ef 	beq.w	8000d4e <__udivmoddi4+0x292>
 8000b70:	2600      	movs	r6, #0
 8000b72:	e9c5 0100 	strd	r0, r1, [r5]
 8000b76:	4630      	mov	r0, r6
 8000b78:	4631      	mov	r1, r6
 8000b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7e:	fab3 f683 	clz	r6, r3
 8000b82:	2e00      	cmp	r6, #0
 8000b84:	d14a      	bne.n	8000c1c <__udivmoddi4+0x160>
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d302      	bcc.n	8000b90 <__udivmoddi4+0xd4>
 8000b8a:	4282      	cmp	r2, r0
 8000b8c:	f200 80f9 	bhi.w	8000d82 <__udivmoddi4+0x2c6>
 8000b90:	1a84      	subs	r4, r0, r2
 8000b92:	eb61 0303 	sbc.w	r3, r1, r3
 8000b96:	2001      	movs	r0, #1
 8000b98:	469e      	mov	lr, r3
 8000b9a:	2d00      	cmp	r5, #0
 8000b9c:	d0e0      	beq.n	8000b60 <__udivmoddi4+0xa4>
 8000b9e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ba2:	e7dd      	b.n	8000b60 <__udivmoddi4+0xa4>
 8000ba4:	b902      	cbnz	r2, 8000ba8 <__udivmoddi4+0xec>
 8000ba6:	deff      	udf	#255	; 0xff
 8000ba8:	fab2 f282 	clz	r2, r2
 8000bac:	2a00      	cmp	r2, #0
 8000bae:	f040 8092 	bne.w	8000cd6 <__udivmoddi4+0x21a>
 8000bb2:	eba1 010c 	sub.w	r1, r1, ip
 8000bb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bba:	fa1f fe8c 	uxth.w	lr, ip
 8000bbe:	2601      	movs	r6, #1
 8000bc0:	0c20      	lsrs	r0, r4, #16
 8000bc2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bc6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bca:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bce:	fb0e f003 	mul.w	r0, lr, r3
 8000bd2:	4288      	cmp	r0, r1
 8000bd4:	d908      	bls.n	8000be8 <__udivmoddi4+0x12c>
 8000bd6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bda:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x12a>
 8000be0:	4288      	cmp	r0, r1
 8000be2:	f200 80cb 	bhi.w	8000d7c <__udivmoddi4+0x2c0>
 8000be6:	4643      	mov	r3, r8
 8000be8:	1a09      	subs	r1, r1, r0
 8000bea:	b2a4      	uxth	r4, r4
 8000bec:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bf0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bf4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bf8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bfc:	45a6      	cmp	lr, r4
 8000bfe:	d908      	bls.n	8000c12 <__udivmoddi4+0x156>
 8000c00:	eb1c 0404 	adds.w	r4, ip, r4
 8000c04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c08:	d202      	bcs.n	8000c10 <__udivmoddi4+0x154>
 8000c0a:	45a6      	cmp	lr, r4
 8000c0c:	f200 80bb 	bhi.w	8000d86 <__udivmoddi4+0x2ca>
 8000c10:	4608      	mov	r0, r1
 8000c12:	eba4 040e 	sub.w	r4, r4, lr
 8000c16:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c1a:	e79c      	b.n	8000b56 <__udivmoddi4+0x9a>
 8000c1c:	f1c6 0720 	rsb	r7, r6, #32
 8000c20:	40b3      	lsls	r3, r6
 8000c22:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c26:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c2a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c2e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c32:	431c      	orrs	r4, r3
 8000c34:	40f9      	lsrs	r1, r7
 8000c36:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c3a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c3e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c42:	0c20      	lsrs	r0, r4, #16
 8000c44:	fa1f fe8c 	uxth.w	lr, ip
 8000c48:	fb09 1118 	mls	r1, r9, r8, r1
 8000c4c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c50:	fb08 f00e 	mul.w	r0, r8, lr
 8000c54:	4288      	cmp	r0, r1
 8000c56:	fa02 f206 	lsl.w	r2, r2, r6
 8000c5a:	d90b      	bls.n	8000c74 <__udivmoddi4+0x1b8>
 8000c5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c60:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c64:	f080 8088 	bcs.w	8000d78 <__udivmoddi4+0x2bc>
 8000c68:	4288      	cmp	r0, r1
 8000c6a:	f240 8085 	bls.w	8000d78 <__udivmoddi4+0x2bc>
 8000c6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c72:	4461      	add	r1, ip
 8000c74:	1a09      	subs	r1, r1, r0
 8000c76:	b2a4      	uxth	r4, r4
 8000c78:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c7c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c80:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c84:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c88:	458e      	cmp	lr, r1
 8000c8a:	d908      	bls.n	8000c9e <__udivmoddi4+0x1e2>
 8000c8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c90:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c94:	d26c      	bcs.n	8000d70 <__udivmoddi4+0x2b4>
 8000c96:	458e      	cmp	lr, r1
 8000c98:	d96a      	bls.n	8000d70 <__udivmoddi4+0x2b4>
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	4461      	add	r1, ip
 8000c9e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ca2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ca6:	eba1 010e 	sub.w	r1, r1, lr
 8000caa:	42a1      	cmp	r1, r4
 8000cac:	46c8      	mov	r8, r9
 8000cae:	46a6      	mov	lr, r4
 8000cb0:	d356      	bcc.n	8000d60 <__udivmoddi4+0x2a4>
 8000cb2:	d053      	beq.n	8000d5c <__udivmoddi4+0x2a0>
 8000cb4:	b15d      	cbz	r5, 8000cce <__udivmoddi4+0x212>
 8000cb6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cba:	eb61 010e 	sbc.w	r1, r1, lr
 8000cbe:	fa01 f707 	lsl.w	r7, r1, r7
 8000cc2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cc6:	40f1      	lsrs	r1, r6
 8000cc8:	431f      	orrs	r7, r3
 8000cca:	e9c5 7100 	strd	r7, r1, [r5]
 8000cce:	2600      	movs	r6, #0
 8000cd0:	4631      	mov	r1, r6
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	f1c2 0320 	rsb	r3, r2, #32
 8000cda:	40d8      	lsrs	r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ce4:	4091      	lsls	r1, r2
 8000ce6:	4301      	orrs	r1, r0
 8000ce8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cec:	fa1f fe8c 	uxth.w	lr, ip
 8000cf0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cf4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cf8:	0c0b      	lsrs	r3, r1, #16
 8000cfa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cfe:	fb00 f60e 	mul.w	r6, r0, lr
 8000d02:	429e      	cmp	r6, r3
 8000d04:	fa04 f402 	lsl.w	r4, r4, r2
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x260>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d12:	d22f      	bcs.n	8000d74 <__udivmoddi4+0x2b8>
 8000d14:	429e      	cmp	r6, r3
 8000d16:	d92d      	bls.n	8000d74 <__udivmoddi4+0x2b8>
 8000d18:	3802      	subs	r0, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	b289      	uxth	r1, r1
 8000d20:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d24:	fb07 3316 	mls	r3, r7, r6, r3
 8000d28:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d2c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d30:	428b      	cmp	r3, r1
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x28a>
 8000d34:	eb1c 0101 	adds.w	r1, ip, r1
 8000d38:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d3c:	d216      	bcs.n	8000d6c <__udivmoddi4+0x2b0>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d914      	bls.n	8000d6c <__udivmoddi4+0x2b0>
 8000d42:	3e02      	subs	r6, #2
 8000d44:	4461      	add	r1, ip
 8000d46:	1ac9      	subs	r1, r1, r3
 8000d48:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d4c:	e738      	b.n	8000bc0 <__udivmoddi4+0x104>
 8000d4e:	462e      	mov	r6, r5
 8000d50:	4628      	mov	r0, r5
 8000d52:	e705      	b.n	8000b60 <__udivmoddi4+0xa4>
 8000d54:	4606      	mov	r6, r0
 8000d56:	e6e3      	b.n	8000b20 <__udivmoddi4+0x64>
 8000d58:	4618      	mov	r0, r3
 8000d5a:	e6f8      	b.n	8000b4e <__udivmoddi4+0x92>
 8000d5c:	454b      	cmp	r3, r9
 8000d5e:	d2a9      	bcs.n	8000cb4 <__udivmoddi4+0x1f8>
 8000d60:	ebb9 0802 	subs.w	r8, r9, r2
 8000d64:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d68:	3801      	subs	r0, #1
 8000d6a:	e7a3      	b.n	8000cb4 <__udivmoddi4+0x1f8>
 8000d6c:	4646      	mov	r6, r8
 8000d6e:	e7ea      	b.n	8000d46 <__udivmoddi4+0x28a>
 8000d70:	4620      	mov	r0, r4
 8000d72:	e794      	b.n	8000c9e <__udivmoddi4+0x1e2>
 8000d74:	4640      	mov	r0, r8
 8000d76:	e7d1      	b.n	8000d1c <__udivmoddi4+0x260>
 8000d78:	46d0      	mov	r8, sl
 8000d7a:	e77b      	b.n	8000c74 <__udivmoddi4+0x1b8>
 8000d7c:	3b02      	subs	r3, #2
 8000d7e:	4461      	add	r1, ip
 8000d80:	e732      	b.n	8000be8 <__udivmoddi4+0x12c>
 8000d82:	4630      	mov	r0, r6
 8000d84:	e709      	b.n	8000b9a <__udivmoddi4+0xde>
 8000d86:	4464      	add	r4, ip
 8000d88:	3802      	subs	r0, #2
 8000d8a:	e742      	b.n	8000c12 <__udivmoddi4+0x156>

08000d8c <__aeabi_idiv0>:
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop

08000d90 <_ZN6SX128x8HalPreTxEv>:
	virtual void HalGpioWrite(GpioPinFunction_t func, uint8_t value) = 0;
	virtual void HalSpiTransfer(uint8_t *buffer_in, const uint8_t *buffer_out, uint16_t size) = 0;
	void HalSpiRead(uint8_t *buffer_in, uint16_t size);
	void HalSpiWrite(const uint8_t *buffer_out, uint16_t size);

	virtual void HalPreTx() {}
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	bf00      	nop
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <_ZN6SX128x8HalPreRxEv>:
	virtual void HalPreRx() {}
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <_ZN6SX128x9HalPostTxEv>:
	virtual void HalPostTx() {}
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	bf00      	nop
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <_ZN6SX128x9HalPostRxEv>:
	virtual void HalPostRx() {}
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <_ZN6SX128x12GetDioStatusEv>:
	virtual void WriteRegister(uint16_t address, uint8_t value);
	virtual void ReadRegister(uint16_t address, uint8_t *buffer, uint16_t size);
	virtual uint8_t ReadRegister(uint16_t address);
	virtual void WriteBuffer(uint8_t offset, uint8_t *buffer, uint8_t size);
	virtual void ReadBuffer(uint8_t offset, uint8_t *buffer, uint8_t size);
	virtual uint8_t GetDioStatus(void) {
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
		return 0;
 8000de8:	2300      	movs	r3, #0
	}
 8000dea:	4618      	mov	r0, r3
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <_ZN6SX128x18GetFirmwareVersionEv>:
//		WriteRegister( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
//	}
//}

uint16_t SX128x::GetFirmwareVersion(void )
{
 8000df6:	b590      	push	{r4, r7, lr}
 8000df8:	b083      	sub	sp, #12
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
	return( ( ( ReadRegister( REG_LR_FIRMWARE_VERSION_MSB ) ) << 8 ) | ( ReadRegister( REG_LR_FIRMWARE_VERSION_MSB + 1 ) ) );
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	3344      	adds	r3, #68	; 0x44
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f240 1153 	movw	r1, #339	; 0x153
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	4798      	blx	r3
 8000e0e:	4603      	mov	r3, r0
 8000e10:	021b      	lsls	r3, r3, #8
 8000e12:	b21c      	sxth	r4, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	3344      	adds	r3, #68	; 0x44
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	4798      	blx	r3
 8000e24:	4603      	mov	r3, r0
 8000e26:	b21b      	sxth	r3, r3
 8000e28:	4323      	orrs	r3, r4
 8000e2a:	b21b      	sxth	r3, r3
 8000e2c:	b29b      	uxth	r3, r3
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd90      	pop	{r4, r7, pc}

08000e36 <_ZN6SX128x9GetStatusEv>:

SX128x::RadioStatus_t SX128x::GetStatus(void )
{
 8000e36:	b590      	push	{r4, r7, lr}
 8000e38:	b085      	sub	sp, #20
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
	uint8_t stat = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	73fb      	strb	r3, [r7, #15]
	RadioStatus_t status;

	ReadCommand( RADIO_GET_STATUS, ( uint8_t * )&stat, 1 );
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	3334      	adds	r3, #52	; 0x34
 8000e48:	681c      	ldr	r4, [r3, #0]
 8000e4a:	f107 020f 	add.w	r2, r7, #15
 8000e4e:	2301      	movs	r3, #1
 8000e50:	21c0      	movs	r1, #192	; 0xc0
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	47a0      	blx	r4
	status.Value = stat;
 8000e56:	7bfb      	ldrb	r3, [r7, #15]
 8000e58:	733b      	strb	r3, [r7, #12]
	return( status );
 8000e5a:	7b3b      	ldrb	r3, [r7, #12]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3714      	adds	r7, #20
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd90      	pop	{r4, r7, pc}

08000e64 <_ZN6SX128x9GetOpModeEv>:

SX128x::RadioOperatingModes_t SX128x::GetOpMode(void )
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
	return( OperatingMode );
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr

08000e7e <_ZN6SX128x10SetStandbyENS_19RadioStandbyModes_tE>:
	OperatingMode = MODE_SLEEP;
	WriteCommand( RADIO_SET_SLEEP, &sleep, 1 );
}

void SX128x::SetStandby(RadioStandbyModes_t standbyConfig )
{
 8000e7e:	b590      	push	{r4, r7, lr}
 8000e80:	b083      	sub	sp, #12
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
 8000e86:	460b      	mov	r3, r1
 8000e88:	70fb      	strb	r3, [r7, #3]
	// std::lock_guard<std::mutex> lg(IOLock2);

	WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	3330      	adds	r3, #48	; 0x30
 8000e90:	681c      	ldr	r4, [r3, #0]
 8000e92:	1cfa      	adds	r2, r7, #3
 8000e94:	2301      	movs	r3, #1
 8000e96:	2180      	movs	r1, #128	; 0x80
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	47a0      	blx	r4
	if (standbyConfig == STDBY_RC )
 8000e9c:	78fb      	ldrb	r3, [r7, #3]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d104      	bne.n	8000eac <_ZN6SX128x10SetStandbyENS_19RadioStandbyModes_tE+0x2e>
	{
		OperatingMode = MODE_STDBY_RC;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2202      	movs	r2, #2
 8000ea6:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	}
	else
	{
		OperatingMode = MODE_STDBY_XOSC;
	}
}
 8000eaa:	e003      	b.n	8000eb4 <_ZN6SX128x10SetStandbyENS_19RadioStandbyModes_tE+0x36>
		OperatingMode = MODE_STDBY_XOSC;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2203      	movs	r2, #3
 8000eb0:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd90      	pop	{r4, r7, pc}

08000ebc <_ZN6SX128x5SetTxENS_10TickTime_sE>:
	WriteCommand( RADIO_SET_FS, 0, 0 );
	OperatingMode = MODE_FS;
}

void SX128x::SetTx(TickTime_t timeout )
{
 8000ebc:	b590      	push	{r4, r7, lr}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
	// std::lock_guard<std::mutex> lg(IOLock2);

	uint8_t buf[3];
	buf[0] = timeout.PeriodBase;
 8000ec6:	783b      	ldrb	r3, [r7, #0]
 8000ec8:	733b      	strb	r3, [r7, #12]
	buf[1] = ( uint8_t )( ( timeout.PeriodBaseCount >> 8 ) & 0x00FF );
 8000eca:	887b      	ldrh	r3, [r7, #2]
 8000ecc:	0a1b      	lsrs	r3, r3, #8
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	737b      	strb	r3, [r7, #13]
	buf[2] = ( uint8_t )( timeout.PeriodBaseCount & 0x00FF );
 8000ed4:	887b      	ldrh	r3, [r7, #2]
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	73bb      	strb	r3, [r7, #14]

	ClearIrqStatus( IRQ_RADIO_ALL );
 8000eda:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f000 fa31 	bl	8001346 <_ZN6SX128x14ClearIrqStatusEt>
//	if (GetPacketType( true ) == PACKET_TYPE_RANGING )
//	{
////		SetRangingRole( RADIO_RANGING_ROLE_MASTER );
//	}

	HalPostRx();
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	3318      	adds	r3, #24
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	4798      	blx	r3
	HalPreTx();
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	330c      	adds	r3, #12
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	4798      	blx	r3
	WriteCommand( RADIO_SET_TX, buf, 3 );
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	3330      	adds	r3, #48	; 0x30
 8000f02:	681c      	ldr	r4, [r3, #0]
 8000f04:	f107 020c 	add.w	r2, r7, #12
 8000f08:	2303      	movs	r3, #3
 8000f0a:	2183      	movs	r1, #131	; 0x83
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	47a0      	blx	r4
	OperatingMode = MODE_TX;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2206      	movs	r2, #6
 8000f14:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
}
 8000f18:	bf00      	nop
 8000f1a:	3714      	adds	r7, #20
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd90      	pop	{r4, r7, pc}

08000f20 <_ZN6SX128x13SetPacketTypeENS_18RadioPacketTypes_tE>:
	HalPreTx();
	WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
}

void SX128x::SetPacketType(RadioPacketTypes_t packetType )
{
 8000f20:	b590      	push	{r4, r7, lr}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	460b      	mov	r3, r1
 8000f2a:	70fb      	strb	r3, [r7, #3]
	// Save packet type internally to avoid questioning the radio
	this->PacketType = packetType;
 8000f2c:	78fa      	ldrb	r2, [r7, #3]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9

	WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	3330      	adds	r3, #48	; 0x30
 8000f3a:	681c      	ldr	r4, [r3, #0]
 8000f3c:	1cfa      	adds	r2, r7, #3
 8000f3e:	2301      	movs	r3, #1
 8000f40:	218a      	movs	r1, #138	; 0x8a
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	47a0      	blx	r4
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd90      	pop	{r4, r7, pc}

08000f4e <_ZN6SX128x14SetRfFrequencyEm>:
	}
	return packetType;
}

void SX128x::SetRfFrequency(uint32_t rfFrequency )
{
 8000f4e:	b590      	push	{r4, r7, lr}
 8000f50:	b085      	sub	sp, #20
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
 8000f56:	6039      	str	r1, [r7, #0]
	uint8_t buf[3];
	uint32_t freq = 0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60fb      	str	r3, [r7, #12]

	freq = ( uint32_t )( ( double )rfFrequency / ( double )FREQ_STEP );
 8000f5c:	6838      	ldr	r0, [r7, #0]
 8000f5e:	f7ff fae9 	bl	8000534 <__aeabi_ui2d>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000f68:	f7ff fc88 	bl	800087c <__aeabi_ddiv>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	460b      	mov	r3, r1
 8000f70:	4610      	mov	r0, r2
 8000f72:	4619      	mov	r1, r3
 8000f74:	f7ff fd6a 	bl	8000a4c <__aeabi_d2uiz>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	60fb      	str	r3, [r7, #12]
	buf[0] = ( uint8_t )( ( freq >> 16 ) & 0xFF );
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	0c1b      	lsrs	r3, r3, #16
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	723b      	strb	r3, [r7, #8]
	buf[1] = ( uint8_t )( ( freq >> 8 ) & 0xFF );
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	0a1b      	lsrs	r3, r3, #8
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	727b      	strb	r3, [r7, #9]
	buf[2] = ( uint8_t )( freq & 0xFF );
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	72bb      	strb	r3, [r7, #10]
	WriteCommand( RADIO_SET_RFFREQUENCY, buf, 3 );
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	3330      	adds	r3, #48	; 0x30
 8000f98:	681c      	ldr	r4, [r3, #0]
 8000f9a:	f107 0208 	add.w	r2, r7, #8
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	2186      	movs	r1, #134	; 0x86
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	47a0      	blx	r4
}
 8000fa6:	bf00      	nop
 8000fa8:	3714      	adds	r7, #20
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd90      	pop	{r4, r7, pc}

08000fae <_ZN6SX128x11SetTxParamsEaNS_16RadioRampTimes_tE>:

void SX128x::SetTxParams(int8_t power, RadioRampTimes_t rampTime )
{
 8000fae:	b590      	push	{r4, r7, lr}
 8000fb0:	b085      	sub	sp, #20
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	70fb      	strb	r3, [r7, #3]
 8000fba:	4613      	mov	r3, r2
 8000fbc:	70bb      	strb	r3, [r7, #2]
	uint8_t buf[2];

	// The power value to send on SPI/UART is in the range [0..31] and the
	// physical output power is in the range [-18..13]dBm
	buf[0] = power + 18;
 8000fbe:	78fb      	ldrb	r3, [r7, #3]
 8000fc0:	3312      	adds	r3, #18
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	733b      	strb	r3, [r7, #12]
	buf[1] = ( uint8_t )rampTime;
 8000fc6:	78bb      	ldrb	r3, [r7, #2]
 8000fc8:	737b      	strb	r3, [r7, #13]
	WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	3330      	adds	r3, #48	; 0x30
 8000fd0:	681c      	ldr	r4, [r3, #0]
 8000fd2:	f107 020c 	add.w	r2, r7, #12
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	218e      	movs	r1, #142	; 0x8e
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	47a0      	blx	r4
}
 8000fde:	bf00      	nop
 8000fe0:	3714      	adds	r7, #20
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd90      	pop	{r4, r7, pc}

08000fe6 <_ZN6SX128x22SetBufferBaseAddressesEhh>:
	WriteCommand( RADIO_SET_CADPARAMS, ( uint8_t* )&cadSymbolNum, 1 );
	OperatingMode = MODE_CAD;
}

void SX128x::SetBufferBaseAddresses(uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8000fe6:	b590      	push	{r4, r7, lr}
 8000fe8:	b085      	sub	sp, #20
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
 8000fee:	460b      	mov	r3, r1
 8000ff0:	70fb      	strb	r3, [r7, #3]
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	70bb      	strb	r3, [r7, #2]
	uint8_t buf[2];

	buf[0] = txBaseAddress;
 8000ff6:	78fb      	ldrb	r3, [r7, #3]
 8000ff8:	733b      	strb	r3, [r7, #12]
	buf[1] = rxBaseAddress;
 8000ffa:	78bb      	ldrb	r3, [r7, #2]
 8000ffc:	737b      	strb	r3, [r7, #13]
	WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	3330      	adds	r3, #48	; 0x30
 8001004:	681c      	ldr	r4, [r3, #0]
 8001006:	f107 020c 	add.w	r2, r7, #12
 800100a:	2302      	movs	r3, #2
 800100c:	218f      	movs	r1, #143	; 0x8f
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	47a0      	blx	r4
}
 8001012:	bf00      	nop
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	bd90      	pop	{r4, r7, pc}
	...

0800101c <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE>:

void SX128x::SetModulationParams(const ModulationParams_t& modParams )
{
 800101c:	b590      	push	{r4, r7, lr}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
	uint8_t buf[3];

	// Check if required configuration corresponds to the stored packet type
	// If not, silently update radio packet type
	if (this->PacketType != modParams.PacketType )
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	429a      	cmp	r2, r3
 8001032:	d005      	beq.n	8001040 <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE+0x24>
	{
		this->SetPacketType( modParams.PacketType );
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	4619      	mov	r1, r3
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f7ff ff70 	bl	8000f20 <_ZN6SX128x13SetPacketTypeENS_18RadioPacketTypes_tE>
	}

	switch( modParams.PacketType )
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b0f      	cmp	r3, #15
 8001046:	d857      	bhi.n	80010f8 <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE+0xdc>
 8001048:	a201      	add	r2, pc, #4	; (adr r2, 8001050 <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE+0x34>)
 800104a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800104e:	bf00      	nop
 8001050:	08001091 	.word	0x08001091
 8001054:	080010a5 	.word	0x080010a5
 8001058:	080010a5 	.word	0x080010a5
 800105c:	080010c3 	.word	0x080010c3
 8001060:	080010d7 	.word	0x080010d7
 8001064:	080010f9 	.word	0x080010f9
 8001068:	080010f9 	.word	0x080010f9
 800106c:	080010f9 	.word	0x080010f9
 8001070:	080010f9 	.word	0x080010f9
 8001074:	080010f9 	.word	0x080010f9
 8001078:	080010f9 	.word	0x080010f9
 800107c:	080010f9 	.word	0x080010f9
 8001080:	080010f9 	.word	0x080010f9
 8001084:	080010f9 	.word	0x080010f9
 8001088:	080010f9 	.word	0x080010f9
 800108c:	080010eb 	.word	0x080010eb
	{
		case PACKET_TYPE_GFSK:
			buf[0] = modParams.Params.Gfsk.BitrateBandwidth;
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	785b      	ldrb	r3, [r3, #1]
 8001094:	733b      	strb	r3, [r7, #12]
			buf[1] = modParams.Params.Gfsk.ModulationIndex;
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	789b      	ldrb	r3, [r3, #2]
 800109a:	737b      	strb	r3, [r7, #13]
			buf[2] = modParams.Params.Gfsk.ModulationShaping;
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	78db      	ldrb	r3, [r3, #3]
 80010a0:	73bb      	strb	r3, [r7, #14]
			break;
 80010a2:	e029      	b.n	80010f8 <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE+0xdc>
		case PACKET_TYPE_LORA:
		case PACKET_TYPE_RANGING:
			buf[0] = modParams.Params.LoRa.SpreadingFactor;
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	791b      	ldrb	r3, [r3, #4]
 80010a8:	733b      	strb	r3, [r7, #12]
			buf[1] = modParams.Params.LoRa.Bandwidth;
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	795b      	ldrb	r3, [r3, #5]
 80010ae:	737b      	strb	r3, [r7, #13]
			buf[2] = modParams.Params.LoRa.CodingRate;
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	799b      	ldrb	r3, [r3, #6]
 80010b4:	73bb      	strb	r3, [r7, #14]
			this->LoRaBandwidth = modParams.Params.LoRa.Bandwidth;
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	795a      	ldrb	r2, [r3, #5]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
			break;
 80010c0:	e01a      	b.n	80010f8 <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE+0xdc>
		case PACKET_TYPE_FLRC:
			buf[0] = modParams.Params.Flrc.BitrateBandwidth;
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	79db      	ldrb	r3, [r3, #7]
 80010c6:	733b      	strb	r3, [r7, #12]
			buf[1] = modParams.Params.Flrc.CodingRate;
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	7a1b      	ldrb	r3, [r3, #8]
 80010cc:	737b      	strb	r3, [r7, #13]
			buf[2] = modParams.Params.Flrc.ModulationShaping;
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	7a5b      	ldrb	r3, [r3, #9]
 80010d2:	73bb      	strb	r3, [r7, #14]
			break;
 80010d4:	e010      	b.n	80010f8 <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE+0xdc>
		case PACKET_TYPE_BLE:
			buf[0] = modParams.Params.Ble.BitrateBandwidth;
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	7a9b      	ldrb	r3, [r3, #10]
 80010da:	733b      	strb	r3, [r7, #12]
			buf[1] = modParams.Params.Ble.ModulationIndex;
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	7adb      	ldrb	r3, [r3, #11]
 80010e0:	737b      	strb	r3, [r7, #13]
			buf[2] = modParams.Params.Ble.ModulationShaping;
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	7b1b      	ldrb	r3, [r3, #12]
 80010e6:	73bb      	strb	r3, [r7, #14]
			break;
 80010e8:	e006      	b.n	80010f8 <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE+0xdc>
		case PACKET_TYPE_NONE:
			buf[0] = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	733b      	strb	r3, [r7, #12]
			buf[1] = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	737b      	strb	r3, [r7, #13]
			buf[2] = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	73bb      	strb	r3, [r7, #14]
			break;
 80010f6:	bf00      	nop
	}
	WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, 3 );
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	3330      	adds	r3, #48	; 0x30
 80010fe:	681c      	ldr	r4, [r3, #0]
 8001100:	f107 020c 	add.w	r2, r7, #12
 8001104:	2303      	movs	r3, #3
 8001106:	218b      	movs	r1, #139	; 0x8b
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	47a0      	blx	r4
	CurrentModParams = modParams;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	683a      	ldr	r2, [r7, #0]
 8001110:	33ab      	adds	r3, #171	; 0xab
 8001112:	6814      	ldr	r4, [r2, #0]
 8001114:	6850      	ldr	r0, [r2, #4]
 8001116:	6891      	ldr	r1, [r2, #8]
 8001118:	601c      	str	r4, [r3, #0]
 800111a:	6058      	str	r0, [r3, #4]
 800111c:	6099      	str	r1, [r3, #8]
 800111e:	7b12      	ldrb	r2, [r2, #12]
 8001120:	731a      	strb	r2, [r3, #12]
}
 8001122:	bf00      	nop
 8001124:	3714      	adds	r7, #20
 8001126:	46bd      	mov	sp, r7
 8001128:	bd90      	pop	{r4, r7, pc}
 800112a:	bf00      	nop

0800112c <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE>:

void SX128x::SetPacketParams(const PacketParams_t& packetParams)
{
 800112c:	b5b0      	push	{r4, r5, r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
	uint8_t buf[7];
	// Check if required configuration corresponds to the stored packet type
	// If not, silently update radio packet type
	if (this->PacketType != packetParams.PacketType )
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	429a      	cmp	r2, r3
 8001142:	d005      	beq.n	8001150 <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE+0x24>
	{
		this->SetPacketType( packetParams.PacketType );
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	4619      	mov	r1, r3
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f7ff fee8 	bl	8000f20 <_ZN6SX128x13SetPacketTypeENS_18RadioPacketTypes_tE>
	}

	switch( packetParams.PacketType )
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b0f      	cmp	r3, #15
 8001156:	f200 8085 	bhi.w	8001264 <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE+0x138>
 800115a:	a201      	add	r2, pc, #4	; (adr r2, 8001160 <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE+0x34>)
 800115c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001160:	080011a1 	.word	0x080011a1
 8001164:	080011cd 	.word	0x080011cd
 8001168:	080011cd 	.word	0x080011cd
 800116c:	080011f5 	.word	0x080011f5
 8001170:	08001221 	.word	0x08001221
 8001174:	08001265 	.word	0x08001265
 8001178:	08001265 	.word	0x08001265
 800117c:	08001265 	.word	0x08001265
 8001180:	08001265 	.word	0x08001265
 8001184:	08001265 	.word	0x08001265
 8001188:	08001265 	.word	0x08001265
 800118c:	08001265 	.word	0x08001265
 8001190:	08001265 	.word	0x08001265
 8001194:	08001265 	.word	0x08001265
 8001198:	08001265 	.word	0x08001265
 800119c:	08001247 	.word	0x08001247
	{
		case PACKET_TYPE_GFSK:
			buf[0] = packetParams.Params.Gfsk.PreambleLength;
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	785b      	ldrb	r3, [r3, #1]
 80011a4:	723b      	strb	r3, [r7, #8]
			buf[1] = packetParams.Params.Gfsk.SyncWordLength;
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	789b      	ldrb	r3, [r3, #2]
 80011aa:	727b      	strb	r3, [r7, #9]
			buf[2] = packetParams.Params.Gfsk.SyncWordMatch;
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	78db      	ldrb	r3, [r3, #3]
 80011b0:	72bb      	strb	r3, [r7, #10]
			buf[3] = packetParams.Params.Gfsk.HeaderType;
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	791b      	ldrb	r3, [r3, #4]
 80011b6:	72fb      	strb	r3, [r7, #11]
			buf[4] = packetParams.Params.Gfsk.PayloadLength;
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	795b      	ldrb	r3, [r3, #5]
 80011bc:	733b      	strb	r3, [r7, #12]
			buf[5] = packetParams.Params.Gfsk.CrcLength;
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	799b      	ldrb	r3, [r3, #6]
 80011c2:	737b      	strb	r3, [r7, #13]
			buf[6] = packetParams.Params.Gfsk.Whitening;
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	79db      	ldrb	r3, [r3, #7]
 80011c8:	73bb      	strb	r3, [r7, #14]
			break;
 80011ca:	e04b      	b.n	8001264 <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE+0x138>
		case PACKET_TYPE_LORA:
		case PACKET_TYPE_RANGING:
			buf[0] = packetParams.Params.LoRa.PreambleLength;
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	7a1b      	ldrb	r3, [r3, #8]
 80011d0:	723b      	strb	r3, [r7, #8]
			buf[1] = packetParams.Params.LoRa.HeaderType;
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	7a5b      	ldrb	r3, [r3, #9]
 80011d6:	727b      	strb	r3, [r7, #9]
			buf[2] = packetParams.Params.LoRa.PayloadLength;
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	7a9b      	ldrb	r3, [r3, #10]
 80011dc:	72bb      	strb	r3, [r7, #10]
			buf[3] = packetParams.Params.LoRa.Crc;
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	7adb      	ldrb	r3, [r3, #11]
 80011e2:	72fb      	strb	r3, [r7, #11]
			buf[4] = packetParams.Params.LoRa.InvertIQ;
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	7b1b      	ldrb	r3, [r3, #12]
 80011e8:	733b      	strb	r3, [r7, #12]
			buf[5] = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	737b      	strb	r3, [r7, #13]
			buf[6] = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	73bb      	strb	r3, [r7, #14]
			break;
 80011f2:	e037      	b.n	8001264 <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE+0x138>
		case PACKET_TYPE_FLRC:
			buf[0] = packetParams.Params.Flrc.PreambleLength;
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	7b5b      	ldrb	r3, [r3, #13]
 80011f8:	723b      	strb	r3, [r7, #8]
			buf[1] = packetParams.Params.Flrc.SyncWordLength;
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	7b9b      	ldrb	r3, [r3, #14]
 80011fe:	727b      	strb	r3, [r7, #9]
			buf[2] = packetParams.Params.Flrc.SyncWordMatch;
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	7bdb      	ldrb	r3, [r3, #15]
 8001204:	72bb      	strb	r3, [r7, #10]
			buf[3] = packetParams.Params.Flrc.HeaderType;
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	7c1b      	ldrb	r3, [r3, #16]
 800120a:	72fb      	strb	r3, [r7, #11]
			buf[4] = packetParams.Params.Flrc.PayloadLength;
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	7c5b      	ldrb	r3, [r3, #17]
 8001210:	733b      	strb	r3, [r7, #12]
			buf[5] = packetParams.Params.Flrc.CrcLength;
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	7c9b      	ldrb	r3, [r3, #18]
 8001216:	737b      	strb	r3, [r7, #13]
			buf[6] = packetParams.Params.Flrc.Whitening;
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	7cdb      	ldrb	r3, [r3, #19]
 800121c:	73bb      	strb	r3, [r7, #14]
			break;
 800121e:	e021      	b.n	8001264 <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE+0x138>
		case PACKET_TYPE_BLE:
			buf[0] = packetParams.Params.Ble.ConnectionState;
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	7d1b      	ldrb	r3, [r3, #20]
 8001224:	723b      	strb	r3, [r7, #8]
			buf[1] = packetParams.Params.Ble.CrcLength;
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	7d5b      	ldrb	r3, [r3, #21]
 800122a:	727b      	strb	r3, [r7, #9]
			buf[2] = packetParams.Params.Ble.BleTestPayload;
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	7d9b      	ldrb	r3, [r3, #22]
 8001230:	72bb      	strb	r3, [r7, #10]
			buf[3] = packetParams.Params.Ble.Whitening;
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	7ddb      	ldrb	r3, [r3, #23]
 8001236:	72fb      	strb	r3, [r7, #11]
			buf[4] = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	733b      	strb	r3, [r7, #12]
			buf[5] = 0;
 800123c:	2300      	movs	r3, #0
 800123e:	737b      	strb	r3, [r7, #13]
			buf[6] = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	73bb      	strb	r3, [r7, #14]
			break;
 8001244:	e00e      	b.n	8001264 <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE+0x138>
		case PACKET_TYPE_NONE:
			buf[0] = 0;
 8001246:	2300      	movs	r3, #0
 8001248:	723b      	strb	r3, [r7, #8]
			buf[1] = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	727b      	strb	r3, [r7, #9]
			buf[2] = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	72bb      	strb	r3, [r7, #10]
			buf[3] = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	72fb      	strb	r3, [r7, #11]
			buf[4] = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	733b      	strb	r3, [r7, #12]
			buf[5] = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	737b      	strb	r3, [r7, #13]
			buf[6] = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	73bb      	strb	r3, [r7, #14]
			break;
 8001262:	bf00      	nop
	}
	WriteCommand( RADIO_SET_PACKETPARAMS, buf, 7 );
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	3330      	adds	r3, #48	; 0x30
 800126a:	681c      	ldr	r4, [r3, #0]
 800126c:	f107 0208 	add.w	r2, r7, #8
 8001270:	2307      	movs	r3, #7
 8001272:	218c      	movs	r1, #140	; 0x8c
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	47a0      	blx	r4
	CurrentPacketParams = packetParams;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	683a      	ldr	r2, [r7, #0]
 800127c:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 8001280:	4615      	mov	r5, r2
 8001282:	6828      	ldr	r0, [r5, #0]
 8001284:	6869      	ldr	r1, [r5, #4]
 8001286:	68aa      	ldr	r2, [r5, #8]
 8001288:	68eb      	ldr	r3, [r5, #12]
 800128a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800128c:	6928      	ldr	r0, [r5, #16]
 800128e:	6969      	ldr	r1, [r5, #20]
 8001290:	c403      	stmia	r4!, {r0, r1}
}
 8001292:	bf00      	nop
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bdb0      	pop	{r4, r5, r7, pc}
 800129a:	bf00      	nop

0800129c <_ZN6SX128x15SetDioIrqParamsEtttt>:

	return ( int8_t ) ( -raw / 2 );
}

void SX128x::SetDioIrqParams(uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 800129c:	b590      	push	{r4, r7, lr}
 800129e:	b087      	sub	sp, #28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	4608      	mov	r0, r1
 80012a6:	4611      	mov	r1, r2
 80012a8:	461a      	mov	r2, r3
 80012aa:	4603      	mov	r3, r0
 80012ac:	817b      	strh	r3, [r7, #10]
 80012ae:	460b      	mov	r3, r1
 80012b0:	813b      	strh	r3, [r7, #8]
 80012b2:	4613      	mov	r3, r2
 80012b4:	80fb      	strh	r3, [r7, #6]
	uint8_t buf[8];

	buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 80012b6:	897b      	ldrh	r3, [r7, #10]
 80012b8:	0a1b      	lsrs	r3, r3, #8
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	743b      	strb	r3, [r7, #16]
	buf[1] = ( uint8_t )( irqMask & 0x00FF );
 80012c0:	897b      	ldrh	r3, [r7, #10]
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	747b      	strb	r3, [r7, #17]
	buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 80012c6:	893b      	ldrh	r3, [r7, #8]
 80012c8:	0a1b      	lsrs	r3, r3, #8
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	74bb      	strb	r3, [r7, #18]
	buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 80012d0:	893b      	ldrh	r3, [r7, #8]
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	74fb      	strb	r3, [r7, #19]
	buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 80012d6:	88fb      	ldrh	r3, [r7, #6]
 80012d8:	0a1b      	lsrs	r3, r3, #8
 80012da:	b29b      	uxth	r3, r3
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	753b      	strb	r3, [r7, #20]
	buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 80012e0:	88fb      	ldrh	r3, [r7, #6]
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	757b      	strb	r3, [r7, #21]
	buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 80012e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80012e8:	0a1b      	lsrs	r3, r3, #8
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	75bb      	strb	r3, [r7, #22]
	buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 80012f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	75fb      	strb	r3, [r7, #23]
	WriteCommand( RADIO_SET_DIOIRQPARAMS, buf, 8 );
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	3330      	adds	r3, #48	; 0x30
 80012fc:	681c      	ldr	r4, [r3, #0]
 80012fe:	f107 0210 	add.w	r2, r7, #16
 8001302:	2308      	movs	r3, #8
 8001304:	218d      	movs	r1, #141	; 0x8d
 8001306:	68f8      	ldr	r0, [r7, #12]
 8001308:	47a0      	blx	r4
}
 800130a:	bf00      	nop
 800130c:	371c      	adds	r7, #28
 800130e:	46bd      	mov	sp, r7
 8001310:	bd90      	pop	{r4, r7, pc}

08001312 <_ZN6SX128x12GetIrqStatusEv>:

uint16_t SX128x::GetIrqStatus(void )
{
 8001312:	b590      	push	{r4, r7, lr}
 8001314:	b085      	sub	sp, #20
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
	uint8_t irqStatus[2];
	ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	3334      	adds	r3, #52	; 0x34
 8001320:	681c      	ldr	r4, [r3, #0]
 8001322:	f107 020c 	add.w	r2, r7, #12
 8001326:	2302      	movs	r3, #2
 8001328:	2115      	movs	r1, #21
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	47a0      	blx	r4
	return ( irqStatus[0] << 8 ) | irqStatus[1];
 800132e:	7b3b      	ldrb	r3, [r7, #12]
 8001330:	021b      	lsls	r3, r3, #8
 8001332:	b21a      	sxth	r2, r3
 8001334:	7b7b      	ldrb	r3, [r7, #13]
 8001336:	b21b      	sxth	r3, r3
 8001338:	4313      	orrs	r3, r2
 800133a:	b21b      	sxth	r3, r3
 800133c:	b29b      	uxth	r3, r3
}
 800133e:	4618      	mov	r0, r3
 8001340:	3714      	adds	r7, #20
 8001342:	46bd      	mov	sp, r7
 8001344:	bd90      	pop	{r4, r7, pc}

08001346 <_ZN6SX128x14ClearIrqStatusEt>:

void SX128x::ClearIrqStatus(uint16_t irqMask )
{
 8001346:	b590      	push	{r4, r7, lr}
 8001348:	b085      	sub	sp, #20
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
 800134e:	460b      	mov	r3, r1
 8001350:	807b      	strh	r3, [r7, #2]
	uint8_t buf[2];

	buf[0] = ( uint8_t )( ( ( uint16_t )irqMask >> 8 ) & 0x00FF );
 8001352:	887b      	ldrh	r3, [r7, #2]
 8001354:	0a1b      	lsrs	r3, r3, #8
 8001356:	b29b      	uxth	r3, r3
 8001358:	b2db      	uxtb	r3, r3
 800135a:	733b      	strb	r3, [r7, #12]
	buf[1] = ( uint8_t )( ( uint16_t )irqMask & 0x00FF );
 800135c:	887b      	ldrh	r3, [r7, #2]
 800135e:	b2db      	uxtb	r3, r3
 8001360:	737b      	strb	r3, [r7, #13]
	WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	3330      	adds	r3, #48	; 0x30
 8001368:	681c      	ldr	r4, [r3, #0]
 800136a:	f107 020c 	add.w	r2, r7, #12
 800136e:	2302      	movs	r3, #2
 8001370:	2197      	movs	r1, #151	; 0x97
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	47a0      	blx	r4
}
 8001376:	bf00      	nop
 8001378:	3714      	adds	r7, #20
 800137a:	46bd      	mov	sp, r7
 800137c:	bd90      	pop	{r4, r7, pc}

0800137e <_ZN6SX128x10SetPayloadEPhhh>:
{
	WriteCommand( RADIO_SET_LONGPREAMBLE, ( uint8_t * )&enable, 1 );
}

void SX128x::SetPayload(uint8_t *buffer, uint8_t size, uint8_t offset )
{
 800137e:	b590      	push	{r4, r7, lr}
 8001380:	b085      	sub	sp, #20
 8001382:	af00      	add	r7, sp, #0
 8001384:	60f8      	str	r0, [r7, #12]
 8001386:	60b9      	str	r1, [r7, #8]
 8001388:	4611      	mov	r1, r2
 800138a:	461a      	mov	r2, r3
 800138c:	460b      	mov	r3, r1
 800138e:	71fb      	strb	r3, [r7, #7]
 8001390:	4613      	mov	r3, r2
 8001392:	71bb      	strb	r3, [r7, #6]
	WriteBuffer( offset, buffer, size );
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	3348      	adds	r3, #72	; 0x48
 800139a:	681c      	ldr	r4, [r3, #0]
 800139c:	79fb      	ldrb	r3, [r7, #7]
 800139e:	79b9      	ldrb	r1, [r7, #6]
 80013a0:	68ba      	ldr	r2, [r7, #8]
 80013a2:	68f8      	ldr	r0, [r7, #12]
 80013a4:	47a0      	blx	r4
}
 80013a6:	bf00      	nop
 80013a8:	3714      	adds	r7, #20
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd90      	pop	{r4, r7, pc}

080013ae <_ZN6SX128x11SendPayloadEPhhNS_10TickTime_sEh>:
	ReadBuffer( offset, buffer, *size );
	return 0;
}

void SX128x::SendPayload(uint8_t *payload, uint8_t size, TickTime_t timeout, uint8_t offset )
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b084      	sub	sp, #16
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	60f8      	str	r0, [r7, #12]
 80013b6:	60b9      	str	r1, [r7, #8]
 80013b8:	603b      	str	r3, [r7, #0]
 80013ba:	4613      	mov	r3, r2
 80013bc:	71fb      	strb	r3, [r7, #7]
	SetPayload( payload, size, offset );
 80013be:	7e3b      	ldrb	r3, [r7, #24]
 80013c0:	79fa      	ldrb	r2, [r7, #7]
 80013c2:	68b9      	ldr	r1, [r7, #8]
 80013c4:	68f8      	ldr	r0, [r7, #12]
 80013c6:	f7ff ffda 	bl	800137e <_ZN6SX128x10SetPayloadEPhhh>
	SetTx( timeout );
 80013ca:	6839      	ldr	r1, [r7, #0]
 80013cc:	68f8      	ldr	r0, [r7, #12]
 80013ce:	f7ff fd75 	bl	8000ebc <_ZN6SX128x5SetTxENS_10TickTime_sE>
}
 80013d2:	bf00      	nop
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <_ZN6SX128x11HalSpiWriteEPKht>:
	uint8_t useless[size];
	memset(useless, 0, size);
	HalSpiTransfer(buffer_in, useless, size);
}

void SX128x::HalSpiWrite(const uint8_t *buffer_out, uint16_t size) {
 80013da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013de:	b087      	sub	sp, #28
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	4613      	mov	r3, r2
 80013e8:	80fb      	strh	r3, [r7, #6]
	uint8_t useless[size];
	HalSpiTransfer(useless, buffer_out, size);
 80013ea:	466b      	mov	r3, sp
 80013ec:	461e      	mov	r6, r3
	uint8_t useless[size];
 80013ee:	88fb      	ldrh	r3, [r7, #6]
 80013f0:	1e59      	subs	r1, r3, #1
 80013f2:	6179      	str	r1, [r7, #20]
 80013f4:	460b      	mov	r3, r1
 80013f6:	3301      	adds	r3, #1
 80013f8:	2200      	movs	r2, #0
 80013fa:	4698      	mov	r8, r3
 80013fc:	4691      	mov	r9, r2
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	f04f 0300 	mov.w	r3, #0
 8001406:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800140a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800140e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001412:	460b      	mov	r3, r1
 8001414:	3301      	adds	r3, #1
 8001416:	2200      	movs	r2, #0
 8001418:	461c      	mov	r4, r3
 800141a:	4615      	mov	r5, r2
 800141c:	f04f 0200 	mov.w	r2, #0
 8001420:	f04f 0300 	mov.w	r3, #0
 8001424:	00eb      	lsls	r3, r5, #3
 8001426:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800142a:	00e2      	lsls	r2, r4, #3
 800142c:	460b      	mov	r3, r1
 800142e:	3301      	adds	r3, #1
 8001430:	3307      	adds	r3, #7
 8001432:	08db      	lsrs	r3, r3, #3
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	ebad 0d03 	sub.w	sp, sp, r3
 800143a:	466b      	mov	r3, sp
 800143c:	3300      	adds	r3, #0
 800143e:	613b      	str	r3, [r7, #16]
	HalSpiTransfer(useless, buffer_out, size);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	3308      	adds	r3, #8
 8001446:	681c      	ldr	r4, [r3, #0]
 8001448:	88fb      	ldrh	r3, [r7, #6]
 800144a:	68ba      	ldr	r2, [r7, #8]
 800144c:	6939      	ldr	r1, [r7, #16]
 800144e:	68f8      	ldr	r0, [r7, #12]
 8001450:	47a0      	blx	r4
 8001452:	46b5      	mov	sp, r6
}
 8001454:	bf00      	nop
 8001456:	371c      	adds	r7, #28
 8001458:	46bd      	mov	sp, r7
 800145a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800145e <_ZN6SX128x10WaitOnBusyEv>:

inline void SX128x::WaitOnBusy() {
 800145e:	b580      	push	{r7, lr}
 8001460:	b082      	sub	sp, #8
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
	while (HalGpioRead(GPIO_PIN_BUSY));
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2101      	movs	r1, #1
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	4798      	blx	r3
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	bf14      	ite	ne
 8001478:	2301      	movne	r3, #1
 800147a:	2300      	moveq	r3, #0
 800147c:	b2db      	uxtb	r3, r3
 800147e:	2b00      	cmp	r3, #0
 8001480:	d000      	beq.n	8001484 <_ZN6SX128x10WaitOnBusyEv+0x26>
 8001482:	e7f0      	b.n	8001466 <_ZN6SX128x10WaitOnBusyEv+0x8>
//	HAL_Delay(1);
//	for(int i = 0; i < 100; i++);
}
 8001484:	bf00      	nop
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <_ZN6SX128x14WaitOnBusyLongEv>:

inline void SX128x::WaitOnBusyLong() {
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
	while (HalGpioRead(GPIO_PIN_BUSY))
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2101      	movs	r1, #1
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	4798      	blx	r3
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	bf14      	ite	ne
 80014a6:	2301      	movne	r3, #1
 80014a8:	2300      	moveq	r3, #0
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d003      	beq.n	80014b8 <_ZN6SX128x14WaitOnBusyLongEv+0x2c>
		HAL_Delay(10);
 80014b0:	200a      	movs	r0, #10
 80014b2:	f001 fa9b 	bl	80029ec <HAL_Delay>
	while (HalGpioRead(GPIO_PIN_BUSY))
 80014b6:	e7ed      	b.n	8001494 <_ZN6SX128x14WaitOnBusyLongEv+0x8>
}
 80014b8:	bf00      	nop
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <_ZN6SX128x5ResetEv>:

void SX128x::Reset(void) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
	HalGpioWrite(GPIO_PIN_RESET, 1);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	3304      	adds	r3, #4
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2201      	movs	r2, #1
 80014d2:	2100      	movs	r1, #0
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	4798      	blx	r3
	HAL_Delay(10);
 80014d8:	200a      	movs	r0, #10
 80014da:	f001 fa87 	bl	80029ec <HAL_Delay>
	HalGpioWrite(GPIO_PIN_RESET, 0);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	3304      	adds	r3, #4
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2200      	movs	r2, #0
 80014e8:	2100      	movs	r1, #0
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	4798      	blx	r3
	HAL_Delay(10);
 80014ee:	200a      	movs	r0, #10
 80014f0:	f001 fa7c 	bl	80029ec <HAL_Delay>
	HalGpioWrite(GPIO_PIN_RESET, 1);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	3304      	adds	r3, #4
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2201      	movs	r2, #1
 80014fe:	2100      	movs	r1, #0
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	4798      	blx	r3
	HAL_Delay(10);
 8001504:	200a      	movs	r0, #10
 8001506:	f001 fa71 	bl	80029ec <HAL_Delay>
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <_ZN6SX128x6WakeupEv>:

void SX128x::Wakeup(void) {
 8001512:	b580      	push	{r7, lr}
 8001514:	b084      	sub	sp, #16
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
	uint8_t buf[2] = {RADIO_GET_STATUS, 0};
 800151a:	23c0      	movs	r3, #192	; 0xc0
 800151c:	81bb      	strh	r3, [r7, #12]
	HalSpiWrite(buf, 2);
 800151e:	f107 030c 	add.w	r3, r7, #12
 8001522:	2202      	movs	r2, #2
 8001524:	4619      	mov	r1, r3
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f7ff ff57 	bl	80013da <_ZN6SX128x11HalSpiWriteEPKht>
	WaitOnBusyLong();
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff ffad 	bl	800148c <_ZN6SX128x14WaitOnBusyLongEv>
}
 8001532:	bf00      	nop
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <_ZN6SX128x12WriteCommandENS_15RadioCommands_uEPht>:

void SX128x::WriteCommand(SX128x::RadioCommands_t opcode, uint8_t *buffer, uint16_t size) {
 800153a:	b580      	push	{r7, lr}
 800153c:	b086      	sub	sp, #24
 800153e:	af00      	add	r7, sp, #0
 8001540:	60f8      	str	r0, [r7, #12]
 8001542:	607a      	str	r2, [r7, #4]
 8001544:	461a      	mov	r2, r3
 8001546:	460b      	mov	r3, r1
 8001548:	72fb      	strb	r3, [r7, #11]
 800154a:	4613      	mov	r3, r2
 800154c:	813b      	strh	r3, [r7, #8]
	auto *merged_buf = (uint8_t *)alloca(size+1);
 800154e:	893b      	ldrh	r3, [r7, #8]
 8001550:	3301      	adds	r3, #1
 8001552:	3307      	adds	r3, #7
 8001554:	08db      	lsrs	r3, r3, #3
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	ebad 0d03 	sub.w	sp, sp, r3
 800155c:	466b      	mov	r3, sp
 800155e:	3307      	adds	r3, #7
 8001560:	08db      	lsrs	r3, r3, #3
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	617b      	str	r3, [r7, #20]

	merged_buf[0] = opcode;
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	7afa      	ldrb	r2, [r7, #11]
 800156a:	701a      	strb	r2, [r3, #0]
	memcpy(merged_buf+1, buffer, size);
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	3301      	adds	r3, #1
 8001570:	893a      	ldrh	r2, [r7, #8]
 8001572:	6879      	ldr	r1, [r7, #4]
 8001574:	4618      	mov	r0, r3
 8001576:	f003 fdcf 	bl	8005118 <memcpy>

	WaitOnBusy();
 800157a:	68f8      	ldr	r0, [r7, #12]
 800157c:	f7ff ff6f 	bl	800145e <_ZN6SX128x10WaitOnBusyEv>
	HalSpiWrite(merged_buf, size+1);
 8001580:	893b      	ldrh	r3, [r7, #8]
 8001582:	3301      	adds	r3, #1
 8001584:	b29b      	uxth	r3, r3
 8001586:	461a      	mov	r2, r3
 8001588:	6979      	ldr	r1, [r7, #20]
 800158a:	68f8      	ldr	r0, [r7, #12]
 800158c:	f7ff ff25 	bl	80013da <_ZN6SX128x11HalSpiWriteEPKht>
}
 8001590:	bf00      	nop
 8001592:	3718      	adds	r7, #24
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <_ZN6SX128x11ReadCommandENS_15RadioCommands_uEPht>:

void SX128x::ReadCommand(SX128x::RadioCommands_t opcode, uint8_t *buffer, uint16_t size) {
 8001598:	b590      	push	{r4, r7, lr}
 800159a:	b08b      	sub	sp, #44	; 0x2c
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	607a      	str	r2, [r7, #4]
 80015a2:	461a      	mov	r2, r3
 80015a4:	460b      	mov	r3, r1
 80015a6:	72fb      	strb	r3, [r7, #11]
 80015a8:	4613      	mov	r3, r2
 80015aa:	813b      	strh	r3, [r7, #8]

	if (opcode == RADIO_GET_STATUS) {
 80015ac:	7afb      	ldrb	r3, [r7, #11]
 80015ae:	2bc0      	cmp	r3, #192	; 0xc0
 80015b0:	d11a      	bne.n	80015e8 <_ZN6SX128x11ReadCommandENS_15RadioCommands_uEPht+0x50>
		uint8_t buf_out[3] = {static_cast<uint8_t>(opcode), 0, 0};
 80015b2:	f107 0318 	add.w	r3, r7, #24
 80015b6:	2100      	movs	r1, #0
 80015b8:	460a      	mov	r2, r1
 80015ba:	801a      	strh	r2, [r3, #0]
 80015bc:	460a      	mov	r2, r1
 80015be:	709a      	strb	r2, [r3, #2]
 80015c0:	7afb      	ldrb	r3, [r7, #11]
 80015c2:	763b      	strb	r3, [r7, #24]
		uint8_t buf_in[3];

		WaitOnBusy();
 80015c4:	68f8      	ldr	r0, [r7, #12]
 80015c6:	f7ff ff4a 	bl	800145e <_ZN6SX128x10WaitOnBusyEv>
		HalSpiTransfer(buf_in, buf_out, 3);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	3308      	adds	r3, #8
 80015d0:	681c      	ldr	r4, [r3, #0]
 80015d2:	f107 0218 	add.w	r2, r7, #24
 80015d6:	f107 0114 	add.w	r1, r7, #20
 80015da:	2303      	movs	r3, #3
 80015dc:	68f8      	ldr	r0, [r7, #12]
 80015de:	47a0      	blx	r4
		buffer[0] = buf_in[0];
 80015e0:	7d3a      	ldrb	r2, [r7, #20]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	701a      	strb	r2, [r3, #0]

		WaitOnBusy(); // wait until not busy before spi transfer
		HalSpiTransfer(buf_in, buf_out, total_transfer_size);
		memcpy(buffer, buf_in+2, size);
	}
}
 80015e6:	e035      	b.n	8001654 <_ZN6SX128x11ReadCommandENS_15RadioCommands_uEPht+0xbc>
		auto total_transfer_size = 2+size;
 80015e8:	893b      	ldrh	r3, [r7, #8]
 80015ea:	3302      	adds	r3, #2
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
		auto *buf_out = (uint8_t *)alloca(total_transfer_size);
 80015ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f0:	3307      	adds	r3, #7
 80015f2:	08db      	lsrs	r3, r3, #3
 80015f4:	00db      	lsls	r3, r3, #3
 80015f6:	ebad 0d03 	sub.w	sp, sp, r3
 80015fa:	466b      	mov	r3, sp
 80015fc:	3307      	adds	r3, #7
 80015fe:	08db      	lsrs	r3, r3, #3
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	623b      	str	r3, [r7, #32]
		auto *buf_in = (uint8_t *)alloca(total_transfer_size);
 8001604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001606:	3307      	adds	r3, #7
 8001608:	08db      	lsrs	r3, r3, #3
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	ebad 0d03 	sub.w	sp, sp, r3
 8001610:	466b      	mov	r3, sp
 8001612:	3307      	adds	r3, #7
 8001614:	08db      	lsrs	r3, r3, #3
 8001616:	00db      	lsls	r3, r3, #3
 8001618:	61fb      	str	r3, [r7, #28]
		memset(buf_out, 0, total_transfer_size);
 800161a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161c:	461a      	mov	r2, r3
 800161e:	2100      	movs	r1, #0
 8001620:	6a38      	ldr	r0, [r7, #32]
 8001622:	f003 fd87 	bl	8005134 <memset>
		buf_out[0] = opcode;
 8001626:	6a3b      	ldr	r3, [r7, #32]
 8001628:	7afa      	ldrb	r2, [r7, #11]
 800162a:	701a      	strb	r2, [r3, #0]
		WaitOnBusy(); // wait until not busy before spi transfer
 800162c:	68f8      	ldr	r0, [r7, #12]
 800162e:	f7ff ff16 	bl	800145e <_ZN6SX128x10WaitOnBusyEv>
		HalSpiTransfer(buf_in, buf_out, total_transfer_size);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	3308      	adds	r3, #8
 8001638:	681c      	ldr	r4, [r3, #0]
 800163a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163c:	b29b      	uxth	r3, r3
 800163e:	6a3a      	ldr	r2, [r7, #32]
 8001640:	69f9      	ldr	r1, [r7, #28]
 8001642:	68f8      	ldr	r0, [r7, #12]
 8001644:	47a0      	blx	r4
		memcpy(buffer, buf_in+2, size);
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	3302      	adds	r3, #2
 800164a:	893a      	ldrh	r2, [r7, #8]
 800164c:	4619      	mov	r1, r3
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f003 fd62 	bl	8005118 <memcpy>
}
 8001654:	bf00      	nop
 8001656:	372c      	adds	r7, #44	; 0x2c
 8001658:	46bd      	mov	sp, r7
 800165a:	bd90      	pop	{r4, r7, pc}

0800165c <_ZN6SX128x13WriteRegisterEtPht>:

void SX128x::WriteRegister(uint16_t address, uint8_t *buffer, uint16_t size) {
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	607a      	str	r2, [r7, #4]
 8001666:	461a      	mov	r2, r3
 8001668:	460b      	mov	r3, r1
 800166a:	817b      	strh	r3, [r7, #10]
 800166c:	4613      	mov	r3, r2
 800166e:	813b      	strh	r3, [r7, #8]
	auto total_transfer_size = 3+size;
 8001670:	893b      	ldrh	r3, [r7, #8]
 8001672:	3303      	adds	r3, #3
 8001674:	617b      	str	r3, [r7, #20]
	auto *buf_out = (uint8_t *)alloca(total_transfer_size);
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	3307      	adds	r3, #7
 800167a:	08db      	lsrs	r3, r3, #3
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	ebad 0d03 	sub.w	sp, sp, r3
 8001682:	466b      	mov	r3, sp
 8001684:	3307      	adds	r3, #7
 8001686:	08db      	lsrs	r3, r3, #3
 8001688:	00db      	lsls	r3, r3, #3
 800168a:	613b      	str	r3, [r7, #16]

	buf_out[0] = RADIO_WRITE_REGISTER;
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	2218      	movs	r2, #24
 8001690:	701a      	strb	r2, [r3, #0]
	buf_out[1] = ((address & 0xFF00) >> 8);
 8001692:	897b      	ldrh	r3, [r7, #10]
 8001694:	0a1b      	lsrs	r3, r3, #8
 8001696:	b29a      	uxth	r2, r3
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	3301      	adds	r3, #1
 800169c:	b2d2      	uxtb	r2, r2
 800169e:	701a      	strb	r2, [r3, #0]
	buf_out[2] = (address & 0x00FF);
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	3302      	adds	r3, #2
 80016a4:	897a      	ldrh	r2, [r7, #10]
 80016a6:	b2d2      	uxtb	r2, r2
 80016a8:	701a      	strb	r2, [r3, #0]
	memcpy(buf_out+3, buffer, size);
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	3303      	adds	r3, #3
 80016ae:	893a      	ldrh	r2, [r7, #8]
 80016b0:	6879      	ldr	r1, [r7, #4]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f003 fd30 	bl	8005118 <memcpy>

	WaitOnBusy(); // wait until not busy before spi transfer
 80016b8:	68f8      	ldr	r0, [r7, #12]
 80016ba:	f7ff fed0 	bl	800145e <_ZN6SX128x10WaitOnBusyEv>
	HalSpiWrite(buf_out, total_transfer_size);
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	461a      	mov	r2, r3
 80016c4:	6939      	ldr	r1, [r7, #16]
 80016c6:	68f8      	ldr	r0, [r7, #12]
 80016c8:	f7ff fe87 	bl	80013da <_ZN6SX128x11HalSpiWriteEPKht>
}
 80016cc:	bf00      	nop
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <_ZN6SX128x13WriteRegisterEth>:

inline void SX128x::WriteRegister(uint16_t address, uint8_t value) {
 80016d4:	b590      	push	{r4, r7, lr}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	460b      	mov	r3, r1
 80016de:	807b      	strh	r3, [r7, #2]
 80016e0:	4613      	mov	r3, r2
 80016e2:	707b      	strb	r3, [r7, #1]
	WriteRegister(address, &value, 1);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	3338      	adds	r3, #56	; 0x38
 80016ea:	681c      	ldr	r4, [r3, #0]
 80016ec:	1c7a      	adds	r2, r7, #1
 80016ee:	8879      	ldrh	r1, [r7, #2]
 80016f0:	2301      	movs	r3, #1
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	47a0      	blx	r4
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd90      	pop	{r4, r7, pc}

080016fe <_ZN6SX128x12ReadRegisterEtPht>:

void SX128x::ReadRegister(uint16_t address, uint8_t *buffer, uint16_t size) {
 80016fe:	b590      	push	{r4, r7, lr}
 8001700:	b089      	sub	sp, #36	; 0x24
 8001702:	af00      	add	r7, sp, #0
 8001704:	60f8      	str	r0, [r7, #12]
 8001706:	607a      	str	r2, [r7, #4]
 8001708:	461a      	mov	r2, r3
 800170a:	460b      	mov	r3, r1
 800170c:	817b      	strh	r3, [r7, #10]
 800170e:	4613      	mov	r3, r2
 8001710:	813b      	strh	r3, [r7, #8]
	
	auto total_transfer_size = 4+size;
 8001712:	893b      	ldrh	r3, [r7, #8]
 8001714:	3304      	adds	r3, #4
 8001716:	61fb      	str	r3, [r7, #28]
	auto *buf_out = (uint8_t *)alloca(total_transfer_size);
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	3307      	adds	r3, #7
 800171c:	08db      	lsrs	r3, r3, #3
 800171e:	00db      	lsls	r3, r3, #3
 8001720:	ebad 0d03 	sub.w	sp, sp, r3
 8001724:	466b      	mov	r3, sp
 8001726:	3307      	adds	r3, #7
 8001728:	08db      	lsrs	r3, r3, #3
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	61bb      	str	r3, [r7, #24]
	auto *buf_in = (uint8_t *)alloca(total_transfer_size);
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	3307      	adds	r3, #7
 8001732:	08db      	lsrs	r3, r3, #3
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	ebad 0d03 	sub.w	sp, sp, r3
 800173a:	466b      	mov	r3, sp
 800173c:	3307      	adds	r3, #7
 800173e:	08db      	lsrs	r3, r3, #3
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	617b      	str	r3, [r7, #20]

	memset(buf_out, 0, total_transfer_size);
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	461a      	mov	r2, r3
 8001748:	2100      	movs	r1, #0
 800174a:	69b8      	ldr	r0, [r7, #24]
 800174c:	f003 fcf2 	bl	8005134 <memset>
	buf_out[0] = RADIO_READ_REGISTER;
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	2219      	movs	r2, #25
 8001754:	701a      	strb	r2, [r3, #0]
	buf_out[1] = ((address & 0xFF00) >> 8);
 8001756:	897b      	ldrh	r3, [r7, #10]
 8001758:	0a1b      	lsrs	r3, r3, #8
 800175a:	b29a      	uxth	r2, r3
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	3301      	adds	r3, #1
 8001760:	b2d2      	uxtb	r2, r2
 8001762:	701a      	strb	r2, [r3, #0]
	buf_out[2] = (address & 0x00FF);
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	3302      	adds	r3, #2
 8001768:	897a      	ldrh	r2, [r7, #10]
 800176a:	b2d2      	uxtb	r2, r2
 800176c:	701a      	strb	r2, [r3, #0]

	WaitOnBusy(); // wait until not busy before spi transfer
 800176e:	68f8      	ldr	r0, [r7, #12]
 8001770:	f7ff fe75 	bl	800145e <_ZN6SX128x10WaitOnBusyEv>
	HalSpiTransfer(buf_in, buf_out, total_transfer_size);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	3308      	adds	r3, #8
 800177a:	681c      	ldr	r4, [r3, #0]
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	b29b      	uxth	r3, r3
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	6979      	ldr	r1, [r7, #20]
 8001784:	68f8      	ldr	r0, [r7, #12]
 8001786:	47a0      	blx	r4

	memcpy(buffer, buf_in+4, size);
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	3304      	adds	r3, #4
 800178c:	893a      	ldrh	r2, [r7, #8]
 800178e:	4619      	mov	r1, r3
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f003 fcc1 	bl	8005118 <memcpy>
}
 8001796:	bf00      	nop
 8001798:	3724      	adds	r7, #36	; 0x24
 800179a:	46bd      	mov	sp, r7
 800179c:	bd90      	pop	{r4, r7, pc}

0800179e <_ZN6SX128x12ReadRegisterEt>:

inline uint8_t SX128x::ReadRegister(uint16_t address) {
 800179e:	b590      	push	{r4, r7, lr}
 80017a0:	b085      	sub	sp, #20
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
 80017a6:	460b      	mov	r3, r1
 80017a8:	807b      	strh	r3, [r7, #2]
	uint8_t data;
	ReadRegister( address, &data, 1 );
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	3340      	adds	r3, #64	; 0x40
 80017b0:	681c      	ldr	r4, [r3, #0]
 80017b2:	f107 020f 	add.w	r2, r7, #15
 80017b6:	8879      	ldrh	r1, [r7, #2]
 80017b8:	2301      	movs	r3, #1
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	47a0      	blx	r4
	return data;
 80017be:	7bfb      	ldrb	r3, [r7, #15]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd90      	pop	{r4, r7, pc}

080017c8 <_ZN6SX128x11WriteBufferEhPhh>:

void SX128x::WriteBuffer(uint8_t offset, uint8_t *buffer, uint8_t size) {
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	607a      	str	r2, [r7, #4]
 80017d2:	461a      	mov	r2, r3
 80017d4:	460b      	mov	r3, r1
 80017d6:	72fb      	strb	r3, [r7, #11]
 80017d8:	4613      	mov	r3, r2
 80017da:	72bb      	strb	r3, [r7, #10]
	auto total_transfer_size = 2+size;
 80017dc:	7abb      	ldrb	r3, [r7, #10]
 80017de:	3302      	adds	r3, #2
 80017e0:	617b      	str	r3, [r7, #20]
	auto *buf_out = (uint8_t *)alloca(total_transfer_size);
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	3307      	adds	r3, #7
 80017e6:	08db      	lsrs	r3, r3, #3
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	ebad 0d03 	sub.w	sp, sp, r3
 80017ee:	466b      	mov	r3, sp
 80017f0:	3307      	adds	r3, #7
 80017f2:	08db      	lsrs	r3, r3, #3
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	613b      	str	r3, [r7, #16]

	buf_out[0] = RADIO_WRITE_BUFFER;
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	221a      	movs	r2, #26
 80017fc:	701a      	strb	r2, [r3, #0]
	buf_out[1] = offset;
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	3301      	adds	r3, #1
 8001802:	7afa      	ldrb	r2, [r7, #11]
 8001804:	701a      	strb	r2, [r3, #0]

	memcpy(buf_out+2, buffer, size);
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	3302      	adds	r3, #2
 800180a:	7aba      	ldrb	r2, [r7, #10]
 800180c:	6879      	ldr	r1, [r7, #4]
 800180e:	4618      	mov	r0, r3
 8001810:	f003 fc82 	bl	8005118 <memcpy>
	
	WaitOnBusy();
 8001814:	68f8      	ldr	r0, [r7, #12]
 8001816:	f7ff fe22 	bl	800145e <_ZN6SX128x10WaitOnBusyEv>
	HalSpiWrite(buf_out, total_transfer_size);
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	b29b      	uxth	r3, r3
 800181e:	461a      	mov	r2, r3
 8001820:	6939      	ldr	r1, [r7, #16]
 8001822:	68f8      	ldr	r0, [r7, #12]
 8001824:	f7ff fdd9 	bl	80013da <_ZN6SX128x11HalSpiWriteEPKht>
}
 8001828:	bf00      	nop
 800182a:	3718      	adds	r7, #24
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <_ZN6SX128x10ReadBufferEhPhh>:

void SX128x::ReadBuffer(uint8_t offset, uint8_t *buffer, uint8_t size) {
 8001830:	b590      	push	{r4, r7, lr}
 8001832:	b089      	sub	sp, #36	; 0x24
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	607a      	str	r2, [r7, #4]
 800183a:	461a      	mov	r2, r3
 800183c:	460b      	mov	r3, r1
 800183e:	72fb      	strb	r3, [r7, #11]
 8001840:	4613      	mov	r3, r2
 8001842:	72bb      	strb	r3, [r7, #10]
	auto total_transfer_size = 3+size;
 8001844:	7abb      	ldrb	r3, [r7, #10]
 8001846:	3303      	adds	r3, #3
 8001848:	61fb      	str	r3, [r7, #28]
	auto *buf_out = (uint8_t *)alloca(total_transfer_size);
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	3307      	adds	r3, #7
 800184e:	08db      	lsrs	r3, r3, #3
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	ebad 0d03 	sub.w	sp, sp, r3
 8001856:	466b      	mov	r3, sp
 8001858:	3307      	adds	r3, #7
 800185a:	08db      	lsrs	r3, r3, #3
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	61bb      	str	r3, [r7, #24]
	auto *buf_in = (uint8_t *)alloca(total_transfer_size);
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	3307      	adds	r3, #7
 8001864:	08db      	lsrs	r3, r3, #3
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	ebad 0d03 	sub.w	sp, sp, r3
 800186c:	466b      	mov	r3, sp
 800186e:	3307      	adds	r3, #7
 8001870:	08db      	lsrs	r3, r3, #3
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	617b      	str	r3, [r7, #20]

	memset(buf_out, 0, total_transfer_size);
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	461a      	mov	r2, r3
 800187a:	2100      	movs	r1, #0
 800187c:	69b8      	ldr	r0, [r7, #24]
 800187e:	f003 fc59 	bl	8005134 <memset>

	buf_out[0] = RADIO_READ_BUFFER;
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	221b      	movs	r2, #27
 8001886:	701a      	strb	r2, [r3, #0]
	buf_out[1] = offset;
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	3301      	adds	r3, #1
 800188c:	7afa      	ldrb	r2, [r7, #11]
 800188e:	701a      	strb	r2, [r3, #0]

	WaitOnBusy();
 8001890:	68f8      	ldr	r0, [r7, #12]
 8001892:	f7ff fde4 	bl	800145e <_ZN6SX128x10WaitOnBusyEv>
	HalSpiTransfer(buf_in, buf_out, total_transfer_size);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	3308      	adds	r3, #8
 800189c:	681c      	ldr	r4, [r3, #0]
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	6979      	ldr	r1, [r7, #20]
 80018a6:	68f8      	ldr	r0, [r7, #12]
 80018a8:	47a0      	blx	r4

	memcpy(buffer, buf_in+3, size);
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	3303      	adds	r3, #3
 80018ae:	7aba      	ldrb	r2, [r7, #10]
 80018b0:	4619      	mov	r1, r3
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f003 fc30 	bl	8005118 <memcpy>
}
 80018b8:	bf00      	nop
 80018ba:	3724      	adds	r7, #36	; 0x24
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd90      	pop	{r4, r7, pc}

080018c0 <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	609a      	str	r2, [r3, #8]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4618      	mov	r0, r3
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <_ZN10SX128x_OBJ24CommonTransceiverSettingEv>:

extern TIM_HandleTypeDef htim1;
extern int irq_timeout_times;

void SX128x_OBJ::CommonTransceiverSetting()
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
    SetStandby((RadioStandbyModes_t)MODE_STDBY_XOSC);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2103      	movs	r1, #3
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff fac8 	bl	8000e7e <_ZN6SX128x10SetStandbyENS_19RadioStandbyModes_tE>
    SetPacketType(PACKET_TYPE_LORA);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2101      	movs	r1, #1
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff fb14 	bl	8000f20 <_ZN6SX128x13SetPacketTypeENS_18RadioPacketTypes_tE>
    SetRfFrequency(RfFrequency);
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8001900:	4619      	mov	r1, r3
 8001902:	4610      	mov	r0, r2
 8001904:	f7ff fb23 	bl	8000f4e <_ZN6SX128x14SetRfFrequencyEm>
    SetBufferBaseAddresses(0x80, 0x00);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	2180      	movs	r1, #128	; 0x80
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff fb69 	bl	8000fe6 <_ZN6SX128x22SetBufferBaseAddressesEhh>
    SetModulationParams(mparams);
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800191c:	4619      	mov	r1, r3
 800191e:	4610      	mov	r0, r2
 8001920:	f7ff fb7c 	bl	800101c <_ZN6SX128x19SetModulationParamsERKNS_18ModulationParams_tE>
    SetPacketParams(pparams);
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f203 132d 	addw	r3, r3, #301	; 0x12d
 800192c:	4619      	mov	r1, r3
 800192e:	4610      	mov	r0, r2
 8001930:	f7ff fbfc 	bl	800112c <_ZN6SX128x15SetPacketParamsERKNS_14PacketParams_tE>
}
 8001934:	bf00      	nop
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <_ZN10SX128x_OBJ9TxSettingEv>:

void SX128x_OBJ::TxSetting()
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af02      	add	r7, sp, #8
 8001942:	6078      	str	r0, [r7, #4]
	SetTxParams(13, RADIO_RAMP_02_US);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	210d      	movs	r1, #13
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff fb2f 	bl	8000fae <_ZN6SX128x11SetTxParamsEaNS_16RadioRampTimes_tE>
	InterruptSetting();
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f000 f80e 	bl	8001972 <_ZN10SX128x_OBJ16InterruptSettingEv>
	SetDioIrqParams(0xFFFF, 0xFFFF, 0x0000, 0x0000);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	2300      	movs	r3, #0
 800195a:	9300      	str	r3, [sp, #0]
 800195c:	2300      	movs	r3, #0
 800195e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001962:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001966:	f7ff fc99 	bl	800129c <_ZN6SX128x15SetDioIrqParamsEtttt>
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <_ZN10SX128x_OBJ16InterruptSettingEv>:
	ClearIrqStatus(0xFFFF);
	return 0;
}

inline void SX128x_OBJ::InterruptSetting()
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b084      	sub	sp, #16
 8001976:	af02      	add	r7, sp, #8
 8001978:	6078      	str	r0, [r7, #4]
	SetDioIrqParams(0x0003, 0x0003, 0x0000, 0x0000);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	2300      	movs	r3, #0
 800197e:	9300      	str	r3, [sp, #0]
 8001980:	2300      	movs	r3, #0
 8001982:	2203      	movs	r2, #3
 8001984:	2103      	movs	r1, #3
 8001986:	f7ff fc89 	bl	800129c <_ZN6SX128x15SetDioIrqParamsEtttt>
}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <_ZN10SX128x_OBJ4InitEv>:
{
	ClearIrqStatus(0xFFFF);
}

uint8_t SX128x_OBJ::Init()
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b086      	sub	sp, #24
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
	Reset();
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	3328      	adds	r3, #40	; 0x28
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4610      	mov	r0, r2
 80019a6:	4798      	blx	r3
	// Wakeup();
	// SetRegistersDefault();

	uint8_t rx[2], tx[2];
	*(uint32_t*)tx = 0x80 | 0x01 << 8;
 80019a8:	f107 0310 	add.w	r3, r7, #16
 80019ac:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80019b0:	601a      	str	r2, [r3, #0]
	HalSpiTransferDelay(rx, tx, 2);
 80019b2:	f107 0210 	add.w	r2, r7, #16
 80019b6:	f107 0114 	add.w	r1, r7, #20
 80019ba:	2302      	movs	r3, #2
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f000 fa63 	bl	8001e88 <_ZN10SX128x_OBJ19HalSpiTransferDelayEPhPKht>
	RadioStatus_t status;
	status = GetStatus();
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	3358      	adds	r3, #88	; 0x58
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4610      	mov	r0, r2
 80019ce:	4798      	blx	r3
 80019d0:	4603      	mov	r3, r0
 80019d2:	733b      	strb	r3, [r7, #12]
	if(status.Fields.CmdStatus != 0x01)
 80019d4:	7b3b      	ldrb	r3, [r7, #12]
 80019d6:	f003 031c 	and.w	r3, r3, #28
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	2b04      	cmp	r3, #4
 80019de:	d001      	beq.n	80019e4 <_ZN10SX128x_OBJ4InitEv+0x52>
		return 1;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e00b      	b.n	80019fc <_ZN10SX128x_OBJ4InitEv+0x6a>
	if(status.Fields.ChipMode != 0x03)
 80019e4:	7b3b      	ldrb	r3, [r7, #12]
 80019e6:	f023 031f 	bic.w	r3, r3, #31
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	2b60      	cmp	r3, #96	; 0x60
 80019ee:	d001      	beq.n	80019f4 <_ZN10SX128x_OBJ4InitEv+0x62>
		return 1;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e003      	b.n	80019fc <_ZN10SX128x_OBJ4InitEv+0x6a>

	CommonTransceiverSetting();
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f7ff ff71 	bl	80018dc <_ZN10SX128x_OBJ24CommonTransceiverSettingEv>
	return 0;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3718      	adds	r7, #24
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <_ZN6SX128xUt0_C1Ev>:
	struct {
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f000 f970 	bl	8001cf4 <_ZNSt8functionIFvvEEC1Ev>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3310      	adds	r3, #16
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f000 f96b 	bl	8001cf4 <_ZNSt8functionIFvvEEC1Ev>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	3320      	adds	r3, #32
 8001a22:	4618      	mov	r0, r3
 8001a24:	f000 f966 	bl	8001cf4 <_ZNSt8functionIFvvEEC1Ev>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	3330      	adds	r3, #48	; 0x30
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f000 f961 	bl	8001cf4 <_ZNSt8functionIFvvEEC1Ev>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	3340      	adds	r3, #64	; 0x40
 8001a36:	4618      	mov	r0, r3
 8001a38:	f000 f95c 	bl	8001cf4 <_ZNSt8functionIFvvEEC1Ev>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3350      	adds	r3, #80	; 0x50
 8001a40:	4618      	mov	r0, r3
 8001a42:	f000 f957 	bl	8001cf4 <_ZNSt8functionIFvvEEC1Ev>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	3360      	adds	r3, #96	; 0x60
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f000 f95f 	bl	8001d0e <_ZNSt8functionIFvN6SX128x14IrqErrorCode_tEEEC1Ev>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3370      	adds	r3, #112	; 0x70
 8001a54:	4618      	mov	r0, r3
 8001a56:	f000 f967 	bl	8001d28 <_ZNSt8functionIFvN6SX128x16IrqRangingCode_tEEEC1Ev>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	3380      	adds	r3, #128	; 0x80
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f000 f96f 	bl	8001d42 <_ZNSt8functionIFvbEEC1Ev>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <_ZN6SX128xC1Ev>:
	SX128x() = default;
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	4a1f      	ldr	r2, [pc, #124]	; (8001af8 <_ZN6SX128xC1Ev+0x88>)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	a31b      	add	r3, pc, #108	; (adr r3, 8001af0 <_ZN6SX128xC1Ev+0x80>)
 8001a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a86:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	741a      	strb	r2, [r3, #16]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a96:	825a      	strh	r2, [r3, #18]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	751a      	strb	r2, [r3, #20]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	82da      	strh	r2, [r3, #22]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3318      	adds	r3, #24
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff ffab 	bl	8001a04 <_ZN6SX128xUt0_C1Ev>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2202      	movs	r2, #2
 8001ab2:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	220f      	movs	r2, #15
 8001aba:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	220a      	movs	r2, #10
 8001ac2:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	33ab      	adds	r3, #171	; 0xab
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	609a      	str	r2, [r3, #8]
 8001ad2:	731a      	strb	r2, [r3, #12]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	33b8      	adds	r3, #184	; 0xb8
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
 8001ae2:	611a      	str	r2, [r3, #16]
 8001ae4:	615a      	str	r2, [r3, #20]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	00000000 	.word	0x00000000
 8001af4:	4068cba8 	.word	0x4068cba8
 8001af8:	08005aec 	.word	0x08005aec

08001afc <_ZN10SX128x_OBJC1Ev>:

SX128x_OBJ::SX128x_OBJ()
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff ffb2 	bl	8001a70 <_ZN6SX128xC1Ev>
 8001b0c:	4a27      	ldr	r2, [pc, #156]	; (8001bac <_ZN10SX128x_OBJC1Ev+0xb0>)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	33d0      	adds	r3, #208	; 0xd0
 8001b16:	2240      	movs	r2, #64	; 0x40
 8001b18:	2100      	movs	r1, #0
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f003 fb0a 	bl	8005134 <memset>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4a19      	ldr	r2, [pc, #100]	; (8001bb0 <_ZN10SX128x_OBJC1Ev+0xb4>)
 8001b4c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
{
	mparams.PacketType = PACKET_TYPE_LORA;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
    mparams.Params.LoRa.SpreadingFactor = LORA_SF7;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2270      	movs	r2, #112	; 0x70
 8001b5c:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
	mparams.Params.LoRa.Bandwidth = LORA_BW_0800;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2218      	movs	r2, #24
 8001b64:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
	mparams.Params.LoRa.CodingRate = LORA_CR_4_5;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126

	pparams.PacketType = PACKET_TYPE_LORA;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
	pparams.Params.LoRa.HeaderType = LORA_PACKET_FIXED_LENGTH;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2280      	movs	r2, #128	; 0x80
 8001b7c:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
	pparams.Params.LoRa.InvertIQ = LORA_IQ_NORMAL;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2240      	movs	r2, #64	; 0x40
 8001b84:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
	pparams.Params.LoRa.Crc = LORA_CRC_ON;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2220      	movs	r2, #32
 8001b8c:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	pparams.Params.LoRa.PayloadLength = PACKET_SIZE;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2208      	movs	r2, #8
 8001b94:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
	pparams.Params.LoRa.PreambleLength = 12;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	220c      	movs	r2, #12
 8001b9c:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135

//	callbacks.txDone = &tx_recursion();
	
}
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	08005b50 	.word	0x08005b50
 8001bb0:	8f0d1800 	.word	0x8f0d1800

08001bb4 <_ZN10SX128x_OBJ9PutPacketEPh>:

uint8_t SX128x_OBJ::PutPacket(uint8_t* in)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af02      	add	r7, sp, #8
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]

	if(tx_length == 8) {
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f993 3118 	ldrsb.w	r3, [r3, #280]	; 0x118
 8001bc4:	2b08      	cmp	r3, #8
 8001bc6:	d101      	bne.n	8001bcc <_ZN10SX128x_OBJ9PutPacketEPh+0x18>
		return 1;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e045      	b.n	8001c58 <_ZN10SX128x_OBJ9PutPacketEPh+0xa4>
	} else {
		*(uint32_t*)tx_eprt = *(uint32_t*)in;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	6812      	ldr	r2, [r2, #0]
 8001bd6:	601a      	str	r2, [r3, #0]
		*(uint32_t*)(tx_eprt+4) = *(uint32_t*)(in+4);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001bde:	3304      	adds	r3, #4
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	6852      	ldr	r2, [r2, #4]
 8001be4:	601a      	str	r2, [r3, #0]
		if(tx_eprt == tx_fifo[7])
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d106      	bne.n	8001c04 <_ZN10SX128x_OBJ9PutPacketEPh+0x50>
		{
			tx_eprt = tx_fifo[0];
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8001c02:	e007      	b.n	8001c14 <_ZN10SX128x_OBJ9PutPacketEPh+0x60>
		}
		else
		{
			tx_eprt += 8;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001c0a:	f103 0208 	add.w	r2, r3, #8
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		}
		tx_length ++;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f993 3118 	ldrsb.w	r3, [r3, #280]	; 0x118
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	b25a      	sxtb	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
		if(!tx_activated)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d111      	bne.n	8001c56 <_ZN10SX128x_OBJ9PutPacketEPh+0xa2>
		{
			TickTime_t t;
			t.PeriodBase = RADIO_TICK_SIZE_0015_US;
 8001c32:	2300      	movs	r3, #0
 8001c34:	733b      	strb	r3, [r7, #12]
			t.PeriodBaseCount = 0;
 8001c36:	2300      	movs	r3, #0
 8001c38:	81fb      	strh	r3, [r7, #14]
			tx_activated = 1;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
			SendPayload(tx_sprt, 8, t, 0x80);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 8001c4a:	2380      	movs	r3, #128	; 0x80
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2208      	movs	r2, #8
 8001c52:	f7ff fbac 	bl	80013ae <_ZN6SX128x11SendPayloadEPhhNS_10TickTime_sEh>
		}
	}
	return 0;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <_ZN10SX128x_OBJ12tx_recursionEv>:
{
	return tx_length;
}

void SX128x_OBJ::tx_recursion()
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af02      	add	r7, sp, #8
 8001c66:	6078      	str	r0, [r7, #4]

	uint16_t irqRegs = GetIrqStatus();
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff fb51 	bl	8001312 <_ZN6SX128x12GetIrqStatusEv>
 8001c70:	4603      	mov	r3, r0
 8001c72:	81fb      	strh	r3, [r7, #14]
	if(!(irqRegs|IRQ_TX_DONE))
		return;
	ClearIrqStatus(IRQ_TX_DONE);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2101      	movs	r1, #1
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff fb64 	bl	8001346 <_ZN6SX128x14ClearIrqStatusEt>
	if(tx_sprt == tx_fifo[7])
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d106      	bne.n	8001c9c <_ZN10SX128x_OBJ12tx_recursionEv+0x3c>
	{
		tx_sprt = tx_fifo[0];
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 8001c9a:	e006      	b.n	8001caa <_ZN10SX128x_OBJ12tx_recursionEv+0x4a>
	}
	else
	{
		tx_sprt += 4;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8001ca2:	1d1a      	adds	r2, r3, #4
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	}
	tx_length--;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f993 3118 	ldrsb.w	r3, [r3, #280]	; 0x118
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	b25a      	sxtb	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
	if(tx_length >= 0)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f993 3118 	ldrsb.w	r3, [r3, #280]	; 0x118
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	db04      	blt.n	8001cd2 <_ZN10SX128x_OBJ12tx_recursionEv+0x72>
	{
		tx_activated = 0;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
 8001cd0:	e00d      	b.n	8001cee <_ZN10SX128x_OBJ12tx_recursionEv+0x8e>
		return;
	}
	TickTime_t t;
	t.PeriodBase = RADIO_TICK_SIZE_0015_US;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	723b      	strb	r3, [r7, #8]
	t.PeriodBaseCount = 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	817b      	strh	r3, [r7, #10]
	SendPayload(tx_sprt, 8, t, 0x80);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 8001ce2:	2380      	movs	r3, #128	; 0x80
 8001ce4:	9300      	str	r3, [sp, #0]
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	2208      	movs	r2, #8
 8001cea:	f7ff fb60 	bl	80013ae <_ZN6SX128x11SendPayloadEPhhNS_10TickTime_sEh>

}
 8001cee:	3710      	adds	r7, #16
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <_ZNSt8functionIFvvEEC1Ev>:

      /**
       *  @brief Default construct creates an empty function call wrapper.
       *  @post @c !(bool)*this
       */
      function() noexcept
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff fdde 	bl	80018c0 <_ZNSt14_Function_baseC1Ev>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4618      	mov	r0, r3
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <_ZNSt8functionIFvN6SX128x14IrqErrorCode_tEEEC1Ev>:
      function() noexcept
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b082      	sub	sp, #8
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff fdd1 	bl	80018c0 <_ZNSt14_Function_baseC1Ev>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4618      	mov	r0, r3
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <_ZNSt8functionIFvN6SX128x16IrqRangingCode_tEEEC1Ev>:
      function() noexcept
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff fdc4 	bl	80018c0 <_ZNSt14_Function_baseC1Ev>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <_ZNSt8functionIFvbEEC1Ev>:
      function() noexcept
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b082      	sub	sp, #8
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff fdb7 	bl	80018c0 <_ZNSt14_Function_baseC1Ev>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4618      	mov	r0, r3
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
      if (_M_manager)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d005      	beq.n	8001d78 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	6879      	ldr	r1, [r7, #4]
 8001d74:	2203      	movs	r2, #3
 8001d76:	4798      	blx	r3
    }
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
	...

08001d84 <_ZN10SX128x_OBJ11HalGpioReadEN6SX128x17GpioPinFunction_tE>:

#elif defined SOPHIA_V2
extern SPI_HandleTypeDef hspi2;

uint8_t SX128x_OBJ::HalGpioRead(GpioPinFunction_t func)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	70fb      	strb	r3, [r7, #3]
	switch (func)
 8001d90:	78fb      	ldrb	r3, [r7, #3]
 8001d92:	2b04      	cmp	r3, #4
 8001d94:	d820      	bhi.n	8001dd8 <_ZN10SX128x_OBJ11HalGpioReadEN6SX128x17GpioPinFunction_tE+0x54>
 8001d96:	a201      	add	r2, pc, #4	; (adr r2, 8001d9c <_ZN10SX128x_OBJ11HalGpioReadEN6SX128x17GpioPinFunction_tE+0x18>)
 8001d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d9c:	08001db1 	.word	0x08001db1
 8001da0:	08001dbf 	.word	0x08001dbf
 8001da4:	08001dcd 	.word	0x08001dcd
 8001da8:	08001dd1 	.word	0x08001dd1
 8001dac:	08001dd5 	.word	0x08001dd5
	{
		case GPIO_PIN_RESET:
			return HAL_GPIO_ReadPin(SX1280_RST_GPIO_Port, SX1280_RST_Pin);
 8001db0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001db4:	480b      	ldr	r0, [pc, #44]	; (8001de4 <_ZN10SX128x_OBJ11HalGpioReadEN6SX128x17GpioPinFunction_tE+0x60>)
 8001db6:	f001 f8e3 	bl	8002f80 <HAL_GPIO_ReadPin>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	e00d      	b.n	8001dda <_ZN10SX128x_OBJ11HalGpioReadEN6SX128x17GpioPinFunction_tE+0x56>
		case GPIO_PIN_BUSY:
			return HAL_GPIO_ReadPin(SX1280_BUSY_GPIO_Port, SX1280_BUSY_Pin);
 8001dbe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001dc2:	4808      	ldr	r0, [pc, #32]	; (8001de4 <_ZN10SX128x_OBJ11HalGpioReadEN6SX128x17GpioPinFunction_tE+0x60>)
 8001dc4:	f001 f8dc 	bl	8002f80 <HAL_GPIO_ReadPin>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	e006      	b.n	8001dda <_ZN10SX128x_OBJ11HalGpioReadEN6SX128x17GpioPinFunction_tE+0x56>
		case GPIO_PIN_DIO1:
			return 0;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	e004      	b.n	8001dda <_ZN10SX128x_OBJ11HalGpioReadEN6SX128x17GpioPinFunction_tE+0x56>
		case GPIO_PIN_DIO2:
			return 0;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	e002      	b.n	8001dda <_ZN10SX128x_OBJ11HalGpioReadEN6SX128x17GpioPinFunction_tE+0x56>
		case GPIO_PIN_DIO3:
			return 0;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	e000      	b.n	8001dda <_ZN10SX128x_OBJ11HalGpioReadEN6SX128x17GpioPinFunction_tE+0x56>
		default:
			return 0;
 8001dd8:	2300      	movs	r3, #0
	}
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40020400 	.word	0x40020400

08001de8 <_ZN10SX128x_OBJ12HalGpioWriteEN6SX128x17GpioPinFunction_tEh>:


void SX128x_OBJ::HalGpioWrite(GpioPinFunction_t func, register uint8_t value)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	4613      	mov	r3, r2
 8001df2:	460a      	mov	r2, r1
 8001df4:	70fa      	strb	r2, [r7, #3]
	switch (func)
 8001df6:	78fa      	ldrb	r2, [r7, #3]
 8001df8:	2a04      	cmp	r2, #4
 8001dfa:	d81b      	bhi.n	8001e34 <_ZN10SX128x_OBJ12HalGpioWriteEN6SX128x17GpioPinFunction_tEh+0x4c>
 8001dfc:	a101      	add	r1, pc, #4	; (adr r1, 8001e04 <_ZN10SX128x_OBJ12HalGpioWriteEN6SX128x17GpioPinFunction_tEh+0x1c>)
 8001dfe:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8001e02:	bf00      	nop
 8001e04:	08001e19 	.word	0x08001e19
 8001e08:	08001e27 	.word	0x08001e27
 8001e0c:	08001e35 	.word	0x08001e35
 8001e10:	08001e35 	.word	0x08001e35
 8001e14:	08001e35 	.word	0x08001e35
	{
	case GPIO_PIN_RESET:
		HAL_GPIO_WritePin(SX1280_RST_GPIO_Port, SX1280_RST_Pin, (GPIO_PinState)value);
 8001e18:	461a      	mov	r2, r3
 8001e1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e1e:	4808      	ldr	r0, [pc, #32]	; (8001e40 <_ZN10SX128x_OBJ12HalGpioWriteEN6SX128x17GpioPinFunction_tEh+0x58>)
 8001e20:	f001 f8c6 	bl	8002fb0 <HAL_GPIO_WritePin>
		break;
 8001e24:	e007      	b.n	8001e36 <_ZN10SX128x_OBJ12HalGpioWriteEN6SX128x17GpioPinFunction_tEh+0x4e>
	case GPIO_PIN_BUSY:
		HAL_GPIO_WritePin(SX1280_BUSY_GPIO_Port, SX1280_BUSY_Pin, (GPIO_PinState)value);
 8001e26:	461a      	mov	r2, r3
 8001e28:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e2c:	4804      	ldr	r0, [pc, #16]	; (8001e40 <_ZN10SX128x_OBJ12HalGpioWriteEN6SX128x17GpioPinFunction_tEh+0x58>)
 8001e2e:	f001 f8bf 	bl	8002fb0 <HAL_GPIO_WritePin>
		break;
 8001e32:	e000      	b.n	8001e36 <_ZN10SX128x_OBJ12HalGpioWriteEN6SX128x17GpioPinFunction_tEh+0x4e>
	case GPIO_PIN_DIO2:
		break;
	case GPIO_PIN_DIO3:
		break;
	default:
		break;
 8001e34:	bf00      	nop
	}
}
 8001e36:	bf00      	nop
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40020400 	.word	0x40020400

08001e44 <_ZN10SX128x_OBJ14HalSpiTransferEPhPKht>:

void SX128x_OBJ::HalSpiTransfer(uint8_t *buffer_in, const uint8_t *buffer_out, uint16_t size)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af02      	add	r7, sp, #8
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
 8001e50:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(SX1280_NSS_GPIO_Port, SX1280_NSS_Pin, (GPIO_PinState)0);
 8001e52:	2200      	movs	r2, #0
 8001e54:	2140      	movs	r1, #64	; 0x40
 8001e56:	480a      	ldr	r0, [pc, #40]	; (8001e80 <_ZN10SX128x_OBJ14HalSpiTransferEPhPKht+0x3c>)
 8001e58:	f001 f8aa 	bl	8002fb0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)buffer_out, buffer_in, size, 1);
 8001e5c:	887b      	ldrh	r3, [r7, #2]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	9200      	str	r2, [sp, #0]
 8001e62:	68ba      	ldr	r2, [r7, #8]
 8001e64:	6879      	ldr	r1, [r7, #4]
 8001e66:	4807      	ldr	r0, [pc, #28]	; (8001e84 <_ZN10SX128x_OBJ14HalSpiTransferEPhPKht+0x40>)
 8001e68:	f001 ff9f 	bl	8003daa <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SX1280_NSS_GPIO_Port, SX1280_NSS_Pin, (GPIO_PinState)1);
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	2140      	movs	r1, #64	; 0x40
 8001e70:	4803      	ldr	r0, [pc, #12]	; (8001e80 <_ZN10SX128x_OBJ14HalSpiTransferEPhPKht+0x3c>)
 8001e72:	f001 f89d 	bl	8002fb0 <HAL_GPIO_WritePin>
}
 8001e76:	bf00      	nop
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40020800 	.word	0x40020800
 8001e84:	20000094 	.word	0x20000094

08001e88 <_ZN10SX128x_OBJ19HalSpiTransferDelayEPhPKht>:

void SX128x_OBJ::HalSpiTransferDelay(uint8_t *buffer_in, const uint8_t *buffer_out, uint16_t size)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af02      	add	r7, sp, #8
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
 8001e94:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(SX1280_NSS_GPIO_Port, SX1280_NSS_Pin, (GPIO_PinState)0);
 8001e96:	2200      	movs	r2, #0
 8001e98:	2140      	movs	r1, #64	; 0x40
 8001e9a:	480b      	ldr	r0, [pc, #44]	; (8001ec8 <_ZN10SX128x_OBJ19HalSpiTransferDelayEPhPKht+0x40>)
 8001e9c:	f001 f888 	bl	8002fb0 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001ea0:	200a      	movs	r0, #10
 8001ea2:	f000 fda3 	bl	80029ec <HAL_Delay>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)buffer_out, buffer_in, size, 1);
 8001ea6:	887b      	ldrh	r3, [r7, #2]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	9200      	str	r2, [sp, #0]
 8001eac:	68ba      	ldr	r2, [r7, #8]
 8001eae:	6879      	ldr	r1, [r7, #4]
 8001eb0:	4806      	ldr	r0, [pc, #24]	; (8001ecc <_ZN10SX128x_OBJ19HalSpiTransferDelayEPhPKht+0x44>)
 8001eb2:	f001 ff7a 	bl	8003daa <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SX1280_NSS_GPIO_Port, SX1280_NSS_Pin, (GPIO_PinState)1);
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	2140      	movs	r1, #64	; 0x40
 8001eba:	4803      	ldr	r0, [pc, #12]	; (8001ec8 <_ZN10SX128x_OBJ19HalSpiTransferDelayEPhPKht+0x40>)
 8001ebc:	f001 f878 	bl	8002fb0 <HAL_GPIO_WritePin>
}
 8001ec0:	bf00      	nop
 8001ec2:	3710      	adds	r7, #16
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40020800 	.word	0x40020800
 8001ecc:	20000094 	.word	0x20000094

08001ed0 <_ZNSt8functionIFvvEED1Ev>:
    class function<_Res(_ArgTypes...)>
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7ff ff3e 	bl	8001d5c <_ZNSt14_Function_baseD1Ev>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <_ZNSt8functionIFvN6SX128x14IrqErrorCode_tEEED1Ev>:
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff ff31 	bl	8001d5c <_ZNSt14_Function_baseD1Ev>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4618      	mov	r0, r3
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <_ZNSt8functionIFvN6SX128x16IrqRangingCode_tEEED1Ev>:
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff ff24 	bl	8001d5c <_ZNSt14_Function_baseD1Ev>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <_ZNSt8functionIFvbEED1Ev>:
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b082      	sub	sp, #8
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff ff17 	bl	8001d5c <_ZNSt14_Function_baseD1Ev>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4618      	mov	r0, r3
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <_ZN6SX128xUt0_D1Ev>:
	struct {
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3380      	adds	r3, #128	; 0x80
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff ffea 	bl	8001f1e <_ZNSt8functionIFvbEED1Ev>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	3370      	adds	r3, #112	; 0x70
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7ff ffd8 	bl	8001f04 <_ZNSt8functionIFvN6SX128x16IrqRangingCode_tEEED1Ev>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3360      	adds	r3, #96	; 0x60
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff ffc6 	bl	8001eea <_ZNSt8functionIFvN6SX128x14IrqErrorCode_tEEED1Ev>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	3350      	adds	r3, #80	; 0x50
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff ffb4 	bl	8001ed0 <_ZNSt8functionIFvvEED1Ev>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3340      	adds	r3, #64	; 0x40
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff ffaf 	bl	8001ed0 <_ZNSt8functionIFvvEED1Ev>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	3330      	adds	r3, #48	; 0x30
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff ffaa 	bl	8001ed0 <_ZNSt8functionIFvvEED1Ev>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3320      	adds	r3, #32
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff ffa5 	bl	8001ed0 <_ZNSt8functionIFvvEED1Ev>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	3310      	adds	r3, #16
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff ffa0 	bl	8001ed0 <_ZNSt8functionIFvvEED1Ev>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff ff9c 	bl	8001ed0 <_ZNSt8functionIFvvEED1Ev>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
	...

08001fa4 <_ZN6SX128xD1Ev>:
	virtual ~SX128x() = default;
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	4a06      	ldr	r2, [pc, #24]	; (8001fc8 <_ZN6SX128xD1Ev+0x24>)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	3318      	adds	r3, #24
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff ffbe 	bl	8001f38 <_ZN6SX128xUt0_D1Ev>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	08005aec 	.word	0x08005aec

08001fcc <_ZN6SX128xD0Ev>:
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f7ff ffe5 	bl	8001fa4 <_ZN6SX128xD1Ev>
 8001fda:	21d0      	movs	r1, #208	; 0xd0
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f003 f849 	bl	8005074 <_ZdlPvj>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <_ZN10SX128x_OBJD1Ev>:

#define PACKET_SIZE 8
#define FIFO_SIZE 8
#define IS_TX

class SX128x_OBJ : public SX128x
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	4a05      	ldr	r2, [pc, #20]	; (800200c <_ZN10SX128x_OBJD1Ev+0x20>)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff ffd1 	bl	8001fa4 <_ZN6SX128xD1Ev>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4618      	mov	r0, r3
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	08005b50 	.word	0x08005b50

08002010 <_ZN10SX128x_OBJD0Ev>:
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f7ff ffe7 	bl	8001fec <_ZN10SX128x_OBJD1Ev>
 800201e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f003 f826 	bl	8005074 <_ZdlPvj>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4618      	mov	r0, r3
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
	...

08002034 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b09e      	sub	sp, #120	; 0x78
 8002038:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800203a:	f000 fc65 	bl	8002908 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800203e:	f000 f893 	bl	8002168 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002042:	f000 f9dd 	bl	8002400 <_ZL12MX_GPIO_Initv>
  MX_SPI2_Init();
 8002046:	f000 f911 	bl	800226c <_ZL12MX_SPI2_Initv>
  MX_USART2_UART_Init();
 800204a:	f000 f9ab 	bl	80023a4 <_ZL19MX_USART2_UART_Initv>
  MX_TIM1_Init();
 800204e:	f000 f949 	bl	80022e4 <_ZL12MX_TIM1_Initv>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 8002052:	483f      	ldr	r0, [pc, #252]	; (8002150 <main+0x11c>)
 8002054:	f002 f966 	bl	8004324 <HAL_TIM_Base_Start>
  uint8_t test_packet[8] = {1, 2, 3, 4, 5, 6, 7, 8};
 8002058:	4a3e      	ldr	r2, [pc, #248]	; (8002154 <main+0x120>)
 800205a:	1d3b      	adds	r3, r7, #4
 800205c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002060:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t rx;
  rx = sx1280.Init();
 8002064:	483c      	ldr	r0, [pc, #240]	; (8002158 <main+0x124>)
 8002066:	f7ff fc94 	bl	8001992 <_ZN10SX128x_OBJ4InitEv>
 800206a:	4603      	mov	r3, r0
 800206c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

  if(rx == 0)
 8002070:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002074:	2b00      	cmp	r3, #0
 8002076:	d15a      	bne.n	800212e <main+0xfa>
  {
	uart_buf_len = sprintf(uart_buf, "SX1280 Initialize success\r\n");
 8002078:	f107 030c 	add.w	r3, r7, #12
 800207c:	4937      	ldr	r1, [pc, #220]	; (800215c <main+0x128>)
 800207e:	4618      	mov	r0, r3
 8002080:	f003 f994 	bl	80053ac <siprintf>
 8002084:	6738      	str	r0, [r7, #112]	; 0x70
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8002086:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002088:	b29a      	uxth	r2, r3
 800208a:	f107 010c 	add.w	r1, r7, #12
 800208e:	2364      	movs	r3, #100	; 0x64
 8002090:	4833      	ldr	r0, [pc, #204]	; (8002160 <main+0x12c>)
 8002092:	f002 fc7a 	bl	800498a <HAL_UART_Transmit>
	uart_buf_len = sprintf(uart_buf, "SX1280 Initialize fail\r\n");
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
	while(1);
  }

  sx1280.TxSetting();
 8002096:	4830      	ldr	r0, [pc, #192]	; (8002158 <main+0x124>)
 8002098:	f7ff fc50 	bl	800193c <_ZN10SX128x_OBJ9TxSettingEv>
  rx = sx1280.PutPacket(test_packet); //1
 800209c:	1d3b      	adds	r3, r7, #4
 800209e:	4619      	mov	r1, r3
 80020a0:	482d      	ldr	r0, [pc, #180]	; (8002158 <main+0x124>)
 80020a2:	f7ff fd87 	bl	8001bb4 <_ZN10SX128x_OBJ9PutPacketEPh>
 80020a6:	4603      	mov	r3, r0
 80020a8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  rx = sx1280.PutPacket(test_packet); //2
 80020ac:	1d3b      	adds	r3, r7, #4
 80020ae:	4619      	mov	r1, r3
 80020b0:	4829      	ldr	r0, [pc, #164]	; (8002158 <main+0x124>)
 80020b2:	f7ff fd7f 	bl	8001bb4 <_ZN10SX128x_OBJ9PutPacketEPh>
 80020b6:	4603      	mov	r3, r0
 80020b8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  rx = sx1280.PutPacket(test_packet); //3
 80020bc:	1d3b      	adds	r3, r7, #4
 80020be:	4619      	mov	r1, r3
 80020c0:	4825      	ldr	r0, [pc, #148]	; (8002158 <main+0x124>)
 80020c2:	f7ff fd77 	bl	8001bb4 <_ZN10SX128x_OBJ9PutPacketEPh>
 80020c6:	4603      	mov	r3, r0
 80020c8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  rx = sx1280.PutPacket(test_packet); //4
 80020cc:	1d3b      	adds	r3, r7, #4
 80020ce:	4619      	mov	r1, r3
 80020d0:	4821      	ldr	r0, [pc, #132]	; (8002158 <main+0x124>)
 80020d2:	f7ff fd6f 	bl	8001bb4 <_ZN10SX128x_OBJ9PutPacketEPh>
 80020d6:	4603      	mov	r3, r0
 80020d8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  rx = sx1280.PutPacket(test_packet); //5
 80020dc:	1d3b      	adds	r3, r7, #4
 80020de:	4619      	mov	r1, r3
 80020e0:	481d      	ldr	r0, [pc, #116]	; (8002158 <main+0x124>)
 80020e2:	f7ff fd67 	bl	8001bb4 <_ZN10SX128x_OBJ9PutPacketEPh>
 80020e6:	4603      	mov	r3, r0
 80020e8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  rx = sx1280.PutPacket(test_packet); //6
 80020ec:	1d3b      	adds	r3, r7, #4
 80020ee:	4619      	mov	r1, r3
 80020f0:	4819      	ldr	r0, [pc, #100]	; (8002158 <main+0x124>)
 80020f2:	f7ff fd5f 	bl	8001bb4 <_ZN10SX128x_OBJ9PutPacketEPh>
 80020f6:	4603      	mov	r3, r0
 80020f8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  rx = sx1280.PutPacket(test_packet); //7
 80020fc:	1d3b      	adds	r3, r7, #4
 80020fe:	4619      	mov	r1, r3
 8002100:	4815      	ldr	r0, [pc, #84]	; (8002158 <main+0x124>)
 8002102:	f7ff fd57 	bl	8001bb4 <_ZN10SX128x_OBJ9PutPacketEPh>
 8002106:	4603      	mov	r3, r0
 8002108:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  rx = sx1280.PutPacket(test_packet); //8
 800210c:	1d3b      	adds	r3, r7, #4
 800210e:	4619      	mov	r1, r3
 8002110:	4811      	ldr	r0, [pc, #68]	; (8002158 <main+0x124>)
 8002112:	f7ff fd4f 	bl	8001bb4 <_ZN10SX128x_OBJ9PutPacketEPh>
 8002116:	4603      	mov	r3, r0
 8002118:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  rx = sx1280.PutPacket(test_packet); //9
 800211c:	1d3b      	adds	r3, r7, #4
 800211e:	4619      	mov	r1, r3
 8002120:	480d      	ldr	r0, [pc, #52]	; (8002158 <main+0x124>)
 8002122:	f7ff fd47 	bl	8001bb4 <_ZN10SX128x_OBJ9PutPacketEPh>
 8002126:	4603      	mov	r3, r0
 8002128:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800212c:	e00f      	b.n	800214e <main+0x11a>
	uart_buf_len = sprintf(uart_buf, "SX1280 Initialize fail\r\n");
 800212e:	f107 030c 	add.w	r3, r7, #12
 8002132:	490c      	ldr	r1, [pc, #48]	; (8002164 <main+0x130>)
 8002134:	4618      	mov	r0, r3
 8002136:	f003 f939 	bl	80053ac <siprintf>
 800213a:	6738      	str	r0, [r7, #112]	; 0x70
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 800213c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800213e:	b29a      	uxth	r2, r3
 8002140:	f107 010c 	add.w	r1, r7, #12
 8002144:	2364      	movs	r3, #100	; 0x64
 8002146:	4806      	ldr	r0, [pc, #24]	; (8002160 <main+0x12c>)
 8002148:	f002 fc1f 	bl	800498a <HAL_UART_Transmit>
	while(1);
 800214c:	e7fe      	b.n	800214c <main+0x118>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800214e:	e7fe      	b.n	800214e <main+0x11a>
 8002150:	200000ec 	.word	0x200000ec
 8002154:	08005adc 	.word	0x08005adc
 8002158:	20000178 	.word	0x20000178
 800215c:	08005aa4 	.word	0x08005aa4
 8002160:	20000134 	.word	0x20000134
 8002164:	08005ac0 	.word	0x08005ac0

08002168 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b094      	sub	sp, #80	; 0x50
 800216c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800216e:	f107 031c 	add.w	r3, r7, #28
 8002172:	2234      	movs	r2, #52	; 0x34
 8002174:	2100      	movs	r1, #0
 8002176:	4618      	mov	r0, r3
 8002178:	f002 ffdc 	bl	8005134 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800217c:	f107 0308 	add.w	r3, r7, #8
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	605a      	str	r2, [r3, #4]
 8002186:	609a      	str	r2, [r3, #8]
 8002188:	60da      	str	r2, [r3, #12]
 800218a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800218c:	2300      	movs	r3, #0
 800218e:	607b      	str	r3, [r7, #4]
 8002190:	4b34      	ldr	r3, [pc, #208]	; (8002264 <_Z18SystemClock_Configv+0xfc>)
 8002192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002194:	4a33      	ldr	r2, [pc, #204]	; (8002264 <_Z18SystemClock_Configv+0xfc>)
 8002196:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800219a:	6413      	str	r3, [r2, #64]	; 0x40
 800219c:	4b31      	ldr	r3, [pc, #196]	; (8002264 <_Z18SystemClock_Configv+0xfc>)
 800219e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a4:	607b      	str	r3, [r7, #4]
 80021a6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021a8:	2300      	movs	r3, #0
 80021aa:	603b      	str	r3, [r7, #0]
 80021ac:	4b2e      	ldr	r3, [pc, #184]	; (8002268 <_Z18SystemClock_Configv+0x100>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a2d      	ldr	r2, [pc, #180]	; (8002268 <_Z18SystemClock_Configv+0x100>)
 80021b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021b6:	6013      	str	r3, [r2, #0]
 80021b8:	4b2b      	ldr	r3, [pc, #172]	; (8002268 <_Z18SystemClock_Configv+0x100>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80021c0:	603b      	str	r3, [r7, #0]
 80021c2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021c4:	2301      	movs	r3, #1
 80021c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021cc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021ce:	2302      	movs	r3, #2
 80021d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80021d8:	2308      	movs	r3, #8
 80021da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80021dc:	23b4      	movs	r3, #180	; 0xb4
 80021de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021e0:	2302      	movs	r3, #2
 80021e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80021e4:	2302      	movs	r3, #2
 80021e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80021e8:	2302      	movs	r3, #2
 80021ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021ec:	f107 031c 	add.w	r3, r7, #28
 80021f0:	4618      	mov	r0, r3
 80021f2:	f001 fab3 	bl	800375c <HAL_RCC_OscConfig>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	bf14      	ite	ne
 80021fc:	2301      	movne	r3, #1
 80021fe:	2300      	moveq	r3, #0
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8002206:	f000 f993 	bl	8002530 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800220a:	f000 ff0f 	bl	800302c <HAL_PWREx_EnableOverDrive>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	bf14      	ite	ne
 8002214:	2301      	movne	r3, #1
 8002216:	2300      	moveq	r3, #0
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 800221e:	f000 f987 	bl	8002530 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002222:	230f      	movs	r3, #15
 8002224:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002226:	2302      	movs	r3, #2
 8002228:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800222a:	2300      	movs	r3, #0
 800222c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800222e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002232:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002234:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002238:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800223a:	f107 0308 	add.w	r3, r7, #8
 800223e:	2105      	movs	r1, #5
 8002240:	4618      	mov	r0, r3
 8002242:	f000 ff43 	bl	80030cc <HAL_RCC_ClockConfig>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	bf14      	ite	ne
 800224c:	2301      	movne	r3, #1
 800224e:	2300      	moveq	r3, #0
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <_Z18SystemClock_Configv+0xf2>
  {
    Error_Handler();
 8002256:	f000 f96b 	bl	8002530 <Error_Handler>
  }
}
 800225a:	bf00      	nop
 800225c:	3750      	adds	r7, #80	; 0x50
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40023800 	.word	0x40023800
 8002268:	40007000 	.word	0x40007000

0800226c <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002270:	4b1a      	ldr	r3, [pc, #104]	; (80022dc <_ZL12MX_SPI2_Initv+0x70>)
 8002272:	4a1b      	ldr	r2, [pc, #108]	; (80022e0 <_ZL12MX_SPI2_Initv+0x74>)
 8002274:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002276:	4b19      	ldr	r3, [pc, #100]	; (80022dc <_ZL12MX_SPI2_Initv+0x70>)
 8002278:	f44f 7282 	mov.w	r2, #260	; 0x104
 800227c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800227e:	4b17      	ldr	r3, [pc, #92]	; (80022dc <_ZL12MX_SPI2_Initv+0x70>)
 8002280:	2200      	movs	r2, #0
 8002282:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002284:	4b15      	ldr	r3, [pc, #84]	; (80022dc <_ZL12MX_SPI2_Initv+0x70>)
 8002286:	2200      	movs	r2, #0
 8002288:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800228a:	4b14      	ldr	r3, [pc, #80]	; (80022dc <_ZL12MX_SPI2_Initv+0x70>)
 800228c:	2200      	movs	r2, #0
 800228e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002290:	4b12      	ldr	r3, [pc, #72]	; (80022dc <_ZL12MX_SPI2_Initv+0x70>)
 8002292:	2200      	movs	r2, #0
 8002294:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002296:	4b11      	ldr	r3, [pc, #68]	; (80022dc <_ZL12MX_SPI2_Initv+0x70>)
 8002298:	f44f 7200 	mov.w	r2, #512	; 0x200
 800229c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800229e:	4b0f      	ldr	r3, [pc, #60]	; (80022dc <_ZL12MX_SPI2_Initv+0x70>)
 80022a0:	2208      	movs	r2, #8
 80022a2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022a4:	4b0d      	ldr	r3, [pc, #52]	; (80022dc <_ZL12MX_SPI2_Initv+0x70>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80022aa:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <_ZL12MX_SPI2_Initv+0x70>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022b0:	4b0a      	ldr	r3, [pc, #40]	; (80022dc <_ZL12MX_SPI2_Initv+0x70>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80022b6:	4b09      	ldr	r3, [pc, #36]	; (80022dc <_ZL12MX_SPI2_Initv+0x70>)
 80022b8:	220a      	movs	r2, #10
 80022ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80022bc:	4807      	ldr	r0, [pc, #28]	; (80022dc <_ZL12MX_SPI2_Initv+0x70>)
 80022be:	f001 fceb 	bl	8003c98 <HAL_SPI_Init>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	bf14      	ite	ne
 80022c8:	2301      	movne	r3, #1
 80022ca:	2300      	moveq	r3, #0
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <_ZL12MX_SPI2_Initv+0x6a>
  {
    Error_Handler();
 80022d2:	f000 f92d 	bl	8002530 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80022d6:	bf00      	nop
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	20000094 	.word	0x20000094
 80022e0:	40003800 	.word	0x40003800

080022e4 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022ea:	f107 0308 	add.w	r3, r7, #8
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	605a      	str	r2, [r3, #4]
 80022f4:	609a      	str	r2, [r3, #8]
 80022f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022f8:	463b      	mov	r3, r7
 80022fa:	2200      	movs	r2, #0
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002300:	4b26      	ldr	r3, [pc, #152]	; (800239c <_ZL12MX_TIM1_Initv+0xb8>)
 8002302:	4a27      	ldr	r2, [pc, #156]	; (80023a0 <_ZL12MX_TIM1_Initv+0xbc>)
 8002304:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 179;
 8002306:	4b25      	ldr	r3, [pc, #148]	; (800239c <_ZL12MX_TIM1_Initv+0xb8>)
 8002308:	22b3      	movs	r2, #179	; 0xb3
 800230a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800230c:	4b23      	ldr	r3, [pc, #140]	; (800239c <_ZL12MX_TIM1_Initv+0xb8>)
 800230e:	2200      	movs	r2, #0
 8002310:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8002312:	4b22      	ldr	r3, [pc, #136]	; (800239c <_ZL12MX_TIM1_Initv+0xb8>)
 8002314:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002318:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800231a:	4b20      	ldr	r3, [pc, #128]	; (800239c <_ZL12MX_TIM1_Initv+0xb8>)
 800231c:	2200      	movs	r2, #0
 800231e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002320:	4b1e      	ldr	r3, [pc, #120]	; (800239c <_ZL12MX_TIM1_Initv+0xb8>)
 8002322:	2200      	movs	r2, #0
 8002324:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002326:	4b1d      	ldr	r3, [pc, #116]	; (800239c <_ZL12MX_TIM1_Initv+0xb8>)
 8002328:	2200      	movs	r2, #0
 800232a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800232c:	481b      	ldr	r0, [pc, #108]	; (800239c <_ZL12MX_TIM1_Initv+0xb8>)
 800232e:	f001 ffa9 	bl	8004284 <HAL_TIM_Base_Init>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	bf14      	ite	ne
 8002338:	2301      	movne	r3, #1
 800233a:	2300      	moveq	r3, #0
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <_ZL12MX_TIM1_Initv+0x62>
  {
    Error_Handler();
 8002342:	f000 f8f5 	bl	8002530 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002346:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800234a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800234c:	f107 0308 	add.w	r3, r7, #8
 8002350:	4619      	mov	r1, r3
 8002352:	4812      	ldr	r0, [pc, #72]	; (800239c <_ZL12MX_TIM1_Initv+0xb8>)
 8002354:	f002 f84e 	bl	80043f4 <HAL_TIM_ConfigClockSource>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	bf14      	ite	ne
 800235e:	2301      	movne	r3, #1
 8002360:	2300      	moveq	r3, #0
 8002362:	b2db      	uxtb	r3, r3
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <_ZL12MX_TIM1_Initv+0x88>
  {
    Error_Handler();
 8002368:	f000 f8e2 	bl	8002530 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800236c:	2300      	movs	r3, #0
 800236e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002370:	2300      	movs	r3, #0
 8002372:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002374:	463b      	mov	r3, r7
 8002376:	4619      	mov	r1, r3
 8002378:	4808      	ldr	r0, [pc, #32]	; (800239c <_ZL12MX_TIM1_Initv+0xb8>)
 800237a:	f002 fa3d 	bl	80047f8 <HAL_TIMEx_MasterConfigSynchronization>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	bf14      	ite	ne
 8002384:	2301      	movne	r3, #1
 8002386:	2300      	moveq	r3, #0
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <_ZL12MX_TIM1_Initv+0xae>
  {
    Error_Handler();
 800238e:	f000 f8cf 	bl	8002530 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002392:	bf00      	nop
 8002394:	3718      	adds	r7, #24
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	200000ec 	.word	0x200000ec
 80023a0:	40010000 	.word	0x40010000

080023a4 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80023a8:	4b13      	ldr	r3, [pc, #76]	; (80023f8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80023aa:	4a14      	ldr	r2, [pc, #80]	; (80023fc <_ZL19MX_USART2_UART_Initv+0x58>)
 80023ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80023ae:	4b12      	ldr	r3, [pc, #72]	; (80023f8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80023b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023b6:	4b10      	ldr	r3, [pc, #64]	; (80023f8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023bc:	4b0e      	ldr	r3, [pc, #56]	; (80023f8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80023be:	2200      	movs	r2, #0
 80023c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80023c2:	4b0d      	ldr	r3, [pc, #52]	; (80023f8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023c8:	4b0b      	ldr	r3, [pc, #44]	; (80023f8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80023ca:	220c      	movs	r2, #12
 80023cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023ce:	4b0a      	ldr	r3, [pc, #40]	; (80023f8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023d4:	4b08      	ldr	r3, [pc, #32]	; (80023f8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023da:	4807      	ldr	r0, [pc, #28]	; (80023f8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80023dc:	f002 fa88 	bl	80048f0 <HAL_UART_Init>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	bf14      	ite	ne
 80023e6:	2301      	movne	r3, #1
 80023e8:	2300      	moveq	r3, #0
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 80023f0:	f000 f89e 	bl	8002530 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023f4:	bf00      	nop
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	20000134 	.word	0x20000134
 80023fc:	40004400 	.word	0x40004400

08002400 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b08a      	sub	sp, #40	; 0x28
 8002404:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002406:	f107 0314 	add.w	r3, r7, #20
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	605a      	str	r2, [r3, #4]
 8002410:	609a      	str	r2, [r3, #8]
 8002412:	60da      	str	r2, [r3, #12]
 8002414:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002416:	2300      	movs	r3, #0
 8002418:	613b      	str	r3, [r7, #16]
 800241a:	4b42      	ldr	r3, [pc, #264]	; (8002524 <_ZL12MX_GPIO_Initv+0x124>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	4a41      	ldr	r2, [pc, #260]	; (8002524 <_ZL12MX_GPIO_Initv+0x124>)
 8002420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002424:	6313      	str	r3, [r2, #48]	; 0x30
 8002426:	4b3f      	ldr	r3, [pc, #252]	; (8002524 <_ZL12MX_GPIO_Initv+0x124>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800242e:	613b      	str	r3, [r7, #16]
 8002430:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002432:	2300      	movs	r3, #0
 8002434:	60fb      	str	r3, [r7, #12]
 8002436:	4b3b      	ldr	r3, [pc, #236]	; (8002524 <_ZL12MX_GPIO_Initv+0x124>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	4a3a      	ldr	r2, [pc, #232]	; (8002524 <_ZL12MX_GPIO_Initv+0x124>)
 800243c:	f043 0304 	orr.w	r3, r3, #4
 8002440:	6313      	str	r3, [r2, #48]	; 0x30
 8002442:	4b38      	ldr	r3, [pc, #224]	; (8002524 <_ZL12MX_GPIO_Initv+0x124>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	f003 0304 	and.w	r3, r3, #4
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800244e:	2300      	movs	r3, #0
 8002450:	60bb      	str	r3, [r7, #8]
 8002452:	4b34      	ldr	r3, [pc, #208]	; (8002524 <_ZL12MX_GPIO_Initv+0x124>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	4a33      	ldr	r2, [pc, #204]	; (8002524 <_ZL12MX_GPIO_Initv+0x124>)
 8002458:	f043 0301 	orr.w	r3, r3, #1
 800245c:	6313      	str	r3, [r2, #48]	; 0x30
 800245e:	4b31      	ldr	r3, [pc, #196]	; (8002524 <_ZL12MX_GPIO_Initv+0x124>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	60bb      	str	r3, [r7, #8]
 8002468:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800246a:	2300      	movs	r3, #0
 800246c:	607b      	str	r3, [r7, #4]
 800246e:	4b2d      	ldr	r3, [pc, #180]	; (8002524 <_ZL12MX_GPIO_Initv+0x124>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002472:	4a2c      	ldr	r2, [pc, #176]	; (8002524 <_ZL12MX_GPIO_Initv+0x124>)
 8002474:	f043 0302 	orr.w	r3, r3, #2
 8002478:	6313      	str	r3, [r2, #48]	; 0x30
 800247a:	4b2a      	ldr	r3, [pc, #168]	; (8002524 <_ZL12MX_GPIO_Initv+0x124>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	607b      	str	r3, [r7, #4]
 8002484:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SX1280_RST_GPIO_Port, SX1280_RST_Pin, GPIO_PIN_SET);
 8002486:	2201      	movs	r2, #1
 8002488:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800248c:	4826      	ldr	r0, [pc, #152]	; (8002528 <_ZL12MX_GPIO_Initv+0x128>)
 800248e:	f000 fd8f 	bl	8002fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SX1280_NSS_GPIO_Port, SX1280_NSS_Pin, GPIO_PIN_SET);
 8002492:	2201      	movs	r2, #1
 8002494:	2140      	movs	r1, #64	; 0x40
 8002496:	4825      	ldr	r0, [pc, #148]	; (800252c <_ZL12MX_GPIO_Initv+0x12c>)
 8002498:	f000 fd8a 	bl	8002fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SX1280_DIO1_Pin */
  GPIO_InitStruct.Pin = SX1280_DIO1_Pin;
 800249c:	2310      	movs	r3, #16
 800249e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024a0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80024a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a6:	2300      	movs	r3, #0
 80024a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SX1280_DIO1_GPIO_Port, &GPIO_InitStruct);
 80024aa:	f107 0314 	add.w	r3, r7, #20
 80024ae:	4619      	mov	r1, r3
 80024b0:	481e      	ldr	r0, [pc, #120]	; (800252c <_ZL12MX_GPIO_Initv+0x12c>)
 80024b2:	f000 fbd1 	bl	8002c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX1280_RST_Pin */
  GPIO_InitStruct.Pin = SX1280_RST_Pin;
 80024b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024bc:	2301      	movs	r3, #1
 80024be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c0:	2300      	movs	r3, #0
 80024c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024c4:	2303      	movs	r3, #3
 80024c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SX1280_RST_GPIO_Port, &GPIO_InitStruct);
 80024c8:	f107 0314 	add.w	r3, r7, #20
 80024cc:	4619      	mov	r1, r3
 80024ce:	4816      	ldr	r0, [pc, #88]	; (8002528 <_ZL12MX_GPIO_Initv+0x128>)
 80024d0:	f000 fbc2 	bl	8002c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX1280_BUSY_Pin */
  GPIO_InitStruct.Pin = SX1280_BUSY_Pin;
 80024d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80024d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024da:	2300      	movs	r3, #0
 80024dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024de:	2300      	movs	r3, #0
 80024e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SX1280_BUSY_GPIO_Port, &GPIO_InitStruct);
 80024e2:	f107 0314 	add.w	r3, r7, #20
 80024e6:	4619      	mov	r1, r3
 80024e8:	480f      	ldr	r0, [pc, #60]	; (8002528 <_ZL12MX_GPIO_Initv+0x128>)
 80024ea:	f000 fbb5 	bl	8002c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX1280_NSS_Pin */
  GPIO_InitStruct.Pin = SX1280_NSS_Pin;
 80024ee:	2340      	movs	r3, #64	; 0x40
 80024f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024f2:	2301      	movs	r3, #1
 80024f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f6:	2300      	movs	r3, #0
 80024f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024fa:	2302      	movs	r3, #2
 80024fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SX1280_NSS_GPIO_Port, &GPIO_InitStruct);
 80024fe:	f107 0314 	add.w	r3, r7, #20
 8002502:	4619      	mov	r1, r3
 8002504:	4809      	ldr	r0, [pc, #36]	; (800252c <_ZL12MX_GPIO_Initv+0x12c>)
 8002506:	f000 fba7 	bl	8002c58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800250a:	2200      	movs	r2, #0
 800250c:	2100      	movs	r1, #0
 800250e:	200a      	movs	r0, #10
 8002510:	f000 fb6b 	bl	8002bea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002514:	200a      	movs	r0, #10
 8002516:	f000 fb84 	bl	8002c22 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800251a:	bf00      	nop
 800251c:	3728      	adds	r7, #40	; 0x28
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	40023800 	.word	0x40023800
 8002528:	40020400 	.word	0x40020400
 800252c:	40020800 	.word	0x40020800

08002530 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002534:	b672      	cpsid	i
}
 8002536:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002538:	e7fe      	b.n	8002538 <Error_Handler+0x8>
	...

0800253c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d107      	bne.n	800255c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002552:	4293      	cmp	r3, r2
 8002554:	d102      	bne.n	800255c <_Z41__static_initialization_and_destruction_0ii+0x20>
SX128x_OBJ sx1280;
 8002556:	4809      	ldr	r0, [pc, #36]	; (800257c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002558:	f7ff fad0 	bl	8001afc <_ZN10SX128x_OBJC1Ev>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d107      	bne.n	8002572 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002568:	4293      	cmp	r3, r2
 800256a:	d102      	bne.n	8002572 <_Z41__static_initialization_and_destruction_0ii+0x36>
 800256c:	4803      	ldr	r0, [pc, #12]	; (800257c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800256e:	f7ff fd3d 	bl	8001fec <_ZN10SX128x_OBJD1Ev>
}
 8002572:	bf00      	nop
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	20000178 	.word	0x20000178

08002580 <_GLOBAL__sub_I_hspi2>:
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
 8002584:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002588:	2001      	movs	r0, #1
 800258a:	f7ff ffd7 	bl	800253c <_Z41__static_initialization_and_destruction_0ii>
 800258e:	bd80      	pop	{r7, pc}

08002590 <_GLOBAL__sub_D_hspi2>:
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
 8002594:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002598:	2000      	movs	r0, #0
 800259a:	f7ff ffcf 	bl	800253c <_Z41__static_initialization_and_destruction_0ii>
 800259e:	bd80      	pop	{r7, pc}

080025a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025a6:	2300      	movs	r3, #0
 80025a8:	607b      	str	r3, [r7, #4]
 80025aa:	4b10      	ldr	r3, [pc, #64]	; (80025ec <HAL_MspInit+0x4c>)
 80025ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ae:	4a0f      	ldr	r2, [pc, #60]	; (80025ec <HAL_MspInit+0x4c>)
 80025b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025b4:	6453      	str	r3, [r2, #68]	; 0x44
 80025b6:	4b0d      	ldr	r3, [pc, #52]	; (80025ec <HAL_MspInit+0x4c>)
 80025b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025be:	607b      	str	r3, [r7, #4]
 80025c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	603b      	str	r3, [r7, #0]
 80025c6:	4b09      	ldr	r3, [pc, #36]	; (80025ec <HAL_MspInit+0x4c>)
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	4a08      	ldr	r2, [pc, #32]	; (80025ec <HAL_MspInit+0x4c>)
 80025cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d0:	6413      	str	r3, [r2, #64]	; 0x40
 80025d2:	4b06      	ldr	r3, [pc, #24]	; (80025ec <HAL_MspInit+0x4c>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025da:	603b      	str	r3, [r7, #0]
 80025dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025de:	bf00      	nop
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	40023800 	.word	0x40023800

080025f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b08a      	sub	sp, #40	; 0x28
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f8:	f107 0314 	add.w	r3, r7, #20
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	605a      	str	r2, [r3, #4]
 8002602:	609a      	str	r2, [r3, #8]
 8002604:	60da      	str	r2, [r3, #12]
 8002606:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a21      	ldr	r2, [pc, #132]	; (8002694 <HAL_SPI_MspInit+0xa4>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d13b      	bne.n	800268a <HAL_SPI_MspInit+0x9a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002612:	2300      	movs	r3, #0
 8002614:	613b      	str	r3, [r7, #16]
 8002616:	4b20      	ldr	r3, [pc, #128]	; (8002698 <HAL_SPI_MspInit+0xa8>)
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	4a1f      	ldr	r2, [pc, #124]	; (8002698 <HAL_SPI_MspInit+0xa8>)
 800261c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002620:	6413      	str	r3, [r2, #64]	; 0x40
 8002622:	4b1d      	ldr	r3, [pc, #116]	; (8002698 <HAL_SPI_MspInit+0xa8>)
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800262a:	613b      	str	r3, [r7, #16]
 800262c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800262e:	2300      	movs	r3, #0
 8002630:	60fb      	str	r3, [r7, #12]
 8002632:	4b19      	ldr	r3, [pc, #100]	; (8002698 <HAL_SPI_MspInit+0xa8>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	4a18      	ldr	r2, [pc, #96]	; (8002698 <HAL_SPI_MspInit+0xa8>)
 8002638:	f043 0304 	orr.w	r3, r3, #4
 800263c:	6313      	str	r3, [r2, #48]	; 0x30
 800263e:	4b16      	ldr	r3, [pc, #88]	; (8002698 <HAL_SPI_MspInit+0xa8>)
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	f003 0304 	and.w	r3, r3, #4
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PC7     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800264a:	2302      	movs	r3, #2
 800264c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264e:	2302      	movs	r3, #2
 8002650:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002652:	2300      	movs	r3, #0
 8002654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002656:	2303      	movs	r3, #3
 8002658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800265a:	2307      	movs	r3, #7
 800265c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800265e:	f107 0314 	add.w	r3, r7, #20
 8002662:	4619      	mov	r1, r3
 8002664:	480d      	ldr	r0, [pc, #52]	; (800269c <HAL_SPI_MspInit+0xac>)
 8002666:	f000 faf7 	bl	8002c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_7;
 800266a:	2384      	movs	r3, #132	; 0x84
 800266c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266e:	2302      	movs	r3, #2
 8002670:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002672:	2300      	movs	r3, #0
 8002674:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002676:	2303      	movs	r3, #3
 8002678:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800267a:	2305      	movs	r3, #5
 800267c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800267e:	f107 0314 	add.w	r3, r7, #20
 8002682:	4619      	mov	r1, r3
 8002684:	4805      	ldr	r0, [pc, #20]	; (800269c <HAL_SPI_MspInit+0xac>)
 8002686:	f000 fae7 	bl	8002c58 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800268a:	bf00      	nop
 800268c:	3728      	adds	r7, #40	; 0x28
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40003800 	.word	0x40003800
 8002698:	40023800 	.word	0x40023800
 800269c:	40020800 	.word	0x40020800

080026a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a0b      	ldr	r2, [pc, #44]	; (80026dc <HAL_TIM_Base_MspInit+0x3c>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d10d      	bne.n	80026ce <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026b2:	2300      	movs	r3, #0
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	4b0a      	ldr	r3, [pc, #40]	; (80026e0 <HAL_TIM_Base_MspInit+0x40>)
 80026b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ba:	4a09      	ldr	r2, [pc, #36]	; (80026e0 <HAL_TIM_Base_MspInit+0x40>)
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	6453      	str	r3, [r2, #68]	; 0x44
 80026c2:	4b07      	ldr	r3, [pc, #28]	; (80026e0 <HAL_TIM_Base_MspInit+0x40>)
 80026c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	60fb      	str	r3, [r7, #12]
 80026cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80026ce:	bf00      	nop
 80026d0:	3714      	adds	r7, #20
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	40010000 	.word	0x40010000
 80026e0:	40023800 	.word	0x40023800

080026e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b08a      	sub	sp, #40	; 0x28
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ec:	f107 0314 	add.w	r3, r7, #20
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	605a      	str	r2, [r3, #4]
 80026f6:	609a      	str	r2, [r3, #8]
 80026f8:	60da      	str	r2, [r3, #12]
 80026fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a19      	ldr	r2, [pc, #100]	; (8002768 <HAL_UART_MspInit+0x84>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d12b      	bne.n	800275e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	613b      	str	r3, [r7, #16]
 800270a:	4b18      	ldr	r3, [pc, #96]	; (800276c <HAL_UART_MspInit+0x88>)
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	4a17      	ldr	r2, [pc, #92]	; (800276c <HAL_UART_MspInit+0x88>)
 8002710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002714:	6413      	str	r3, [r2, #64]	; 0x40
 8002716:	4b15      	ldr	r3, [pc, #84]	; (800276c <HAL_UART_MspInit+0x88>)
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271e:	613b      	str	r3, [r7, #16]
 8002720:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002722:	2300      	movs	r3, #0
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	4b11      	ldr	r3, [pc, #68]	; (800276c <HAL_UART_MspInit+0x88>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	4a10      	ldr	r2, [pc, #64]	; (800276c <HAL_UART_MspInit+0x88>)
 800272c:	f043 0301 	orr.w	r3, r3, #1
 8002730:	6313      	str	r3, [r2, #48]	; 0x30
 8002732:	4b0e      	ldr	r3, [pc, #56]	; (800276c <HAL_UART_MspInit+0x88>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800273e:	230c      	movs	r3, #12
 8002740:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002742:	2302      	movs	r3, #2
 8002744:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002746:	2300      	movs	r3, #0
 8002748:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800274a:	2303      	movs	r3, #3
 800274c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800274e:	2307      	movs	r3, #7
 8002750:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002752:	f107 0314 	add.w	r3, r7, #20
 8002756:	4619      	mov	r1, r3
 8002758:	4805      	ldr	r0, [pc, #20]	; (8002770 <HAL_UART_MspInit+0x8c>)
 800275a:	f000 fa7d 	bl	8002c58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800275e:	bf00      	nop
 8002760:	3728      	adds	r7, #40	; 0x28
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	40004400 	.word	0x40004400
 800276c:	40023800 	.word	0x40023800
 8002770:	40020000 	.word	0x40020000

08002774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002778:	e7fe      	b.n	8002778 <NMI_Handler+0x4>

0800277a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800277a:	b480      	push	{r7}
 800277c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800277e:	e7fe      	b.n	800277e <HardFault_Handler+0x4>

08002780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002784:	e7fe      	b.n	8002784 <MemManage_Handler+0x4>

08002786 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002786:	b480      	push	{r7}
 8002788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800278a:	e7fe      	b.n	800278a <BusFault_Handler+0x4>

0800278c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002790:	e7fe      	b.n	8002790 <UsageFault_Handler+0x4>

08002792 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002792:	b480      	push	{r7}
 8002794:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002796:	bf00      	nop
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027a4:	bf00      	nop
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027ae:	b480      	push	{r7}
 80027b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027b2:	bf00      	nop
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027c0:	f000 f8f4 	bl	80029ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027c4:	bf00      	nop
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
  sx1280.tx_recursion();
 80027cc:	4803      	ldr	r0, [pc, #12]	; (80027dc <EXTI4_IRQHandler+0x14>)
 80027ce:	f7ff fa47 	bl	8001c60 <_ZN10SX128x_OBJ12tx_recursionEv>
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SX1280_DIO1_Pin);
 80027d2:	2010      	movs	r0, #16
 80027d4:	f000 fc06 	bl	8002fe4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80027d8:	bf00      	nop
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	20000178 	.word	0x20000178

080027e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  return 1;
 80027e4:	2301      	movs	r3, #1
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <_kill>:

int _kill(int pid, int sig)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80027fa:	f002 fc5b 	bl	80050b4 <__errno>
 80027fe:	4603      	mov	r3, r0
 8002800:	2216      	movs	r2, #22
 8002802:	601a      	str	r2, [r3, #0]
  return -1;
 8002804:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002808:	4618      	mov	r0, r3
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <_exit>:

void _exit (int status)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002818:	f04f 31ff 	mov.w	r1, #4294967295
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f7ff ffe7 	bl	80027f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002822:	e7fe      	b.n	8002822 <_exit+0x12>

08002824 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800282c:	4a14      	ldr	r2, [pc, #80]	; (8002880 <_sbrk+0x5c>)
 800282e:	4b15      	ldr	r3, [pc, #84]	; (8002884 <_sbrk+0x60>)
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002838:	4b13      	ldr	r3, [pc, #76]	; (8002888 <_sbrk+0x64>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d102      	bne.n	8002846 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002840:	4b11      	ldr	r3, [pc, #68]	; (8002888 <_sbrk+0x64>)
 8002842:	4a12      	ldr	r2, [pc, #72]	; (800288c <_sbrk+0x68>)
 8002844:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002846:	4b10      	ldr	r3, [pc, #64]	; (8002888 <_sbrk+0x64>)
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4413      	add	r3, r2
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	429a      	cmp	r2, r3
 8002852:	d207      	bcs.n	8002864 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002854:	f002 fc2e 	bl	80050b4 <__errno>
 8002858:	4603      	mov	r3, r0
 800285a:	220c      	movs	r2, #12
 800285c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800285e:	f04f 33ff 	mov.w	r3, #4294967295
 8002862:	e009      	b.n	8002878 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002864:	4b08      	ldr	r3, [pc, #32]	; (8002888 <_sbrk+0x64>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800286a:	4b07      	ldr	r3, [pc, #28]	; (8002888 <_sbrk+0x64>)
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4413      	add	r3, r2
 8002872:	4a05      	ldr	r2, [pc, #20]	; (8002888 <_sbrk+0x64>)
 8002874:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002876:	68fb      	ldr	r3, [r7, #12]
}
 8002878:	4618      	mov	r0, r3
 800287a:	3718      	adds	r7, #24
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	20020000 	.word	0x20020000
 8002884:	00000400 	.word	0x00000400
 8002888:	200002c0 	.word	0x200002c0
 800288c:	200002d8 	.word	0x200002d8

08002890 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002894:	4b06      	ldr	r3, [pc, #24]	; (80028b0 <SystemInit+0x20>)
 8002896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800289a:	4a05      	ldr	r2, [pc, #20]	; (80028b0 <SystemInit+0x20>)
 800289c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028a4:	bf00      	nop
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	e000ed00 	.word	0xe000ed00

080028b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80028b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028b8:	480d      	ldr	r0, [pc, #52]	; (80028f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80028ba:	490e      	ldr	r1, [pc, #56]	; (80028f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80028bc:	4a0e      	ldr	r2, [pc, #56]	; (80028f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80028be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028c0:	e002      	b.n	80028c8 <LoopCopyDataInit>

080028c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028c6:	3304      	adds	r3, #4

080028c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028cc:	d3f9      	bcc.n	80028c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028ce:	4a0b      	ldr	r2, [pc, #44]	; (80028fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80028d0:	4c0b      	ldr	r4, [pc, #44]	; (8002900 <LoopFillZerobss+0x26>)
  movs r3, #0
 80028d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028d4:	e001      	b.n	80028da <LoopFillZerobss>

080028d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028d8:	3204      	adds	r2, #4

080028da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028dc:	d3fb      	bcc.n	80028d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80028de:	f7ff ffd7 	bl	8002890 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028e2:	f002 fbed 	bl	80050c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028e6:	f7ff fba5 	bl	8002034 <main>
  bx  lr    
 80028ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80028ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80028f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028f4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80028f8:	08005c10 	.word	0x08005c10
  ldr r2, =_sbss
 80028fc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002900:	200002d8 	.word	0x200002d8

08002904 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002904:	e7fe      	b.n	8002904 <ADC_IRQHandler>
	...

08002908 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800290c:	4b0e      	ldr	r3, [pc, #56]	; (8002948 <HAL_Init+0x40>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a0d      	ldr	r2, [pc, #52]	; (8002948 <HAL_Init+0x40>)
 8002912:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002916:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002918:	4b0b      	ldr	r3, [pc, #44]	; (8002948 <HAL_Init+0x40>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a0a      	ldr	r2, [pc, #40]	; (8002948 <HAL_Init+0x40>)
 800291e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002922:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002924:	4b08      	ldr	r3, [pc, #32]	; (8002948 <HAL_Init+0x40>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a07      	ldr	r2, [pc, #28]	; (8002948 <HAL_Init+0x40>)
 800292a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800292e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002930:	2003      	movs	r0, #3
 8002932:	f000 f94f 	bl	8002bd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002936:	200f      	movs	r0, #15
 8002938:	f000 f808 	bl	800294c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800293c:	f7ff fe30 	bl	80025a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40023c00 	.word	0x40023c00

0800294c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002954:	4b12      	ldr	r3, [pc, #72]	; (80029a0 <HAL_InitTick+0x54>)
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	4b12      	ldr	r3, [pc, #72]	; (80029a4 <HAL_InitTick+0x58>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	4619      	mov	r1, r3
 800295e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002962:	fbb3 f3f1 	udiv	r3, r3, r1
 8002966:	fbb2 f3f3 	udiv	r3, r2, r3
 800296a:	4618      	mov	r0, r3
 800296c:	f000 f967 	bl	8002c3e <HAL_SYSTICK_Config>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e00e      	b.n	8002998 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2b0f      	cmp	r3, #15
 800297e:	d80a      	bhi.n	8002996 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002980:	2200      	movs	r2, #0
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	f04f 30ff 	mov.w	r0, #4294967295
 8002988:	f000 f92f 	bl	8002bea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800298c:	4a06      	ldr	r2, [pc, #24]	; (80029a8 <HAL_InitTick+0x5c>)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002992:	2300      	movs	r3, #0
 8002994:	e000      	b.n	8002998 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
}
 8002998:	4618      	mov	r0, r3
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	20000000 	.word	0x20000000
 80029a4:	20000008 	.word	0x20000008
 80029a8:	20000004 	.word	0x20000004

080029ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029b0:	4b06      	ldr	r3, [pc, #24]	; (80029cc <HAL_IncTick+0x20>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	461a      	mov	r2, r3
 80029b6:	4b06      	ldr	r3, [pc, #24]	; (80029d0 <HAL_IncTick+0x24>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4413      	add	r3, r2
 80029bc:	4a04      	ldr	r2, [pc, #16]	; (80029d0 <HAL_IncTick+0x24>)
 80029be:	6013      	str	r3, [r2, #0]
}
 80029c0:	bf00      	nop
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	20000008 	.word	0x20000008
 80029d0:	200002c4 	.word	0x200002c4

080029d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  return uwTick;
 80029d8:	4b03      	ldr	r3, [pc, #12]	; (80029e8 <HAL_GetTick+0x14>)
 80029da:	681b      	ldr	r3, [r3, #0]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	200002c4 	.word	0x200002c4

080029ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029f4:	f7ff ffee 	bl	80029d4 <HAL_GetTick>
 80029f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a04:	d005      	beq.n	8002a12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a06:	4b0a      	ldr	r3, [pc, #40]	; (8002a30 <HAL_Delay+0x44>)
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	4413      	add	r3, r2
 8002a10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a12:	bf00      	nop
 8002a14:	f7ff ffde 	bl	80029d4 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d8f7      	bhi.n	8002a14 <HAL_Delay+0x28>
  {
  }
}
 8002a24:	bf00      	nop
 8002a26:	bf00      	nop
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	20000008 	.word	0x20000008

08002a34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a44:	4b0c      	ldr	r3, [pc, #48]	; (8002a78 <__NVIC_SetPriorityGrouping+0x44>)
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a4a:	68ba      	ldr	r2, [r7, #8]
 8002a4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a50:	4013      	ands	r3, r2
 8002a52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a66:	4a04      	ldr	r2, [pc, #16]	; (8002a78 <__NVIC_SetPriorityGrouping+0x44>)
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	60d3      	str	r3, [r2, #12]
}
 8002a6c:	bf00      	nop
 8002a6e:	3714      	adds	r7, #20
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	e000ed00 	.word	0xe000ed00

08002a7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a80:	4b04      	ldr	r3, [pc, #16]	; (8002a94 <__NVIC_GetPriorityGrouping+0x18>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	0a1b      	lsrs	r3, r3, #8
 8002a86:	f003 0307 	and.w	r3, r3, #7
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr
 8002a94:	e000ed00 	.word	0xe000ed00

08002a98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	db0b      	blt.n	8002ac2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aaa:	79fb      	ldrb	r3, [r7, #7]
 8002aac:	f003 021f 	and.w	r2, r3, #31
 8002ab0:	4907      	ldr	r1, [pc, #28]	; (8002ad0 <__NVIC_EnableIRQ+0x38>)
 8002ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab6:	095b      	lsrs	r3, r3, #5
 8002ab8:	2001      	movs	r0, #1
 8002aba:	fa00 f202 	lsl.w	r2, r0, r2
 8002abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ac2:	bf00      	nop
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	e000e100 	.word	0xe000e100

08002ad4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	4603      	mov	r3, r0
 8002adc:	6039      	str	r1, [r7, #0]
 8002ade:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	db0a      	blt.n	8002afe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	490c      	ldr	r1, [pc, #48]	; (8002b20 <__NVIC_SetPriority+0x4c>)
 8002aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af2:	0112      	lsls	r2, r2, #4
 8002af4:	b2d2      	uxtb	r2, r2
 8002af6:	440b      	add	r3, r1
 8002af8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002afc:	e00a      	b.n	8002b14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	b2da      	uxtb	r2, r3
 8002b02:	4908      	ldr	r1, [pc, #32]	; (8002b24 <__NVIC_SetPriority+0x50>)
 8002b04:	79fb      	ldrb	r3, [r7, #7]
 8002b06:	f003 030f 	and.w	r3, r3, #15
 8002b0a:	3b04      	subs	r3, #4
 8002b0c:	0112      	lsls	r2, r2, #4
 8002b0e:	b2d2      	uxtb	r2, r2
 8002b10:	440b      	add	r3, r1
 8002b12:	761a      	strb	r2, [r3, #24]
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	e000e100 	.word	0xe000e100
 8002b24:	e000ed00 	.word	0xe000ed00

08002b28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b089      	sub	sp, #36	; 0x24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f003 0307 	and.w	r3, r3, #7
 8002b3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	f1c3 0307 	rsb	r3, r3, #7
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	bf28      	it	cs
 8002b46:	2304      	movcs	r3, #4
 8002b48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	3304      	adds	r3, #4
 8002b4e:	2b06      	cmp	r3, #6
 8002b50:	d902      	bls.n	8002b58 <NVIC_EncodePriority+0x30>
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	3b03      	subs	r3, #3
 8002b56:	e000      	b.n	8002b5a <NVIC_EncodePriority+0x32>
 8002b58:	2300      	movs	r3, #0
 8002b5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	fa02 f303 	lsl.w	r3, r2, r3
 8002b66:	43da      	mvns	r2, r3
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	401a      	ands	r2, r3
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b70:	f04f 31ff 	mov.w	r1, #4294967295
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7a:	43d9      	mvns	r1, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b80:	4313      	orrs	r3, r2
         );
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3724      	adds	r7, #36	; 0x24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
	...

08002b90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ba0:	d301      	bcc.n	8002ba6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e00f      	b.n	8002bc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ba6:	4a0a      	ldr	r2, [pc, #40]	; (8002bd0 <SysTick_Config+0x40>)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3b01      	subs	r3, #1
 8002bac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bae:	210f      	movs	r1, #15
 8002bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bb4:	f7ff ff8e 	bl	8002ad4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bb8:	4b05      	ldr	r3, [pc, #20]	; (8002bd0 <SysTick_Config+0x40>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bbe:	4b04      	ldr	r3, [pc, #16]	; (8002bd0 <SysTick_Config+0x40>)
 8002bc0:	2207      	movs	r2, #7
 8002bc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	e000e010 	.word	0xe000e010

08002bd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f7ff ff29 	bl	8002a34 <__NVIC_SetPriorityGrouping>
}
 8002be2:	bf00      	nop
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b086      	sub	sp, #24
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	60b9      	str	r1, [r7, #8]
 8002bf4:	607a      	str	r2, [r7, #4]
 8002bf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bfc:	f7ff ff3e 	bl	8002a7c <__NVIC_GetPriorityGrouping>
 8002c00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	68b9      	ldr	r1, [r7, #8]
 8002c06:	6978      	ldr	r0, [r7, #20]
 8002c08:	f7ff ff8e 	bl	8002b28 <NVIC_EncodePriority>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c12:	4611      	mov	r1, r2
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7ff ff5d 	bl	8002ad4 <__NVIC_SetPriority>
}
 8002c1a:	bf00      	nop
 8002c1c:	3718      	adds	r7, #24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b082      	sub	sp, #8
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	4603      	mov	r3, r0
 8002c2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7ff ff31 	bl	8002a98 <__NVIC_EnableIRQ>
}
 8002c36:	bf00      	nop
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b082      	sub	sp, #8
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7ff ffa2 	bl	8002b90 <SysTick_Config>
 8002c4c:	4603      	mov	r3, r0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
	...

08002c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b089      	sub	sp, #36	; 0x24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c62:	2300      	movs	r3, #0
 8002c64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c66:	2300      	movs	r3, #0
 8002c68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c6e:	2300      	movs	r3, #0
 8002c70:	61fb      	str	r3, [r7, #28]
 8002c72:	e165      	b.n	8002f40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c74:	2201      	movs	r2, #1
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	4013      	ands	r3, r2
 8002c86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	f040 8154 	bne.w	8002f3a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f003 0303 	and.w	r3, r3, #3
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d005      	beq.n	8002caa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d130      	bne.n	8002d0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	2203      	movs	r2, #3
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	43db      	mvns	r3, r3
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	68da      	ldr	r2, [r3, #12]
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	fa02 f303 	lsl.w	r3, r2, r3
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	43db      	mvns	r3, r3
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	4013      	ands	r3, r2
 8002cee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	091b      	lsrs	r3, r3, #4
 8002cf6:	f003 0201 	and.w	r2, r3, #1
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f003 0303 	and.w	r3, r3, #3
 8002d14:	2b03      	cmp	r3, #3
 8002d16:	d017      	beq.n	8002d48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	2203      	movs	r2, #3
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	43db      	mvns	r3, r3
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	689a      	ldr	r2, [r3, #8]
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f003 0303 	and.w	r3, r3, #3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d123      	bne.n	8002d9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	08da      	lsrs	r2, r3, #3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	3208      	adds	r2, #8
 8002d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	f003 0307 	and.w	r3, r3, #7
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	220f      	movs	r2, #15
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	43db      	mvns	r3, r3
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	4013      	ands	r3, r2
 8002d76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	691a      	ldr	r2, [r3, #16]
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	f003 0307 	and.w	r3, r3, #7
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	08da      	lsrs	r2, r3, #3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	3208      	adds	r2, #8
 8002d96:	69b9      	ldr	r1, [r7, #24]
 8002d98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	2203      	movs	r2, #3
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	43db      	mvns	r3, r3
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	4013      	ands	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f003 0203 	and.w	r2, r3, #3
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f000 80ae 	beq.w	8002f3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dde:	2300      	movs	r3, #0
 8002de0:	60fb      	str	r3, [r7, #12]
 8002de2:	4b5d      	ldr	r3, [pc, #372]	; (8002f58 <HAL_GPIO_Init+0x300>)
 8002de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de6:	4a5c      	ldr	r2, [pc, #368]	; (8002f58 <HAL_GPIO_Init+0x300>)
 8002de8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dec:	6453      	str	r3, [r2, #68]	; 0x44
 8002dee:	4b5a      	ldr	r3, [pc, #360]	; (8002f58 <HAL_GPIO_Init+0x300>)
 8002df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002df6:	60fb      	str	r3, [r7, #12]
 8002df8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dfa:	4a58      	ldr	r2, [pc, #352]	; (8002f5c <HAL_GPIO_Init+0x304>)
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	089b      	lsrs	r3, r3, #2
 8002e00:	3302      	adds	r3, #2
 8002e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	f003 0303 	and.w	r3, r3, #3
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	220f      	movs	r2, #15
 8002e12:	fa02 f303 	lsl.w	r3, r2, r3
 8002e16:	43db      	mvns	r3, r3
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a4f      	ldr	r2, [pc, #316]	; (8002f60 <HAL_GPIO_Init+0x308>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d025      	beq.n	8002e72 <HAL_GPIO_Init+0x21a>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a4e      	ldr	r2, [pc, #312]	; (8002f64 <HAL_GPIO_Init+0x30c>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d01f      	beq.n	8002e6e <HAL_GPIO_Init+0x216>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a4d      	ldr	r2, [pc, #308]	; (8002f68 <HAL_GPIO_Init+0x310>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d019      	beq.n	8002e6a <HAL_GPIO_Init+0x212>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a4c      	ldr	r2, [pc, #304]	; (8002f6c <HAL_GPIO_Init+0x314>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d013      	beq.n	8002e66 <HAL_GPIO_Init+0x20e>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a4b      	ldr	r2, [pc, #300]	; (8002f70 <HAL_GPIO_Init+0x318>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d00d      	beq.n	8002e62 <HAL_GPIO_Init+0x20a>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a4a      	ldr	r2, [pc, #296]	; (8002f74 <HAL_GPIO_Init+0x31c>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d007      	beq.n	8002e5e <HAL_GPIO_Init+0x206>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a49      	ldr	r2, [pc, #292]	; (8002f78 <HAL_GPIO_Init+0x320>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d101      	bne.n	8002e5a <HAL_GPIO_Init+0x202>
 8002e56:	2306      	movs	r3, #6
 8002e58:	e00c      	b.n	8002e74 <HAL_GPIO_Init+0x21c>
 8002e5a:	2307      	movs	r3, #7
 8002e5c:	e00a      	b.n	8002e74 <HAL_GPIO_Init+0x21c>
 8002e5e:	2305      	movs	r3, #5
 8002e60:	e008      	b.n	8002e74 <HAL_GPIO_Init+0x21c>
 8002e62:	2304      	movs	r3, #4
 8002e64:	e006      	b.n	8002e74 <HAL_GPIO_Init+0x21c>
 8002e66:	2303      	movs	r3, #3
 8002e68:	e004      	b.n	8002e74 <HAL_GPIO_Init+0x21c>
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	e002      	b.n	8002e74 <HAL_GPIO_Init+0x21c>
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e000      	b.n	8002e74 <HAL_GPIO_Init+0x21c>
 8002e72:	2300      	movs	r3, #0
 8002e74:	69fa      	ldr	r2, [r7, #28]
 8002e76:	f002 0203 	and.w	r2, r2, #3
 8002e7a:	0092      	lsls	r2, r2, #2
 8002e7c:	4093      	lsls	r3, r2
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e84:	4935      	ldr	r1, [pc, #212]	; (8002f5c <HAL_GPIO_Init+0x304>)
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	089b      	lsrs	r3, r3, #2
 8002e8a:	3302      	adds	r3, #2
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e92:	4b3a      	ldr	r3, [pc, #232]	; (8002f7c <HAL_GPIO_Init+0x324>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	43db      	mvns	r3, r3
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002eb6:	4a31      	ldr	r2, [pc, #196]	; (8002f7c <HAL_GPIO_Init+0x324>)
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ebc:	4b2f      	ldr	r3, [pc, #188]	; (8002f7c <HAL_GPIO_Init+0x324>)
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d003      	beq.n	8002ee0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ee0:	4a26      	ldr	r2, [pc, #152]	; (8002f7c <HAL_GPIO_Init+0x324>)
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ee6:	4b25      	ldr	r3, [pc, #148]	; (8002f7c <HAL_GPIO_Init+0x324>)
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f0a:	4a1c      	ldr	r2, [pc, #112]	; (8002f7c <HAL_GPIO_Init+0x324>)
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f10:	4b1a      	ldr	r3, [pc, #104]	; (8002f7c <HAL_GPIO_Init+0x324>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	43db      	mvns	r3, r3
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d003      	beq.n	8002f34 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f34:	4a11      	ldr	r2, [pc, #68]	; (8002f7c <HAL_GPIO_Init+0x324>)
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	61fb      	str	r3, [r7, #28]
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	2b0f      	cmp	r3, #15
 8002f44:	f67f ae96 	bls.w	8002c74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f48:	bf00      	nop
 8002f4a:	bf00      	nop
 8002f4c:	3724      	adds	r7, #36	; 0x24
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	40023800 	.word	0x40023800
 8002f5c:	40013800 	.word	0x40013800
 8002f60:	40020000 	.word	0x40020000
 8002f64:	40020400 	.word	0x40020400
 8002f68:	40020800 	.word	0x40020800
 8002f6c:	40020c00 	.word	0x40020c00
 8002f70:	40021000 	.word	0x40021000
 8002f74:	40021400 	.word	0x40021400
 8002f78:	40021800 	.word	0x40021800
 8002f7c:	40013c00 	.word	0x40013c00

08002f80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	460b      	mov	r3, r1
 8002f8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	691a      	ldr	r2, [r3, #16]
 8002f90:	887b      	ldrh	r3, [r7, #2]
 8002f92:	4013      	ands	r3, r2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d002      	beq.n	8002f9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	73fb      	strb	r3, [r7, #15]
 8002f9c:	e001      	b.n	8002fa2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3714      	adds	r7, #20
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	460b      	mov	r3, r1
 8002fba:	807b      	strh	r3, [r7, #2]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fc0:	787b      	ldrb	r3, [r7, #1]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d003      	beq.n	8002fce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fc6:	887a      	ldrh	r2, [r7, #2]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fcc:	e003      	b.n	8002fd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fce:	887b      	ldrh	r3, [r7, #2]
 8002fd0:	041a      	lsls	r2, r3, #16
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	619a      	str	r2, [r3, #24]
}
 8002fd6:	bf00      	nop
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
	...

08002fe4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	4603      	mov	r3, r0
 8002fec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002fee:	4b08      	ldr	r3, [pc, #32]	; (8003010 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ff0:	695a      	ldr	r2, [r3, #20]
 8002ff2:	88fb      	ldrh	r3, [r7, #6]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d006      	beq.n	8003008 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ffa:	4a05      	ldr	r2, [pc, #20]	; (8003010 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ffc:	88fb      	ldrh	r3, [r7, #6]
 8002ffe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003000:	88fb      	ldrh	r3, [r7, #6]
 8003002:	4618      	mov	r0, r3
 8003004:	f000 f806 	bl	8003014 <HAL_GPIO_EXTI_Callback>
  }
}
 8003008:	bf00      	nop
 800300a:	3708      	adds	r7, #8
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	40013c00 	.word	0x40013c00

08003014 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	4603      	mov	r3, r0
 800301c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800301e:	bf00      	nop
 8003020:	370c      	adds	r7, #12
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
	...

0800302c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003032:	2300      	movs	r3, #0
 8003034:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003036:	2300      	movs	r3, #0
 8003038:	603b      	str	r3, [r7, #0]
 800303a:	4b20      	ldr	r3, [pc, #128]	; (80030bc <HAL_PWREx_EnableOverDrive+0x90>)
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	4a1f      	ldr	r2, [pc, #124]	; (80030bc <HAL_PWREx_EnableOverDrive+0x90>)
 8003040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003044:	6413      	str	r3, [r2, #64]	; 0x40
 8003046:	4b1d      	ldr	r3, [pc, #116]	; (80030bc <HAL_PWREx_EnableOverDrive+0x90>)
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800304e:	603b      	str	r3, [r7, #0]
 8003050:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003052:	4b1b      	ldr	r3, [pc, #108]	; (80030c0 <HAL_PWREx_EnableOverDrive+0x94>)
 8003054:	2201      	movs	r2, #1
 8003056:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003058:	f7ff fcbc 	bl	80029d4 <HAL_GetTick>
 800305c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800305e:	e009      	b.n	8003074 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003060:	f7ff fcb8 	bl	80029d4 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800306e:	d901      	bls.n	8003074 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e01f      	b.n	80030b4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003074:	4b13      	ldr	r3, [pc, #76]	; (80030c4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800307c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003080:	d1ee      	bne.n	8003060 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003082:	4b11      	ldr	r3, [pc, #68]	; (80030c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003084:	2201      	movs	r2, #1
 8003086:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003088:	f7ff fca4 	bl	80029d4 <HAL_GetTick>
 800308c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800308e:	e009      	b.n	80030a4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003090:	f7ff fca0 	bl	80029d4 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800309e:	d901      	bls.n	80030a4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e007      	b.n	80030b4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80030a4:	4b07      	ldr	r3, [pc, #28]	; (80030c4 <HAL_PWREx_EnableOverDrive+0x98>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030b0:	d1ee      	bne.n	8003090 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3708      	adds	r7, #8
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	40023800 	.word	0x40023800
 80030c0:	420e0040 	.word	0x420e0040
 80030c4:	40007000 	.word	0x40007000
 80030c8:	420e0044 	.word	0x420e0044

080030cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d101      	bne.n	80030e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e0cc      	b.n	800327a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030e0:	4b68      	ldr	r3, [pc, #416]	; (8003284 <HAL_RCC_ClockConfig+0x1b8>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 030f 	and.w	r3, r3, #15
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d90c      	bls.n	8003108 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ee:	4b65      	ldr	r3, [pc, #404]	; (8003284 <HAL_RCC_ClockConfig+0x1b8>)
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	b2d2      	uxtb	r2, r2
 80030f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030f6:	4b63      	ldr	r3, [pc, #396]	; (8003284 <HAL_RCC_ClockConfig+0x1b8>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 030f 	and.w	r3, r3, #15
 80030fe:	683a      	ldr	r2, [r7, #0]
 8003100:	429a      	cmp	r2, r3
 8003102:	d001      	beq.n	8003108 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e0b8      	b.n	800327a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d020      	beq.n	8003156 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0304 	and.w	r3, r3, #4
 800311c:	2b00      	cmp	r3, #0
 800311e:	d005      	beq.n	800312c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003120:	4b59      	ldr	r3, [pc, #356]	; (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	4a58      	ldr	r2, [pc, #352]	; (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 8003126:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800312a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0308 	and.w	r3, r3, #8
 8003134:	2b00      	cmp	r3, #0
 8003136:	d005      	beq.n	8003144 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003138:	4b53      	ldr	r3, [pc, #332]	; (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	4a52      	ldr	r2, [pc, #328]	; (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 800313e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003142:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003144:	4b50      	ldr	r3, [pc, #320]	; (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	494d      	ldr	r1, [pc, #308]	; (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 8003152:	4313      	orrs	r3, r2
 8003154:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d044      	beq.n	80031ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d107      	bne.n	800317a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800316a:	4b47      	ldr	r3, [pc, #284]	; (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d119      	bne.n	80031aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e07f      	b.n	800327a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	2b02      	cmp	r3, #2
 8003180:	d003      	beq.n	800318a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003186:	2b03      	cmp	r3, #3
 8003188:	d107      	bne.n	800319a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800318a:	4b3f      	ldr	r3, [pc, #252]	; (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d109      	bne.n	80031aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e06f      	b.n	800327a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800319a:	4b3b      	ldr	r3, [pc, #236]	; (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e067      	b.n	800327a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031aa:	4b37      	ldr	r3, [pc, #220]	; (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f023 0203 	bic.w	r2, r3, #3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	4934      	ldr	r1, [pc, #208]	; (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031bc:	f7ff fc0a 	bl	80029d4 <HAL_GetTick>
 80031c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031c2:	e00a      	b.n	80031da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031c4:	f7ff fc06 	bl	80029d4 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e04f      	b.n	800327a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031da:	4b2b      	ldr	r3, [pc, #172]	; (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f003 020c 	and.w	r2, r3, #12
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d1eb      	bne.n	80031c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031ec:	4b25      	ldr	r3, [pc, #148]	; (8003284 <HAL_RCC_ClockConfig+0x1b8>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 030f 	and.w	r3, r3, #15
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d20c      	bcs.n	8003214 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031fa:	4b22      	ldr	r3, [pc, #136]	; (8003284 <HAL_RCC_ClockConfig+0x1b8>)
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	b2d2      	uxtb	r2, r2
 8003200:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003202:	4b20      	ldr	r3, [pc, #128]	; (8003284 <HAL_RCC_ClockConfig+0x1b8>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 030f 	and.w	r3, r3, #15
 800320a:	683a      	ldr	r2, [r7, #0]
 800320c:	429a      	cmp	r2, r3
 800320e:	d001      	beq.n	8003214 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e032      	b.n	800327a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0304 	and.w	r3, r3, #4
 800321c:	2b00      	cmp	r3, #0
 800321e:	d008      	beq.n	8003232 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003220:	4b19      	ldr	r3, [pc, #100]	; (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	4916      	ldr	r1, [pc, #88]	; (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 800322e:	4313      	orrs	r3, r2
 8003230:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0308 	and.w	r3, r3, #8
 800323a:	2b00      	cmp	r3, #0
 800323c:	d009      	beq.n	8003252 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800323e:	4b12      	ldr	r3, [pc, #72]	; (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	490e      	ldr	r1, [pc, #56]	; (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 800324e:	4313      	orrs	r3, r2
 8003250:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003252:	f000 f855 	bl	8003300 <HAL_RCC_GetSysClockFreq>
 8003256:	4602      	mov	r2, r0
 8003258:	4b0b      	ldr	r3, [pc, #44]	; (8003288 <HAL_RCC_ClockConfig+0x1bc>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	091b      	lsrs	r3, r3, #4
 800325e:	f003 030f 	and.w	r3, r3, #15
 8003262:	490a      	ldr	r1, [pc, #40]	; (800328c <HAL_RCC_ClockConfig+0x1c0>)
 8003264:	5ccb      	ldrb	r3, [r1, r3]
 8003266:	fa22 f303 	lsr.w	r3, r2, r3
 800326a:	4a09      	ldr	r2, [pc, #36]	; (8003290 <HAL_RCC_ClockConfig+0x1c4>)
 800326c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800326e:	4b09      	ldr	r3, [pc, #36]	; (8003294 <HAL_RCC_ClockConfig+0x1c8>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4618      	mov	r0, r3
 8003274:	f7ff fb6a 	bl	800294c <HAL_InitTick>

  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3710      	adds	r7, #16
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	40023c00 	.word	0x40023c00
 8003288:	40023800 	.word	0x40023800
 800328c:	08005bac 	.word	0x08005bac
 8003290:	20000000 	.word	0x20000000
 8003294:	20000004 	.word	0x20000004

08003298 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800329c:	4b03      	ldr	r3, [pc, #12]	; (80032ac <HAL_RCC_GetHCLKFreq+0x14>)
 800329e:	681b      	ldr	r3, [r3, #0]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	20000000 	.word	0x20000000

080032b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032b4:	f7ff fff0 	bl	8003298 <HAL_RCC_GetHCLKFreq>
 80032b8:	4602      	mov	r2, r0
 80032ba:	4b05      	ldr	r3, [pc, #20]	; (80032d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	0a9b      	lsrs	r3, r3, #10
 80032c0:	f003 0307 	and.w	r3, r3, #7
 80032c4:	4903      	ldr	r1, [pc, #12]	; (80032d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032c6:	5ccb      	ldrb	r3, [r1, r3]
 80032c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	40023800 	.word	0x40023800
 80032d4:	08005bbc 	.word	0x08005bbc

080032d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032dc:	f7ff ffdc 	bl	8003298 <HAL_RCC_GetHCLKFreq>
 80032e0:	4602      	mov	r2, r0
 80032e2:	4b05      	ldr	r3, [pc, #20]	; (80032f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	0b5b      	lsrs	r3, r3, #13
 80032e8:	f003 0307 	and.w	r3, r3, #7
 80032ec:	4903      	ldr	r1, [pc, #12]	; (80032fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80032ee:	5ccb      	ldrb	r3, [r1, r3]
 80032f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	40023800 	.word	0x40023800
 80032fc:	08005bbc 	.word	0x08005bbc

08003300 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003300:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003304:	b0ae      	sub	sp, #184	; 0xb8
 8003306:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003308:	2300      	movs	r3, #0
 800330a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800330e:	2300      	movs	r3, #0
 8003310:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003314:	2300      	movs	r3, #0
 8003316:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800331a:	2300      	movs	r3, #0
 800331c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003320:	2300      	movs	r3, #0
 8003322:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003326:	4bcb      	ldr	r3, [pc, #812]	; (8003654 <HAL_RCC_GetSysClockFreq+0x354>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 030c 	and.w	r3, r3, #12
 800332e:	2b0c      	cmp	r3, #12
 8003330:	f200 8204 	bhi.w	800373c <HAL_RCC_GetSysClockFreq+0x43c>
 8003334:	a201      	add	r2, pc, #4	; (adr r2, 800333c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800333a:	bf00      	nop
 800333c:	08003371 	.word	0x08003371
 8003340:	0800373d 	.word	0x0800373d
 8003344:	0800373d 	.word	0x0800373d
 8003348:	0800373d 	.word	0x0800373d
 800334c:	08003379 	.word	0x08003379
 8003350:	0800373d 	.word	0x0800373d
 8003354:	0800373d 	.word	0x0800373d
 8003358:	0800373d 	.word	0x0800373d
 800335c:	08003381 	.word	0x08003381
 8003360:	0800373d 	.word	0x0800373d
 8003364:	0800373d 	.word	0x0800373d
 8003368:	0800373d 	.word	0x0800373d
 800336c:	08003571 	.word	0x08003571
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003370:	4bb9      	ldr	r3, [pc, #740]	; (8003658 <HAL_RCC_GetSysClockFreq+0x358>)
 8003372:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003376:	e1e5      	b.n	8003744 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003378:	4bb7      	ldr	r3, [pc, #732]	; (8003658 <HAL_RCC_GetSysClockFreq+0x358>)
 800337a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800337e:	e1e1      	b.n	8003744 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003380:	4bb4      	ldr	r3, [pc, #720]	; (8003654 <HAL_RCC_GetSysClockFreq+0x354>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003388:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800338c:	4bb1      	ldr	r3, [pc, #708]	; (8003654 <HAL_RCC_GetSysClockFreq+0x354>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d071      	beq.n	800347c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003398:	4bae      	ldr	r3, [pc, #696]	; (8003654 <HAL_RCC_GetSysClockFreq+0x354>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	099b      	lsrs	r3, r3, #6
 800339e:	2200      	movs	r2, #0
 80033a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80033a4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80033a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80033ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80033b4:	2300      	movs	r3, #0
 80033b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80033ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80033be:	4622      	mov	r2, r4
 80033c0:	462b      	mov	r3, r5
 80033c2:	f04f 0000 	mov.w	r0, #0
 80033c6:	f04f 0100 	mov.w	r1, #0
 80033ca:	0159      	lsls	r1, r3, #5
 80033cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033d0:	0150      	lsls	r0, r2, #5
 80033d2:	4602      	mov	r2, r0
 80033d4:	460b      	mov	r3, r1
 80033d6:	4621      	mov	r1, r4
 80033d8:	1a51      	subs	r1, r2, r1
 80033da:	6439      	str	r1, [r7, #64]	; 0x40
 80033dc:	4629      	mov	r1, r5
 80033de:	eb63 0301 	sbc.w	r3, r3, r1
 80033e2:	647b      	str	r3, [r7, #68]	; 0x44
 80033e4:	f04f 0200 	mov.w	r2, #0
 80033e8:	f04f 0300 	mov.w	r3, #0
 80033ec:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80033f0:	4649      	mov	r1, r9
 80033f2:	018b      	lsls	r3, r1, #6
 80033f4:	4641      	mov	r1, r8
 80033f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033fa:	4641      	mov	r1, r8
 80033fc:	018a      	lsls	r2, r1, #6
 80033fe:	4641      	mov	r1, r8
 8003400:	1a51      	subs	r1, r2, r1
 8003402:	63b9      	str	r1, [r7, #56]	; 0x38
 8003404:	4649      	mov	r1, r9
 8003406:	eb63 0301 	sbc.w	r3, r3, r1
 800340a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800340c:	f04f 0200 	mov.w	r2, #0
 8003410:	f04f 0300 	mov.w	r3, #0
 8003414:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003418:	4649      	mov	r1, r9
 800341a:	00cb      	lsls	r3, r1, #3
 800341c:	4641      	mov	r1, r8
 800341e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003422:	4641      	mov	r1, r8
 8003424:	00ca      	lsls	r2, r1, #3
 8003426:	4610      	mov	r0, r2
 8003428:	4619      	mov	r1, r3
 800342a:	4603      	mov	r3, r0
 800342c:	4622      	mov	r2, r4
 800342e:	189b      	adds	r3, r3, r2
 8003430:	633b      	str	r3, [r7, #48]	; 0x30
 8003432:	462b      	mov	r3, r5
 8003434:	460a      	mov	r2, r1
 8003436:	eb42 0303 	adc.w	r3, r2, r3
 800343a:	637b      	str	r3, [r7, #52]	; 0x34
 800343c:	f04f 0200 	mov.w	r2, #0
 8003440:	f04f 0300 	mov.w	r3, #0
 8003444:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003448:	4629      	mov	r1, r5
 800344a:	028b      	lsls	r3, r1, #10
 800344c:	4621      	mov	r1, r4
 800344e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003452:	4621      	mov	r1, r4
 8003454:	028a      	lsls	r2, r1, #10
 8003456:	4610      	mov	r0, r2
 8003458:	4619      	mov	r1, r3
 800345a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800345e:	2200      	movs	r2, #0
 8003460:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003464:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003468:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800346c:	f7fd fb0e 	bl	8000a8c <__aeabi_uldivmod>
 8003470:	4602      	mov	r2, r0
 8003472:	460b      	mov	r3, r1
 8003474:	4613      	mov	r3, r2
 8003476:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800347a:	e067      	b.n	800354c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800347c:	4b75      	ldr	r3, [pc, #468]	; (8003654 <HAL_RCC_GetSysClockFreq+0x354>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	099b      	lsrs	r3, r3, #6
 8003482:	2200      	movs	r2, #0
 8003484:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003488:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800348c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003490:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003494:	67bb      	str	r3, [r7, #120]	; 0x78
 8003496:	2300      	movs	r3, #0
 8003498:	67fb      	str	r3, [r7, #124]	; 0x7c
 800349a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800349e:	4622      	mov	r2, r4
 80034a0:	462b      	mov	r3, r5
 80034a2:	f04f 0000 	mov.w	r0, #0
 80034a6:	f04f 0100 	mov.w	r1, #0
 80034aa:	0159      	lsls	r1, r3, #5
 80034ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034b0:	0150      	lsls	r0, r2, #5
 80034b2:	4602      	mov	r2, r0
 80034b4:	460b      	mov	r3, r1
 80034b6:	4621      	mov	r1, r4
 80034b8:	1a51      	subs	r1, r2, r1
 80034ba:	62b9      	str	r1, [r7, #40]	; 0x28
 80034bc:	4629      	mov	r1, r5
 80034be:	eb63 0301 	sbc.w	r3, r3, r1
 80034c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034c4:	f04f 0200 	mov.w	r2, #0
 80034c8:	f04f 0300 	mov.w	r3, #0
 80034cc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80034d0:	4649      	mov	r1, r9
 80034d2:	018b      	lsls	r3, r1, #6
 80034d4:	4641      	mov	r1, r8
 80034d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034da:	4641      	mov	r1, r8
 80034dc:	018a      	lsls	r2, r1, #6
 80034de:	4641      	mov	r1, r8
 80034e0:	ebb2 0a01 	subs.w	sl, r2, r1
 80034e4:	4649      	mov	r1, r9
 80034e6:	eb63 0b01 	sbc.w	fp, r3, r1
 80034ea:	f04f 0200 	mov.w	r2, #0
 80034ee:	f04f 0300 	mov.w	r3, #0
 80034f2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80034f6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80034fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034fe:	4692      	mov	sl, r2
 8003500:	469b      	mov	fp, r3
 8003502:	4623      	mov	r3, r4
 8003504:	eb1a 0303 	adds.w	r3, sl, r3
 8003508:	623b      	str	r3, [r7, #32]
 800350a:	462b      	mov	r3, r5
 800350c:	eb4b 0303 	adc.w	r3, fp, r3
 8003510:	627b      	str	r3, [r7, #36]	; 0x24
 8003512:	f04f 0200 	mov.w	r2, #0
 8003516:	f04f 0300 	mov.w	r3, #0
 800351a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800351e:	4629      	mov	r1, r5
 8003520:	028b      	lsls	r3, r1, #10
 8003522:	4621      	mov	r1, r4
 8003524:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003528:	4621      	mov	r1, r4
 800352a:	028a      	lsls	r2, r1, #10
 800352c:	4610      	mov	r0, r2
 800352e:	4619      	mov	r1, r3
 8003530:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003534:	2200      	movs	r2, #0
 8003536:	673b      	str	r3, [r7, #112]	; 0x70
 8003538:	677a      	str	r2, [r7, #116]	; 0x74
 800353a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800353e:	f7fd faa5 	bl	8000a8c <__aeabi_uldivmod>
 8003542:	4602      	mov	r2, r0
 8003544:	460b      	mov	r3, r1
 8003546:	4613      	mov	r3, r2
 8003548:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800354c:	4b41      	ldr	r3, [pc, #260]	; (8003654 <HAL_RCC_GetSysClockFreq+0x354>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	0c1b      	lsrs	r3, r3, #16
 8003552:	f003 0303 	and.w	r3, r3, #3
 8003556:	3301      	adds	r3, #1
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800355e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003562:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003566:	fbb2 f3f3 	udiv	r3, r2, r3
 800356a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800356e:	e0e9      	b.n	8003744 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003570:	4b38      	ldr	r3, [pc, #224]	; (8003654 <HAL_RCC_GetSysClockFreq+0x354>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003578:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800357c:	4b35      	ldr	r3, [pc, #212]	; (8003654 <HAL_RCC_GetSysClockFreq+0x354>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d069      	beq.n	800365c <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003588:	4b32      	ldr	r3, [pc, #200]	; (8003654 <HAL_RCC_GetSysClockFreq+0x354>)
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	099b      	lsrs	r3, r3, #6
 800358e:	2200      	movs	r2, #0
 8003590:	66bb      	str	r3, [r7, #104]	; 0x68
 8003592:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003594:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800359a:	663b      	str	r3, [r7, #96]	; 0x60
 800359c:	2300      	movs	r3, #0
 800359e:	667b      	str	r3, [r7, #100]	; 0x64
 80035a0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80035a4:	4622      	mov	r2, r4
 80035a6:	462b      	mov	r3, r5
 80035a8:	f04f 0000 	mov.w	r0, #0
 80035ac:	f04f 0100 	mov.w	r1, #0
 80035b0:	0159      	lsls	r1, r3, #5
 80035b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035b6:	0150      	lsls	r0, r2, #5
 80035b8:	4602      	mov	r2, r0
 80035ba:	460b      	mov	r3, r1
 80035bc:	4621      	mov	r1, r4
 80035be:	1a51      	subs	r1, r2, r1
 80035c0:	61b9      	str	r1, [r7, #24]
 80035c2:	4629      	mov	r1, r5
 80035c4:	eb63 0301 	sbc.w	r3, r3, r1
 80035c8:	61fb      	str	r3, [r7, #28]
 80035ca:	f04f 0200 	mov.w	r2, #0
 80035ce:	f04f 0300 	mov.w	r3, #0
 80035d2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80035d6:	4659      	mov	r1, fp
 80035d8:	018b      	lsls	r3, r1, #6
 80035da:	4651      	mov	r1, sl
 80035dc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035e0:	4651      	mov	r1, sl
 80035e2:	018a      	lsls	r2, r1, #6
 80035e4:	4651      	mov	r1, sl
 80035e6:	ebb2 0801 	subs.w	r8, r2, r1
 80035ea:	4659      	mov	r1, fp
 80035ec:	eb63 0901 	sbc.w	r9, r3, r1
 80035f0:	f04f 0200 	mov.w	r2, #0
 80035f4:	f04f 0300 	mov.w	r3, #0
 80035f8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035fc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003600:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003604:	4690      	mov	r8, r2
 8003606:	4699      	mov	r9, r3
 8003608:	4623      	mov	r3, r4
 800360a:	eb18 0303 	adds.w	r3, r8, r3
 800360e:	613b      	str	r3, [r7, #16]
 8003610:	462b      	mov	r3, r5
 8003612:	eb49 0303 	adc.w	r3, r9, r3
 8003616:	617b      	str	r3, [r7, #20]
 8003618:	f04f 0200 	mov.w	r2, #0
 800361c:	f04f 0300 	mov.w	r3, #0
 8003620:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003624:	4629      	mov	r1, r5
 8003626:	028b      	lsls	r3, r1, #10
 8003628:	4621      	mov	r1, r4
 800362a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800362e:	4621      	mov	r1, r4
 8003630:	028a      	lsls	r2, r1, #10
 8003632:	4610      	mov	r0, r2
 8003634:	4619      	mov	r1, r3
 8003636:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800363a:	2200      	movs	r2, #0
 800363c:	65bb      	str	r3, [r7, #88]	; 0x58
 800363e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003640:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003644:	f7fd fa22 	bl	8000a8c <__aeabi_uldivmod>
 8003648:	4602      	mov	r2, r0
 800364a:	460b      	mov	r3, r1
 800364c:	4613      	mov	r3, r2
 800364e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003652:	e063      	b.n	800371c <HAL_RCC_GetSysClockFreq+0x41c>
 8003654:	40023800 	.word	0x40023800
 8003658:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800365c:	4b3d      	ldr	r3, [pc, #244]	; (8003754 <HAL_RCC_GetSysClockFreq+0x454>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	099b      	lsrs	r3, r3, #6
 8003662:	2200      	movs	r2, #0
 8003664:	4618      	mov	r0, r3
 8003666:	4611      	mov	r1, r2
 8003668:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800366c:	653b      	str	r3, [r7, #80]	; 0x50
 800366e:	2300      	movs	r3, #0
 8003670:	657b      	str	r3, [r7, #84]	; 0x54
 8003672:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003676:	4642      	mov	r2, r8
 8003678:	464b      	mov	r3, r9
 800367a:	f04f 0000 	mov.w	r0, #0
 800367e:	f04f 0100 	mov.w	r1, #0
 8003682:	0159      	lsls	r1, r3, #5
 8003684:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003688:	0150      	lsls	r0, r2, #5
 800368a:	4602      	mov	r2, r0
 800368c:	460b      	mov	r3, r1
 800368e:	4641      	mov	r1, r8
 8003690:	1a51      	subs	r1, r2, r1
 8003692:	60b9      	str	r1, [r7, #8]
 8003694:	4649      	mov	r1, r9
 8003696:	eb63 0301 	sbc.w	r3, r3, r1
 800369a:	60fb      	str	r3, [r7, #12]
 800369c:	f04f 0200 	mov.w	r2, #0
 80036a0:	f04f 0300 	mov.w	r3, #0
 80036a4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80036a8:	4659      	mov	r1, fp
 80036aa:	018b      	lsls	r3, r1, #6
 80036ac:	4651      	mov	r1, sl
 80036ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036b2:	4651      	mov	r1, sl
 80036b4:	018a      	lsls	r2, r1, #6
 80036b6:	4651      	mov	r1, sl
 80036b8:	1a54      	subs	r4, r2, r1
 80036ba:	4659      	mov	r1, fp
 80036bc:	eb63 0501 	sbc.w	r5, r3, r1
 80036c0:	f04f 0200 	mov.w	r2, #0
 80036c4:	f04f 0300 	mov.w	r3, #0
 80036c8:	00eb      	lsls	r3, r5, #3
 80036ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036ce:	00e2      	lsls	r2, r4, #3
 80036d0:	4614      	mov	r4, r2
 80036d2:	461d      	mov	r5, r3
 80036d4:	4643      	mov	r3, r8
 80036d6:	18e3      	adds	r3, r4, r3
 80036d8:	603b      	str	r3, [r7, #0]
 80036da:	464b      	mov	r3, r9
 80036dc:	eb45 0303 	adc.w	r3, r5, r3
 80036e0:	607b      	str	r3, [r7, #4]
 80036e2:	f04f 0200 	mov.w	r2, #0
 80036e6:	f04f 0300 	mov.w	r3, #0
 80036ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036ee:	4629      	mov	r1, r5
 80036f0:	028b      	lsls	r3, r1, #10
 80036f2:	4621      	mov	r1, r4
 80036f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036f8:	4621      	mov	r1, r4
 80036fa:	028a      	lsls	r2, r1, #10
 80036fc:	4610      	mov	r0, r2
 80036fe:	4619      	mov	r1, r3
 8003700:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003704:	2200      	movs	r2, #0
 8003706:	64bb      	str	r3, [r7, #72]	; 0x48
 8003708:	64fa      	str	r2, [r7, #76]	; 0x4c
 800370a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800370e:	f7fd f9bd 	bl	8000a8c <__aeabi_uldivmod>
 8003712:	4602      	mov	r2, r0
 8003714:	460b      	mov	r3, r1
 8003716:	4613      	mov	r3, r2
 8003718:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800371c:	4b0d      	ldr	r3, [pc, #52]	; (8003754 <HAL_RCC_GetSysClockFreq+0x454>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	0f1b      	lsrs	r3, r3, #28
 8003722:	f003 0307 	and.w	r3, r3, #7
 8003726:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800372a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800372e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003732:	fbb2 f3f3 	udiv	r3, r2, r3
 8003736:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800373a:	e003      	b.n	8003744 <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800373c:	4b06      	ldr	r3, [pc, #24]	; (8003758 <HAL_RCC_GetSysClockFreq+0x458>)
 800373e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003742:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003744:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003748:	4618      	mov	r0, r3
 800374a:	37b8      	adds	r7, #184	; 0xb8
 800374c:	46bd      	mov	sp, r7
 800374e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003752:	bf00      	nop
 8003754:	40023800 	.word	0x40023800
 8003758:	00f42400 	.word	0x00f42400

0800375c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b086      	sub	sp, #24
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e28d      	b.n	8003c8a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b00      	cmp	r3, #0
 8003778:	f000 8083 	beq.w	8003882 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800377c:	4b94      	ldr	r3, [pc, #592]	; (80039d0 <HAL_RCC_OscConfig+0x274>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f003 030c 	and.w	r3, r3, #12
 8003784:	2b04      	cmp	r3, #4
 8003786:	d019      	beq.n	80037bc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003788:	4b91      	ldr	r3, [pc, #580]	; (80039d0 <HAL_RCC_OscConfig+0x274>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003790:	2b08      	cmp	r3, #8
 8003792:	d106      	bne.n	80037a2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003794:	4b8e      	ldr	r3, [pc, #568]	; (80039d0 <HAL_RCC_OscConfig+0x274>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800379c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037a0:	d00c      	beq.n	80037bc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037a2:	4b8b      	ldr	r3, [pc, #556]	; (80039d0 <HAL_RCC_OscConfig+0x274>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80037aa:	2b0c      	cmp	r3, #12
 80037ac:	d112      	bne.n	80037d4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037ae:	4b88      	ldr	r3, [pc, #544]	; (80039d0 <HAL_RCC_OscConfig+0x274>)
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037ba:	d10b      	bne.n	80037d4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037bc:	4b84      	ldr	r3, [pc, #528]	; (80039d0 <HAL_RCC_OscConfig+0x274>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d05b      	beq.n	8003880 <HAL_RCC_OscConfig+0x124>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d157      	bne.n	8003880 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e25a      	b.n	8003c8a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037dc:	d106      	bne.n	80037ec <HAL_RCC_OscConfig+0x90>
 80037de:	4b7c      	ldr	r3, [pc, #496]	; (80039d0 <HAL_RCC_OscConfig+0x274>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a7b      	ldr	r2, [pc, #492]	; (80039d0 <HAL_RCC_OscConfig+0x274>)
 80037e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037e8:	6013      	str	r3, [r2, #0]
 80037ea:	e01d      	b.n	8003828 <HAL_RCC_OscConfig+0xcc>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037f4:	d10c      	bne.n	8003810 <HAL_RCC_OscConfig+0xb4>
 80037f6:	4b76      	ldr	r3, [pc, #472]	; (80039d0 <HAL_RCC_OscConfig+0x274>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a75      	ldr	r2, [pc, #468]	; (80039d0 <HAL_RCC_OscConfig+0x274>)
 80037fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003800:	6013      	str	r3, [r2, #0]
 8003802:	4b73      	ldr	r3, [pc, #460]	; (80039d0 <HAL_RCC_OscConfig+0x274>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a72      	ldr	r2, [pc, #456]	; (80039d0 <HAL_RCC_OscConfig+0x274>)
 8003808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800380c:	6013      	str	r3, [r2, #0]
 800380e:	e00b      	b.n	8003828 <HAL_RCC_OscConfig+0xcc>
 8003810:	4b6f      	ldr	r3, [pc, #444]	; (80039d0 <HAL_RCC_OscConfig+0x274>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a6e      	ldr	r2, [pc, #440]	; (80039d0 <HAL_RCC_OscConfig+0x274>)
 8003816:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800381a:	6013      	str	r3, [r2, #0]
 800381c:	4b6c      	ldr	r3, [pc, #432]	; (80039d0 <HAL_RCC_OscConfig+0x274>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a6b      	ldr	r2, [pc, #428]	; (80039d0 <HAL_RCC_OscConfig+0x274>)
 8003822:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003826:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d013      	beq.n	8003858 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003830:	f7ff f8d0 	bl	80029d4 <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003836:	e008      	b.n	800384a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003838:	f7ff f8cc 	bl	80029d4 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b64      	cmp	r3, #100	; 0x64
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e21f      	b.n	8003c8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800384a:	4b61      	ldr	r3, [pc, #388]	; (80039d0 <HAL_RCC_OscConfig+0x274>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d0f0      	beq.n	8003838 <HAL_RCC_OscConfig+0xdc>
 8003856:	e014      	b.n	8003882 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003858:	f7ff f8bc 	bl	80029d4 <HAL_GetTick>
 800385c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800385e:	e008      	b.n	8003872 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003860:	f7ff f8b8 	bl	80029d4 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	2b64      	cmp	r3, #100	; 0x64
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e20b      	b.n	8003c8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003872:	4b57      	ldr	r3, [pc, #348]	; (80039d0 <HAL_RCC_OscConfig+0x274>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1f0      	bne.n	8003860 <HAL_RCC_OscConfig+0x104>
 800387e:	e000      	b.n	8003882 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003880:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d06f      	beq.n	800396e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800388e:	4b50      	ldr	r3, [pc, #320]	; (80039d0 <HAL_RCC_OscConfig+0x274>)
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f003 030c 	and.w	r3, r3, #12
 8003896:	2b00      	cmp	r3, #0
 8003898:	d017      	beq.n	80038ca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800389a:	4b4d      	ldr	r3, [pc, #308]	; (80039d0 <HAL_RCC_OscConfig+0x274>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80038a2:	2b08      	cmp	r3, #8
 80038a4:	d105      	bne.n	80038b2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80038a6:	4b4a      	ldr	r3, [pc, #296]	; (80039d0 <HAL_RCC_OscConfig+0x274>)
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00b      	beq.n	80038ca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038b2:	4b47      	ldr	r3, [pc, #284]	; (80039d0 <HAL_RCC_OscConfig+0x274>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80038ba:	2b0c      	cmp	r3, #12
 80038bc:	d11c      	bne.n	80038f8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038be:	4b44      	ldr	r3, [pc, #272]	; (80039d0 <HAL_RCC_OscConfig+0x274>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d116      	bne.n	80038f8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ca:	4b41      	ldr	r3, [pc, #260]	; (80039d0 <HAL_RCC_OscConfig+0x274>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d005      	beq.n	80038e2 <HAL_RCC_OscConfig+0x186>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d001      	beq.n	80038e2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e1d3      	b.n	8003c8a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038e2:	4b3b      	ldr	r3, [pc, #236]	; (80039d0 <HAL_RCC_OscConfig+0x274>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	00db      	lsls	r3, r3, #3
 80038f0:	4937      	ldr	r1, [pc, #220]	; (80039d0 <HAL_RCC_OscConfig+0x274>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038f6:	e03a      	b.n	800396e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d020      	beq.n	8003942 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003900:	4b34      	ldr	r3, [pc, #208]	; (80039d4 <HAL_RCC_OscConfig+0x278>)
 8003902:	2201      	movs	r2, #1
 8003904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003906:	f7ff f865 	bl	80029d4 <HAL_GetTick>
 800390a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800390c:	e008      	b.n	8003920 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800390e:	f7ff f861 	bl	80029d4 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	2b02      	cmp	r3, #2
 800391a:	d901      	bls.n	8003920 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e1b4      	b.n	8003c8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003920:	4b2b      	ldr	r3, [pc, #172]	; (80039d0 <HAL_RCC_OscConfig+0x274>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d0f0      	beq.n	800390e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800392c:	4b28      	ldr	r3, [pc, #160]	; (80039d0 <HAL_RCC_OscConfig+0x274>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	00db      	lsls	r3, r3, #3
 800393a:	4925      	ldr	r1, [pc, #148]	; (80039d0 <HAL_RCC_OscConfig+0x274>)
 800393c:	4313      	orrs	r3, r2
 800393e:	600b      	str	r3, [r1, #0]
 8003940:	e015      	b.n	800396e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003942:	4b24      	ldr	r3, [pc, #144]	; (80039d4 <HAL_RCC_OscConfig+0x278>)
 8003944:	2200      	movs	r2, #0
 8003946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003948:	f7ff f844 	bl	80029d4 <HAL_GetTick>
 800394c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800394e:	e008      	b.n	8003962 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003950:	f7ff f840 	bl	80029d4 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b02      	cmp	r3, #2
 800395c:	d901      	bls.n	8003962 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e193      	b.n	8003c8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003962:	4b1b      	ldr	r3, [pc, #108]	; (80039d0 <HAL_RCC_OscConfig+0x274>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1f0      	bne.n	8003950 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0308 	and.w	r3, r3, #8
 8003976:	2b00      	cmp	r3, #0
 8003978:	d036      	beq.n	80039e8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d016      	beq.n	80039b0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003982:	4b15      	ldr	r3, [pc, #84]	; (80039d8 <HAL_RCC_OscConfig+0x27c>)
 8003984:	2201      	movs	r2, #1
 8003986:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003988:	f7ff f824 	bl	80029d4 <HAL_GetTick>
 800398c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800398e:	e008      	b.n	80039a2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003990:	f7ff f820 	bl	80029d4 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b02      	cmp	r3, #2
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e173      	b.n	8003c8a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039a2:	4b0b      	ldr	r3, [pc, #44]	; (80039d0 <HAL_RCC_OscConfig+0x274>)
 80039a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0f0      	beq.n	8003990 <HAL_RCC_OscConfig+0x234>
 80039ae:	e01b      	b.n	80039e8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039b0:	4b09      	ldr	r3, [pc, #36]	; (80039d8 <HAL_RCC_OscConfig+0x27c>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b6:	f7ff f80d 	bl	80029d4 <HAL_GetTick>
 80039ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039bc:	e00e      	b.n	80039dc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039be:	f7ff f809 	bl	80029d4 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d907      	bls.n	80039dc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e15c      	b.n	8003c8a <HAL_RCC_OscConfig+0x52e>
 80039d0:	40023800 	.word	0x40023800
 80039d4:	42470000 	.word	0x42470000
 80039d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039dc:	4b8a      	ldr	r3, [pc, #552]	; (8003c08 <HAL_RCC_OscConfig+0x4ac>)
 80039de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1ea      	bne.n	80039be <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0304 	and.w	r3, r3, #4
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f000 8097 	beq.w	8003b24 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039f6:	2300      	movs	r3, #0
 80039f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039fa:	4b83      	ldr	r3, [pc, #524]	; (8003c08 <HAL_RCC_OscConfig+0x4ac>)
 80039fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10f      	bne.n	8003a26 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a06:	2300      	movs	r3, #0
 8003a08:	60bb      	str	r3, [r7, #8]
 8003a0a:	4b7f      	ldr	r3, [pc, #508]	; (8003c08 <HAL_RCC_OscConfig+0x4ac>)
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0e:	4a7e      	ldr	r2, [pc, #504]	; (8003c08 <HAL_RCC_OscConfig+0x4ac>)
 8003a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a14:	6413      	str	r3, [r2, #64]	; 0x40
 8003a16:	4b7c      	ldr	r3, [pc, #496]	; (8003c08 <HAL_RCC_OscConfig+0x4ac>)
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a1e:	60bb      	str	r3, [r7, #8]
 8003a20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a22:	2301      	movs	r3, #1
 8003a24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a26:	4b79      	ldr	r3, [pc, #484]	; (8003c0c <HAL_RCC_OscConfig+0x4b0>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d118      	bne.n	8003a64 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a32:	4b76      	ldr	r3, [pc, #472]	; (8003c0c <HAL_RCC_OscConfig+0x4b0>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a75      	ldr	r2, [pc, #468]	; (8003c0c <HAL_RCC_OscConfig+0x4b0>)
 8003a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a3e:	f7fe ffc9 	bl	80029d4 <HAL_GetTick>
 8003a42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a44:	e008      	b.n	8003a58 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a46:	f7fe ffc5 	bl	80029d4 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d901      	bls.n	8003a58 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e118      	b.n	8003c8a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a58:	4b6c      	ldr	r3, [pc, #432]	; (8003c0c <HAL_RCC_OscConfig+0x4b0>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d0f0      	beq.n	8003a46 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d106      	bne.n	8003a7a <HAL_RCC_OscConfig+0x31e>
 8003a6c:	4b66      	ldr	r3, [pc, #408]	; (8003c08 <HAL_RCC_OscConfig+0x4ac>)
 8003a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a70:	4a65      	ldr	r2, [pc, #404]	; (8003c08 <HAL_RCC_OscConfig+0x4ac>)
 8003a72:	f043 0301 	orr.w	r3, r3, #1
 8003a76:	6713      	str	r3, [r2, #112]	; 0x70
 8003a78:	e01c      	b.n	8003ab4 <HAL_RCC_OscConfig+0x358>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	2b05      	cmp	r3, #5
 8003a80:	d10c      	bne.n	8003a9c <HAL_RCC_OscConfig+0x340>
 8003a82:	4b61      	ldr	r3, [pc, #388]	; (8003c08 <HAL_RCC_OscConfig+0x4ac>)
 8003a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a86:	4a60      	ldr	r2, [pc, #384]	; (8003c08 <HAL_RCC_OscConfig+0x4ac>)
 8003a88:	f043 0304 	orr.w	r3, r3, #4
 8003a8c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a8e:	4b5e      	ldr	r3, [pc, #376]	; (8003c08 <HAL_RCC_OscConfig+0x4ac>)
 8003a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a92:	4a5d      	ldr	r2, [pc, #372]	; (8003c08 <HAL_RCC_OscConfig+0x4ac>)
 8003a94:	f043 0301 	orr.w	r3, r3, #1
 8003a98:	6713      	str	r3, [r2, #112]	; 0x70
 8003a9a:	e00b      	b.n	8003ab4 <HAL_RCC_OscConfig+0x358>
 8003a9c:	4b5a      	ldr	r3, [pc, #360]	; (8003c08 <HAL_RCC_OscConfig+0x4ac>)
 8003a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa0:	4a59      	ldr	r2, [pc, #356]	; (8003c08 <HAL_RCC_OscConfig+0x4ac>)
 8003aa2:	f023 0301 	bic.w	r3, r3, #1
 8003aa6:	6713      	str	r3, [r2, #112]	; 0x70
 8003aa8:	4b57      	ldr	r3, [pc, #348]	; (8003c08 <HAL_RCC_OscConfig+0x4ac>)
 8003aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aac:	4a56      	ldr	r2, [pc, #344]	; (8003c08 <HAL_RCC_OscConfig+0x4ac>)
 8003aae:	f023 0304 	bic.w	r3, r3, #4
 8003ab2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d015      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003abc:	f7fe ff8a 	bl	80029d4 <HAL_GetTick>
 8003ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ac2:	e00a      	b.n	8003ada <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ac4:	f7fe ff86 	bl	80029d4 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e0d7      	b.n	8003c8a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ada:	4b4b      	ldr	r3, [pc, #300]	; (8003c08 <HAL_RCC_OscConfig+0x4ac>)
 8003adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d0ee      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x368>
 8003ae6:	e014      	b.n	8003b12 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ae8:	f7fe ff74 	bl	80029d4 <HAL_GetTick>
 8003aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aee:	e00a      	b.n	8003b06 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003af0:	f7fe ff70 	bl	80029d4 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e0c1      	b.n	8003c8a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b06:	4b40      	ldr	r3, [pc, #256]	; (8003c08 <HAL_RCC_OscConfig+0x4ac>)
 8003b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1ee      	bne.n	8003af0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b12:	7dfb      	ldrb	r3, [r7, #23]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d105      	bne.n	8003b24 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b18:	4b3b      	ldr	r3, [pc, #236]	; (8003c08 <HAL_RCC_OscConfig+0x4ac>)
 8003b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1c:	4a3a      	ldr	r2, [pc, #232]	; (8003c08 <HAL_RCC_OscConfig+0x4ac>)
 8003b1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f000 80ad 	beq.w	8003c88 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b2e:	4b36      	ldr	r3, [pc, #216]	; (8003c08 <HAL_RCC_OscConfig+0x4ac>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f003 030c 	and.w	r3, r3, #12
 8003b36:	2b08      	cmp	r3, #8
 8003b38:	d060      	beq.n	8003bfc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d145      	bne.n	8003bce <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b42:	4b33      	ldr	r3, [pc, #204]	; (8003c10 <HAL_RCC_OscConfig+0x4b4>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b48:	f7fe ff44 	bl	80029d4 <HAL_GetTick>
 8003b4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b4e:	e008      	b.n	8003b62 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b50:	f7fe ff40 	bl	80029d4 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e093      	b.n	8003c8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b62:	4b29      	ldr	r3, [pc, #164]	; (8003c08 <HAL_RCC_OscConfig+0x4ac>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1f0      	bne.n	8003b50 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	69da      	ldr	r2, [r3, #28]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	431a      	orrs	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7c:	019b      	lsls	r3, r3, #6
 8003b7e:	431a      	orrs	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b84:	085b      	lsrs	r3, r3, #1
 8003b86:	3b01      	subs	r3, #1
 8003b88:	041b      	lsls	r3, r3, #16
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b90:	061b      	lsls	r3, r3, #24
 8003b92:	431a      	orrs	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b98:	071b      	lsls	r3, r3, #28
 8003b9a:	491b      	ldr	r1, [pc, #108]	; (8003c08 <HAL_RCC_OscConfig+0x4ac>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ba0:	4b1b      	ldr	r3, [pc, #108]	; (8003c10 <HAL_RCC_OscConfig+0x4b4>)
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba6:	f7fe ff15 	bl	80029d4 <HAL_GetTick>
 8003baa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bac:	e008      	b.n	8003bc0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bae:	f7fe ff11 	bl	80029d4 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d901      	bls.n	8003bc0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e064      	b.n	8003c8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bc0:	4b11      	ldr	r3, [pc, #68]	; (8003c08 <HAL_RCC_OscConfig+0x4ac>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d0f0      	beq.n	8003bae <HAL_RCC_OscConfig+0x452>
 8003bcc:	e05c      	b.n	8003c88 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bce:	4b10      	ldr	r3, [pc, #64]	; (8003c10 <HAL_RCC_OscConfig+0x4b4>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd4:	f7fe fefe 	bl	80029d4 <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bda:	e008      	b.n	8003bee <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bdc:	f7fe fefa 	bl	80029d4 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e04d      	b.n	8003c8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bee:	4b06      	ldr	r3, [pc, #24]	; (8003c08 <HAL_RCC_OscConfig+0x4ac>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1f0      	bne.n	8003bdc <HAL_RCC_OscConfig+0x480>
 8003bfa:	e045      	b.n	8003c88 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d107      	bne.n	8003c14 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e040      	b.n	8003c8a <HAL_RCC_OscConfig+0x52e>
 8003c08:	40023800 	.word	0x40023800
 8003c0c:	40007000 	.word	0x40007000
 8003c10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c14:	4b1f      	ldr	r3, [pc, #124]	; (8003c94 <HAL_RCC_OscConfig+0x538>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d030      	beq.n	8003c84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d129      	bne.n	8003c84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d122      	bne.n	8003c84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c44:	4013      	ands	r3, r2
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d119      	bne.n	8003c84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5a:	085b      	lsrs	r3, r3, #1
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d10f      	bne.n	8003c84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d107      	bne.n	8003c84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d001      	beq.n	8003c88 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e000      	b.n	8003c8a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3718      	adds	r7, #24
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	40023800 	.word	0x40023800

08003c98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e07b      	b.n	8003da2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d108      	bne.n	8003cc4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cba:	d009      	beq.n	8003cd0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	61da      	str	r2, [r3, #28]
 8003cc2:	e005      	b.n	8003cd0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d106      	bne.n	8003cf0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7fe fc80 	bl	80025f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2202      	movs	r2, #2
 8003cf4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d06:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d18:	431a      	orrs	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d22:	431a      	orrs	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	431a      	orrs	r2, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	431a      	orrs	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d40:	431a      	orrs	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	69db      	ldr	r3, [r3, #28]
 8003d46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d4a:	431a      	orrs	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a1b      	ldr	r3, [r3, #32]
 8003d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d54:	ea42 0103 	orr.w	r1, r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	430a      	orrs	r2, r1
 8003d66:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	0c1b      	lsrs	r3, r3, #16
 8003d6e:	f003 0104 	and.w	r1, r3, #4
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d76:	f003 0210 	and.w	r2, r3, #16
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	69da      	ldr	r2, [r3, #28]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d90:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3708      	adds	r7, #8
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b08c      	sub	sp, #48	; 0x30
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	60f8      	str	r0, [r7, #12]
 8003db2:	60b9      	str	r1, [r7, #8]
 8003db4:	607a      	str	r2, [r7, #4]
 8003db6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003db8:	2301      	movs	r3, #1
 8003dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d101      	bne.n	8003dd0 <HAL_SPI_TransmitReceive+0x26>
 8003dcc:	2302      	movs	r3, #2
 8003dce:	e18a      	b.n	80040e6 <HAL_SPI_TransmitReceive+0x33c>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003dd8:	f7fe fdfc 	bl	80029d4 <HAL_GetTick>
 8003ddc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003de4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003dee:	887b      	ldrh	r3, [r7, #2]
 8003df0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003df2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d00f      	beq.n	8003e1a <HAL_SPI_TransmitReceive+0x70>
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e00:	d107      	bne.n	8003e12 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d103      	bne.n	8003e12 <HAL_SPI_TransmitReceive+0x68>
 8003e0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e0e:	2b04      	cmp	r3, #4
 8003e10:	d003      	beq.n	8003e1a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003e12:	2302      	movs	r3, #2
 8003e14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003e18:	e15b      	b.n	80040d2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d005      	beq.n	8003e2c <HAL_SPI_TransmitReceive+0x82>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d002      	beq.n	8003e2c <HAL_SPI_TransmitReceive+0x82>
 8003e26:	887b      	ldrh	r3, [r7, #2]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d103      	bne.n	8003e34 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003e32:	e14e      	b.n	80040d2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	2b04      	cmp	r3, #4
 8003e3e:	d003      	beq.n	8003e48 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2205      	movs	r2, #5
 8003e44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	887a      	ldrh	r2, [r7, #2]
 8003e58:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	887a      	ldrh	r2, [r7, #2]
 8003e5e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	68ba      	ldr	r2, [r7, #8]
 8003e64:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	887a      	ldrh	r2, [r7, #2]
 8003e6a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	887a      	ldrh	r2, [r7, #2]
 8003e70:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2200      	movs	r2, #0
 8003e76:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e88:	2b40      	cmp	r3, #64	; 0x40
 8003e8a:	d007      	beq.n	8003e9c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ea4:	d178      	bne.n	8003f98 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d002      	beq.n	8003eb4 <HAL_SPI_TransmitReceive+0x10a>
 8003eae:	8b7b      	ldrh	r3, [r7, #26]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d166      	bne.n	8003f82 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb8:	881a      	ldrh	r2, [r3, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec4:	1c9a      	adds	r2, r3, #2
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ed8:	e053      	b.n	8003f82 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d11b      	bne.n	8003f20 <HAL_SPI_TransmitReceive+0x176>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d016      	beq.n	8003f20 <HAL_SPI_TransmitReceive+0x176>
 8003ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d113      	bne.n	8003f20 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efc:	881a      	ldrh	r2, [r3, #0]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f08:	1c9a      	adds	r2, r3, #2
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	3b01      	subs	r3, #1
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d119      	bne.n	8003f62 <HAL_SPI_TransmitReceive+0x1b8>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d014      	beq.n	8003f62 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68da      	ldr	r2, [r3, #12]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f42:	b292      	uxth	r2, r2
 8003f44:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4a:	1c9a      	adds	r2, r3, #2
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	3b01      	subs	r3, #1
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003f62:	f7fe fd37 	bl	80029d4 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d807      	bhi.n	8003f82 <HAL_SPI_TransmitReceive+0x1d8>
 8003f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f78:	d003      	beq.n	8003f82 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003f80:	e0a7      	b.n	80040d2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1a6      	bne.n	8003eda <HAL_SPI_TransmitReceive+0x130>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1a1      	bne.n	8003eda <HAL_SPI_TransmitReceive+0x130>
 8003f96:	e07c      	b.n	8004092 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d002      	beq.n	8003fa6 <HAL_SPI_TransmitReceive+0x1fc>
 8003fa0:	8b7b      	ldrh	r3, [r7, #26]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d16b      	bne.n	800407e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	330c      	adds	r3, #12
 8003fb0:	7812      	ldrb	r2, [r2, #0]
 8003fb2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb8:	1c5a      	adds	r2, r3, #1
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fcc:	e057      	b.n	800407e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d11c      	bne.n	8004016 <HAL_SPI_TransmitReceive+0x26c>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d017      	beq.n	8004016 <HAL_SPI_TransmitReceive+0x26c>
 8003fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d114      	bne.n	8004016 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	330c      	adds	r3, #12
 8003ff6:	7812      	ldrb	r2, [r2, #0]
 8003ff8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffe:	1c5a      	adds	r2, r3, #1
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004008:	b29b      	uxth	r3, r3
 800400a:	3b01      	subs	r3, #1
 800400c:	b29a      	uxth	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004012:	2300      	movs	r3, #0
 8004014:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f003 0301 	and.w	r3, r3, #1
 8004020:	2b01      	cmp	r3, #1
 8004022:	d119      	bne.n	8004058 <HAL_SPI_TransmitReceive+0x2ae>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004028:	b29b      	uxth	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d014      	beq.n	8004058 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68da      	ldr	r2, [r3, #12]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004038:	b2d2      	uxtb	r2, r2
 800403a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004040:	1c5a      	adds	r2, r3, #1
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800404a:	b29b      	uxth	r3, r3
 800404c:	3b01      	subs	r3, #1
 800404e:	b29a      	uxth	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004054:	2301      	movs	r3, #1
 8004056:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004058:	f7fe fcbc 	bl	80029d4 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004064:	429a      	cmp	r2, r3
 8004066:	d803      	bhi.n	8004070 <HAL_SPI_TransmitReceive+0x2c6>
 8004068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800406a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800406e:	d102      	bne.n	8004076 <HAL_SPI_TransmitReceive+0x2cc>
 8004070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004072:	2b00      	cmp	r3, #0
 8004074:	d103      	bne.n	800407e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800407c:	e029      	b.n	80040d2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004082:	b29b      	uxth	r3, r3
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1a2      	bne.n	8003fce <HAL_SPI_TransmitReceive+0x224>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800408c:	b29b      	uxth	r3, r3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d19d      	bne.n	8003fce <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004094:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004096:	68f8      	ldr	r0, [r7, #12]
 8004098:	f000 f8b2 	bl	8004200 <SPI_EndRxTxTransaction>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d006      	beq.n	80040b0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2220      	movs	r2, #32
 80040ac:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80040ae:	e010      	b.n	80040d2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d10b      	bne.n	80040d0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040b8:	2300      	movs	r3, #0
 80040ba:	617b      	str	r3, [r7, #20]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	617b      	str	r3, [r7, #20]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	617b      	str	r3, [r7, #20]
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	e000      	b.n	80040d2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80040d0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80040e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3730      	adds	r7, #48	; 0x30
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
	...

080040f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b088      	sub	sp, #32
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	603b      	str	r3, [r7, #0]
 80040fc:	4613      	mov	r3, r2
 80040fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004100:	f7fe fc68 	bl	80029d4 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004108:	1a9b      	subs	r3, r3, r2
 800410a:	683a      	ldr	r2, [r7, #0]
 800410c:	4413      	add	r3, r2
 800410e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004110:	f7fe fc60 	bl	80029d4 <HAL_GetTick>
 8004114:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004116:	4b39      	ldr	r3, [pc, #228]	; (80041fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	015b      	lsls	r3, r3, #5
 800411c:	0d1b      	lsrs	r3, r3, #20
 800411e:	69fa      	ldr	r2, [r7, #28]
 8004120:	fb02 f303 	mul.w	r3, r2, r3
 8004124:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004126:	e054      	b.n	80041d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800412e:	d050      	beq.n	80041d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004130:	f7fe fc50 	bl	80029d4 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	69fa      	ldr	r2, [r7, #28]
 800413c:	429a      	cmp	r2, r3
 800413e:	d902      	bls.n	8004146 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d13d      	bne.n	80041c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	685a      	ldr	r2, [r3, #4]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004154:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800415e:	d111      	bne.n	8004184 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004168:	d004      	beq.n	8004174 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004172:	d107      	bne.n	8004184 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004182:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004188:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800418c:	d10f      	bne.n	80041ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800419c:	601a      	str	r2, [r3, #0]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2201      	movs	r2, #1
 80041b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e017      	b.n	80041f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d101      	bne.n	80041cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80041c8:	2300      	movs	r3, #0
 80041ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	3b01      	subs	r3, #1
 80041d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	4013      	ands	r3, r2
 80041dc:	68ba      	ldr	r2, [r7, #8]
 80041de:	429a      	cmp	r2, r3
 80041e0:	bf0c      	ite	eq
 80041e2:	2301      	moveq	r3, #1
 80041e4:	2300      	movne	r3, #0
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	461a      	mov	r2, r3
 80041ea:	79fb      	ldrb	r3, [r7, #7]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d19b      	bne.n	8004128 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3720      	adds	r7, #32
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	20000000 	.word	0x20000000

08004200 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b088      	sub	sp, #32
 8004204:	af02      	add	r7, sp, #8
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800420c:	4b1b      	ldr	r3, [pc, #108]	; (800427c <SPI_EndRxTxTransaction+0x7c>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a1b      	ldr	r2, [pc, #108]	; (8004280 <SPI_EndRxTxTransaction+0x80>)
 8004212:	fba2 2303 	umull	r2, r3, r2, r3
 8004216:	0d5b      	lsrs	r3, r3, #21
 8004218:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800421c:	fb02 f303 	mul.w	r3, r2, r3
 8004220:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800422a:	d112      	bne.n	8004252 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	9300      	str	r3, [sp, #0]
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	2200      	movs	r2, #0
 8004234:	2180      	movs	r1, #128	; 0x80
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f7ff ff5a 	bl	80040f0 <SPI_WaitFlagStateUntilTimeout>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d016      	beq.n	8004270 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004246:	f043 0220 	orr.w	r2, r3, #32
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e00f      	b.n	8004272 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d00a      	beq.n	800426e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	3b01      	subs	r3, #1
 800425c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004268:	2b80      	cmp	r3, #128	; 0x80
 800426a:	d0f2      	beq.n	8004252 <SPI_EndRxTxTransaction+0x52>
 800426c:	e000      	b.n	8004270 <SPI_EndRxTxTransaction+0x70>
        break;
 800426e:	bf00      	nop
  }

  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3718      	adds	r7, #24
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	20000000 	.word	0x20000000
 8004280:	165e9f81 	.word	0x165e9f81

08004284 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e041      	b.n	800431a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d106      	bne.n	80042b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f7fe f9f8 	bl	80026a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2202      	movs	r2, #2
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	3304      	adds	r3, #4
 80042c0:	4619      	mov	r1, r3
 80042c2:	4610      	mov	r0, r2
 80042c4:	f000 f95e 	bl	8004584 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3708      	adds	r7, #8
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
	...

08004324 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004324:	b480      	push	{r7}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004332:	b2db      	uxtb	r3, r3
 8004334:	2b01      	cmp	r3, #1
 8004336:	d001      	beq.n	800433c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e046      	b.n	80043ca <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2202      	movs	r2, #2
 8004340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a23      	ldr	r2, [pc, #140]	; (80043d8 <HAL_TIM_Base_Start+0xb4>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d022      	beq.n	8004394 <HAL_TIM_Base_Start+0x70>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004356:	d01d      	beq.n	8004394 <HAL_TIM_Base_Start+0x70>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a1f      	ldr	r2, [pc, #124]	; (80043dc <HAL_TIM_Base_Start+0xb8>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d018      	beq.n	8004394 <HAL_TIM_Base_Start+0x70>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a1e      	ldr	r2, [pc, #120]	; (80043e0 <HAL_TIM_Base_Start+0xbc>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d013      	beq.n	8004394 <HAL_TIM_Base_Start+0x70>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a1c      	ldr	r2, [pc, #112]	; (80043e4 <HAL_TIM_Base_Start+0xc0>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d00e      	beq.n	8004394 <HAL_TIM_Base_Start+0x70>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a1b      	ldr	r2, [pc, #108]	; (80043e8 <HAL_TIM_Base_Start+0xc4>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d009      	beq.n	8004394 <HAL_TIM_Base_Start+0x70>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a19      	ldr	r2, [pc, #100]	; (80043ec <HAL_TIM_Base_Start+0xc8>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d004      	beq.n	8004394 <HAL_TIM_Base_Start+0x70>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a18      	ldr	r2, [pc, #96]	; (80043f0 <HAL_TIM_Base_Start+0xcc>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d111      	bne.n	80043b8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f003 0307 	and.w	r3, r3, #7
 800439e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2b06      	cmp	r3, #6
 80043a4:	d010      	beq.n	80043c8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f042 0201 	orr.w	r2, r2, #1
 80043b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043b6:	e007      	b.n	80043c8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f042 0201 	orr.w	r2, r2, #1
 80043c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3714      	adds	r7, #20
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	40010000 	.word	0x40010000
 80043dc:	40000400 	.word	0x40000400
 80043e0:	40000800 	.word	0x40000800
 80043e4:	40000c00 	.word	0x40000c00
 80043e8:	40010400 	.word	0x40010400
 80043ec:	40014000 	.word	0x40014000
 80043f0:	40001800 	.word	0x40001800

080043f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043fe:	2300      	movs	r3, #0
 8004400:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004408:	2b01      	cmp	r3, #1
 800440a:	d101      	bne.n	8004410 <HAL_TIM_ConfigClockSource+0x1c>
 800440c:	2302      	movs	r3, #2
 800440e:	e0b4      	b.n	800457a <HAL_TIM_ConfigClockSource+0x186>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2202      	movs	r2, #2
 800441c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800442e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004436:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68ba      	ldr	r2, [r7, #8]
 800443e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004448:	d03e      	beq.n	80044c8 <HAL_TIM_ConfigClockSource+0xd4>
 800444a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800444e:	f200 8087 	bhi.w	8004560 <HAL_TIM_ConfigClockSource+0x16c>
 8004452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004456:	f000 8086 	beq.w	8004566 <HAL_TIM_ConfigClockSource+0x172>
 800445a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800445e:	d87f      	bhi.n	8004560 <HAL_TIM_ConfigClockSource+0x16c>
 8004460:	2b70      	cmp	r3, #112	; 0x70
 8004462:	d01a      	beq.n	800449a <HAL_TIM_ConfigClockSource+0xa6>
 8004464:	2b70      	cmp	r3, #112	; 0x70
 8004466:	d87b      	bhi.n	8004560 <HAL_TIM_ConfigClockSource+0x16c>
 8004468:	2b60      	cmp	r3, #96	; 0x60
 800446a:	d050      	beq.n	800450e <HAL_TIM_ConfigClockSource+0x11a>
 800446c:	2b60      	cmp	r3, #96	; 0x60
 800446e:	d877      	bhi.n	8004560 <HAL_TIM_ConfigClockSource+0x16c>
 8004470:	2b50      	cmp	r3, #80	; 0x50
 8004472:	d03c      	beq.n	80044ee <HAL_TIM_ConfigClockSource+0xfa>
 8004474:	2b50      	cmp	r3, #80	; 0x50
 8004476:	d873      	bhi.n	8004560 <HAL_TIM_ConfigClockSource+0x16c>
 8004478:	2b40      	cmp	r3, #64	; 0x40
 800447a:	d058      	beq.n	800452e <HAL_TIM_ConfigClockSource+0x13a>
 800447c:	2b40      	cmp	r3, #64	; 0x40
 800447e:	d86f      	bhi.n	8004560 <HAL_TIM_ConfigClockSource+0x16c>
 8004480:	2b30      	cmp	r3, #48	; 0x30
 8004482:	d064      	beq.n	800454e <HAL_TIM_ConfigClockSource+0x15a>
 8004484:	2b30      	cmp	r3, #48	; 0x30
 8004486:	d86b      	bhi.n	8004560 <HAL_TIM_ConfigClockSource+0x16c>
 8004488:	2b20      	cmp	r3, #32
 800448a:	d060      	beq.n	800454e <HAL_TIM_ConfigClockSource+0x15a>
 800448c:	2b20      	cmp	r3, #32
 800448e:	d867      	bhi.n	8004560 <HAL_TIM_ConfigClockSource+0x16c>
 8004490:	2b00      	cmp	r3, #0
 8004492:	d05c      	beq.n	800454e <HAL_TIM_ConfigClockSource+0x15a>
 8004494:	2b10      	cmp	r3, #16
 8004496:	d05a      	beq.n	800454e <HAL_TIM_ConfigClockSource+0x15a>
 8004498:	e062      	b.n	8004560 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6818      	ldr	r0, [r3, #0]
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	6899      	ldr	r1, [r3, #8]
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	685a      	ldr	r2, [r3, #4]
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	f000 f985 	bl	80047b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80044bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	609a      	str	r2, [r3, #8]
      break;
 80044c6:	e04f      	b.n	8004568 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6818      	ldr	r0, [r3, #0]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	6899      	ldr	r1, [r3, #8]
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	685a      	ldr	r2, [r3, #4]
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	f000 f96e 	bl	80047b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	689a      	ldr	r2, [r3, #8]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044ea:	609a      	str	r2, [r3, #8]
      break;
 80044ec:	e03c      	b.n	8004568 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6818      	ldr	r0, [r3, #0]
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	6859      	ldr	r1, [r3, #4]
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	461a      	mov	r2, r3
 80044fc:	f000 f8e2 	bl	80046c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2150      	movs	r1, #80	; 0x50
 8004506:	4618      	mov	r0, r3
 8004508:	f000 f93b 	bl	8004782 <TIM_ITRx_SetConfig>
      break;
 800450c:	e02c      	b.n	8004568 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6818      	ldr	r0, [r3, #0]
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	6859      	ldr	r1, [r3, #4]
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	461a      	mov	r2, r3
 800451c:	f000 f901 	bl	8004722 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2160      	movs	r1, #96	; 0x60
 8004526:	4618      	mov	r0, r3
 8004528:	f000 f92b 	bl	8004782 <TIM_ITRx_SetConfig>
      break;
 800452c:	e01c      	b.n	8004568 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6818      	ldr	r0, [r3, #0]
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	6859      	ldr	r1, [r3, #4]
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	461a      	mov	r2, r3
 800453c:	f000 f8c2 	bl	80046c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2140      	movs	r1, #64	; 0x40
 8004546:	4618      	mov	r0, r3
 8004548:	f000 f91b 	bl	8004782 <TIM_ITRx_SetConfig>
      break;
 800454c:	e00c      	b.n	8004568 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4619      	mov	r1, r3
 8004558:	4610      	mov	r0, r2
 800455a:	f000 f912 	bl	8004782 <TIM_ITRx_SetConfig>
      break;
 800455e:	e003      	b.n	8004568 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	73fb      	strb	r3, [r7, #15]
      break;
 8004564:	e000      	b.n	8004568 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004566:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004578:	7bfb      	ldrb	r3, [r7, #15]
}
 800457a:	4618      	mov	r0, r3
 800457c:	3710      	adds	r7, #16
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
	...

08004584 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a40      	ldr	r2, [pc, #256]	; (8004698 <TIM_Base_SetConfig+0x114>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d013      	beq.n	80045c4 <TIM_Base_SetConfig+0x40>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045a2:	d00f      	beq.n	80045c4 <TIM_Base_SetConfig+0x40>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a3d      	ldr	r2, [pc, #244]	; (800469c <TIM_Base_SetConfig+0x118>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d00b      	beq.n	80045c4 <TIM_Base_SetConfig+0x40>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a3c      	ldr	r2, [pc, #240]	; (80046a0 <TIM_Base_SetConfig+0x11c>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d007      	beq.n	80045c4 <TIM_Base_SetConfig+0x40>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a3b      	ldr	r2, [pc, #236]	; (80046a4 <TIM_Base_SetConfig+0x120>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d003      	beq.n	80045c4 <TIM_Base_SetConfig+0x40>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a3a      	ldr	r2, [pc, #232]	; (80046a8 <TIM_Base_SetConfig+0x124>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d108      	bne.n	80045d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a2f      	ldr	r2, [pc, #188]	; (8004698 <TIM_Base_SetConfig+0x114>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d02b      	beq.n	8004636 <TIM_Base_SetConfig+0xb2>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045e4:	d027      	beq.n	8004636 <TIM_Base_SetConfig+0xb2>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a2c      	ldr	r2, [pc, #176]	; (800469c <TIM_Base_SetConfig+0x118>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d023      	beq.n	8004636 <TIM_Base_SetConfig+0xb2>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a2b      	ldr	r2, [pc, #172]	; (80046a0 <TIM_Base_SetConfig+0x11c>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d01f      	beq.n	8004636 <TIM_Base_SetConfig+0xb2>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a2a      	ldr	r2, [pc, #168]	; (80046a4 <TIM_Base_SetConfig+0x120>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d01b      	beq.n	8004636 <TIM_Base_SetConfig+0xb2>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a29      	ldr	r2, [pc, #164]	; (80046a8 <TIM_Base_SetConfig+0x124>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d017      	beq.n	8004636 <TIM_Base_SetConfig+0xb2>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a28      	ldr	r2, [pc, #160]	; (80046ac <TIM_Base_SetConfig+0x128>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d013      	beq.n	8004636 <TIM_Base_SetConfig+0xb2>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a27      	ldr	r2, [pc, #156]	; (80046b0 <TIM_Base_SetConfig+0x12c>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d00f      	beq.n	8004636 <TIM_Base_SetConfig+0xb2>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a26      	ldr	r2, [pc, #152]	; (80046b4 <TIM_Base_SetConfig+0x130>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d00b      	beq.n	8004636 <TIM_Base_SetConfig+0xb2>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a25      	ldr	r2, [pc, #148]	; (80046b8 <TIM_Base_SetConfig+0x134>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d007      	beq.n	8004636 <TIM_Base_SetConfig+0xb2>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a24      	ldr	r2, [pc, #144]	; (80046bc <TIM_Base_SetConfig+0x138>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d003      	beq.n	8004636 <TIM_Base_SetConfig+0xb2>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a23      	ldr	r2, [pc, #140]	; (80046c0 <TIM_Base_SetConfig+0x13c>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d108      	bne.n	8004648 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800463c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	4313      	orrs	r3, r2
 8004646:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	4313      	orrs	r3, r2
 8004654:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	68fa      	ldr	r2, [r7, #12]
 800465a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	689a      	ldr	r2, [r3, #8]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a0a      	ldr	r2, [pc, #40]	; (8004698 <TIM_Base_SetConfig+0x114>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d003      	beq.n	800467c <TIM_Base_SetConfig+0xf8>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a0c      	ldr	r2, [pc, #48]	; (80046a8 <TIM_Base_SetConfig+0x124>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d103      	bne.n	8004684 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	691a      	ldr	r2, [r3, #16]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	615a      	str	r2, [r3, #20]
}
 800468a:	bf00      	nop
 800468c:	3714      	adds	r7, #20
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	40010000 	.word	0x40010000
 800469c:	40000400 	.word	0x40000400
 80046a0:	40000800 	.word	0x40000800
 80046a4:	40000c00 	.word	0x40000c00
 80046a8:	40010400 	.word	0x40010400
 80046ac:	40014000 	.word	0x40014000
 80046b0:	40014400 	.word	0x40014400
 80046b4:	40014800 	.word	0x40014800
 80046b8:	40001800 	.word	0x40001800
 80046bc:	40001c00 	.word	0x40001c00
 80046c0:	40002000 	.word	0x40002000

080046c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b087      	sub	sp, #28
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6a1b      	ldr	r3, [r3, #32]
 80046d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	f023 0201 	bic.w	r2, r3, #1
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	011b      	lsls	r3, r3, #4
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	f023 030a 	bic.w	r3, r3, #10
 8004700:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004702:	697a      	ldr	r2, [r7, #20]
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	4313      	orrs	r3, r2
 8004708:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	697a      	ldr	r2, [r7, #20]
 8004714:	621a      	str	r2, [r3, #32]
}
 8004716:	bf00      	nop
 8004718:	371c      	adds	r7, #28
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr

08004722 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004722:	b480      	push	{r7}
 8004724:	b087      	sub	sp, #28
 8004726:	af00      	add	r7, sp, #0
 8004728:	60f8      	str	r0, [r7, #12]
 800472a:	60b9      	str	r1, [r7, #8]
 800472c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6a1b      	ldr	r3, [r3, #32]
 8004732:	f023 0210 	bic.w	r2, r3, #16
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6a1b      	ldr	r3, [r3, #32]
 8004744:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800474c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	031b      	lsls	r3, r3, #12
 8004752:	697a      	ldr	r2, [r7, #20]
 8004754:	4313      	orrs	r3, r2
 8004756:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800475e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	011b      	lsls	r3, r3, #4
 8004764:	693a      	ldr	r2, [r7, #16]
 8004766:	4313      	orrs	r3, r2
 8004768:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	697a      	ldr	r2, [r7, #20]
 800476e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	621a      	str	r2, [r3, #32]
}
 8004776:	bf00      	nop
 8004778:	371c      	adds	r7, #28
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr

08004782 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004782:	b480      	push	{r7}
 8004784:	b085      	sub	sp, #20
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
 800478a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004798:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800479a:	683a      	ldr	r2, [r7, #0]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	4313      	orrs	r3, r2
 80047a0:	f043 0307 	orr.w	r3, r3, #7
 80047a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	609a      	str	r2, [r3, #8]
}
 80047ac:	bf00      	nop
 80047ae:	3714      	adds	r7, #20
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b087      	sub	sp, #28
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	607a      	str	r2, [r7, #4]
 80047c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	021a      	lsls	r2, r3, #8
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	431a      	orrs	r2, r3
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	4313      	orrs	r3, r2
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	697a      	ldr	r2, [r7, #20]
 80047ea:	609a      	str	r2, [r3, #8]
}
 80047ec:	bf00      	nop
 80047ee:	371c      	adds	r7, #28
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004808:	2b01      	cmp	r3, #1
 800480a:	d101      	bne.n	8004810 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800480c:	2302      	movs	r3, #2
 800480e:	e05a      	b.n	80048c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2202      	movs	r2, #2
 800481c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004836:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	4313      	orrs	r3, r2
 8004840:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a21      	ldr	r2, [pc, #132]	; (80048d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d022      	beq.n	800489a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800485c:	d01d      	beq.n	800489a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a1d      	ldr	r2, [pc, #116]	; (80048d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d018      	beq.n	800489a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a1b      	ldr	r2, [pc, #108]	; (80048dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d013      	beq.n	800489a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a1a      	ldr	r2, [pc, #104]	; (80048e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d00e      	beq.n	800489a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a18      	ldr	r2, [pc, #96]	; (80048e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d009      	beq.n	800489a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a17      	ldr	r2, [pc, #92]	; (80048e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d004      	beq.n	800489a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a15      	ldr	r2, [pc, #84]	; (80048ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d10c      	bne.n	80048b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68ba      	ldr	r2, [r7, #8]
 80048b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3714      	adds	r7, #20
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	40010000 	.word	0x40010000
 80048d8:	40000400 	.word	0x40000400
 80048dc:	40000800 	.word	0x40000800
 80048e0:	40000c00 	.word	0x40000c00
 80048e4:	40010400 	.word	0x40010400
 80048e8:	40014000 	.word	0x40014000
 80048ec:	40001800 	.word	0x40001800

080048f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d101      	bne.n	8004902 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e03f      	b.n	8004982 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d106      	bne.n	800491c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f7fd fee4 	bl	80026e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2224      	movs	r2, #36	; 0x24
 8004920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68da      	ldr	r2, [r3, #12]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004932:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 f929 	bl	8004b8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	691a      	ldr	r2, [r3, #16]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004948:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	695a      	ldr	r2, [r3, #20]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004958:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68da      	ldr	r2, [r3, #12]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004968:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2220      	movs	r2, #32
 8004974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2220      	movs	r2, #32
 800497c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800498a:	b580      	push	{r7, lr}
 800498c:	b08a      	sub	sp, #40	; 0x28
 800498e:	af02      	add	r7, sp, #8
 8004990:	60f8      	str	r0, [r7, #12]
 8004992:	60b9      	str	r1, [r7, #8]
 8004994:	603b      	str	r3, [r7, #0]
 8004996:	4613      	mov	r3, r2
 8004998:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800499a:	2300      	movs	r3, #0
 800499c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b20      	cmp	r3, #32
 80049a8:	d17c      	bne.n	8004aa4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d002      	beq.n	80049b6 <HAL_UART_Transmit+0x2c>
 80049b0:	88fb      	ldrh	r3, [r7, #6]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e075      	b.n	8004aa6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d101      	bne.n	80049c8 <HAL_UART_Transmit+0x3e>
 80049c4:	2302      	movs	r3, #2
 80049c6:	e06e      	b.n	8004aa6 <HAL_UART_Transmit+0x11c>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2221      	movs	r2, #33	; 0x21
 80049da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049de:	f7fd fff9 	bl	80029d4 <HAL_GetTick>
 80049e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	88fa      	ldrh	r2, [r7, #6]
 80049e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	88fa      	ldrh	r2, [r7, #6]
 80049ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049f8:	d108      	bne.n	8004a0c <HAL_UART_Transmit+0x82>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d104      	bne.n	8004a0c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004a02:	2300      	movs	r3, #0
 8004a04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	61bb      	str	r3, [r7, #24]
 8004a0a:	e003      	b.n	8004a14 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a10:	2300      	movs	r3, #0
 8004a12:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004a1c:	e02a      	b.n	8004a74 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	9300      	str	r3, [sp, #0]
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	2200      	movs	r2, #0
 8004a26:	2180      	movs	r1, #128	; 0x80
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f000 f840 	bl	8004aae <UART_WaitOnFlagUntilTimeout>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d001      	beq.n	8004a38 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e036      	b.n	8004aa6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d10b      	bne.n	8004a56 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	881b      	ldrh	r3, [r3, #0]
 8004a42:	461a      	mov	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a4c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	3302      	adds	r3, #2
 8004a52:	61bb      	str	r3, [r7, #24]
 8004a54:	e007      	b.n	8004a66 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	781a      	ldrb	r2, [r3, #0]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	3301      	adds	r3, #1
 8004a64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	3b01      	subs	r3, #1
 8004a6e:	b29a      	uxth	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1cf      	bne.n	8004a1e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	9300      	str	r3, [sp, #0]
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	2200      	movs	r2, #0
 8004a86:	2140      	movs	r1, #64	; 0x40
 8004a88:	68f8      	ldr	r0, [r7, #12]
 8004a8a:	f000 f810 	bl	8004aae <UART_WaitOnFlagUntilTimeout>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d001      	beq.n	8004a98 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e006      	b.n	8004aa6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2220      	movs	r2, #32
 8004a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	e000      	b.n	8004aa6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004aa4:	2302      	movs	r3, #2
  }
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3720      	adds	r7, #32
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}

08004aae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004aae:	b580      	push	{r7, lr}
 8004ab0:	b090      	sub	sp, #64	; 0x40
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	60f8      	str	r0, [r7, #12]
 8004ab6:	60b9      	str	r1, [r7, #8]
 8004ab8:	603b      	str	r3, [r7, #0]
 8004aba:	4613      	mov	r3, r2
 8004abc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004abe:	e050      	b.n	8004b62 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ac0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac6:	d04c      	beq.n	8004b62 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004ac8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d007      	beq.n	8004ade <UART_WaitOnFlagUntilTimeout+0x30>
 8004ace:	f7fd ff81 	bl	80029d4 <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d241      	bcs.n	8004b62 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	330c      	adds	r3, #12
 8004ae4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae8:	e853 3f00 	ldrex	r3, [r3]
 8004aec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004af4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	330c      	adds	r3, #12
 8004afc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004afe:	637a      	str	r2, [r7, #52]	; 0x34
 8004b00:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b02:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b06:	e841 2300 	strex	r3, r2, [r1]
 8004b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1e5      	bne.n	8004ade <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	3314      	adds	r3, #20
 8004b18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	e853 3f00 	ldrex	r3, [r3]
 8004b20:	613b      	str	r3, [r7, #16]
   return(result);
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	f023 0301 	bic.w	r3, r3, #1
 8004b28:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	3314      	adds	r3, #20
 8004b30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b32:	623a      	str	r2, [r7, #32]
 8004b34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b36:	69f9      	ldr	r1, [r7, #28]
 8004b38:	6a3a      	ldr	r2, [r7, #32]
 8004b3a:	e841 2300 	strex	r3, r2, [r1]
 8004b3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1e5      	bne.n	8004b12 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2220      	movs	r2, #32
 8004b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2220      	movs	r2, #32
 8004b52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e00f      	b.n	8004b82 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	68ba      	ldr	r2, [r7, #8]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	bf0c      	ite	eq
 8004b72:	2301      	moveq	r3, #1
 8004b74:	2300      	movne	r3, #0
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	461a      	mov	r2, r3
 8004b7a:	79fb      	ldrb	r3, [r7, #7]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d09f      	beq.n	8004ac0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3740      	adds	r7, #64	; 0x40
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
	...

08004b8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b90:	b0c0      	sub	sp, #256	; 0x100
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ba8:	68d9      	ldr	r1, [r3, #12]
 8004baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	ea40 0301 	orr.w	r3, r0, r1
 8004bb4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bba:	689a      	ldr	r2, [r3, #8]
 8004bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	431a      	orrs	r2, r3
 8004bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd0:	69db      	ldr	r3, [r3, #28]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004be4:	f021 010c 	bic.w	r1, r1, #12
 8004be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004bf2:	430b      	orrs	r3, r1
 8004bf4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c06:	6999      	ldr	r1, [r3, #24]
 8004c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	ea40 0301 	orr.w	r3, r0, r1
 8004c12:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	4b8f      	ldr	r3, [pc, #572]	; (8004e58 <UART_SetConfig+0x2cc>)
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d005      	beq.n	8004c2c <UART_SetConfig+0xa0>
 8004c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	4b8d      	ldr	r3, [pc, #564]	; (8004e5c <UART_SetConfig+0x2d0>)
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d104      	bne.n	8004c36 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c2c:	f7fe fb54 	bl	80032d8 <HAL_RCC_GetPCLK2Freq>
 8004c30:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004c34:	e003      	b.n	8004c3e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c36:	f7fe fb3b 	bl	80032b0 <HAL_RCC_GetPCLK1Freq>
 8004c3a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c42:	69db      	ldr	r3, [r3, #28]
 8004c44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c48:	f040 810c 	bne.w	8004e64 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c50:	2200      	movs	r2, #0
 8004c52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004c56:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004c5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004c5e:	4622      	mov	r2, r4
 8004c60:	462b      	mov	r3, r5
 8004c62:	1891      	adds	r1, r2, r2
 8004c64:	65b9      	str	r1, [r7, #88]	; 0x58
 8004c66:	415b      	adcs	r3, r3
 8004c68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004c6e:	4621      	mov	r1, r4
 8004c70:	eb12 0801 	adds.w	r8, r2, r1
 8004c74:	4629      	mov	r1, r5
 8004c76:	eb43 0901 	adc.w	r9, r3, r1
 8004c7a:	f04f 0200 	mov.w	r2, #0
 8004c7e:	f04f 0300 	mov.w	r3, #0
 8004c82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c8e:	4690      	mov	r8, r2
 8004c90:	4699      	mov	r9, r3
 8004c92:	4623      	mov	r3, r4
 8004c94:	eb18 0303 	adds.w	r3, r8, r3
 8004c98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004c9c:	462b      	mov	r3, r5
 8004c9e:	eb49 0303 	adc.w	r3, r9, r3
 8004ca2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004cb2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004cb6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004cba:	460b      	mov	r3, r1
 8004cbc:	18db      	adds	r3, r3, r3
 8004cbe:	653b      	str	r3, [r7, #80]	; 0x50
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	eb42 0303 	adc.w	r3, r2, r3
 8004cc6:	657b      	str	r3, [r7, #84]	; 0x54
 8004cc8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004ccc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004cd0:	f7fb fedc 	bl	8000a8c <__aeabi_uldivmod>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	4b61      	ldr	r3, [pc, #388]	; (8004e60 <UART_SetConfig+0x2d4>)
 8004cda:	fba3 2302 	umull	r2, r3, r3, r2
 8004cde:	095b      	lsrs	r3, r3, #5
 8004ce0:	011c      	lsls	r4, r3, #4
 8004ce2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004cec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004cf0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004cf4:	4642      	mov	r2, r8
 8004cf6:	464b      	mov	r3, r9
 8004cf8:	1891      	adds	r1, r2, r2
 8004cfa:	64b9      	str	r1, [r7, #72]	; 0x48
 8004cfc:	415b      	adcs	r3, r3
 8004cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004d04:	4641      	mov	r1, r8
 8004d06:	eb12 0a01 	adds.w	sl, r2, r1
 8004d0a:	4649      	mov	r1, r9
 8004d0c:	eb43 0b01 	adc.w	fp, r3, r1
 8004d10:	f04f 0200 	mov.w	r2, #0
 8004d14:	f04f 0300 	mov.w	r3, #0
 8004d18:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d1c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d24:	4692      	mov	sl, r2
 8004d26:	469b      	mov	fp, r3
 8004d28:	4643      	mov	r3, r8
 8004d2a:	eb1a 0303 	adds.w	r3, sl, r3
 8004d2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d32:	464b      	mov	r3, r9
 8004d34:	eb4b 0303 	adc.w	r3, fp, r3
 8004d38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d48:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004d4c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004d50:	460b      	mov	r3, r1
 8004d52:	18db      	adds	r3, r3, r3
 8004d54:	643b      	str	r3, [r7, #64]	; 0x40
 8004d56:	4613      	mov	r3, r2
 8004d58:	eb42 0303 	adc.w	r3, r2, r3
 8004d5c:	647b      	str	r3, [r7, #68]	; 0x44
 8004d5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d62:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004d66:	f7fb fe91 	bl	8000a8c <__aeabi_uldivmod>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	4611      	mov	r1, r2
 8004d70:	4b3b      	ldr	r3, [pc, #236]	; (8004e60 <UART_SetConfig+0x2d4>)
 8004d72:	fba3 2301 	umull	r2, r3, r3, r1
 8004d76:	095b      	lsrs	r3, r3, #5
 8004d78:	2264      	movs	r2, #100	; 0x64
 8004d7a:	fb02 f303 	mul.w	r3, r2, r3
 8004d7e:	1acb      	subs	r3, r1, r3
 8004d80:	00db      	lsls	r3, r3, #3
 8004d82:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004d86:	4b36      	ldr	r3, [pc, #216]	; (8004e60 <UART_SetConfig+0x2d4>)
 8004d88:	fba3 2302 	umull	r2, r3, r3, r2
 8004d8c:	095b      	lsrs	r3, r3, #5
 8004d8e:	005b      	lsls	r3, r3, #1
 8004d90:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d94:	441c      	add	r4, r3
 8004d96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004da0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004da4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004da8:	4642      	mov	r2, r8
 8004daa:	464b      	mov	r3, r9
 8004dac:	1891      	adds	r1, r2, r2
 8004dae:	63b9      	str	r1, [r7, #56]	; 0x38
 8004db0:	415b      	adcs	r3, r3
 8004db2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004db4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004db8:	4641      	mov	r1, r8
 8004dba:	1851      	adds	r1, r2, r1
 8004dbc:	6339      	str	r1, [r7, #48]	; 0x30
 8004dbe:	4649      	mov	r1, r9
 8004dc0:	414b      	adcs	r3, r1
 8004dc2:	637b      	str	r3, [r7, #52]	; 0x34
 8004dc4:	f04f 0200 	mov.w	r2, #0
 8004dc8:	f04f 0300 	mov.w	r3, #0
 8004dcc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004dd0:	4659      	mov	r1, fp
 8004dd2:	00cb      	lsls	r3, r1, #3
 8004dd4:	4651      	mov	r1, sl
 8004dd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dda:	4651      	mov	r1, sl
 8004ddc:	00ca      	lsls	r2, r1, #3
 8004dde:	4610      	mov	r0, r2
 8004de0:	4619      	mov	r1, r3
 8004de2:	4603      	mov	r3, r0
 8004de4:	4642      	mov	r2, r8
 8004de6:	189b      	adds	r3, r3, r2
 8004de8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004dec:	464b      	mov	r3, r9
 8004dee:	460a      	mov	r2, r1
 8004df0:	eb42 0303 	adc.w	r3, r2, r3
 8004df4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004e04:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004e08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	18db      	adds	r3, r3, r3
 8004e10:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e12:	4613      	mov	r3, r2
 8004e14:	eb42 0303 	adc.w	r3, r2, r3
 8004e18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004e22:	f7fb fe33 	bl	8000a8c <__aeabi_uldivmod>
 8004e26:	4602      	mov	r2, r0
 8004e28:	460b      	mov	r3, r1
 8004e2a:	4b0d      	ldr	r3, [pc, #52]	; (8004e60 <UART_SetConfig+0x2d4>)
 8004e2c:	fba3 1302 	umull	r1, r3, r3, r2
 8004e30:	095b      	lsrs	r3, r3, #5
 8004e32:	2164      	movs	r1, #100	; 0x64
 8004e34:	fb01 f303 	mul.w	r3, r1, r3
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	00db      	lsls	r3, r3, #3
 8004e3c:	3332      	adds	r3, #50	; 0x32
 8004e3e:	4a08      	ldr	r2, [pc, #32]	; (8004e60 <UART_SetConfig+0x2d4>)
 8004e40:	fba2 2303 	umull	r2, r3, r2, r3
 8004e44:	095b      	lsrs	r3, r3, #5
 8004e46:	f003 0207 	and.w	r2, r3, #7
 8004e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4422      	add	r2, r4
 8004e52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e54:	e105      	b.n	8005062 <UART_SetConfig+0x4d6>
 8004e56:	bf00      	nop
 8004e58:	40011000 	.word	0x40011000
 8004e5c:	40011400 	.word	0x40011400
 8004e60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004e6e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004e72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004e76:	4642      	mov	r2, r8
 8004e78:	464b      	mov	r3, r9
 8004e7a:	1891      	adds	r1, r2, r2
 8004e7c:	6239      	str	r1, [r7, #32]
 8004e7e:	415b      	adcs	r3, r3
 8004e80:	627b      	str	r3, [r7, #36]	; 0x24
 8004e82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e86:	4641      	mov	r1, r8
 8004e88:	1854      	adds	r4, r2, r1
 8004e8a:	4649      	mov	r1, r9
 8004e8c:	eb43 0501 	adc.w	r5, r3, r1
 8004e90:	f04f 0200 	mov.w	r2, #0
 8004e94:	f04f 0300 	mov.w	r3, #0
 8004e98:	00eb      	lsls	r3, r5, #3
 8004e9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e9e:	00e2      	lsls	r2, r4, #3
 8004ea0:	4614      	mov	r4, r2
 8004ea2:	461d      	mov	r5, r3
 8004ea4:	4643      	mov	r3, r8
 8004ea6:	18e3      	adds	r3, r4, r3
 8004ea8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004eac:	464b      	mov	r3, r9
 8004eae:	eb45 0303 	adc.w	r3, r5, r3
 8004eb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004ec2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004ec6:	f04f 0200 	mov.w	r2, #0
 8004eca:	f04f 0300 	mov.w	r3, #0
 8004ece:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004ed2:	4629      	mov	r1, r5
 8004ed4:	008b      	lsls	r3, r1, #2
 8004ed6:	4621      	mov	r1, r4
 8004ed8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004edc:	4621      	mov	r1, r4
 8004ede:	008a      	lsls	r2, r1, #2
 8004ee0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004ee4:	f7fb fdd2 	bl	8000a8c <__aeabi_uldivmod>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	460b      	mov	r3, r1
 8004eec:	4b60      	ldr	r3, [pc, #384]	; (8005070 <UART_SetConfig+0x4e4>)
 8004eee:	fba3 2302 	umull	r2, r3, r3, r2
 8004ef2:	095b      	lsrs	r3, r3, #5
 8004ef4:	011c      	lsls	r4, r3, #4
 8004ef6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004efa:	2200      	movs	r2, #0
 8004efc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004f00:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004f04:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004f08:	4642      	mov	r2, r8
 8004f0a:	464b      	mov	r3, r9
 8004f0c:	1891      	adds	r1, r2, r2
 8004f0e:	61b9      	str	r1, [r7, #24]
 8004f10:	415b      	adcs	r3, r3
 8004f12:	61fb      	str	r3, [r7, #28]
 8004f14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f18:	4641      	mov	r1, r8
 8004f1a:	1851      	adds	r1, r2, r1
 8004f1c:	6139      	str	r1, [r7, #16]
 8004f1e:	4649      	mov	r1, r9
 8004f20:	414b      	adcs	r3, r1
 8004f22:	617b      	str	r3, [r7, #20]
 8004f24:	f04f 0200 	mov.w	r2, #0
 8004f28:	f04f 0300 	mov.w	r3, #0
 8004f2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f30:	4659      	mov	r1, fp
 8004f32:	00cb      	lsls	r3, r1, #3
 8004f34:	4651      	mov	r1, sl
 8004f36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f3a:	4651      	mov	r1, sl
 8004f3c:	00ca      	lsls	r2, r1, #3
 8004f3e:	4610      	mov	r0, r2
 8004f40:	4619      	mov	r1, r3
 8004f42:	4603      	mov	r3, r0
 8004f44:	4642      	mov	r2, r8
 8004f46:	189b      	adds	r3, r3, r2
 8004f48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f4c:	464b      	mov	r3, r9
 8004f4e:	460a      	mov	r2, r1
 8004f50:	eb42 0303 	adc.w	r3, r2, r3
 8004f54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f62:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004f64:	f04f 0200 	mov.w	r2, #0
 8004f68:	f04f 0300 	mov.w	r3, #0
 8004f6c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004f70:	4649      	mov	r1, r9
 8004f72:	008b      	lsls	r3, r1, #2
 8004f74:	4641      	mov	r1, r8
 8004f76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f7a:	4641      	mov	r1, r8
 8004f7c:	008a      	lsls	r2, r1, #2
 8004f7e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004f82:	f7fb fd83 	bl	8000a8c <__aeabi_uldivmod>
 8004f86:	4602      	mov	r2, r0
 8004f88:	460b      	mov	r3, r1
 8004f8a:	4b39      	ldr	r3, [pc, #228]	; (8005070 <UART_SetConfig+0x4e4>)
 8004f8c:	fba3 1302 	umull	r1, r3, r3, r2
 8004f90:	095b      	lsrs	r3, r3, #5
 8004f92:	2164      	movs	r1, #100	; 0x64
 8004f94:	fb01 f303 	mul.w	r3, r1, r3
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	011b      	lsls	r3, r3, #4
 8004f9c:	3332      	adds	r3, #50	; 0x32
 8004f9e:	4a34      	ldr	r2, [pc, #208]	; (8005070 <UART_SetConfig+0x4e4>)
 8004fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa4:	095b      	lsrs	r3, r3, #5
 8004fa6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004faa:	441c      	add	r4, r3
 8004fac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	673b      	str	r3, [r7, #112]	; 0x70
 8004fb4:	677a      	str	r2, [r7, #116]	; 0x74
 8004fb6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004fba:	4642      	mov	r2, r8
 8004fbc:	464b      	mov	r3, r9
 8004fbe:	1891      	adds	r1, r2, r2
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	415b      	adcs	r3, r3
 8004fc4:	60fb      	str	r3, [r7, #12]
 8004fc6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fca:	4641      	mov	r1, r8
 8004fcc:	1851      	adds	r1, r2, r1
 8004fce:	6039      	str	r1, [r7, #0]
 8004fd0:	4649      	mov	r1, r9
 8004fd2:	414b      	adcs	r3, r1
 8004fd4:	607b      	str	r3, [r7, #4]
 8004fd6:	f04f 0200 	mov.w	r2, #0
 8004fda:	f04f 0300 	mov.w	r3, #0
 8004fde:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004fe2:	4659      	mov	r1, fp
 8004fe4:	00cb      	lsls	r3, r1, #3
 8004fe6:	4651      	mov	r1, sl
 8004fe8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fec:	4651      	mov	r1, sl
 8004fee:	00ca      	lsls	r2, r1, #3
 8004ff0:	4610      	mov	r0, r2
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	4642      	mov	r2, r8
 8004ff8:	189b      	adds	r3, r3, r2
 8004ffa:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ffc:	464b      	mov	r3, r9
 8004ffe:	460a      	mov	r2, r1
 8005000:	eb42 0303 	adc.w	r3, r2, r3
 8005004:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	663b      	str	r3, [r7, #96]	; 0x60
 8005010:	667a      	str	r2, [r7, #100]	; 0x64
 8005012:	f04f 0200 	mov.w	r2, #0
 8005016:	f04f 0300 	mov.w	r3, #0
 800501a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800501e:	4649      	mov	r1, r9
 8005020:	008b      	lsls	r3, r1, #2
 8005022:	4641      	mov	r1, r8
 8005024:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005028:	4641      	mov	r1, r8
 800502a:	008a      	lsls	r2, r1, #2
 800502c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005030:	f7fb fd2c 	bl	8000a8c <__aeabi_uldivmod>
 8005034:	4602      	mov	r2, r0
 8005036:	460b      	mov	r3, r1
 8005038:	4b0d      	ldr	r3, [pc, #52]	; (8005070 <UART_SetConfig+0x4e4>)
 800503a:	fba3 1302 	umull	r1, r3, r3, r2
 800503e:	095b      	lsrs	r3, r3, #5
 8005040:	2164      	movs	r1, #100	; 0x64
 8005042:	fb01 f303 	mul.w	r3, r1, r3
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	011b      	lsls	r3, r3, #4
 800504a:	3332      	adds	r3, #50	; 0x32
 800504c:	4a08      	ldr	r2, [pc, #32]	; (8005070 <UART_SetConfig+0x4e4>)
 800504e:	fba2 2303 	umull	r2, r3, r2, r3
 8005052:	095b      	lsrs	r3, r3, #5
 8005054:	f003 020f 	and.w	r2, r3, #15
 8005058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4422      	add	r2, r4
 8005060:	609a      	str	r2, [r3, #8]
}
 8005062:	bf00      	nop
 8005064:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005068:	46bd      	mov	sp, r7
 800506a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800506e:	bf00      	nop
 8005070:	51eb851f 	.word	0x51eb851f

08005074 <_ZdlPvj>:
 8005074:	f000 b803 	b.w	800507e <_ZdlPv>

08005078 <__cxa_pure_virtual>:
 8005078:	b508      	push	{r3, lr}
 800507a:	f000 f80f 	bl	800509c <_ZSt9terminatev>

0800507e <_ZdlPv>:
 800507e:	f000 b843 	b.w	8005108 <free>

08005082 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8005082:	b508      	push	{r3, lr}
 8005084:	4780      	blx	r0
 8005086:	f000 f80e 	bl	80050a6 <abort>
	...

0800508c <_ZSt13get_terminatev>:
 800508c:	4b02      	ldr	r3, [pc, #8]	; (8005098 <_ZSt13get_terminatev+0xc>)
 800508e:	6818      	ldr	r0, [r3, #0]
 8005090:	f3bf 8f5b 	dmb	ish
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop
 8005098:	2000000c 	.word	0x2000000c

0800509c <_ZSt9terminatev>:
 800509c:	b508      	push	{r3, lr}
 800509e:	f7ff fff5 	bl	800508c <_ZSt13get_terminatev>
 80050a2:	f7ff ffee 	bl	8005082 <_ZN10__cxxabiv111__terminateEPFvvE>

080050a6 <abort>:
 80050a6:	b508      	push	{r3, lr}
 80050a8:	2006      	movs	r0, #6
 80050aa:	f000 f963 	bl	8005374 <raise>
 80050ae:	2001      	movs	r0, #1
 80050b0:	f7fd fbae 	bl	8002810 <_exit>

080050b4 <__errno>:
 80050b4:	4b01      	ldr	r3, [pc, #4]	; (80050bc <__errno+0x8>)
 80050b6:	6818      	ldr	r0, [r3, #0]
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop
 80050bc:	20000010 	.word	0x20000010

080050c0 <__libc_init_array>:
 80050c0:	b570      	push	{r4, r5, r6, lr}
 80050c2:	4d0d      	ldr	r5, [pc, #52]	; (80050f8 <__libc_init_array+0x38>)
 80050c4:	4c0d      	ldr	r4, [pc, #52]	; (80050fc <__libc_init_array+0x3c>)
 80050c6:	1b64      	subs	r4, r4, r5
 80050c8:	10a4      	asrs	r4, r4, #2
 80050ca:	2600      	movs	r6, #0
 80050cc:	42a6      	cmp	r6, r4
 80050ce:	d109      	bne.n	80050e4 <__libc_init_array+0x24>
 80050d0:	4d0b      	ldr	r5, [pc, #44]	; (8005100 <__libc_init_array+0x40>)
 80050d2:	4c0c      	ldr	r4, [pc, #48]	; (8005104 <__libc_init_array+0x44>)
 80050d4:	f000 fcda 	bl	8005a8c <_init>
 80050d8:	1b64      	subs	r4, r4, r5
 80050da:	10a4      	asrs	r4, r4, #2
 80050dc:	2600      	movs	r6, #0
 80050de:	42a6      	cmp	r6, r4
 80050e0:	d105      	bne.n	80050ee <__libc_init_array+0x2e>
 80050e2:	bd70      	pop	{r4, r5, r6, pc}
 80050e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80050e8:	4798      	blx	r3
 80050ea:	3601      	adds	r6, #1
 80050ec:	e7ee      	b.n	80050cc <__libc_init_array+0xc>
 80050ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80050f2:	4798      	blx	r3
 80050f4:	3601      	adds	r6, #1
 80050f6:	e7f2      	b.n	80050de <__libc_init_array+0x1e>
 80050f8:	08005c00 	.word	0x08005c00
 80050fc:	08005c00 	.word	0x08005c00
 8005100:	08005c00 	.word	0x08005c00
 8005104:	08005c08 	.word	0x08005c08

08005108 <free>:
 8005108:	4b02      	ldr	r3, [pc, #8]	; (8005114 <free+0xc>)
 800510a:	4601      	mov	r1, r0
 800510c:	6818      	ldr	r0, [r3, #0]
 800510e:	f000 b819 	b.w	8005144 <_free_r>
 8005112:	bf00      	nop
 8005114:	20000010 	.word	0x20000010

08005118 <memcpy>:
 8005118:	440a      	add	r2, r1
 800511a:	4291      	cmp	r1, r2
 800511c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005120:	d100      	bne.n	8005124 <memcpy+0xc>
 8005122:	4770      	bx	lr
 8005124:	b510      	push	{r4, lr}
 8005126:	f811 4b01 	ldrb.w	r4, [r1], #1
 800512a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800512e:	4291      	cmp	r1, r2
 8005130:	d1f9      	bne.n	8005126 <memcpy+0xe>
 8005132:	bd10      	pop	{r4, pc}

08005134 <memset>:
 8005134:	4402      	add	r2, r0
 8005136:	4603      	mov	r3, r0
 8005138:	4293      	cmp	r3, r2
 800513a:	d100      	bne.n	800513e <memset+0xa>
 800513c:	4770      	bx	lr
 800513e:	f803 1b01 	strb.w	r1, [r3], #1
 8005142:	e7f9      	b.n	8005138 <memset+0x4>

08005144 <_free_r>:
 8005144:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005146:	2900      	cmp	r1, #0
 8005148:	d044      	beq.n	80051d4 <_free_r+0x90>
 800514a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800514e:	9001      	str	r0, [sp, #4]
 8005150:	2b00      	cmp	r3, #0
 8005152:	f1a1 0404 	sub.w	r4, r1, #4
 8005156:	bfb8      	it	lt
 8005158:	18e4      	addlt	r4, r4, r3
 800515a:	f000 f947 	bl	80053ec <__malloc_lock>
 800515e:	4a1e      	ldr	r2, [pc, #120]	; (80051d8 <_free_r+0x94>)
 8005160:	9801      	ldr	r0, [sp, #4]
 8005162:	6813      	ldr	r3, [r2, #0]
 8005164:	b933      	cbnz	r3, 8005174 <_free_r+0x30>
 8005166:	6063      	str	r3, [r4, #4]
 8005168:	6014      	str	r4, [r2, #0]
 800516a:	b003      	add	sp, #12
 800516c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005170:	f000 b942 	b.w	80053f8 <__malloc_unlock>
 8005174:	42a3      	cmp	r3, r4
 8005176:	d908      	bls.n	800518a <_free_r+0x46>
 8005178:	6825      	ldr	r5, [r4, #0]
 800517a:	1961      	adds	r1, r4, r5
 800517c:	428b      	cmp	r3, r1
 800517e:	bf01      	itttt	eq
 8005180:	6819      	ldreq	r1, [r3, #0]
 8005182:	685b      	ldreq	r3, [r3, #4]
 8005184:	1949      	addeq	r1, r1, r5
 8005186:	6021      	streq	r1, [r4, #0]
 8005188:	e7ed      	b.n	8005166 <_free_r+0x22>
 800518a:	461a      	mov	r2, r3
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	b10b      	cbz	r3, 8005194 <_free_r+0x50>
 8005190:	42a3      	cmp	r3, r4
 8005192:	d9fa      	bls.n	800518a <_free_r+0x46>
 8005194:	6811      	ldr	r1, [r2, #0]
 8005196:	1855      	adds	r5, r2, r1
 8005198:	42a5      	cmp	r5, r4
 800519a:	d10b      	bne.n	80051b4 <_free_r+0x70>
 800519c:	6824      	ldr	r4, [r4, #0]
 800519e:	4421      	add	r1, r4
 80051a0:	1854      	adds	r4, r2, r1
 80051a2:	42a3      	cmp	r3, r4
 80051a4:	6011      	str	r1, [r2, #0]
 80051a6:	d1e0      	bne.n	800516a <_free_r+0x26>
 80051a8:	681c      	ldr	r4, [r3, #0]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	6053      	str	r3, [r2, #4]
 80051ae:	4421      	add	r1, r4
 80051b0:	6011      	str	r1, [r2, #0]
 80051b2:	e7da      	b.n	800516a <_free_r+0x26>
 80051b4:	d902      	bls.n	80051bc <_free_r+0x78>
 80051b6:	230c      	movs	r3, #12
 80051b8:	6003      	str	r3, [r0, #0]
 80051ba:	e7d6      	b.n	800516a <_free_r+0x26>
 80051bc:	6825      	ldr	r5, [r4, #0]
 80051be:	1961      	adds	r1, r4, r5
 80051c0:	428b      	cmp	r3, r1
 80051c2:	bf04      	itt	eq
 80051c4:	6819      	ldreq	r1, [r3, #0]
 80051c6:	685b      	ldreq	r3, [r3, #4]
 80051c8:	6063      	str	r3, [r4, #4]
 80051ca:	bf04      	itt	eq
 80051cc:	1949      	addeq	r1, r1, r5
 80051ce:	6021      	streq	r1, [r4, #0]
 80051d0:	6054      	str	r4, [r2, #4]
 80051d2:	e7ca      	b.n	800516a <_free_r+0x26>
 80051d4:	b003      	add	sp, #12
 80051d6:	bd30      	pop	{r4, r5, pc}
 80051d8:	200002c8 	.word	0x200002c8

080051dc <sbrk_aligned>:
 80051dc:	b570      	push	{r4, r5, r6, lr}
 80051de:	4e0e      	ldr	r6, [pc, #56]	; (8005218 <sbrk_aligned+0x3c>)
 80051e0:	460c      	mov	r4, r1
 80051e2:	6831      	ldr	r1, [r6, #0]
 80051e4:	4605      	mov	r5, r0
 80051e6:	b911      	cbnz	r1, 80051ee <sbrk_aligned+0x12>
 80051e8:	f000 f88c 	bl	8005304 <_sbrk_r>
 80051ec:	6030      	str	r0, [r6, #0]
 80051ee:	4621      	mov	r1, r4
 80051f0:	4628      	mov	r0, r5
 80051f2:	f000 f887 	bl	8005304 <_sbrk_r>
 80051f6:	1c43      	adds	r3, r0, #1
 80051f8:	d00a      	beq.n	8005210 <sbrk_aligned+0x34>
 80051fa:	1cc4      	adds	r4, r0, #3
 80051fc:	f024 0403 	bic.w	r4, r4, #3
 8005200:	42a0      	cmp	r0, r4
 8005202:	d007      	beq.n	8005214 <sbrk_aligned+0x38>
 8005204:	1a21      	subs	r1, r4, r0
 8005206:	4628      	mov	r0, r5
 8005208:	f000 f87c 	bl	8005304 <_sbrk_r>
 800520c:	3001      	adds	r0, #1
 800520e:	d101      	bne.n	8005214 <sbrk_aligned+0x38>
 8005210:	f04f 34ff 	mov.w	r4, #4294967295
 8005214:	4620      	mov	r0, r4
 8005216:	bd70      	pop	{r4, r5, r6, pc}
 8005218:	200002cc 	.word	0x200002cc

0800521c <_malloc_r>:
 800521c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005220:	1ccd      	adds	r5, r1, #3
 8005222:	f025 0503 	bic.w	r5, r5, #3
 8005226:	3508      	adds	r5, #8
 8005228:	2d0c      	cmp	r5, #12
 800522a:	bf38      	it	cc
 800522c:	250c      	movcc	r5, #12
 800522e:	2d00      	cmp	r5, #0
 8005230:	4607      	mov	r7, r0
 8005232:	db01      	blt.n	8005238 <_malloc_r+0x1c>
 8005234:	42a9      	cmp	r1, r5
 8005236:	d905      	bls.n	8005244 <_malloc_r+0x28>
 8005238:	230c      	movs	r3, #12
 800523a:	603b      	str	r3, [r7, #0]
 800523c:	2600      	movs	r6, #0
 800523e:	4630      	mov	r0, r6
 8005240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005244:	4e2e      	ldr	r6, [pc, #184]	; (8005300 <_malloc_r+0xe4>)
 8005246:	f000 f8d1 	bl	80053ec <__malloc_lock>
 800524a:	6833      	ldr	r3, [r6, #0]
 800524c:	461c      	mov	r4, r3
 800524e:	bb34      	cbnz	r4, 800529e <_malloc_r+0x82>
 8005250:	4629      	mov	r1, r5
 8005252:	4638      	mov	r0, r7
 8005254:	f7ff ffc2 	bl	80051dc <sbrk_aligned>
 8005258:	1c43      	adds	r3, r0, #1
 800525a:	4604      	mov	r4, r0
 800525c:	d14d      	bne.n	80052fa <_malloc_r+0xde>
 800525e:	6834      	ldr	r4, [r6, #0]
 8005260:	4626      	mov	r6, r4
 8005262:	2e00      	cmp	r6, #0
 8005264:	d140      	bne.n	80052e8 <_malloc_r+0xcc>
 8005266:	6823      	ldr	r3, [r4, #0]
 8005268:	4631      	mov	r1, r6
 800526a:	4638      	mov	r0, r7
 800526c:	eb04 0803 	add.w	r8, r4, r3
 8005270:	f000 f848 	bl	8005304 <_sbrk_r>
 8005274:	4580      	cmp	r8, r0
 8005276:	d13a      	bne.n	80052ee <_malloc_r+0xd2>
 8005278:	6821      	ldr	r1, [r4, #0]
 800527a:	3503      	adds	r5, #3
 800527c:	1a6d      	subs	r5, r5, r1
 800527e:	f025 0503 	bic.w	r5, r5, #3
 8005282:	3508      	adds	r5, #8
 8005284:	2d0c      	cmp	r5, #12
 8005286:	bf38      	it	cc
 8005288:	250c      	movcc	r5, #12
 800528a:	4629      	mov	r1, r5
 800528c:	4638      	mov	r0, r7
 800528e:	f7ff ffa5 	bl	80051dc <sbrk_aligned>
 8005292:	3001      	adds	r0, #1
 8005294:	d02b      	beq.n	80052ee <_malloc_r+0xd2>
 8005296:	6823      	ldr	r3, [r4, #0]
 8005298:	442b      	add	r3, r5
 800529a:	6023      	str	r3, [r4, #0]
 800529c:	e00e      	b.n	80052bc <_malloc_r+0xa0>
 800529e:	6822      	ldr	r2, [r4, #0]
 80052a0:	1b52      	subs	r2, r2, r5
 80052a2:	d41e      	bmi.n	80052e2 <_malloc_r+0xc6>
 80052a4:	2a0b      	cmp	r2, #11
 80052a6:	d916      	bls.n	80052d6 <_malloc_r+0xba>
 80052a8:	1961      	adds	r1, r4, r5
 80052aa:	42a3      	cmp	r3, r4
 80052ac:	6025      	str	r5, [r4, #0]
 80052ae:	bf18      	it	ne
 80052b0:	6059      	strne	r1, [r3, #4]
 80052b2:	6863      	ldr	r3, [r4, #4]
 80052b4:	bf08      	it	eq
 80052b6:	6031      	streq	r1, [r6, #0]
 80052b8:	5162      	str	r2, [r4, r5]
 80052ba:	604b      	str	r3, [r1, #4]
 80052bc:	4638      	mov	r0, r7
 80052be:	f104 060b 	add.w	r6, r4, #11
 80052c2:	f000 f899 	bl	80053f8 <__malloc_unlock>
 80052c6:	f026 0607 	bic.w	r6, r6, #7
 80052ca:	1d23      	adds	r3, r4, #4
 80052cc:	1af2      	subs	r2, r6, r3
 80052ce:	d0b6      	beq.n	800523e <_malloc_r+0x22>
 80052d0:	1b9b      	subs	r3, r3, r6
 80052d2:	50a3      	str	r3, [r4, r2]
 80052d4:	e7b3      	b.n	800523e <_malloc_r+0x22>
 80052d6:	6862      	ldr	r2, [r4, #4]
 80052d8:	42a3      	cmp	r3, r4
 80052da:	bf0c      	ite	eq
 80052dc:	6032      	streq	r2, [r6, #0]
 80052de:	605a      	strne	r2, [r3, #4]
 80052e0:	e7ec      	b.n	80052bc <_malloc_r+0xa0>
 80052e2:	4623      	mov	r3, r4
 80052e4:	6864      	ldr	r4, [r4, #4]
 80052e6:	e7b2      	b.n	800524e <_malloc_r+0x32>
 80052e8:	4634      	mov	r4, r6
 80052ea:	6876      	ldr	r6, [r6, #4]
 80052ec:	e7b9      	b.n	8005262 <_malloc_r+0x46>
 80052ee:	230c      	movs	r3, #12
 80052f0:	603b      	str	r3, [r7, #0]
 80052f2:	4638      	mov	r0, r7
 80052f4:	f000 f880 	bl	80053f8 <__malloc_unlock>
 80052f8:	e7a1      	b.n	800523e <_malloc_r+0x22>
 80052fa:	6025      	str	r5, [r4, #0]
 80052fc:	e7de      	b.n	80052bc <_malloc_r+0xa0>
 80052fe:	bf00      	nop
 8005300:	200002c8 	.word	0x200002c8

08005304 <_sbrk_r>:
 8005304:	b538      	push	{r3, r4, r5, lr}
 8005306:	4d06      	ldr	r5, [pc, #24]	; (8005320 <_sbrk_r+0x1c>)
 8005308:	2300      	movs	r3, #0
 800530a:	4604      	mov	r4, r0
 800530c:	4608      	mov	r0, r1
 800530e:	602b      	str	r3, [r5, #0]
 8005310:	f7fd fa88 	bl	8002824 <_sbrk>
 8005314:	1c43      	adds	r3, r0, #1
 8005316:	d102      	bne.n	800531e <_sbrk_r+0x1a>
 8005318:	682b      	ldr	r3, [r5, #0]
 800531a:	b103      	cbz	r3, 800531e <_sbrk_r+0x1a>
 800531c:	6023      	str	r3, [r4, #0]
 800531e:	bd38      	pop	{r3, r4, r5, pc}
 8005320:	200002d0 	.word	0x200002d0

08005324 <_raise_r>:
 8005324:	291f      	cmp	r1, #31
 8005326:	b538      	push	{r3, r4, r5, lr}
 8005328:	4604      	mov	r4, r0
 800532a:	460d      	mov	r5, r1
 800532c:	d904      	bls.n	8005338 <_raise_r+0x14>
 800532e:	2316      	movs	r3, #22
 8005330:	6003      	str	r3, [r0, #0]
 8005332:	f04f 30ff 	mov.w	r0, #4294967295
 8005336:	bd38      	pop	{r3, r4, r5, pc}
 8005338:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800533a:	b112      	cbz	r2, 8005342 <_raise_r+0x1e>
 800533c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005340:	b94b      	cbnz	r3, 8005356 <_raise_r+0x32>
 8005342:	4620      	mov	r0, r4
 8005344:	f000 f830 	bl	80053a8 <_getpid_r>
 8005348:	462a      	mov	r2, r5
 800534a:	4601      	mov	r1, r0
 800534c:	4620      	mov	r0, r4
 800534e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005352:	f000 b817 	b.w	8005384 <_kill_r>
 8005356:	2b01      	cmp	r3, #1
 8005358:	d00a      	beq.n	8005370 <_raise_r+0x4c>
 800535a:	1c59      	adds	r1, r3, #1
 800535c:	d103      	bne.n	8005366 <_raise_r+0x42>
 800535e:	2316      	movs	r3, #22
 8005360:	6003      	str	r3, [r0, #0]
 8005362:	2001      	movs	r0, #1
 8005364:	e7e7      	b.n	8005336 <_raise_r+0x12>
 8005366:	2400      	movs	r4, #0
 8005368:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800536c:	4628      	mov	r0, r5
 800536e:	4798      	blx	r3
 8005370:	2000      	movs	r0, #0
 8005372:	e7e0      	b.n	8005336 <_raise_r+0x12>

08005374 <raise>:
 8005374:	4b02      	ldr	r3, [pc, #8]	; (8005380 <raise+0xc>)
 8005376:	4601      	mov	r1, r0
 8005378:	6818      	ldr	r0, [r3, #0]
 800537a:	f7ff bfd3 	b.w	8005324 <_raise_r>
 800537e:	bf00      	nop
 8005380:	20000010 	.word	0x20000010

08005384 <_kill_r>:
 8005384:	b538      	push	{r3, r4, r5, lr}
 8005386:	4d07      	ldr	r5, [pc, #28]	; (80053a4 <_kill_r+0x20>)
 8005388:	2300      	movs	r3, #0
 800538a:	4604      	mov	r4, r0
 800538c:	4608      	mov	r0, r1
 800538e:	4611      	mov	r1, r2
 8005390:	602b      	str	r3, [r5, #0]
 8005392:	f7fd fa2d 	bl	80027f0 <_kill>
 8005396:	1c43      	adds	r3, r0, #1
 8005398:	d102      	bne.n	80053a0 <_kill_r+0x1c>
 800539a:	682b      	ldr	r3, [r5, #0]
 800539c:	b103      	cbz	r3, 80053a0 <_kill_r+0x1c>
 800539e:	6023      	str	r3, [r4, #0]
 80053a0:	bd38      	pop	{r3, r4, r5, pc}
 80053a2:	bf00      	nop
 80053a4:	200002d0 	.word	0x200002d0

080053a8 <_getpid_r>:
 80053a8:	f7fd ba1a 	b.w	80027e0 <_getpid>

080053ac <siprintf>:
 80053ac:	b40e      	push	{r1, r2, r3}
 80053ae:	b500      	push	{lr}
 80053b0:	b09c      	sub	sp, #112	; 0x70
 80053b2:	ab1d      	add	r3, sp, #116	; 0x74
 80053b4:	9002      	str	r0, [sp, #8]
 80053b6:	9006      	str	r0, [sp, #24]
 80053b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80053bc:	4809      	ldr	r0, [pc, #36]	; (80053e4 <siprintf+0x38>)
 80053be:	9107      	str	r1, [sp, #28]
 80053c0:	9104      	str	r1, [sp, #16]
 80053c2:	4909      	ldr	r1, [pc, #36]	; (80053e8 <siprintf+0x3c>)
 80053c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80053c8:	9105      	str	r1, [sp, #20]
 80053ca:	6800      	ldr	r0, [r0, #0]
 80053cc:	9301      	str	r3, [sp, #4]
 80053ce:	a902      	add	r1, sp, #8
 80053d0:	f000 f874 	bl	80054bc <_svfiprintf_r>
 80053d4:	9b02      	ldr	r3, [sp, #8]
 80053d6:	2200      	movs	r2, #0
 80053d8:	701a      	strb	r2, [r3, #0]
 80053da:	b01c      	add	sp, #112	; 0x70
 80053dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80053e0:	b003      	add	sp, #12
 80053e2:	4770      	bx	lr
 80053e4:	20000010 	.word	0x20000010
 80053e8:	ffff0208 	.word	0xffff0208

080053ec <__malloc_lock>:
 80053ec:	4801      	ldr	r0, [pc, #4]	; (80053f4 <__malloc_lock+0x8>)
 80053ee:	f000 baf9 	b.w	80059e4 <__retarget_lock_acquire_recursive>
 80053f2:	bf00      	nop
 80053f4:	200002d4 	.word	0x200002d4

080053f8 <__malloc_unlock>:
 80053f8:	4801      	ldr	r0, [pc, #4]	; (8005400 <__malloc_unlock+0x8>)
 80053fa:	f000 baf4 	b.w	80059e6 <__retarget_lock_release_recursive>
 80053fe:	bf00      	nop
 8005400:	200002d4 	.word	0x200002d4

08005404 <__ssputs_r>:
 8005404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005408:	688e      	ldr	r6, [r1, #8]
 800540a:	429e      	cmp	r6, r3
 800540c:	4682      	mov	sl, r0
 800540e:	460c      	mov	r4, r1
 8005410:	4690      	mov	r8, r2
 8005412:	461f      	mov	r7, r3
 8005414:	d838      	bhi.n	8005488 <__ssputs_r+0x84>
 8005416:	898a      	ldrh	r2, [r1, #12]
 8005418:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800541c:	d032      	beq.n	8005484 <__ssputs_r+0x80>
 800541e:	6825      	ldr	r5, [r4, #0]
 8005420:	6909      	ldr	r1, [r1, #16]
 8005422:	eba5 0901 	sub.w	r9, r5, r1
 8005426:	6965      	ldr	r5, [r4, #20]
 8005428:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800542c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005430:	3301      	adds	r3, #1
 8005432:	444b      	add	r3, r9
 8005434:	106d      	asrs	r5, r5, #1
 8005436:	429d      	cmp	r5, r3
 8005438:	bf38      	it	cc
 800543a:	461d      	movcc	r5, r3
 800543c:	0553      	lsls	r3, r2, #21
 800543e:	d531      	bpl.n	80054a4 <__ssputs_r+0xa0>
 8005440:	4629      	mov	r1, r5
 8005442:	f7ff feeb 	bl	800521c <_malloc_r>
 8005446:	4606      	mov	r6, r0
 8005448:	b950      	cbnz	r0, 8005460 <__ssputs_r+0x5c>
 800544a:	230c      	movs	r3, #12
 800544c:	f8ca 3000 	str.w	r3, [sl]
 8005450:	89a3      	ldrh	r3, [r4, #12]
 8005452:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005456:	81a3      	strh	r3, [r4, #12]
 8005458:	f04f 30ff 	mov.w	r0, #4294967295
 800545c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005460:	6921      	ldr	r1, [r4, #16]
 8005462:	464a      	mov	r2, r9
 8005464:	f7ff fe58 	bl	8005118 <memcpy>
 8005468:	89a3      	ldrh	r3, [r4, #12]
 800546a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800546e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005472:	81a3      	strh	r3, [r4, #12]
 8005474:	6126      	str	r6, [r4, #16]
 8005476:	6165      	str	r5, [r4, #20]
 8005478:	444e      	add	r6, r9
 800547a:	eba5 0509 	sub.w	r5, r5, r9
 800547e:	6026      	str	r6, [r4, #0]
 8005480:	60a5      	str	r5, [r4, #8]
 8005482:	463e      	mov	r6, r7
 8005484:	42be      	cmp	r6, r7
 8005486:	d900      	bls.n	800548a <__ssputs_r+0x86>
 8005488:	463e      	mov	r6, r7
 800548a:	6820      	ldr	r0, [r4, #0]
 800548c:	4632      	mov	r2, r6
 800548e:	4641      	mov	r1, r8
 8005490:	f000 faaa 	bl	80059e8 <memmove>
 8005494:	68a3      	ldr	r3, [r4, #8]
 8005496:	1b9b      	subs	r3, r3, r6
 8005498:	60a3      	str	r3, [r4, #8]
 800549a:	6823      	ldr	r3, [r4, #0]
 800549c:	4433      	add	r3, r6
 800549e:	6023      	str	r3, [r4, #0]
 80054a0:	2000      	movs	r0, #0
 80054a2:	e7db      	b.n	800545c <__ssputs_r+0x58>
 80054a4:	462a      	mov	r2, r5
 80054a6:	f000 fab9 	bl	8005a1c <_realloc_r>
 80054aa:	4606      	mov	r6, r0
 80054ac:	2800      	cmp	r0, #0
 80054ae:	d1e1      	bne.n	8005474 <__ssputs_r+0x70>
 80054b0:	6921      	ldr	r1, [r4, #16]
 80054b2:	4650      	mov	r0, sl
 80054b4:	f7ff fe46 	bl	8005144 <_free_r>
 80054b8:	e7c7      	b.n	800544a <__ssputs_r+0x46>
	...

080054bc <_svfiprintf_r>:
 80054bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054c0:	4698      	mov	r8, r3
 80054c2:	898b      	ldrh	r3, [r1, #12]
 80054c4:	061b      	lsls	r3, r3, #24
 80054c6:	b09d      	sub	sp, #116	; 0x74
 80054c8:	4607      	mov	r7, r0
 80054ca:	460d      	mov	r5, r1
 80054cc:	4614      	mov	r4, r2
 80054ce:	d50e      	bpl.n	80054ee <_svfiprintf_r+0x32>
 80054d0:	690b      	ldr	r3, [r1, #16]
 80054d2:	b963      	cbnz	r3, 80054ee <_svfiprintf_r+0x32>
 80054d4:	2140      	movs	r1, #64	; 0x40
 80054d6:	f7ff fea1 	bl	800521c <_malloc_r>
 80054da:	6028      	str	r0, [r5, #0]
 80054dc:	6128      	str	r0, [r5, #16]
 80054de:	b920      	cbnz	r0, 80054ea <_svfiprintf_r+0x2e>
 80054e0:	230c      	movs	r3, #12
 80054e2:	603b      	str	r3, [r7, #0]
 80054e4:	f04f 30ff 	mov.w	r0, #4294967295
 80054e8:	e0d1      	b.n	800568e <_svfiprintf_r+0x1d2>
 80054ea:	2340      	movs	r3, #64	; 0x40
 80054ec:	616b      	str	r3, [r5, #20]
 80054ee:	2300      	movs	r3, #0
 80054f0:	9309      	str	r3, [sp, #36]	; 0x24
 80054f2:	2320      	movs	r3, #32
 80054f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80054f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80054fc:	2330      	movs	r3, #48	; 0x30
 80054fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80056a8 <_svfiprintf_r+0x1ec>
 8005502:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005506:	f04f 0901 	mov.w	r9, #1
 800550a:	4623      	mov	r3, r4
 800550c:	469a      	mov	sl, r3
 800550e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005512:	b10a      	cbz	r2, 8005518 <_svfiprintf_r+0x5c>
 8005514:	2a25      	cmp	r2, #37	; 0x25
 8005516:	d1f9      	bne.n	800550c <_svfiprintf_r+0x50>
 8005518:	ebba 0b04 	subs.w	fp, sl, r4
 800551c:	d00b      	beq.n	8005536 <_svfiprintf_r+0x7a>
 800551e:	465b      	mov	r3, fp
 8005520:	4622      	mov	r2, r4
 8005522:	4629      	mov	r1, r5
 8005524:	4638      	mov	r0, r7
 8005526:	f7ff ff6d 	bl	8005404 <__ssputs_r>
 800552a:	3001      	adds	r0, #1
 800552c:	f000 80aa 	beq.w	8005684 <_svfiprintf_r+0x1c8>
 8005530:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005532:	445a      	add	r2, fp
 8005534:	9209      	str	r2, [sp, #36]	; 0x24
 8005536:	f89a 3000 	ldrb.w	r3, [sl]
 800553a:	2b00      	cmp	r3, #0
 800553c:	f000 80a2 	beq.w	8005684 <_svfiprintf_r+0x1c8>
 8005540:	2300      	movs	r3, #0
 8005542:	f04f 32ff 	mov.w	r2, #4294967295
 8005546:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800554a:	f10a 0a01 	add.w	sl, sl, #1
 800554e:	9304      	str	r3, [sp, #16]
 8005550:	9307      	str	r3, [sp, #28]
 8005552:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005556:	931a      	str	r3, [sp, #104]	; 0x68
 8005558:	4654      	mov	r4, sl
 800555a:	2205      	movs	r2, #5
 800555c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005560:	4851      	ldr	r0, [pc, #324]	; (80056a8 <_svfiprintf_r+0x1ec>)
 8005562:	f7fa fe55 	bl	8000210 <memchr>
 8005566:	9a04      	ldr	r2, [sp, #16]
 8005568:	b9d8      	cbnz	r0, 80055a2 <_svfiprintf_r+0xe6>
 800556a:	06d0      	lsls	r0, r2, #27
 800556c:	bf44      	itt	mi
 800556e:	2320      	movmi	r3, #32
 8005570:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005574:	0711      	lsls	r1, r2, #28
 8005576:	bf44      	itt	mi
 8005578:	232b      	movmi	r3, #43	; 0x2b
 800557a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800557e:	f89a 3000 	ldrb.w	r3, [sl]
 8005582:	2b2a      	cmp	r3, #42	; 0x2a
 8005584:	d015      	beq.n	80055b2 <_svfiprintf_r+0xf6>
 8005586:	9a07      	ldr	r2, [sp, #28]
 8005588:	4654      	mov	r4, sl
 800558a:	2000      	movs	r0, #0
 800558c:	f04f 0c0a 	mov.w	ip, #10
 8005590:	4621      	mov	r1, r4
 8005592:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005596:	3b30      	subs	r3, #48	; 0x30
 8005598:	2b09      	cmp	r3, #9
 800559a:	d94e      	bls.n	800563a <_svfiprintf_r+0x17e>
 800559c:	b1b0      	cbz	r0, 80055cc <_svfiprintf_r+0x110>
 800559e:	9207      	str	r2, [sp, #28]
 80055a0:	e014      	b.n	80055cc <_svfiprintf_r+0x110>
 80055a2:	eba0 0308 	sub.w	r3, r0, r8
 80055a6:	fa09 f303 	lsl.w	r3, r9, r3
 80055aa:	4313      	orrs	r3, r2
 80055ac:	9304      	str	r3, [sp, #16]
 80055ae:	46a2      	mov	sl, r4
 80055b0:	e7d2      	b.n	8005558 <_svfiprintf_r+0x9c>
 80055b2:	9b03      	ldr	r3, [sp, #12]
 80055b4:	1d19      	adds	r1, r3, #4
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	9103      	str	r1, [sp, #12]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	bfbb      	ittet	lt
 80055be:	425b      	neglt	r3, r3
 80055c0:	f042 0202 	orrlt.w	r2, r2, #2
 80055c4:	9307      	strge	r3, [sp, #28]
 80055c6:	9307      	strlt	r3, [sp, #28]
 80055c8:	bfb8      	it	lt
 80055ca:	9204      	strlt	r2, [sp, #16]
 80055cc:	7823      	ldrb	r3, [r4, #0]
 80055ce:	2b2e      	cmp	r3, #46	; 0x2e
 80055d0:	d10c      	bne.n	80055ec <_svfiprintf_r+0x130>
 80055d2:	7863      	ldrb	r3, [r4, #1]
 80055d4:	2b2a      	cmp	r3, #42	; 0x2a
 80055d6:	d135      	bne.n	8005644 <_svfiprintf_r+0x188>
 80055d8:	9b03      	ldr	r3, [sp, #12]
 80055da:	1d1a      	adds	r2, r3, #4
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	9203      	str	r2, [sp, #12]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	bfb8      	it	lt
 80055e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80055e8:	3402      	adds	r4, #2
 80055ea:	9305      	str	r3, [sp, #20]
 80055ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80056b8 <_svfiprintf_r+0x1fc>
 80055f0:	7821      	ldrb	r1, [r4, #0]
 80055f2:	2203      	movs	r2, #3
 80055f4:	4650      	mov	r0, sl
 80055f6:	f7fa fe0b 	bl	8000210 <memchr>
 80055fa:	b140      	cbz	r0, 800560e <_svfiprintf_r+0x152>
 80055fc:	2340      	movs	r3, #64	; 0x40
 80055fe:	eba0 000a 	sub.w	r0, r0, sl
 8005602:	fa03 f000 	lsl.w	r0, r3, r0
 8005606:	9b04      	ldr	r3, [sp, #16]
 8005608:	4303      	orrs	r3, r0
 800560a:	3401      	adds	r4, #1
 800560c:	9304      	str	r3, [sp, #16]
 800560e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005612:	4826      	ldr	r0, [pc, #152]	; (80056ac <_svfiprintf_r+0x1f0>)
 8005614:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005618:	2206      	movs	r2, #6
 800561a:	f7fa fdf9 	bl	8000210 <memchr>
 800561e:	2800      	cmp	r0, #0
 8005620:	d038      	beq.n	8005694 <_svfiprintf_r+0x1d8>
 8005622:	4b23      	ldr	r3, [pc, #140]	; (80056b0 <_svfiprintf_r+0x1f4>)
 8005624:	bb1b      	cbnz	r3, 800566e <_svfiprintf_r+0x1b2>
 8005626:	9b03      	ldr	r3, [sp, #12]
 8005628:	3307      	adds	r3, #7
 800562a:	f023 0307 	bic.w	r3, r3, #7
 800562e:	3308      	adds	r3, #8
 8005630:	9303      	str	r3, [sp, #12]
 8005632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005634:	4433      	add	r3, r6
 8005636:	9309      	str	r3, [sp, #36]	; 0x24
 8005638:	e767      	b.n	800550a <_svfiprintf_r+0x4e>
 800563a:	fb0c 3202 	mla	r2, ip, r2, r3
 800563e:	460c      	mov	r4, r1
 8005640:	2001      	movs	r0, #1
 8005642:	e7a5      	b.n	8005590 <_svfiprintf_r+0xd4>
 8005644:	2300      	movs	r3, #0
 8005646:	3401      	adds	r4, #1
 8005648:	9305      	str	r3, [sp, #20]
 800564a:	4619      	mov	r1, r3
 800564c:	f04f 0c0a 	mov.w	ip, #10
 8005650:	4620      	mov	r0, r4
 8005652:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005656:	3a30      	subs	r2, #48	; 0x30
 8005658:	2a09      	cmp	r2, #9
 800565a:	d903      	bls.n	8005664 <_svfiprintf_r+0x1a8>
 800565c:	2b00      	cmp	r3, #0
 800565e:	d0c5      	beq.n	80055ec <_svfiprintf_r+0x130>
 8005660:	9105      	str	r1, [sp, #20]
 8005662:	e7c3      	b.n	80055ec <_svfiprintf_r+0x130>
 8005664:	fb0c 2101 	mla	r1, ip, r1, r2
 8005668:	4604      	mov	r4, r0
 800566a:	2301      	movs	r3, #1
 800566c:	e7f0      	b.n	8005650 <_svfiprintf_r+0x194>
 800566e:	ab03      	add	r3, sp, #12
 8005670:	9300      	str	r3, [sp, #0]
 8005672:	462a      	mov	r2, r5
 8005674:	4b0f      	ldr	r3, [pc, #60]	; (80056b4 <_svfiprintf_r+0x1f8>)
 8005676:	a904      	add	r1, sp, #16
 8005678:	4638      	mov	r0, r7
 800567a:	f3af 8000 	nop.w
 800567e:	1c42      	adds	r2, r0, #1
 8005680:	4606      	mov	r6, r0
 8005682:	d1d6      	bne.n	8005632 <_svfiprintf_r+0x176>
 8005684:	89ab      	ldrh	r3, [r5, #12]
 8005686:	065b      	lsls	r3, r3, #25
 8005688:	f53f af2c 	bmi.w	80054e4 <_svfiprintf_r+0x28>
 800568c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800568e:	b01d      	add	sp, #116	; 0x74
 8005690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005694:	ab03      	add	r3, sp, #12
 8005696:	9300      	str	r3, [sp, #0]
 8005698:	462a      	mov	r2, r5
 800569a:	4b06      	ldr	r3, [pc, #24]	; (80056b4 <_svfiprintf_r+0x1f8>)
 800569c:	a904      	add	r1, sp, #16
 800569e:	4638      	mov	r0, r7
 80056a0:	f000 f87a 	bl	8005798 <_printf_i>
 80056a4:	e7eb      	b.n	800567e <_svfiprintf_r+0x1c2>
 80056a6:	bf00      	nop
 80056a8:	08005bc4 	.word	0x08005bc4
 80056ac:	08005bce 	.word	0x08005bce
 80056b0:	00000000 	.word	0x00000000
 80056b4:	08005405 	.word	0x08005405
 80056b8:	08005bca 	.word	0x08005bca

080056bc <_printf_common>:
 80056bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056c0:	4616      	mov	r6, r2
 80056c2:	4699      	mov	r9, r3
 80056c4:	688a      	ldr	r2, [r1, #8]
 80056c6:	690b      	ldr	r3, [r1, #16]
 80056c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056cc:	4293      	cmp	r3, r2
 80056ce:	bfb8      	it	lt
 80056d0:	4613      	movlt	r3, r2
 80056d2:	6033      	str	r3, [r6, #0]
 80056d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056d8:	4607      	mov	r7, r0
 80056da:	460c      	mov	r4, r1
 80056dc:	b10a      	cbz	r2, 80056e2 <_printf_common+0x26>
 80056de:	3301      	adds	r3, #1
 80056e0:	6033      	str	r3, [r6, #0]
 80056e2:	6823      	ldr	r3, [r4, #0]
 80056e4:	0699      	lsls	r1, r3, #26
 80056e6:	bf42      	ittt	mi
 80056e8:	6833      	ldrmi	r3, [r6, #0]
 80056ea:	3302      	addmi	r3, #2
 80056ec:	6033      	strmi	r3, [r6, #0]
 80056ee:	6825      	ldr	r5, [r4, #0]
 80056f0:	f015 0506 	ands.w	r5, r5, #6
 80056f4:	d106      	bne.n	8005704 <_printf_common+0x48>
 80056f6:	f104 0a19 	add.w	sl, r4, #25
 80056fa:	68e3      	ldr	r3, [r4, #12]
 80056fc:	6832      	ldr	r2, [r6, #0]
 80056fe:	1a9b      	subs	r3, r3, r2
 8005700:	42ab      	cmp	r3, r5
 8005702:	dc26      	bgt.n	8005752 <_printf_common+0x96>
 8005704:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005708:	1e13      	subs	r3, r2, #0
 800570a:	6822      	ldr	r2, [r4, #0]
 800570c:	bf18      	it	ne
 800570e:	2301      	movne	r3, #1
 8005710:	0692      	lsls	r2, r2, #26
 8005712:	d42b      	bmi.n	800576c <_printf_common+0xb0>
 8005714:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005718:	4649      	mov	r1, r9
 800571a:	4638      	mov	r0, r7
 800571c:	47c0      	blx	r8
 800571e:	3001      	adds	r0, #1
 8005720:	d01e      	beq.n	8005760 <_printf_common+0xa4>
 8005722:	6823      	ldr	r3, [r4, #0]
 8005724:	68e5      	ldr	r5, [r4, #12]
 8005726:	6832      	ldr	r2, [r6, #0]
 8005728:	f003 0306 	and.w	r3, r3, #6
 800572c:	2b04      	cmp	r3, #4
 800572e:	bf08      	it	eq
 8005730:	1aad      	subeq	r5, r5, r2
 8005732:	68a3      	ldr	r3, [r4, #8]
 8005734:	6922      	ldr	r2, [r4, #16]
 8005736:	bf0c      	ite	eq
 8005738:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800573c:	2500      	movne	r5, #0
 800573e:	4293      	cmp	r3, r2
 8005740:	bfc4      	itt	gt
 8005742:	1a9b      	subgt	r3, r3, r2
 8005744:	18ed      	addgt	r5, r5, r3
 8005746:	2600      	movs	r6, #0
 8005748:	341a      	adds	r4, #26
 800574a:	42b5      	cmp	r5, r6
 800574c:	d11a      	bne.n	8005784 <_printf_common+0xc8>
 800574e:	2000      	movs	r0, #0
 8005750:	e008      	b.n	8005764 <_printf_common+0xa8>
 8005752:	2301      	movs	r3, #1
 8005754:	4652      	mov	r2, sl
 8005756:	4649      	mov	r1, r9
 8005758:	4638      	mov	r0, r7
 800575a:	47c0      	blx	r8
 800575c:	3001      	adds	r0, #1
 800575e:	d103      	bne.n	8005768 <_printf_common+0xac>
 8005760:	f04f 30ff 	mov.w	r0, #4294967295
 8005764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005768:	3501      	adds	r5, #1
 800576a:	e7c6      	b.n	80056fa <_printf_common+0x3e>
 800576c:	18e1      	adds	r1, r4, r3
 800576e:	1c5a      	adds	r2, r3, #1
 8005770:	2030      	movs	r0, #48	; 0x30
 8005772:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005776:	4422      	add	r2, r4
 8005778:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800577c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005780:	3302      	adds	r3, #2
 8005782:	e7c7      	b.n	8005714 <_printf_common+0x58>
 8005784:	2301      	movs	r3, #1
 8005786:	4622      	mov	r2, r4
 8005788:	4649      	mov	r1, r9
 800578a:	4638      	mov	r0, r7
 800578c:	47c0      	blx	r8
 800578e:	3001      	adds	r0, #1
 8005790:	d0e6      	beq.n	8005760 <_printf_common+0xa4>
 8005792:	3601      	adds	r6, #1
 8005794:	e7d9      	b.n	800574a <_printf_common+0x8e>
	...

08005798 <_printf_i>:
 8005798:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800579c:	7e0f      	ldrb	r7, [r1, #24]
 800579e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80057a0:	2f78      	cmp	r7, #120	; 0x78
 80057a2:	4691      	mov	r9, r2
 80057a4:	4680      	mov	r8, r0
 80057a6:	460c      	mov	r4, r1
 80057a8:	469a      	mov	sl, r3
 80057aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80057ae:	d807      	bhi.n	80057c0 <_printf_i+0x28>
 80057b0:	2f62      	cmp	r7, #98	; 0x62
 80057b2:	d80a      	bhi.n	80057ca <_printf_i+0x32>
 80057b4:	2f00      	cmp	r7, #0
 80057b6:	f000 80d8 	beq.w	800596a <_printf_i+0x1d2>
 80057ba:	2f58      	cmp	r7, #88	; 0x58
 80057bc:	f000 80a3 	beq.w	8005906 <_printf_i+0x16e>
 80057c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80057c8:	e03a      	b.n	8005840 <_printf_i+0xa8>
 80057ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80057ce:	2b15      	cmp	r3, #21
 80057d0:	d8f6      	bhi.n	80057c0 <_printf_i+0x28>
 80057d2:	a101      	add	r1, pc, #4	; (adr r1, 80057d8 <_printf_i+0x40>)
 80057d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057d8:	08005831 	.word	0x08005831
 80057dc:	08005845 	.word	0x08005845
 80057e0:	080057c1 	.word	0x080057c1
 80057e4:	080057c1 	.word	0x080057c1
 80057e8:	080057c1 	.word	0x080057c1
 80057ec:	080057c1 	.word	0x080057c1
 80057f0:	08005845 	.word	0x08005845
 80057f4:	080057c1 	.word	0x080057c1
 80057f8:	080057c1 	.word	0x080057c1
 80057fc:	080057c1 	.word	0x080057c1
 8005800:	080057c1 	.word	0x080057c1
 8005804:	08005951 	.word	0x08005951
 8005808:	08005875 	.word	0x08005875
 800580c:	08005933 	.word	0x08005933
 8005810:	080057c1 	.word	0x080057c1
 8005814:	080057c1 	.word	0x080057c1
 8005818:	08005973 	.word	0x08005973
 800581c:	080057c1 	.word	0x080057c1
 8005820:	08005875 	.word	0x08005875
 8005824:	080057c1 	.word	0x080057c1
 8005828:	080057c1 	.word	0x080057c1
 800582c:	0800593b 	.word	0x0800593b
 8005830:	682b      	ldr	r3, [r5, #0]
 8005832:	1d1a      	adds	r2, r3, #4
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	602a      	str	r2, [r5, #0]
 8005838:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800583c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005840:	2301      	movs	r3, #1
 8005842:	e0a3      	b.n	800598c <_printf_i+0x1f4>
 8005844:	6820      	ldr	r0, [r4, #0]
 8005846:	6829      	ldr	r1, [r5, #0]
 8005848:	0606      	lsls	r6, r0, #24
 800584a:	f101 0304 	add.w	r3, r1, #4
 800584e:	d50a      	bpl.n	8005866 <_printf_i+0xce>
 8005850:	680e      	ldr	r6, [r1, #0]
 8005852:	602b      	str	r3, [r5, #0]
 8005854:	2e00      	cmp	r6, #0
 8005856:	da03      	bge.n	8005860 <_printf_i+0xc8>
 8005858:	232d      	movs	r3, #45	; 0x2d
 800585a:	4276      	negs	r6, r6
 800585c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005860:	485e      	ldr	r0, [pc, #376]	; (80059dc <_printf_i+0x244>)
 8005862:	230a      	movs	r3, #10
 8005864:	e019      	b.n	800589a <_printf_i+0x102>
 8005866:	680e      	ldr	r6, [r1, #0]
 8005868:	602b      	str	r3, [r5, #0]
 800586a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800586e:	bf18      	it	ne
 8005870:	b236      	sxthne	r6, r6
 8005872:	e7ef      	b.n	8005854 <_printf_i+0xbc>
 8005874:	682b      	ldr	r3, [r5, #0]
 8005876:	6820      	ldr	r0, [r4, #0]
 8005878:	1d19      	adds	r1, r3, #4
 800587a:	6029      	str	r1, [r5, #0]
 800587c:	0601      	lsls	r1, r0, #24
 800587e:	d501      	bpl.n	8005884 <_printf_i+0xec>
 8005880:	681e      	ldr	r6, [r3, #0]
 8005882:	e002      	b.n	800588a <_printf_i+0xf2>
 8005884:	0646      	lsls	r6, r0, #25
 8005886:	d5fb      	bpl.n	8005880 <_printf_i+0xe8>
 8005888:	881e      	ldrh	r6, [r3, #0]
 800588a:	4854      	ldr	r0, [pc, #336]	; (80059dc <_printf_i+0x244>)
 800588c:	2f6f      	cmp	r7, #111	; 0x6f
 800588e:	bf0c      	ite	eq
 8005890:	2308      	moveq	r3, #8
 8005892:	230a      	movne	r3, #10
 8005894:	2100      	movs	r1, #0
 8005896:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800589a:	6865      	ldr	r5, [r4, #4]
 800589c:	60a5      	str	r5, [r4, #8]
 800589e:	2d00      	cmp	r5, #0
 80058a0:	bfa2      	ittt	ge
 80058a2:	6821      	ldrge	r1, [r4, #0]
 80058a4:	f021 0104 	bicge.w	r1, r1, #4
 80058a8:	6021      	strge	r1, [r4, #0]
 80058aa:	b90e      	cbnz	r6, 80058b0 <_printf_i+0x118>
 80058ac:	2d00      	cmp	r5, #0
 80058ae:	d04d      	beq.n	800594c <_printf_i+0x1b4>
 80058b0:	4615      	mov	r5, r2
 80058b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80058b6:	fb03 6711 	mls	r7, r3, r1, r6
 80058ba:	5dc7      	ldrb	r7, [r0, r7]
 80058bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80058c0:	4637      	mov	r7, r6
 80058c2:	42bb      	cmp	r3, r7
 80058c4:	460e      	mov	r6, r1
 80058c6:	d9f4      	bls.n	80058b2 <_printf_i+0x11a>
 80058c8:	2b08      	cmp	r3, #8
 80058ca:	d10b      	bne.n	80058e4 <_printf_i+0x14c>
 80058cc:	6823      	ldr	r3, [r4, #0]
 80058ce:	07de      	lsls	r6, r3, #31
 80058d0:	d508      	bpl.n	80058e4 <_printf_i+0x14c>
 80058d2:	6923      	ldr	r3, [r4, #16]
 80058d4:	6861      	ldr	r1, [r4, #4]
 80058d6:	4299      	cmp	r1, r3
 80058d8:	bfde      	ittt	le
 80058da:	2330      	movle	r3, #48	; 0x30
 80058dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80058e4:	1b52      	subs	r2, r2, r5
 80058e6:	6122      	str	r2, [r4, #16]
 80058e8:	f8cd a000 	str.w	sl, [sp]
 80058ec:	464b      	mov	r3, r9
 80058ee:	aa03      	add	r2, sp, #12
 80058f0:	4621      	mov	r1, r4
 80058f2:	4640      	mov	r0, r8
 80058f4:	f7ff fee2 	bl	80056bc <_printf_common>
 80058f8:	3001      	adds	r0, #1
 80058fa:	d14c      	bne.n	8005996 <_printf_i+0x1fe>
 80058fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005900:	b004      	add	sp, #16
 8005902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005906:	4835      	ldr	r0, [pc, #212]	; (80059dc <_printf_i+0x244>)
 8005908:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800590c:	6829      	ldr	r1, [r5, #0]
 800590e:	6823      	ldr	r3, [r4, #0]
 8005910:	f851 6b04 	ldr.w	r6, [r1], #4
 8005914:	6029      	str	r1, [r5, #0]
 8005916:	061d      	lsls	r5, r3, #24
 8005918:	d514      	bpl.n	8005944 <_printf_i+0x1ac>
 800591a:	07df      	lsls	r7, r3, #31
 800591c:	bf44      	itt	mi
 800591e:	f043 0320 	orrmi.w	r3, r3, #32
 8005922:	6023      	strmi	r3, [r4, #0]
 8005924:	b91e      	cbnz	r6, 800592e <_printf_i+0x196>
 8005926:	6823      	ldr	r3, [r4, #0]
 8005928:	f023 0320 	bic.w	r3, r3, #32
 800592c:	6023      	str	r3, [r4, #0]
 800592e:	2310      	movs	r3, #16
 8005930:	e7b0      	b.n	8005894 <_printf_i+0xfc>
 8005932:	6823      	ldr	r3, [r4, #0]
 8005934:	f043 0320 	orr.w	r3, r3, #32
 8005938:	6023      	str	r3, [r4, #0]
 800593a:	2378      	movs	r3, #120	; 0x78
 800593c:	4828      	ldr	r0, [pc, #160]	; (80059e0 <_printf_i+0x248>)
 800593e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005942:	e7e3      	b.n	800590c <_printf_i+0x174>
 8005944:	0659      	lsls	r1, r3, #25
 8005946:	bf48      	it	mi
 8005948:	b2b6      	uxthmi	r6, r6
 800594a:	e7e6      	b.n	800591a <_printf_i+0x182>
 800594c:	4615      	mov	r5, r2
 800594e:	e7bb      	b.n	80058c8 <_printf_i+0x130>
 8005950:	682b      	ldr	r3, [r5, #0]
 8005952:	6826      	ldr	r6, [r4, #0]
 8005954:	6961      	ldr	r1, [r4, #20]
 8005956:	1d18      	adds	r0, r3, #4
 8005958:	6028      	str	r0, [r5, #0]
 800595a:	0635      	lsls	r5, r6, #24
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	d501      	bpl.n	8005964 <_printf_i+0x1cc>
 8005960:	6019      	str	r1, [r3, #0]
 8005962:	e002      	b.n	800596a <_printf_i+0x1d2>
 8005964:	0670      	lsls	r0, r6, #25
 8005966:	d5fb      	bpl.n	8005960 <_printf_i+0x1c8>
 8005968:	8019      	strh	r1, [r3, #0]
 800596a:	2300      	movs	r3, #0
 800596c:	6123      	str	r3, [r4, #16]
 800596e:	4615      	mov	r5, r2
 8005970:	e7ba      	b.n	80058e8 <_printf_i+0x150>
 8005972:	682b      	ldr	r3, [r5, #0]
 8005974:	1d1a      	adds	r2, r3, #4
 8005976:	602a      	str	r2, [r5, #0]
 8005978:	681d      	ldr	r5, [r3, #0]
 800597a:	6862      	ldr	r2, [r4, #4]
 800597c:	2100      	movs	r1, #0
 800597e:	4628      	mov	r0, r5
 8005980:	f7fa fc46 	bl	8000210 <memchr>
 8005984:	b108      	cbz	r0, 800598a <_printf_i+0x1f2>
 8005986:	1b40      	subs	r0, r0, r5
 8005988:	6060      	str	r0, [r4, #4]
 800598a:	6863      	ldr	r3, [r4, #4]
 800598c:	6123      	str	r3, [r4, #16]
 800598e:	2300      	movs	r3, #0
 8005990:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005994:	e7a8      	b.n	80058e8 <_printf_i+0x150>
 8005996:	6923      	ldr	r3, [r4, #16]
 8005998:	462a      	mov	r2, r5
 800599a:	4649      	mov	r1, r9
 800599c:	4640      	mov	r0, r8
 800599e:	47d0      	blx	sl
 80059a0:	3001      	adds	r0, #1
 80059a2:	d0ab      	beq.n	80058fc <_printf_i+0x164>
 80059a4:	6823      	ldr	r3, [r4, #0]
 80059a6:	079b      	lsls	r3, r3, #30
 80059a8:	d413      	bmi.n	80059d2 <_printf_i+0x23a>
 80059aa:	68e0      	ldr	r0, [r4, #12]
 80059ac:	9b03      	ldr	r3, [sp, #12]
 80059ae:	4298      	cmp	r0, r3
 80059b0:	bfb8      	it	lt
 80059b2:	4618      	movlt	r0, r3
 80059b4:	e7a4      	b.n	8005900 <_printf_i+0x168>
 80059b6:	2301      	movs	r3, #1
 80059b8:	4632      	mov	r2, r6
 80059ba:	4649      	mov	r1, r9
 80059bc:	4640      	mov	r0, r8
 80059be:	47d0      	blx	sl
 80059c0:	3001      	adds	r0, #1
 80059c2:	d09b      	beq.n	80058fc <_printf_i+0x164>
 80059c4:	3501      	adds	r5, #1
 80059c6:	68e3      	ldr	r3, [r4, #12]
 80059c8:	9903      	ldr	r1, [sp, #12]
 80059ca:	1a5b      	subs	r3, r3, r1
 80059cc:	42ab      	cmp	r3, r5
 80059ce:	dcf2      	bgt.n	80059b6 <_printf_i+0x21e>
 80059d0:	e7eb      	b.n	80059aa <_printf_i+0x212>
 80059d2:	2500      	movs	r5, #0
 80059d4:	f104 0619 	add.w	r6, r4, #25
 80059d8:	e7f5      	b.n	80059c6 <_printf_i+0x22e>
 80059da:	bf00      	nop
 80059dc:	08005bd5 	.word	0x08005bd5
 80059e0:	08005be6 	.word	0x08005be6

080059e4 <__retarget_lock_acquire_recursive>:
 80059e4:	4770      	bx	lr

080059e6 <__retarget_lock_release_recursive>:
 80059e6:	4770      	bx	lr

080059e8 <memmove>:
 80059e8:	4288      	cmp	r0, r1
 80059ea:	b510      	push	{r4, lr}
 80059ec:	eb01 0402 	add.w	r4, r1, r2
 80059f0:	d902      	bls.n	80059f8 <memmove+0x10>
 80059f2:	4284      	cmp	r4, r0
 80059f4:	4623      	mov	r3, r4
 80059f6:	d807      	bhi.n	8005a08 <memmove+0x20>
 80059f8:	1e43      	subs	r3, r0, #1
 80059fa:	42a1      	cmp	r1, r4
 80059fc:	d008      	beq.n	8005a10 <memmove+0x28>
 80059fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005a06:	e7f8      	b.n	80059fa <memmove+0x12>
 8005a08:	4402      	add	r2, r0
 8005a0a:	4601      	mov	r1, r0
 8005a0c:	428a      	cmp	r2, r1
 8005a0e:	d100      	bne.n	8005a12 <memmove+0x2a>
 8005a10:	bd10      	pop	{r4, pc}
 8005a12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005a1a:	e7f7      	b.n	8005a0c <memmove+0x24>

08005a1c <_realloc_r>:
 8005a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a20:	4680      	mov	r8, r0
 8005a22:	4614      	mov	r4, r2
 8005a24:	460e      	mov	r6, r1
 8005a26:	b921      	cbnz	r1, 8005a32 <_realloc_r+0x16>
 8005a28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a2c:	4611      	mov	r1, r2
 8005a2e:	f7ff bbf5 	b.w	800521c <_malloc_r>
 8005a32:	b92a      	cbnz	r2, 8005a40 <_realloc_r+0x24>
 8005a34:	f7ff fb86 	bl	8005144 <_free_r>
 8005a38:	4625      	mov	r5, r4
 8005a3a:	4628      	mov	r0, r5
 8005a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a40:	f000 f81b 	bl	8005a7a <_malloc_usable_size_r>
 8005a44:	4284      	cmp	r4, r0
 8005a46:	4607      	mov	r7, r0
 8005a48:	d802      	bhi.n	8005a50 <_realloc_r+0x34>
 8005a4a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005a4e:	d812      	bhi.n	8005a76 <_realloc_r+0x5a>
 8005a50:	4621      	mov	r1, r4
 8005a52:	4640      	mov	r0, r8
 8005a54:	f7ff fbe2 	bl	800521c <_malloc_r>
 8005a58:	4605      	mov	r5, r0
 8005a5a:	2800      	cmp	r0, #0
 8005a5c:	d0ed      	beq.n	8005a3a <_realloc_r+0x1e>
 8005a5e:	42bc      	cmp	r4, r7
 8005a60:	4622      	mov	r2, r4
 8005a62:	4631      	mov	r1, r6
 8005a64:	bf28      	it	cs
 8005a66:	463a      	movcs	r2, r7
 8005a68:	f7ff fb56 	bl	8005118 <memcpy>
 8005a6c:	4631      	mov	r1, r6
 8005a6e:	4640      	mov	r0, r8
 8005a70:	f7ff fb68 	bl	8005144 <_free_r>
 8005a74:	e7e1      	b.n	8005a3a <_realloc_r+0x1e>
 8005a76:	4635      	mov	r5, r6
 8005a78:	e7df      	b.n	8005a3a <_realloc_r+0x1e>

08005a7a <_malloc_usable_size_r>:
 8005a7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a7e:	1f18      	subs	r0, r3, #4
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	bfbc      	itt	lt
 8005a84:	580b      	ldrlt	r3, [r1, r0]
 8005a86:	18c0      	addlt	r0, r0, r3
 8005a88:	4770      	bx	lr
	...

08005a8c <_init>:
 8005a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a8e:	bf00      	nop
 8005a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a92:	bc08      	pop	{r3}
 8005a94:	469e      	mov	lr, r3
 8005a96:	4770      	bx	lr

08005a98 <_fini>:
 8005a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a9a:	bf00      	nop
 8005a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a9e:	bc08      	pop	{r3}
 8005aa0:	469e      	mov	lr, r3
 8005aa2:	4770      	bx	lr
