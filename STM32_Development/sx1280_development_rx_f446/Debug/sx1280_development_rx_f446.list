
sx1280_development_rx_f446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002aa0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002c64  08002c64  00012c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c7c  08002c7c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002c7c  08002c7c  00012c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002c84  08002c84  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c84  08002c84  00012c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c88  08002c88  00012c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002c8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000000c  08002c98  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08002c98  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009eb2  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000192c  00000000  00000000  00029f31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008d0  00000000  00000000  0002b860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006ca  00000000  00000000  0002c130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000207ba  00000000  00000000  0002c7fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b65b  00000000  00000000  0004cfb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c617a  00000000  00000000  0005860f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002388  00000000  00000000  0011e78c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00120b14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002c4c 	.word	0x08002c4c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002c4c 	.word	0x08002c4c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <SPI1_TRANSCEIVER>:
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_SPI2_Init(void);
/* USER CODE BEGIN PFP */
static void SPI1_TRANSCEIVER(uint8_t* tx, uint8_t* rx, uint8_t lengh)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b086      	sub	sp, #24
 8000504:	af02      	add	r7, sp, #8
 8000506:	60f8      	str	r0, [r7, #12]
 8000508:	60b9      	str	r1, [r7, #8]
 800050a:	4613      	mov	r3, r2
 800050c:	71fb      	strb	r3, [r7, #7]
//	while(HAL_GPIO_ReadPin(SX1280_BUSY_GPIO_Port, SX1280_BUSY_Pin));
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 800050e:	2200      	movs	r2, #0
 8000510:	2140      	movs	r1, #64	; 0x40
 8000512:	480c      	ldr	r0, [pc, #48]	; (8000544 <SPI1_TRANSCEIVER+0x44>)
 8000514:	f000 ff4a 	bl	80013ac <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000518:	2001      	movs	r0, #1
 800051a:	f000 fca9 	bl	8000e70 <HAL_Delay>
	HAL_SPI_TransmitReceive(&hspi2, tx, rx, lengh, 10);
 800051e:	79fb      	ldrb	r3, [r7, #7]
 8000520:	b29b      	uxth	r3, r3
 8000522:	220a      	movs	r2, #10
 8000524:	9200      	str	r2, [sp, #0]
 8000526:	68ba      	ldr	r2, [r7, #8]
 8000528:	68f9      	ldr	r1, [r7, #12]
 800052a:	4807      	ldr	r0, [pc, #28]	; (8000548 <SPI1_TRANSCEIVER+0x48>)
 800052c:	f001 fe33 	bl	8002196 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8000530:	2201      	movs	r2, #1
 8000532:	2140      	movs	r1, #64	; 0x40
 8000534:	4803      	ldr	r0, [pc, #12]	; (8000544 <SPI1_TRANSCEIVER+0x44>)
 8000536:	f000 ff39 	bl	80013ac <HAL_GPIO_WritePin>
}
 800053a:	bf00      	nop
 800053c:	3710      	adds	r7, #16
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40020400 	.word	0x40020400
 8000548:	20000028 	.word	0x20000028

0800054c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b088      	sub	sp, #32
 8000550:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000552:	f000 fc1b 	bl	8000d8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000556:	f000 f94f 	bl	80007f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055a:	f000 fa1f 	bl	800099c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800055e:	f000 f9f3 	bl	8000948 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000562:	f000 f9bb 	bl	80008dc <MX_SPI2_Init>

   //===========================================
   //===========================================
   //===========================================

   uint8_t tx[10] = {};
 8000566:	2300      	movs	r3, #0
 8000568:	613b      	str	r3, [r7, #16]
 800056a:	f107 0314 	add.w	r3, r7, #20
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
 8000572:	809a      	strh	r2, [r3, #4]
   uint8_t rx[10] = {};
 8000574:	2300      	movs	r3, #0
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	f107 0308 	add.w	r3, r7, #8
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	809a      	strh	r2, [r3, #4]

   // reset
   HAL_GPIO_WritePin(SX1280_RST_GPIO_Port, SX1280_RST_Pin, GPIO_PIN_SET);
 8000582:	2201      	movs	r2, #1
 8000584:	2180      	movs	r1, #128	; 0x80
 8000586:	4893      	ldr	r0, [pc, #588]	; (80007d4 <main+0x288>)
 8000588:	f000 ff10 	bl	80013ac <HAL_GPIO_WritePin>
   HAL_Delay(10);
 800058c:	200a      	movs	r0, #10
 800058e:	f000 fc6f 	bl	8000e70 <HAL_Delay>
   HAL_GPIO_WritePin(SX1280_RST_GPIO_Port, SX1280_RST_Pin, GPIO_PIN_RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	2180      	movs	r1, #128	; 0x80
 8000596:	488f      	ldr	r0, [pc, #572]	; (80007d4 <main+0x288>)
 8000598:	f000 ff08 	bl	80013ac <HAL_GPIO_WritePin>
   HAL_Delay(10);
 800059c:	200a      	movs	r0, #10
 800059e:	f000 fc67 	bl	8000e70 <HAL_Delay>
   HAL_GPIO_WritePin(SX1280_RST_GPIO_Port, SX1280_RST_Pin, GPIO_PIN_SET);
 80005a2:	2201      	movs	r2, #1
 80005a4:	2180      	movs	r1, #128	; 0x80
 80005a6:	488b      	ldr	r0, [pc, #556]	; (80007d4 <main+0x288>)
 80005a8:	f000 ff00 	bl	80013ac <HAL_GPIO_WritePin>
   //===========================================
   // common transceiver setting for LoRa
   //===========================================

   // setstandby(stdby_rc)
   *(uint32_t*)tx = 0x80 | 0x01 << 8;
 80005ac:	f107 0310 	add.w	r3, r7, #16
 80005b0:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80005b4:	601a      	str	r2, [r3, #0]
   SPI1_TRANSCEIVER(tx, rx, 2);
 80005b6:	1d39      	adds	r1, r7, #4
 80005b8:	f107 0310 	add.w	r3, r7, #16
 80005bc:	2202      	movs	r2, #2
 80005be:	4618      	mov	r0, r3
 80005c0:	f7ff ff9e 	bl	8000500 <SPI1_TRANSCEIVER>

   // setpackettype(packet_type_lora)
   *(uint32_t*)tx = 0x8A | 0x01 << 8; // LoRa mode
 80005c4:	f107 0310 	add.w	r3, r7, #16
 80005c8:	f44f 72c5 	mov.w	r2, #394	; 0x18a
 80005cc:	601a      	str	r2, [r3, #0]
   SPI1_TRANSCEIVER(tx, rx, 2);
 80005ce:	1d39      	adds	r1, r7, #4
 80005d0:	f107 0310 	add.w	r3, r7, #16
 80005d4:	2202      	movs	r2, #2
 80005d6:	4618      	mov	r0, r3
 80005d8:	f7ff ff92 	bl	8000500 <SPI1_TRANSCEIVER>

   // setrffrequency(rfFrequency)
   *(uint32_t*)tx = 0x86 | 0xB8 << 8 | 0x9D << 16 | 0x89 << 24;
 80005dc:	f107 0310 	add.w	r3, r7, #16
 80005e0:	4a7d      	ldr	r2, [pc, #500]	; (80007d8 <main+0x28c>)
 80005e2:	601a      	str	r2, [r3, #0]
   SPI1_TRANSCEIVER(tx, rx, 4);
 80005e4:	1d39      	adds	r1, r7, #4
 80005e6:	f107 0310 	add.w	r3, r7, #16
 80005ea:	2204      	movs	r2, #4
 80005ec:	4618      	mov	r0, r3
 80005ee:	f7ff ff87 	bl	8000500 <SPI1_TRANSCEIVER>

   // setbufferbaseaddress()
   *(uint32_t*)tx = 0x8F | 0x80 << 8 | 0x00 << 16;
 80005f2:	f107 0310 	add.w	r3, r7, #16
 80005f6:	f248 028f 	movw	r2, #32911	; 0x808f
 80005fa:	601a      	str	r2, [r3, #0]
   SPI1_TRANSCEIVER(tx, rx, 3);
 80005fc:	1d39      	adds	r1, r7, #4
 80005fe:	f107 0310 	add.w	r3, r7, #16
 8000602:	2203      	movs	r2, #3
 8000604:	4618      	mov	r0, r3
 8000606:	f7ff ff7b 	bl	8000500 <SPI1_TRANSCEIVER>

   // setmodulationparams(modparam1, modparam2, modparam3)
   *(uint32_t*)tx = 0x8B | 0x70 << 8 | 0x0A << 16 | 0x01 << 24;
 800060a:	f107 0310 	add.w	r3, r7, #16
 800060e:	4a73      	ldr	r2, [pc, #460]	; (80007dc <main+0x290>)
 8000610:	601a      	str	r2, [r3, #0]
   SPI1_TRANSCEIVER(tx, rx, 4);
 8000612:	1d39      	adds	r1, r7, #4
 8000614:	f107 0310 	add.w	r3, r7, #16
 8000618:	2204      	movs	r2, #4
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff ff70 	bl	8000500 <SPI1_TRANSCEIVER>

   // setpacketparams(pktparam1, pktparam2, pktparam3, pktparam4, pktparam5)
   *(uint32_t*)tx = 0x8C | 0x0C << 8 | 0x00 << 16 | 0x04 << 24;
 8000620:	f107 0310 	add.w	r3, r7, #16
 8000624:	4a6e      	ldr	r2, [pc, #440]	; (80007e0 <main+0x294>)
 8000626:	601a      	str	r2, [r3, #0]
   *(uint32_t*)(tx+4) = 0x40 | 0x00 << 8 | 0x00 << 16;
 8000628:	f107 0310 	add.w	r3, r7, #16
 800062c:	3304      	adds	r3, #4
 800062e:	2240      	movs	r2, #64	; 0x40
 8000630:	601a      	str	r2, [r3, #0]
   SPI1_TRANSCEIVER(tx, rx, 7);
 8000632:	1d39      	adds	r1, r7, #4
 8000634:	f107 0310 	add.w	r3, r7, #16
 8000638:	2207      	movs	r2, #7
 800063a:	4618      	mov	r0, r3
 800063c:	f7ff ff60 	bl	8000500 <SPI1_TRANSCEIVER>
   //===========================================
   // Rx Setting and Operations
   //===========================================

   // SetDioIrqParams(irqMask, dio1Mask, dio2Mask, dio3Mask)
   *(uint32_t*)tx = 0x8D | 0x40 << 8 | 0x23 << 16 | 0x00 << 24;
 8000640:	f107 0310 	add.w	r3, r7, #16
 8000644:	4a67      	ldr	r2, [pc, #412]	; (80007e4 <main+0x298>)
 8000646:	601a      	str	r2, [r3, #0]
   *(uint32_t*)(tx+4) = 0x01 | 0x00 << 8 | 0x02 << 16 | 0x40 << 24;
 8000648:	f107 0310 	add.w	r3, r7, #16
 800064c:	3304      	adds	r3, #4
 800064e:	4a66      	ldr	r2, [pc, #408]	; (80007e8 <main+0x29c>)
 8000650:	601a      	str	r2, [r3, #0]
   *(uint32_t*)(tx+8) = 0x20;
 8000652:	f107 0310 	add.w	r3, r7, #16
 8000656:	3308      	adds	r3, #8
 8000658:	2220      	movs	r2, #32
 800065a:	601a      	str	r2, [r3, #0]
   SPI1_TRANSCEIVER(tx, rx, 9);
 800065c:	1d39      	adds	r1, r7, #4
 800065e:	f107 0310 	add.w	r3, r7, #16
 8000662:	2209      	movs	r2, #9
 8000664:	4618      	mov	r0, r3
 8000666:	f7ff ff4b 	bl	8000500 <SPI1_TRANSCEIVER>

   // SetRx(periodBase, periodBaseCount[15:8], periodBaseCount[7:0])
   *(uint32_t*)tx = 0x82 | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
 800066a:	f107 0310 	add.w	r3, r7, #16
 800066e:	2282      	movs	r2, #130	; 0x82
 8000670:	601a      	str	r2, [r3, #0]
   SPI1_TRANSCEIVER(tx, rx, 4);
 8000672:	1d39      	adds	r1, r7, #4
 8000674:	f107 0310 	add.w	r3, r7, #16
 8000678:	2204      	movs	r2, #4
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff ff40 	bl	8000500 <SPI1_TRANSCEIVER>

   // WaitIrq
   while(1)
   {
	   *(uint32_t*)tx = 0x15 | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
 8000680:	f107 0310 	add.w	r3, r7, #16
 8000684:	2215      	movs	r2, #21
 8000686:	601a      	str	r2, [r3, #0]
	   SPI1_TRANSCEIVER(tx, rx, 4);
 8000688:	1d39      	adds	r1, r7, #4
 800068a:	f107 0310 	add.w	r3, r7, #16
 800068e:	2204      	movs	r2, #4
 8000690:	4618      	mov	r0, r3
 8000692:	f7ff ff35 	bl	8000500 <SPI1_TRANSCEIVER>
	   if(rx[3] & 0x02) break;
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	f003 0302 	and.w	r3, r3, #2
 800069c:	2b00      	cmp	r3, #0
 800069e:	d100      	bne.n	80006a2 <main+0x156>
	   *(uint32_t*)tx = 0x15 | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
 80006a0:	e7ee      	b.n	8000680 <main+0x134>
	   if(rx[3] & 0x02) break;
 80006a2:	bf00      	nop
   }

   // GetPacketStatus()
   *(uint32_t*)tx = 0x1D | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
 80006a4:	f107 0310 	add.w	r3, r7, #16
 80006a8:	221d      	movs	r2, #29
 80006aa:	601a      	str	r2, [r3, #0]
   *(uint32_t*)(tx+4) = 0x00 | 0x00 << 8 | 0x00 << 16;
 80006ac:	f107 0310 	add.w	r3, r7, #16
 80006b0:	3304      	adds	r3, #4
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
   SPI1_TRANSCEIVER(tx, rx, 7);
 80006b6:	1d39      	adds	r1, r7, #4
 80006b8:	f107 0310 	add.w	r3, r7, #16
 80006bc:	2207      	movs	r2, #7
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff ff1e 	bl	8000500 <SPI1_TRANSCEIVER>

   // ClrIrqStatus(irqMask)
   *(uint32_t*)tx = 0x97 | 0xFF << 8 | 0xFF << 16;
 80006c4:	f107 0310 	add.w	r3, r7, #16
 80006c8:	4a48      	ldr	r2, [pc, #288]	; (80007ec <main+0x2a0>)
 80006ca:	601a      	str	r2, [r3, #0]
   SPI1_TRANSCEIVER(tx, rx, 3);
 80006cc:	1d39      	adds	r1, r7, #4
 80006ce:	f107 0310 	add.w	r3, r7, #16
 80006d2:	2203      	movs	r2, #3
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff ff13 	bl	8000500 <SPI1_TRANSCEIVER>

   // GetRxBufferStatus()
   *(uint32_t*)tx = 0x17 | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
 80006da:	f107 0310 	add.w	r3, r7, #16
 80006de:	2217      	movs	r2, #23
 80006e0:	601a      	str	r2, [r3, #0]
   SPI1_TRANSCEIVER(tx, rx, 4);
 80006e2:	1d39      	adds	r1, r7, #4
 80006e4:	f107 0310 	add.w	r3, r7, #16
 80006e8:	2204      	movs	r2, #4
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff ff08 	bl	8000500 <SPI1_TRANSCEIVER>

   // ReadBuffer(offset, payloadLengthRx)
   *(uint32_t*)tx = 0x1B | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
 80006f0:	f107 0310 	add.w	r3, r7, #16
 80006f4:	221b      	movs	r2, #27
 80006f6:	601a      	str	r2, [r3, #0]
   *(uint32_t*)(tx+4) = 0x00 | 0x00 << 8 | 0x00 << 16;
 80006f8:	f107 0310 	add.w	r3, r7, #16
 80006fc:	3304      	adds	r3, #4
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
   SPI1_TRANSCEIVER(tx, rx, 7);
 8000702:	1d39      	adds	r1, r7, #4
 8000704:	f107 0310 	add.w	r3, r7, #16
 8000708:	2207      	movs	r2, #7
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff fef8 	bl	8000500 <SPI1_TRANSCEIVER>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // SetRx(periodBase, periodBaseCount[15:8], periodBaseCount[7:0])
	     *(uint32_t*)tx = 0x82 | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
 8000710:	f107 0310 	add.w	r3, r7, #16
 8000714:	2282      	movs	r2, #130	; 0x82
 8000716:	601a      	str	r2, [r3, #0]
	     SPI1_TRANSCEIVER(tx, rx, 4);
 8000718:	1d39      	adds	r1, r7, #4
 800071a:	f107 0310 	add.w	r3, r7, #16
 800071e:	2204      	movs	r2, #4
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff feed 	bl	8000500 <SPI1_TRANSCEIVER>

	     // WaitIrq
	     while(1)
	     {
	  	   *(uint32_t*)tx = 0x15 | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
 8000726:	f107 0310 	add.w	r3, r7, #16
 800072a:	2215      	movs	r2, #21
 800072c:	601a      	str	r2, [r3, #0]
	  	   SPI1_TRANSCEIVER(tx, rx, 4);
 800072e:	1d39      	adds	r1, r7, #4
 8000730:	f107 0310 	add.w	r3, r7, #16
 8000734:	2204      	movs	r2, #4
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff fee2 	bl	8000500 <SPI1_TRANSCEIVER>
	  	   if(rx[3] & 0x02) break;
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	f003 0302 	and.w	r3, r3, #2
 8000742:	2b00      	cmp	r3, #0
 8000744:	d100      	bne.n	8000748 <main+0x1fc>
	  	   *(uint32_t*)tx = 0x15 | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
 8000746:	e7ee      	b.n	8000726 <main+0x1da>
	  	   if(rx[3] & 0x02) break;
 8000748:	bf00      	nop
	     }

	     // GetPacketStatus()
	     *(uint32_t*)tx = 0x1D | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
 800074a:	f107 0310 	add.w	r3, r7, #16
 800074e:	221d      	movs	r2, #29
 8000750:	601a      	str	r2, [r3, #0]
	     *(uint32_t*)(tx+4) = 0x00 | 0x00 << 8 | 0x00 << 16;
 8000752:	f107 0310 	add.w	r3, r7, #16
 8000756:	3304      	adds	r3, #4
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
	     SPI1_TRANSCEIVER(tx, rx, 7);
 800075c:	1d39      	adds	r1, r7, #4
 800075e:	f107 0310 	add.w	r3, r7, #16
 8000762:	2207      	movs	r2, #7
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff fecb 	bl	8000500 <SPI1_TRANSCEIVER>

	     // ClrIrqStatus(irqMask)
	     *(uint32_t*)tx = 0x97 | 0xFF << 8 | 0xFF << 16;
 800076a:	f107 0310 	add.w	r3, r7, #16
 800076e:	4a1f      	ldr	r2, [pc, #124]	; (80007ec <main+0x2a0>)
 8000770:	601a      	str	r2, [r3, #0]
	     SPI1_TRANSCEIVER(tx, rx, 3);
 8000772:	1d39      	adds	r1, r7, #4
 8000774:	f107 0310 	add.w	r3, r7, #16
 8000778:	2203      	movs	r2, #3
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff fec0 	bl	8000500 <SPI1_TRANSCEIVER>

	     // GetRxBufferStatus()
	     *(uint32_t*)tx = 0x17 | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
 8000780:	f107 0310 	add.w	r3, r7, #16
 8000784:	2217      	movs	r2, #23
 8000786:	601a      	str	r2, [r3, #0]
	     SPI1_TRANSCEIVER(tx, rx, 4);
 8000788:	1d39      	adds	r1, r7, #4
 800078a:	f107 0310 	add.w	r3, r7, #16
 800078e:	2204      	movs	r2, #4
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff feb5 	bl	8000500 <SPI1_TRANSCEIVER>

	     // ReadBuffer(offset, payloadLengthRx)
	     *(uint32_t*)tx = 0x1B | 0x00 << 8 | 0x00 << 16 | 0x00 << 24;
 8000796:	f107 0310 	add.w	r3, r7, #16
 800079a:	221b      	movs	r2, #27
 800079c:	601a      	str	r2, [r3, #0]
	     *(uint32_t*)(tx+4) = 0x00 | 0x00 << 8 | 0x00 << 16;
 800079e:	f107 0310 	add.w	r3, r7, #16
 80007a2:	3304      	adds	r3, #4
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
	     SPI1_TRANSCEIVER(tx, rx, 7);
 80007a8:	1d39      	adds	r1, r7, #4
 80007aa:	f107 0310 	add.w	r3, r7, #16
 80007ae:	2207      	movs	r2, #7
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff fea5 	bl	8000500 <SPI1_TRANSCEIVER>

	     // FrequencyError[Hz]

	     uint32_t test = *(uint32_t*)(rx+3);
 80007b6:	f8d7 3007 	ldr.w	r3, [r7, #7]
 80007ba:	61fb      	str	r3, [r7, #28]

	     if(*(uint32_t*)(rx+3) == 0x07080405)
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	3303      	adds	r3, #3
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a0b      	ldr	r2, [pc, #44]	; (80007f0 <main+0x2a4>)
 80007c4:	4293      	cmp	r3, r2
 80007c6:	d1a3      	bne.n	8000710 <main+0x1c4>
	     {
	    	 HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80007c8:	2120      	movs	r1, #32
 80007ca:	480a      	ldr	r0, [pc, #40]	; (80007f4 <main+0x2a8>)
 80007cc:	f000 fe07 	bl	80013de <HAL_GPIO_TogglePin>
  {
 80007d0:	e79e      	b.n	8000710 <main+0x1c4>
 80007d2:	bf00      	nop
 80007d4:	40020800 	.word	0x40020800
 80007d8:	899db886 	.word	0x899db886
 80007dc:	010a708b 	.word	0x010a708b
 80007e0:	04000c8c 	.word	0x04000c8c
 80007e4:	0023408d 	.word	0x0023408d
 80007e8:	40020001 	.word	0x40020001
 80007ec:	00ffff97 	.word	0x00ffff97
 80007f0:	07080405 	.word	0x07080405
 80007f4:	40020000 	.word	0x40020000

080007f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b094      	sub	sp, #80	; 0x50
 80007fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fe:	f107 031c 	add.w	r3, r7, #28
 8000802:	2234      	movs	r2, #52	; 0x34
 8000804:	2100      	movs	r1, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f002 f9f4 	bl	8002bf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800080c:	f107 0308 	add.w	r3, r7, #8
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800081c:	2300      	movs	r3, #0
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	4b2c      	ldr	r3, [pc, #176]	; (80008d4 <SystemClock_Config+0xdc>)
 8000822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000824:	4a2b      	ldr	r2, [pc, #172]	; (80008d4 <SystemClock_Config+0xdc>)
 8000826:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800082a:	6413      	str	r3, [r2, #64]	; 0x40
 800082c:	4b29      	ldr	r3, [pc, #164]	; (80008d4 <SystemClock_Config+0xdc>)
 800082e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000838:	2300      	movs	r3, #0
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	4b26      	ldr	r3, [pc, #152]	; (80008d8 <SystemClock_Config+0xe0>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a25      	ldr	r2, [pc, #148]	; (80008d8 <SystemClock_Config+0xe0>)
 8000842:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000846:	6013      	str	r3, [r2, #0]
 8000848:	4b23      	ldr	r3, [pc, #140]	; (80008d8 <SystemClock_Config+0xe0>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000850:	603b      	str	r3, [r7, #0]
 8000852:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000854:	2302      	movs	r3, #2
 8000856:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000858:	2301      	movs	r3, #1
 800085a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800085c:	2310      	movs	r3, #16
 800085e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000860:	2302      	movs	r3, #2
 8000862:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000864:	2300      	movs	r3, #0
 8000866:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000868:	2308      	movs	r3, #8
 800086a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800086c:	23b4      	movs	r3, #180	; 0xb4
 800086e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000870:	2302      	movs	r3, #2
 8000872:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000874:	2302      	movs	r3, #2
 8000876:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000878:	2302      	movs	r3, #2
 800087a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800087c:	f107 031c 	add.w	r3, r7, #28
 8000880:	4618      	mov	r0, r3
 8000882:	f001 f961 	bl	8001b48 <HAL_RCC_OscConfig>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800088c:	f000 f92a 	bl	8000ae4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000890:	f000 fdc0 	bl	8001414 <HAL_PWREx_EnableOverDrive>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800089a:	f000 f923 	bl	8000ae4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800089e:	230f      	movs	r3, #15
 80008a0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a2:	2302      	movs	r3, #2
 80008a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a6:	2300      	movs	r3, #0
 80008a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008b6:	f107 0308 	add.w	r3, r7, #8
 80008ba:	2105      	movs	r1, #5
 80008bc:	4618      	mov	r0, r3
 80008be:	f000 fdf9 	bl	80014b4 <HAL_RCC_ClockConfig>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80008c8:	f000 f90c 	bl	8000ae4 <Error_Handler>
  }
}
 80008cc:	bf00      	nop
 80008ce:	3750      	adds	r7, #80	; 0x50
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40023800 	.word	0x40023800
 80008d8:	40007000 	.word	0x40007000

080008dc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008e0:	4b17      	ldr	r3, [pc, #92]	; (8000940 <MX_SPI2_Init+0x64>)
 80008e2:	4a18      	ldr	r2, [pc, #96]	; (8000944 <MX_SPI2_Init+0x68>)
 80008e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008e6:	4b16      	ldr	r3, [pc, #88]	; (8000940 <MX_SPI2_Init+0x64>)
 80008e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008ec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008ee:	4b14      	ldr	r3, [pc, #80]	; (8000940 <MX_SPI2_Init+0x64>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <MX_SPI2_Init+0x64>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008fa:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_SPI2_Init+0x64>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <MX_SPI2_Init+0x64>)
 8000902:	2200      	movs	r2, #0
 8000904:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <MX_SPI2_Init+0x64>)
 8000908:	f44f 7200 	mov.w	r2, #512	; 0x200
 800090c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800090e:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <MX_SPI2_Init+0x64>)
 8000910:	2200      	movs	r2, #0
 8000912:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000914:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <MX_SPI2_Init+0x64>)
 8000916:	2200      	movs	r2, #0
 8000918:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_SPI2_Init+0x64>)
 800091c:	2200      	movs	r2, #0
 800091e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000920:	4b07      	ldr	r3, [pc, #28]	; (8000940 <MX_SPI2_Init+0x64>)
 8000922:	2200      	movs	r2, #0
 8000924:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <MX_SPI2_Init+0x64>)
 8000928:	220a      	movs	r2, #10
 800092a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800092c:	4804      	ldr	r0, [pc, #16]	; (8000940 <MX_SPI2_Init+0x64>)
 800092e:	f001 fba9 	bl	8002084 <HAL_SPI_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000938:	f000 f8d4 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20000028 	.word	0x20000028
 8000944:	40003800 	.word	0x40003800

08000948 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800094c:	4b11      	ldr	r3, [pc, #68]	; (8000994 <MX_USART2_UART_Init+0x4c>)
 800094e:	4a12      	ldr	r2, [pc, #72]	; (8000998 <MX_USART2_UART_Init+0x50>)
 8000950:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000952:	4b10      	ldr	r3, [pc, #64]	; (8000994 <MX_USART2_UART_Init+0x4c>)
 8000954:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000958:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800095a:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <MX_USART2_UART_Init+0x4c>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000960:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <MX_USART2_UART_Init+0x4c>)
 8000962:	2200      	movs	r2, #0
 8000964:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000966:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <MX_USART2_UART_Init+0x4c>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800096c:	4b09      	ldr	r3, [pc, #36]	; (8000994 <MX_USART2_UART_Init+0x4c>)
 800096e:	220c      	movs	r2, #12
 8000970:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000972:	4b08      	ldr	r3, [pc, #32]	; (8000994 <MX_USART2_UART_Init+0x4c>)
 8000974:	2200      	movs	r2, #0
 8000976:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <MX_USART2_UART_Init+0x4c>)
 800097a:	2200      	movs	r2, #0
 800097c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800097e:	4805      	ldr	r0, [pc, #20]	; (8000994 <MX_USART2_UART_Init+0x4c>)
 8000980:	f001 fe76 	bl	8002670 <HAL_UART_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800098a:	f000 f8ab 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000080 	.word	0x20000080
 8000998:	40004400 	.word	0x40004400

0800099c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08a      	sub	sp, #40	; 0x28
 80009a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a2:	f107 0314 	add.w	r3, r7, #20
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
 80009ae:	60da      	str	r2, [r3, #12]
 80009b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	613b      	str	r3, [r7, #16]
 80009b6:	4b47      	ldr	r3, [pc, #284]	; (8000ad4 <MX_GPIO_Init+0x138>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a46      	ldr	r2, [pc, #280]	; (8000ad4 <MX_GPIO_Init+0x138>)
 80009bc:	f043 0304 	orr.w	r3, r3, #4
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b44      	ldr	r3, [pc, #272]	; (8000ad4 <MX_GPIO_Init+0x138>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0304 	and.w	r3, r3, #4
 80009ca:	613b      	str	r3, [r7, #16]
 80009cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	60fb      	str	r3, [r7, #12]
 80009d2:	4b40      	ldr	r3, [pc, #256]	; (8000ad4 <MX_GPIO_Init+0x138>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a3f      	ldr	r2, [pc, #252]	; (8000ad4 <MX_GPIO_Init+0x138>)
 80009d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b3d      	ldr	r3, [pc, #244]	; (8000ad4 <MX_GPIO_Init+0x138>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	60bb      	str	r3, [r7, #8]
 80009ee:	4b39      	ldr	r3, [pc, #228]	; (8000ad4 <MX_GPIO_Init+0x138>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a38      	ldr	r2, [pc, #224]	; (8000ad4 <MX_GPIO_Init+0x138>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b36      	ldr	r3, [pc, #216]	; (8000ad4 <MX_GPIO_Init+0x138>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	60bb      	str	r3, [r7, #8]
 8000a04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	607b      	str	r3, [r7, #4]
 8000a0a:	4b32      	ldr	r3, [pc, #200]	; (8000ad4 <MX_GPIO_Init+0x138>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a31      	ldr	r2, [pc, #196]	; (8000ad4 <MX_GPIO_Init+0x138>)
 8000a10:	f043 0302 	orr.w	r3, r3, #2
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b2f      	ldr	r3, [pc, #188]	; (8000ad4 <MX_GPIO_Init+0x138>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0302 	and.w	r3, r3, #2
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000a22:	2201      	movs	r2, #1
 8000a24:	2120      	movs	r1, #32
 8000a26:	482c      	ldr	r0, [pc, #176]	; (8000ad8 <MX_GPIO_Init+0x13c>)
 8000a28:	f000 fcc0 	bl	80013ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SX1280_RST_GPIO_Port, SX1280_RST_Pin, GPIO_PIN_SET);
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	2180      	movs	r1, #128	; 0x80
 8000a30:	482a      	ldr	r0, [pc, #168]	; (8000adc <MX_GPIO_Init+0x140>)
 8000a32:	f000 fcbb 	bl	80013ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8000a36:	2201      	movs	r2, #1
 8000a38:	2140      	movs	r1, #64	; 0x40
 8000a3a:	4829      	ldr	r0, [pc, #164]	; (8000ae0 <MX_GPIO_Init+0x144>)
 8000a3c:	f000 fcb6 	bl	80013ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a46:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	4619      	mov	r1, r3
 8000a56:	4821      	ldr	r0, [pc, #132]	; (8000adc <MX_GPIO_Init+0x140>)
 8000a58:	f000 fb14 	bl	8001084 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a5c:	2320      	movs	r3, #32
 8000a5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	4619      	mov	r1, r3
 8000a72:	4819      	ldr	r0, [pc, #100]	; (8000ad8 <MX_GPIO_Init+0x13c>)
 8000a74:	f000 fb06 	bl	8001084 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX1280_RST_Pin */
  GPIO_InitStruct.Pin = SX1280_RST_Pin;
 8000a78:	2380      	movs	r3, #128	; 0x80
 8000a7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a80:	2301      	movs	r3, #1
 8000a82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a84:	2303      	movs	r3, #3
 8000a86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SX1280_RST_GPIO_Port, &GPIO_InitStruct);
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4813      	ldr	r0, [pc, #76]	; (8000adc <MX_GPIO_Init+0x140>)
 8000a90:	f000 faf8 	bl	8001084 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX1280_BUSY_Pin */
  GPIO_InitStruct.Pin = SX1280_BUSY_Pin;
 8000a94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SX1280_BUSY_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	f107 0314 	add.w	r3, r7, #20
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	480b      	ldr	r0, [pc, #44]	; (8000ad8 <MX_GPIO_Init+0x13c>)
 8000aaa:	f000 faeb 	bl	8001084 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 8000aae:	2340      	movs	r3, #64	; 0x40
 8000ab0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aba:	2303      	movs	r3, #3
 8000abc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 8000abe:	f107 0314 	add.w	r3, r7, #20
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4806      	ldr	r0, [pc, #24]	; (8000ae0 <MX_GPIO_Init+0x144>)
 8000ac6:	f000 fadd 	bl	8001084 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aca:	bf00      	nop
 8000acc:	3728      	adds	r7, #40	; 0x28
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40020000 	.word	0x40020000
 8000adc:	40020800 	.word	0x40020800
 8000ae0:	40020400 	.word	0x40020400

08000ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae8:	b672      	cpsid	i
}
 8000aea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aec:	e7fe      	b.n	8000aec <Error_Handler+0x8>
	...

08000af0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <HAL_MspInit+0x4c>)
 8000afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afe:	4a0f      	ldr	r2, [pc, #60]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b04:	6453      	str	r3, [r2, #68]	; 0x44
 8000b06:	4b0d      	ldr	r3, [pc, #52]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	603b      	str	r3, [r7, #0]
 8000b16:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1a:	4a08      	ldr	r2, [pc, #32]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b20:	6413      	str	r3, [r2, #64]	; 0x40
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b2e:	2007      	movs	r0, #7
 8000b30:	f000 fa74 	bl	800101c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b34:	bf00      	nop
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40023800 	.word	0x40023800

08000b40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08a      	sub	sp, #40	; 0x28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a30      	ldr	r2, [pc, #192]	; (8000c20 <HAL_SPI_MspInit+0xe0>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d15a      	bne.n	8000c18 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	4b2f      	ldr	r3, [pc, #188]	; (8000c24 <HAL_SPI_MspInit+0xe4>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6a:	4a2e      	ldr	r2, [pc, #184]	; (8000c24 <HAL_SPI_MspInit+0xe4>)
 8000b6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b70:	6413      	str	r3, [r2, #64]	; 0x40
 8000b72:	4b2c      	ldr	r3, [pc, #176]	; (8000c24 <HAL_SPI_MspInit+0xe4>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	4b28      	ldr	r3, [pc, #160]	; (8000c24 <HAL_SPI_MspInit+0xe4>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a27      	ldr	r2, [pc, #156]	; (8000c24 <HAL_SPI_MspInit+0xe4>)
 8000b88:	f043 0304 	orr.w	r3, r3, #4
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b25      	ldr	r3, [pc, #148]	; (8000c24 <HAL_SPI_MspInit+0xe4>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0304 	and.w	r3, r3, #4
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60bb      	str	r3, [r7, #8]
 8000b9e:	4b21      	ldr	r3, [pc, #132]	; (8000c24 <HAL_SPI_MspInit+0xe4>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a20      	ldr	r2, [pc, #128]	; (8000c24 <HAL_SPI_MspInit+0xe4>)
 8000ba4:	f043 0302 	orr.w	r3, r3, #2
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b1e      	ldr	r3, [pc, #120]	; (8000c24 <HAL_SPI_MspInit+0xe4>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0302 	and.w	r3, r3, #2
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000bc6:	2307      	movs	r3, #7
 8000bc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bca:	f107 0314 	add.w	r3, r7, #20
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4815      	ldr	r0, [pc, #84]	; (8000c28 <HAL_SPI_MspInit+0xe8>)
 8000bd2:	f000 fa57 	bl	8001084 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bd6:	2304      	movs	r3, #4
 8000bd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be2:	2303      	movs	r3, #3
 8000be4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000be6:	2305      	movs	r3, #5
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	4619      	mov	r1, r3
 8000bf0:	480d      	ldr	r0, [pc, #52]	; (8000c28 <HAL_SPI_MspInit+0xe8>)
 8000bf2:	f000 fa47 	bl	8001084 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c04:	2303      	movs	r3, #3
 8000c06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c08:	2305      	movs	r3, #5
 8000c0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	4619      	mov	r1, r3
 8000c12:	4806      	ldr	r0, [pc, #24]	; (8000c2c <HAL_SPI_MspInit+0xec>)
 8000c14:	f000 fa36 	bl	8001084 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000c18:	bf00      	nop
 8000c1a:	3728      	adds	r7, #40	; 0x28
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40003800 	.word	0x40003800
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40020800 	.word	0x40020800
 8000c2c:	40020400 	.word	0x40020400

08000c30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	; 0x28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a19      	ldr	r2, [pc, #100]	; (8000cb4 <HAL_UART_MspInit+0x84>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d12b      	bne.n	8000caa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
 8000c56:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	4a17      	ldr	r2, [pc, #92]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c60:	6413      	str	r3, [r2, #64]	; 0x40
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a10      	ldr	r2, [pc, #64]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c8a:	230c      	movs	r3, #12
 8000c8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c96:	2303      	movs	r3, #3
 8000c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c9a:	2307      	movs	r3, #7
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9e:	f107 0314 	add.w	r3, r7, #20
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4805      	ldr	r0, [pc, #20]	; (8000cbc <HAL_UART_MspInit+0x8c>)
 8000ca6:	f000 f9ed 	bl	8001084 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000caa:	bf00      	nop
 8000cac:	3728      	adds	r7, #40	; 0x28
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40004400 	.word	0x40004400
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	40020000 	.word	0x40020000

08000cc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <NMI_Handler+0x4>

08000cc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cca:	e7fe      	b.n	8000cca <HardFault_Handler+0x4>

08000ccc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <MemManage_Handler+0x4>

08000cd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cd6:	e7fe      	b.n	8000cd6 <BusFault_Handler+0x4>

08000cd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <UsageFault_Handler+0x4>

08000cde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d0c:	f000 f890 	bl	8000e30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d10:	bf00      	nop
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <SystemInit+0x20>)
 8000d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d1e:	4a05      	ldr	r2, [pc, #20]	; (8000d34 <SystemInit+0x20>)
 8000d20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d3c:	480d      	ldr	r0, [pc, #52]	; (8000d74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d3e:	490e      	ldr	r1, [pc, #56]	; (8000d78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d40:	4a0e      	ldr	r2, [pc, #56]	; (8000d7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d44:	e002      	b.n	8000d4c <LoopCopyDataInit>

08000d46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4a:	3304      	adds	r3, #4

08000d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d50:	d3f9      	bcc.n	8000d46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d52:	4a0b      	ldr	r2, [pc, #44]	; (8000d80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d54:	4c0b      	ldr	r4, [pc, #44]	; (8000d84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d58:	e001      	b.n	8000d5e <LoopFillZerobss>

08000d5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d5c:	3204      	adds	r2, #4

08000d5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d60:	d3fb      	bcc.n	8000d5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d62:	f7ff ffd7 	bl	8000d14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d66:	f001 ff4d 	bl	8002c04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d6a:	f7ff fbef 	bl	800054c <main>
  bx  lr    
 8000d6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d78:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d7c:	08002c8c 	.word	0x08002c8c
  ldr r2, =_sbss
 8000d80:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d84:	200000c8 	.word	0x200000c8

08000d88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d88:	e7fe      	b.n	8000d88 <ADC_IRQHandler>
	...

08000d8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d90:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <HAL_Init+0x40>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a0d      	ldr	r2, [pc, #52]	; (8000dcc <HAL_Init+0x40>)
 8000d96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d9c:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <HAL_Init+0x40>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a0a      	ldr	r2, [pc, #40]	; (8000dcc <HAL_Init+0x40>)
 8000da2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000da6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da8:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <HAL_Init+0x40>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a07      	ldr	r2, [pc, #28]	; (8000dcc <HAL_Init+0x40>)
 8000dae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000db2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db4:	2003      	movs	r0, #3
 8000db6:	f000 f931 	bl	800101c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dba:	2000      	movs	r0, #0
 8000dbc:	f000 f808 	bl	8000dd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc0:	f7ff fe96 	bl	8000af0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40023c00 	.word	0x40023c00

08000dd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dd8:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <HAL_InitTick+0x54>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <HAL_InitTick+0x58>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	4619      	mov	r1, r3
 8000de2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000de6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dee:	4618      	mov	r0, r3
 8000df0:	f000 f93b 	bl	800106a <HAL_SYSTICK_Config>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e00e      	b.n	8000e1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2b0f      	cmp	r3, #15
 8000e02:	d80a      	bhi.n	8000e1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e04:	2200      	movs	r2, #0
 8000e06:	6879      	ldr	r1, [r7, #4]
 8000e08:	f04f 30ff 	mov.w	r0, #4294967295
 8000e0c:	f000 f911 	bl	8001032 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e10:	4a06      	ldr	r2, [pc, #24]	; (8000e2c <HAL_InitTick+0x5c>)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e16:	2300      	movs	r3, #0
 8000e18:	e000      	b.n	8000e1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000000 	.word	0x20000000
 8000e28:	20000008 	.word	0x20000008
 8000e2c:	20000004 	.word	0x20000004

08000e30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <HAL_IncTick+0x20>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <HAL_IncTick+0x24>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4413      	add	r3, r2
 8000e40:	4a04      	ldr	r2, [pc, #16]	; (8000e54 <HAL_IncTick+0x24>)
 8000e42:	6013      	str	r3, [r2, #0]
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	20000008 	.word	0x20000008
 8000e54:	200000c4 	.word	0x200000c4

08000e58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e5c:	4b03      	ldr	r3, [pc, #12]	; (8000e6c <HAL_GetTick+0x14>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	200000c4 	.word	0x200000c4

08000e70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e78:	f7ff ffee 	bl	8000e58 <HAL_GetTick>
 8000e7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e88:	d005      	beq.n	8000e96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e8a:	4b0a      	ldr	r3, [pc, #40]	; (8000eb4 <HAL_Delay+0x44>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	461a      	mov	r2, r3
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	4413      	add	r3, r2
 8000e94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e96:	bf00      	nop
 8000e98:	f7ff ffde 	bl	8000e58 <HAL_GetTick>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	68fa      	ldr	r2, [r7, #12]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d8f7      	bhi.n	8000e98 <HAL_Delay+0x28>
  {
  }
}
 8000ea8:	bf00      	nop
 8000eaa:	bf00      	nop
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000008 	.word	0x20000008

08000eb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f003 0307 	and.w	r3, r3, #7
 8000ec6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec8:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <__NVIC_SetPriorityGrouping+0x44>)
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ece:	68ba      	ldr	r2, [r7, #8]
 8000ed0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ee4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eea:	4a04      	ldr	r2, [pc, #16]	; (8000efc <__NVIC_SetPriorityGrouping+0x44>)
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	60d3      	str	r3, [r2, #12]
}
 8000ef0:	bf00      	nop
 8000ef2:	3714      	adds	r7, #20
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f04:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <__NVIC_GetPriorityGrouping+0x18>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	0a1b      	lsrs	r3, r3, #8
 8000f0a:	f003 0307 	and.w	r3, r3, #7
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	6039      	str	r1, [r7, #0]
 8000f26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	db0a      	blt.n	8000f46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	b2da      	uxtb	r2, r3
 8000f34:	490c      	ldr	r1, [pc, #48]	; (8000f68 <__NVIC_SetPriority+0x4c>)
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	0112      	lsls	r2, r2, #4
 8000f3c:	b2d2      	uxtb	r2, r2
 8000f3e:	440b      	add	r3, r1
 8000f40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f44:	e00a      	b.n	8000f5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	4908      	ldr	r1, [pc, #32]	; (8000f6c <__NVIC_SetPriority+0x50>)
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	f003 030f 	and.w	r3, r3, #15
 8000f52:	3b04      	subs	r3, #4
 8000f54:	0112      	lsls	r2, r2, #4
 8000f56:	b2d2      	uxtb	r2, r2
 8000f58:	440b      	add	r3, r1
 8000f5a:	761a      	strb	r2, [r3, #24]
}
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	e000e100 	.word	0xe000e100
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b089      	sub	sp, #36	; 0x24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	f1c3 0307 	rsb	r3, r3, #7
 8000f8a:	2b04      	cmp	r3, #4
 8000f8c:	bf28      	it	cs
 8000f8e:	2304      	movcs	r3, #4
 8000f90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	3304      	adds	r3, #4
 8000f96:	2b06      	cmp	r3, #6
 8000f98:	d902      	bls.n	8000fa0 <NVIC_EncodePriority+0x30>
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	3b03      	subs	r3, #3
 8000f9e:	e000      	b.n	8000fa2 <NVIC_EncodePriority+0x32>
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	43da      	mvns	r2, r3
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	401a      	ands	r2, r3
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc2:	43d9      	mvns	r1, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc8:	4313      	orrs	r3, r2
         );
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3724      	adds	r7, #36	; 0x24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
	...

08000fd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fe8:	d301      	bcc.n	8000fee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fea:	2301      	movs	r3, #1
 8000fec:	e00f      	b.n	800100e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fee:	4a0a      	ldr	r2, [pc, #40]	; (8001018 <SysTick_Config+0x40>)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3b01      	subs	r3, #1
 8000ff4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ff6:	210f      	movs	r1, #15
 8000ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ffc:	f7ff ff8e 	bl	8000f1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001000:	4b05      	ldr	r3, [pc, #20]	; (8001018 <SysTick_Config+0x40>)
 8001002:	2200      	movs	r2, #0
 8001004:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001006:	4b04      	ldr	r3, [pc, #16]	; (8001018 <SysTick_Config+0x40>)
 8001008:	2207      	movs	r2, #7
 800100a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	e000e010 	.word	0xe000e010

0800101c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f7ff ff47 	bl	8000eb8 <__NVIC_SetPriorityGrouping>
}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001032:	b580      	push	{r7, lr}
 8001034:	b086      	sub	sp, #24
 8001036:	af00      	add	r7, sp, #0
 8001038:	4603      	mov	r3, r0
 800103a:	60b9      	str	r1, [r7, #8]
 800103c:	607a      	str	r2, [r7, #4]
 800103e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001044:	f7ff ff5c 	bl	8000f00 <__NVIC_GetPriorityGrouping>
 8001048:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	68b9      	ldr	r1, [r7, #8]
 800104e:	6978      	ldr	r0, [r7, #20]
 8001050:	f7ff ff8e 	bl	8000f70 <NVIC_EncodePriority>
 8001054:	4602      	mov	r2, r0
 8001056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800105a:	4611      	mov	r1, r2
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ff5d 	bl	8000f1c <__NVIC_SetPriority>
}
 8001062:	bf00      	nop
 8001064:	3718      	adds	r7, #24
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b082      	sub	sp, #8
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f7ff ffb0 	bl	8000fd8 <SysTick_Config>
 8001078:	4603      	mov	r3, r0
}
 800107a:	4618      	mov	r0, r3
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
	...

08001084 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001084:	b480      	push	{r7}
 8001086:	b089      	sub	sp, #36	; 0x24
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001092:	2300      	movs	r3, #0
 8001094:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001096:	2300      	movs	r3, #0
 8001098:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800109a:	2300      	movs	r3, #0
 800109c:	61fb      	str	r3, [r7, #28]
 800109e:	e165      	b.n	800136c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010a0:	2201      	movs	r2, #1
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	697a      	ldr	r2, [r7, #20]
 80010b0:	4013      	ands	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	f040 8154 	bne.w	8001366 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f003 0303 	and.w	r3, r3, #3
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d005      	beq.n	80010d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d130      	bne.n	8001138 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	2203      	movs	r2, #3
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43db      	mvns	r3, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4013      	ands	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	68da      	ldr	r2, [r3, #12]
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800110c:	2201      	movs	r2, #1
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	091b      	lsrs	r3, r3, #4
 8001122:	f003 0201 	and.w	r2, r3, #1
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4313      	orrs	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 0303 	and.w	r3, r3, #3
 8001140:	2b03      	cmp	r3, #3
 8001142:	d017      	beq.n	8001174 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	2203      	movs	r2, #3
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4013      	ands	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	689a      	ldr	r2, [r3, #8]
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4313      	orrs	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f003 0303 	and.w	r3, r3, #3
 800117c:	2b02      	cmp	r3, #2
 800117e:	d123      	bne.n	80011c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	08da      	lsrs	r2, r3, #3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3208      	adds	r2, #8
 8001188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800118c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	f003 0307 	and.w	r3, r3, #7
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	220f      	movs	r2, #15
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4013      	ands	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	691a      	ldr	r2, [r3, #16]
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	08da      	lsrs	r2, r3, #3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	3208      	adds	r2, #8
 80011c2:	69b9      	ldr	r1, [r7, #24]
 80011c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	2203      	movs	r2, #3
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4013      	ands	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f003 0203 	and.w	r2, r3, #3
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001204:	2b00      	cmp	r3, #0
 8001206:	f000 80ae 	beq.w	8001366 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	4b5d      	ldr	r3, [pc, #372]	; (8001384 <HAL_GPIO_Init+0x300>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001212:	4a5c      	ldr	r2, [pc, #368]	; (8001384 <HAL_GPIO_Init+0x300>)
 8001214:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001218:	6453      	str	r3, [r2, #68]	; 0x44
 800121a:	4b5a      	ldr	r3, [pc, #360]	; (8001384 <HAL_GPIO_Init+0x300>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001226:	4a58      	ldr	r2, [pc, #352]	; (8001388 <HAL_GPIO_Init+0x304>)
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	089b      	lsrs	r3, r3, #2
 800122c:	3302      	adds	r3, #2
 800122e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001232:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	f003 0303 	and.w	r3, r3, #3
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	220f      	movs	r2, #15
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	43db      	mvns	r3, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4013      	ands	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a4f      	ldr	r2, [pc, #316]	; (800138c <HAL_GPIO_Init+0x308>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d025      	beq.n	800129e <HAL_GPIO_Init+0x21a>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a4e      	ldr	r2, [pc, #312]	; (8001390 <HAL_GPIO_Init+0x30c>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d01f      	beq.n	800129a <HAL_GPIO_Init+0x216>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a4d      	ldr	r2, [pc, #308]	; (8001394 <HAL_GPIO_Init+0x310>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d019      	beq.n	8001296 <HAL_GPIO_Init+0x212>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a4c      	ldr	r2, [pc, #304]	; (8001398 <HAL_GPIO_Init+0x314>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d013      	beq.n	8001292 <HAL_GPIO_Init+0x20e>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a4b      	ldr	r2, [pc, #300]	; (800139c <HAL_GPIO_Init+0x318>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d00d      	beq.n	800128e <HAL_GPIO_Init+0x20a>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a4a      	ldr	r2, [pc, #296]	; (80013a0 <HAL_GPIO_Init+0x31c>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d007      	beq.n	800128a <HAL_GPIO_Init+0x206>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a49      	ldr	r2, [pc, #292]	; (80013a4 <HAL_GPIO_Init+0x320>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d101      	bne.n	8001286 <HAL_GPIO_Init+0x202>
 8001282:	2306      	movs	r3, #6
 8001284:	e00c      	b.n	80012a0 <HAL_GPIO_Init+0x21c>
 8001286:	2307      	movs	r3, #7
 8001288:	e00a      	b.n	80012a0 <HAL_GPIO_Init+0x21c>
 800128a:	2305      	movs	r3, #5
 800128c:	e008      	b.n	80012a0 <HAL_GPIO_Init+0x21c>
 800128e:	2304      	movs	r3, #4
 8001290:	e006      	b.n	80012a0 <HAL_GPIO_Init+0x21c>
 8001292:	2303      	movs	r3, #3
 8001294:	e004      	b.n	80012a0 <HAL_GPIO_Init+0x21c>
 8001296:	2302      	movs	r3, #2
 8001298:	e002      	b.n	80012a0 <HAL_GPIO_Init+0x21c>
 800129a:	2301      	movs	r3, #1
 800129c:	e000      	b.n	80012a0 <HAL_GPIO_Init+0x21c>
 800129e:	2300      	movs	r3, #0
 80012a0:	69fa      	ldr	r2, [r7, #28]
 80012a2:	f002 0203 	and.w	r2, r2, #3
 80012a6:	0092      	lsls	r2, r2, #2
 80012a8:	4093      	lsls	r3, r2
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012b0:	4935      	ldr	r1, [pc, #212]	; (8001388 <HAL_GPIO_Init+0x304>)
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	089b      	lsrs	r3, r3, #2
 80012b6:	3302      	adds	r3, #2
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012be:	4b3a      	ldr	r3, [pc, #232]	; (80013a8 <HAL_GPIO_Init+0x324>)
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	43db      	mvns	r3, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4013      	ands	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d003      	beq.n	80012e2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	4313      	orrs	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012e2:	4a31      	ldr	r2, [pc, #196]	; (80013a8 <HAL_GPIO_Init+0x324>)
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012e8:	4b2f      	ldr	r3, [pc, #188]	; (80013a8 <HAL_GPIO_Init+0x324>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	43db      	mvns	r3, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4013      	ands	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d003      	beq.n	800130c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	4313      	orrs	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800130c:	4a26      	ldr	r2, [pc, #152]	; (80013a8 <HAL_GPIO_Init+0x324>)
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001312:	4b25      	ldr	r3, [pc, #148]	; (80013a8 <HAL_GPIO_Init+0x324>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	43db      	mvns	r3, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4013      	ands	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d003      	beq.n	8001336 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	4313      	orrs	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001336:	4a1c      	ldr	r2, [pc, #112]	; (80013a8 <HAL_GPIO_Init+0x324>)
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800133c:	4b1a      	ldr	r3, [pc, #104]	; (80013a8 <HAL_GPIO_Init+0x324>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	43db      	mvns	r3, r3
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	4013      	ands	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d003      	beq.n	8001360 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	4313      	orrs	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001360:	4a11      	ldr	r2, [pc, #68]	; (80013a8 <HAL_GPIO_Init+0x324>)
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3301      	adds	r3, #1
 800136a:	61fb      	str	r3, [r7, #28]
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	2b0f      	cmp	r3, #15
 8001370:	f67f ae96 	bls.w	80010a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001374:	bf00      	nop
 8001376:	bf00      	nop
 8001378:	3724      	adds	r7, #36	; 0x24
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	40023800 	.word	0x40023800
 8001388:	40013800 	.word	0x40013800
 800138c:	40020000 	.word	0x40020000
 8001390:	40020400 	.word	0x40020400
 8001394:	40020800 	.word	0x40020800
 8001398:	40020c00 	.word	0x40020c00
 800139c:	40021000 	.word	0x40021000
 80013a0:	40021400 	.word	0x40021400
 80013a4:	40021800 	.word	0x40021800
 80013a8:	40013c00 	.word	0x40013c00

080013ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	807b      	strh	r3, [r7, #2]
 80013b8:	4613      	mov	r3, r2
 80013ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013bc:	787b      	ldrb	r3, [r7, #1]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013c2:	887a      	ldrh	r2, [r7, #2]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013c8:	e003      	b.n	80013d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013ca:	887b      	ldrh	r3, [r7, #2]
 80013cc:	041a      	lsls	r2, r3, #16
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	619a      	str	r2, [r3, #24]
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013de:	b480      	push	{r7}
 80013e0:	b085      	sub	sp, #20
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
 80013e6:	460b      	mov	r3, r1
 80013e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013f0:	887a      	ldrh	r2, [r7, #2]
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	4013      	ands	r3, r2
 80013f6:	041a      	lsls	r2, r3, #16
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	43d9      	mvns	r1, r3
 80013fc:	887b      	ldrh	r3, [r7, #2]
 80013fe:	400b      	ands	r3, r1
 8001400:	431a      	orrs	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	619a      	str	r2, [r3, #24]
}
 8001406:	bf00      	nop
 8001408:	3714      	adds	r7, #20
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
	...

08001414 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800141a:	2300      	movs	r3, #0
 800141c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	603b      	str	r3, [r7, #0]
 8001422:	4b20      	ldr	r3, [pc, #128]	; (80014a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	4a1f      	ldr	r2, [pc, #124]	; (80014a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800142c:	6413      	str	r3, [r2, #64]	; 0x40
 800142e:	4b1d      	ldr	r3, [pc, #116]	; (80014a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001436:	603b      	str	r3, [r7, #0]
 8001438:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800143a:	4b1b      	ldr	r3, [pc, #108]	; (80014a8 <HAL_PWREx_EnableOverDrive+0x94>)
 800143c:	2201      	movs	r2, #1
 800143e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001440:	f7ff fd0a 	bl	8000e58 <HAL_GetTick>
 8001444:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001446:	e009      	b.n	800145c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001448:	f7ff fd06 	bl	8000e58 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001456:	d901      	bls.n	800145c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e01f      	b.n	800149c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800145c:	4b13      	ldr	r3, [pc, #76]	; (80014ac <HAL_PWREx_EnableOverDrive+0x98>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001468:	d1ee      	bne.n	8001448 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800146a:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800146c:	2201      	movs	r2, #1
 800146e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001470:	f7ff fcf2 	bl	8000e58 <HAL_GetTick>
 8001474:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001476:	e009      	b.n	800148c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001478:	f7ff fcee 	bl	8000e58 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001486:	d901      	bls.n	800148c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e007      	b.n	800149c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800148c:	4b07      	ldr	r3, [pc, #28]	; (80014ac <HAL_PWREx_EnableOverDrive+0x98>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001494:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001498:	d1ee      	bne.n	8001478 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800149a:	2300      	movs	r3, #0
}
 800149c:	4618      	mov	r0, r3
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40023800 	.word	0x40023800
 80014a8:	420e0040 	.word	0x420e0040
 80014ac:	40007000 	.word	0x40007000
 80014b0:	420e0044 	.word	0x420e0044

080014b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d101      	bne.n	80014c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e0cc      	b.n	8001662 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014c8:	4b68      	ldr	r3, [pc, #416]	; (800166c <HAL_RCC_ClockConfig+0x1b8>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 030f 	and.w	r3, r3, #15
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d90c      	bls.n	80014f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014d6:	4b65      	ldr	r3, [pc, #404]	; (800166c <HAL_RCC_ClockConfig+0x1b8>)
 80014d8:	683a      	ldr	r2, [r7, #0]
 80014da:	b2d2      	uxtb	r2, r2
 80014dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014de:	4b63      	ldr	r3, [pc, #396]	; (800166c <HAL_RCC_ClockConfig+0x1b8>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 030f 	and.w	r3, r3, #15
 80014e6:	683a      	ldr	r2, [r7, #0]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d001      	beq.n	80014f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e0b8      	b.n	8001662 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0302 	and.w	r3, r3, #2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d020      	beq.n	800153e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0304 	and.w	r3, r3, #4
 8001504:	2b00      	cmp	r3, #0
 8001506:	d005      	beq.n	8001514 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001508:	4b59      	ldr	r3, [pc, #356]	; (8001670 <HAL_RCC_ClockConfig+0x1bc>)
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	4a58      	ldr	r2, [pc, #352]	; (8001670 <HAL_RCC_ClockConfig+0x1bc>)
 800150e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001512:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0308 	and.w	r3, r3, #8
 800151c:	2b00      	cmp	r3, #0
 800151e:	d005      	beq.n	800152c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001520:	4b53      	ldr	r3, [pc, #332]	; (8001670 <HAL_RCC_ClockConfig+0x1bc>)
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	4a52      	ldr	r2, [pc, #328]	; (8001670 <HAL_RCC_ClockConfig+0x1bc>)
 8001526:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800152a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800152c:	4b50      	ldr	r3, [pc, #320]	; (8001670 <HAL_RCC_ClockConfig+0x1bc>)
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	494d      	ldr	r1, [pc, #308]	; (8001670 <HAL_RCC_ClockConfig+0x1bc>)
 800153a:	4313      	orrs	r3, r2
 800153c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	2b00      	cmp	r3, #0
 8001548:	d044      	beq.n	80015d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d107      	bne.n	8001562 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001552:	4b47      	ldr	r3, [pc, #284]	; (8001670 <HAL_RCC_ClockConfig+0x1bc>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d119      	bne.n	8001592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e07f      	b.n	8001662 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	2b02      	cmp	r3, #2
 8001568:	d003      	beq.n	8001572 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800156e:	2b03      	cmp	r3, #3
 8001570:	d107      	bne.n	8001582 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001572:	4b3f      	ldr	r3, [pc, #252]	; (8001670 <HAL_RCC_ClockConfig+0x1bc>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d109      	bne.n	8001592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e06f      	b.n	8001662 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001582:	4b3b      	ldr	r3, [pc, #236]	; (8001670 <HAL_RCC_ClockConfig+0x1bc>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d101      	bne.n	8001592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e067      	b.n	8001662 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001592:	4b37      	ldr	r3, [pc, #220]	; (8001670 <HAL_RCC_ClockConfig+0x1bc>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f023 0203 	bic.w	r2, r3, #3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	4934      	ldr	r1, [pc, #208]	; (8001670 <HAL_RCC_ClockConfig+0x1bc>)
 80015a0:	4313      	orrs	r3, r2
 80015a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015a4:	f7ff fc58 	bl	8000e58 <HAL_GetTick>
 80015a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015aa:	e00a      	b.n	80015c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015ac:	f7ff fc54 	bl	8000e58 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e04f      	b.n	8001662 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015c2:	4b2b      	ldr	r3, [pc, #172]	; (8001670 <HAL_RCC_ClockConfig+0x1bc>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f003 020c 	and.w	r2, r3, #12
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d1eb      	bne.n	80015ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015d4:	4b25      	ldr	r3, [pc, #148]	; (800166c <HAL_RCC_ClockConfig+0x1b8>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 030f 	and.w	r3, r3, #15
 80015dc:	683a      	ldr	r2, [r7, #0]
 80015de:	429a      	cmp	r2, r3
 80015e0:	d20c      	bcs.n	80015fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015e2:	4b22      	ldr	r3, [pc, #136]	; (800166c <HAL_RCC_ClockConfig+0x1b8>)
 80015e4:	683a      	ldr	r2, [r7, #0]
 80015e6:	b2d2      	uxtb	r2, r2
 80015e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ea:	4b20      	ldr	r3, [pc, #128]	; (800166c <HAL_RCC_ClockConfig+0x1b8>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 030f 	and.w	r3, r3, #15
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d001      	beq.n	80015fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e032      	b.n	8001662 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0304 	and.w	r3, r3, #4
 8001604:	2b00      	cmp	r3, #0
 8001606:	d008      	beq.n	800161a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001608:	4b19      	ldr	r3, [pc, #100]	; (8001670 <HAL_RCC_ClockConfig+0x1bc>)
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	4916      	ldr	r1, [pc, #88]	; (8001670 <HAL_RCC_ClockConfig+0x1bc>)
 8001616:	4313      	orrs	r3, r2
 8001618:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0308 	and.w	r3, r3, #8
 8001622:	2b00      	cmp	r3, #0
 8001624:	d009      	beq.n	800163a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001626:	4b12      	ldr	r3, [pc, #72]	; (8001670 <HAL_RCC_ClockConfig+0x1bc>)
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	691b      	ldr	r3, [r3, #16]
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	490e      	ldr	r1, [pc, #56]	; (8001670 <HAL_RCC_ClockConfig+0x1bc>)
 8001636:	4313      	orrs	r3, r2
 8001638:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800163a:	f000 f855 	bl	80016e8 <HAL_RCC_GetSysClockFreq>
 800163e:	4602      	mov	r2, r0
 8001640:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <HAL_RCC_ClockConfig+0x1bc>)
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	091b      	lsrs	r3, r3, #4
 8001646:	f003 030f 	and.w	r3, r3, #15
 800164a:	490a      	ldr	r1, [pc, #40]	; (8001674 <HAL_RCC_ClockConfig+0x1c0>)
 800164c:	5ccb      	ldrb	r3, [r1, r3]
 800164e:	fa22 f303 	lsr.w	r3, r2, r3
 8001652:	4a09      	ldr	r2, [pc, #36]	; (8001678 <HAL_RCC_ClockConfig+0x1c4>)
 8001654:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001656:	4b09      	ldr	r3, [pc, #36]	; (800167c <HAL_RCC_ClockConfig+0x1c8>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff fbb8 	bl	8000dd0 <HAL_InitTick>

  return HAL_OK;
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40023c00 	.word	0x40023c00
 8001670:	40023800 	.word	0x40023800
 8001674:	08002c64 	.word	0x08002c64
 8001678:	20000000 	.word	0x20000000
 800167c:	20000004 	.word	0x20000004

08001680 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001684:	4b03      	ldr	r3, [pc, #12]	; (8001694 <HAL_RCC_GetHCLKFreq+0x14>)
 8001686:	681b      	ldr	r3, [r3, #0]
}
 8001688:	4618      	mov	r0, r3
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	20000000 	.word	0x20000000

08001698 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800169c:	f7ff fff0 	bl	8001680 <HAL_RCC_GetHCLKFreq>
 80016a0:	4602      	mov	r2, r0
 80016a2:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	0a9b      	lsrs	r3, r3, #10
 80016a8:	f003 0307 	and.w	r3, r3, #7
 80016ac:	4903      	ldr	r1, [pc, #12]	; (80016bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80016ae:	5ccb      	ldrb	r3, [r1, r3]
 80016b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40023800 	.word	0x40023800
 80016bc:	08002c74 	.word	0x08002c74

080016c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80016c4:	f7ff ffdc 	bl	8001680 <HAL_RCC_GetHCLKFreq>
 80016c8:	4602      	mov	r2, r0
 80016ca:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	0b5b      	lsrs	r3, r3, #13
 80016d0:	f003 0307 	and.w	r3, r3, #7
 80016d4:	4903      	ldr	r1, [pc, #12]	; (80016e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80016d6:	5ccb      	ldrb	r3, [r1, r3]
 80016d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016dc:	4618      	mov	r0, r3
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40023800 	.word	0x40023800
 80016e4:	08002c74 	.word	0x08002c74

080016e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016ec:	b0ae      	sub	sp, #184	; 0xb8
 80016ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80016f0:	2300      	movs	r3, #0
 80016f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80016f6:	2300      	movs	r3, #0
 80016f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80016fc:	2300      	movs	r3, #0
 80016fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001702:	2300      	movs	r3, #0
 8001704:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001708:	2300      	movs	r3, #0
 800170a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800170e:	4bcb      	ldr	r3, [pc, #812]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x354>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f003 030c 	and.w	r3, r3, #12
 8001716:	2b0c      	cmp	r3, #12
 8001718:	f200 8206 	bhi.w	8001b28 <HAL_RCC_GetSysClockFreq+0x440>
 800171c:	a201      	add	r2, pc, #4	; (adr r2, 8001724 <HAL_RCC_GetSysClockFreq+0x3c>)
 800171e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001722:	bf00      	nop
 8001724:	08001759 	.word	0x08001759
 8001728:	08001b29 	.word	0x08001b29
 800172c:	08001b29 	.word	0x08001b29
 8001730:	08001b29 	.word	0x08001b29
 8001734:	08001761 	.word	0x08001761
 8001738:	08001b29 	.word	0x08001b29
 800173c:	08001b29 	.word	0x08001b29
 8001740:	08001b29 	.word	0x08001b29
 8001744:	08001769 	.word	0x08001769
 8001748:	08001b29 	.word	0x08001b29
 800174c:	08001b29 	.word	0x08001b29
 8001750:	08001b29 	.word	0x08001b29
 8001754:	08001959 	.word	0x08001959
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001758:	4bb9      	ldr	r3, [pc, #740]	; (8001a40 <HAL_RCC_GetSysClockFreq+0x358>)
 800175a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800175e:	e1e7      	b.n	8001b30 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001760:	4bb8      	ldr	r3, [pc, #736]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001762:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001766:	e1e3      	b.n	8001b30 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001768:	4bb4      	ldr	r3, [pc, #720]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x354>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001770:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001774:	4bb1      	ldr	r3, [pc, #708]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x354>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d071      	beq.n	8001864 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001780:	4bae      	ldr	r3, [pc, #696]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x354>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	099b      	lsrs	r3, r3, #6
 8001786:	2200      	movs	r2, #0
 8001788:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800178c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001790:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001794:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001798:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800179c:	2300      	movs	r3, #0
 800179e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80017a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80017a6:	4622      	mov	r2, r4
 80017a8:	462b      	mov	r3, r5
 80017aa:	f04f 0000 	mov.w	r0, #0
 80017ae:	f04f 0100 	mov.w	r1, #0
 80017b2:	0159      	lsls	r1, r3, #5
 80017b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017b8:	0150      	lsls	r0, r2, #5
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	4621      	mov	r1, r4
 80017c0:	1a51      	subs	r1, r2, r1
 80017c2:	6439      	str	r1, [r7, #64]	; 0x40
 80017c4:	4629      	mov	r1, r5
 80017c6:	eb63 0301 	sbc.w	r3, r3, r1
 80017ca:	647b      	str	r3, [r7, #68]	; 0x44
 80017cc:	f04f 0200 	mov.w	r2, #0
 80017d0:	f04f 0300 	mov.w	r3, #0
 80017d4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80017d8:	4649      	mov	r1, r9
 80017da:	018b      	lsls	r3, r1, #6
 80017dc:	4641      	mov	r1, r8
 80017de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017e2:	4641      	mov	r1, r8
 80017e4:	018a      	lsls	r2, r1, #6
 80017e6:	4641      	mov	r1, r8
 80017e8:	1a51      	subs	r1, r2, r1
 80017ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80017ec:	4649      	mov	r1, r9
 80017ee:	eb63 0301 	sbc.w	r3, r3, r1
 80017f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017f4:	f04f 0200 	mov.w	r2, #0
 80017f8:	f04f 0300 	mov.w	r3, #0
 80017fc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001800:	4649      	mov	r1, r9
 8001802:	00cb      	lsls	r3, r1, #3
 8001804:	4641      	mov	r1, r8
 8001806:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800180a:	4641      	mov	r1, r8
 800180c:	00ca      	lsls	r2, r1, #3
 800180e:	4610      	mov	r0, r2
 8001810:	4619      	mov	r1, r3
 8001812:	4603      	mov	r3, r0
 8001814:	4622      	mov	r2, r4
 8001816:	189b      	adds	r3, r3, r2
 8001818:	633b      	str	r3, [r7, #48]	; 0x30
 800181a:	462b      	mov	r3, r5
 800181c:	460a      	mov	r2, r1
 800181e:	eb42 0303 	adc.w	r3, r2, r3
 8001822:	637b      	str	r3, [r7, #52]	; 0x34
 8001824:	f04f 0200 	mov.w	r2, #0
 8001828:	f04f 0300 	mov.w	r3, #0
 800182c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001830:	4629      	mov	r1, r5
 8001832:	024b      	lsls	r3, r1, #9
 8001834:	4621      	mov	r1, r4
 8001836:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800183a:	4621      	mov	r1, r4
 800183c:	024a      	lsls	r2, r1, #9
 800183e:	4610      	mov	r0, r2
 8001840:	4619      	mov	r1, r3
 8001842:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001846:	2200      	movs	r2, #0
 8001848:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800184c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001850:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001854:	f7fe fcd6 	bl	8000204 <__aeabi_uldivmod>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	4613      	mov	r3, r2
 800185e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001862:	e067      	b.n	8001934 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001864:	4b75      	ldr	r3, [pc, #468]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x354>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	099b      	lsrs	r3, r3, #6
 800186a:	2200      	movs	r2, #0
 800186c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001870:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001874:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001878:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800187c:	67bb      	str	r3, [r7, #120]	; 0x78
 800187e:	2300      	movs	r3, #0
 8001880:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001882:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001886:	4622      	mov	r2, r4
 8001888:	462b      	mov	r3, r5
 800188a:	f04f 0000 	mov.w	r0, #0
 800188e:	f04f 0100 	mov.w	r1, #0
 8001892:	0159      	lsls	r1, r3, #5
 8001894:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001898:	0150      	lsls	r0, r2, #5
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	4621      	mov	r1, r4
 80018a0:	1a51      	subs	r1, r2, r1
 80018a2:	62b9      	str	r1, [r7, #40]	; 0x28
 80018a4:	4629      	mov	r1, r5
 80018a6:	eb63 0301 	sbc.w	r3, r3, r1
 80018aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	f04f 0300 	mov.w	r3, #0
 80018b4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80018b8:	4649      	mov	r1, r9
 80018ba:	018b      	lsls	r3, r1, #6
 80018bc:	4641      	mov	r1, r8
 80018be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018c2:	4641      	mov	r1, r8
 80018c4:	018a      	lsls	r2, r1, #6
 80018c6:	4641      	mov	r1, r8
 80018c8:	ebb2 0a01 	subs.w	sl, r2, r1
 80018cc:	4649      	mov	r1, r9
 80018ce:	eb63 0b01 	sbc.w	fp, r3, r1
 80018d2:	f04f 0200 	mov.w	r2, #0
 80018d6:	f04f 0300 	mov.w	r3, #0
 80018da:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80018de:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80018e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80018e6:	4692      	mov	sl, r2
 80018e8:	469b      	mov	fp, r3
 80018ea:	4623      	mov	r3, r4
 80018ec:	eb1a 0303 	adds.w	r3, sl, r3
 80018f0:	623b      	str	r3, [r7, #32]
 80018f2:	462b      	mov	r3, r5
 80018f4:	eb4b 0303 	adc.w	r3, fp, r3
 80018f8:	627b      	str	r3, [r7, #36]	; 0x24
 80018fa:	f04f 0200 	mov.w	r2, #0
 80018fe:	f04f 0300 	mov.w	r3, #0
 8001902:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001906:	4629      	mov	r1, r5
 8001908:	028b      	lsls	r3, r1, #10
 800190a:	4621      	mov	r1, r4
 800190c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001910:	4621      	mov	r1, r4
 8001912:	028a      	lsls	r2, r1, #10
 8001914:	4610      	mov	r0, r2
 8001916:	4619      	mov	r1, r3
 8001918:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800191c:	2200      	movs	r2, #0
 800191e:	673b      	str	r3, [r7, #112]	; 0x70
 8001920:	677a      	str	r2, [r7, #116]	; 0x74
 8001922:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001926:	f7fe fc6d 	bl	8000204 <__aeabi_uldivmod>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	4613      	mov	r3, r2
 8001930:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001934:	4b41      	ldr	r3, [pc, #260]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x354>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	0c1b      	lsrs	r3, r3, #16
 800193a:	f003 0303 	and.w	r3, r3, #3
 800193e:	3301      	adds	r3, #1
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001946:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800194a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800194e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001952:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001956:	e0eb      	b.n	8001b30 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001958:	4b38      	ldr	r3, [pc, #224]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x354>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001960:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001964:	4b35      	ldr	r3, [pc, #212]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x354>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d06b      	beq.n	8001a48 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001970:	4b32      	ldr	r3, [pc, #200]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x354>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	099b      	lsrs	r3, r3, #6
 8001976:	2200      	movs	r2, #0
 8001978:	66bb      	str	r3, [r7, #104]	; 0x68
 800197a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800197c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800197e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001982:	663b      	str	r3, [r7, #96]	; 0x60
 8001984:	2300      	movs	r3, #0
 8001986:	667b      	str	r3, [r7, #100]	; 0x64
 8001988:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800198c:	4622      	mov	r2, r4
 800198e:	462b      	mov	r3, r5
 8001990:	f04f 0000 	mov.w	r0, #0
 8001994:	f04f 0100 	mov.w	r1, #0
 8001998:	0159      	lsls	r1, r3, #5
 800199a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800199e:	0150      	lsls	r0, r2, #5
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	4621      	mov	r1, r4
 80019a6:	1a51      	subs	r1, r2, r1
 80019a8:	61b9      	str	r1, [r7, #24]
 80019aa:	4629      	mov	r1, r5
 80019ac:	eb63 0301 	sbc.w	r3, r3, r1
 80019b0:	61fb      	str	r3, [r7, #28]
 80019b2:	f04f 0200 	mov.w	r2, #0
 80019b6:	f04f 0300 	mov.w	r3, #0
 80019ba:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80019be:	4659      	mov	r1, fp
 80019c0:	018b      	lsls	r3, r1, #6
 80019c2:	4651      	mov	r1, sl
 80019c4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019c8:	4651      	mov	r1, sl
 80019ca:	018a      	lsls	r2, r1, #6
 80019cc:	4651      	mov	r1, sl
 80019ce:	ebb2 0801 	subs.w	r8, r2, r1
 80019d2:	4659      	mov	r1, fp
 80019d4:	eb63 0901 	sbc.w	r9, r3, r1
 80019d8:	f04f 0200 	mov.w	r2, #0
 80019dc:	f04f 0300 	mov.w	r3, #0
 80019e0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019e4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019e8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019ec:	4690      	mov	r8, r2
 80019ee:	4699      	mov	r9, r3
 80019f0:	4623      	mov	r3, r4
 80019f2:	eb18 0303 	adds.w	r3, r8, r3
 80019f6:	613b      	str	r3, [r7, #16]
 80019f8:	462b      	mov	r3, r5
 80019fa:	eb49 0303 	adc.w	r3, r9, r3
 80019fe:	617b      	str	r3, [r7, #20]
 8001a00:	f04f 0200 	mov.w	r2, #0
 8001a04:	f04f 0300 	mov.w	r3, #0
 8001a08:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001a0c:	4629      	mov	r1, r5
 8001a0e:	024b      	lsls	r3, r1, #9
 8001a10:	4621      	mov	r1, r4
 8001a12:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a16:	4621      	mov	r1, r4
 8001a18:	024a      	lsls	r2, r1, #9
 8001a1a:	4610      	mov	r0, r2
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a22:	2200      	movs	r2, #0
 8001a24:	65bb      	str	r3, [r7, #88]	; 0x58
 8001a26:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001a28:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001a2c:	f7fe fbea 	bl	8000204 <__aeabi_uldivmod>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	4613      	mov	r3, r2
 8001a36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001a3a:	e065      	b.n	8001b08 <HAL_RCC_GetSysClockFreq+0x420>
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	00f42400 	.word	0x00f42400
 8001a44:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a48:	4b3d      	ldr	r3, [pc, #244]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x458>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	099b      	lsrs	r3, r3, #6
 8001a4e:	2200      	movs	r2, #0
 8001a50:	4618      	mov	r0, r3
 8001a52:	4611      	mov	r1, r2
 8001a54:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a58:	653b      	str	r3, [r7, #80]	; 0x50
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	657b      	str	r3, [r7, #84]	; 0x54
 8001a5e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001a62:	4642      	mov	r2, r8
 8001a64:	464b      	mov	r3, r9
 8001a66:	f04f 0000 	mov.w	r0, #0
 8001a6a:	f04f 0100 	mov.w	r1, #0
 8001a6e:	0159      	lsls	r1, r3, #5
 8001a70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a74:	0150      	lsls	r0, r2, #5
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	4641      	mov	r1, r8
 8001a7c:	1a51      	subs	r1, r2, r1
 8001a7e:	60b9      	str	r1, [r7, #8]
 8001a80:	4649      	mov	r1, r9
 8001a82:	eb63 0301 	sbc.w	r3, r3, r1
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	f04f 0300 	mov.w	r3, #0
 8001a90:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001a94:	4659      	mov	r1, fp
 8001a96:	018b      	lsls	r3, r1, #6
 8001a98:	4651      	mov	r1, sl
 8001a9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a9e:	4651      	mov	r1, sl
 8001aa0:	018a      	lsls	r2, r1, #6
 8001aa2:	4651      	mov	r1, sl
 8001aa4:	1a54      	subs	r4, r2, r1
 8001aa6:	4659      	mov	r1, fp
 8001aa8:	eb63 0501 	sbc.w	r5, r3, r1
 8001aac:	f04f 0200 	mov.w	r2, #0
 8001ab0:	f04f 0300 	mov.w	r3, #0
 8001ab4:	00eb      	lsls	r3, r5, #3
 8001ab6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001aba:	00e2      	lsls	r2, r4, #3
 8001abc:	4614      	mov	r4, r2
 8001abe:	461d      	mov	r5, r3
 8001ac0:	4643      	mov	r3, r8
 8001ac2:	18e3      	adds	r3, r4, r3
 8001ac4:	603b      	str	r3, [r7, #0]
 8001ac6:	464b      	mov	r3, r9
 8001ac8:	eb45 0303 	adc.w	r3, r5, r3
 8001acc:	607b      	str	r3, [r7, #4]
 8001ace:	f04f 0200 	mov.w	r2, #0
 8001ad2:	f04f 0300 	mov.w	r3, #0
 8001ad6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ada:	4629      	mov	r1, r5
 8001adc:	028b      	lsls	r3, r1, #10
 8001ade:	4621      	mov	r1, r4
 8001ae0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ae4:	4621      	mov	r1, r4
 8001ae6:	028a      	lsls	r2, r1, #10
 8001ae8:	4610      	mov	r0, r2
 8001aea:	4619      	mov	r1, r3
 8001aec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001af0:	2200      	movs	r2, #0
 8001af2:	64bb      	str	r3, [r7, #72]	; 0x48
 8001af4:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001af6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001afa:	f7fe fb83 	bl	8000204 <__aeabi_uldivmod>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	4613      	mov	r3, r2
 8001b04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001b08:	4b0d      	ldr	r3, [pc, #52]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x458>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	0f1b      	lsrs	r3, r3, #28
 8001b0e:	f003 0307 	and.w	r3, r3, #7
 8001b12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001b16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001b1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001b26:	e003      	b.n	8001b30 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b28:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001b2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001b2e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b30:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	37b8      	adds	r7, #184	; 0xb8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b3e:	bf00      	nop
 8001b40:	40023800 	.word	0x40023800
 8001b44:	00f42400 	.word	0x00f42400

08001b48 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e28d      	b.n	8002076 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	f000 8083 	beq.w	8001c6e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001b68:	4b94      	ldr	r3, [pc, #592]	; (8001dbc <HAL_RCC_OscConfig+0x274>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f003 030c 	and.w	r3, r3, #12
 8001b70:	2b04      	cmp	r3, #4
 8001b72:	d019      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b74:	4b91      	ldr	r3, [pc, #580]	; (8001dbc <HAL_RCC_OscConfig+0x274>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001b7c:	2b08      	cmp	r3, #8
 8001b7e:	d106      	bne.n	8001b8e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b80:	4b8e      	ldr	r3, [pc, #568]	; (8001dbc <HAL_RCC_OscConfig+0x274>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b8c:	d00c      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b8e:	4b8b      	ldr	r3, [pc, #556]	; (8001dbc <HAL_RCC_OscConfig+0x274>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b96:	2b0c      	cmp	r3, #12
 8001b98:	d112      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b9a:	4b88      	ldr	r3, [pc, #544]	; (8001dbc <HAL_RCC_OscConfig+0x274>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ba2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ba6:	d10b      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba8:	4b84      	ldr	r3, [pc, #528]	; (8001dbc <HAL_RCC_OscConfig+0x274>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d05b      	beq.n	8001c6c <HAL_RCC_OscConfig+0x124>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d157      	bne.n	8001c6c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e25a      	b.n	8002076 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bc8:	d106      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x90>
 8001bca:	4b7c      	ldr	r3, [pc, #496]	; (8001dbc <HAL_RCC_OscConfig+0x274>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a7b      	ldr	r2, [pc, #492]	; (8001dbc <HAL_RCC_OscConfig+0x274>)
 8001bd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd4:	6013      	str	r3, [r2, #0]
 8001bd6:	e01d      	b.n	8001c14 <HAL_RCC_OscConfig+0xcc>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001be0:	d10c      	bne.n	8001bfc <HAL_RCC_OscConfig+0xb4>
 8001be2:	4b76      	ldr	r3, [pc, #472]	; (8001dbc <HAL_RCC_OscConfig+0x274>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a75      	ldr	r2, [pc, #468]	; (8001dbc <HAL_RCC_OscConfig+0x274>)
 8001be8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	4b73      	ldr	r3, [pc, #460]	; (8001dbc <HAL_RCC_OscConfig+0x274>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a72      	ldr	r2, [pc, #456]	; (8001dbc <HAL_RCC_OscConfig+0x274>)
 8001bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	e00b      	b.n	8001c14 <HAL_RCC_OscConfig+0xcc>
 8001bfc:	4b6f      	ldr	r3, [pc, #444]	; (8001dbc <HAL_RCC_OscConfig+0x274>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a6e      	ldr	r2, [pc, #440]	; (8001dbc <HAL_RCC_OscConfig+0x274>)
 8001c02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c06:	6013      	str	r3, [r2, #0]
 8001c08:	4b6c      	ldr	r3, [pc, #432]	; (8001dbc <HAL_RCC_OscConfig+0x274>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a6b      	ldr	r2, [pc, #428]	; (8001dbc <HAL_RCC_OscConfig+0x274>)
 8001c0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d013      	beq.n	8001c44 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1c:	f7ff f91c 	bl	8000e58 <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c24:	f7ff f918 	bl	8000e58 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b64      	cmp	r3, #100	; 0x64
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e21f      	b.n	8002076 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c36:	4b61      	ldr	r3, [pc, #388]	; (8001dbc <HAL_RCC_OscConfig+0x274>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d0f0      	beq.n	8001c24 <HAL_RCC_OscConfig+0xdc>
 8001c42:	e014      	b.n	8001c6e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c44:	f7ff f908 	bl	8000e58 <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c4c:	f7ff f904 	bl	8000e58 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b64      	cmp	r3, #100	; 0x64
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e20b      	b.n	8002076 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c5e:	4b57      	ldr	r3, [pc, #348]	; (8001dbc <HAL_RCC_OscConfig+0x274>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1f0      	bne.n	8001c4c <HAL_RCC_OscConfig+0x104>
 8001c6a:	e000      	b.n	8001c6e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d06f      	beq.n	8001d5a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c7a:	4b50      	ldr	r3, [pc, #320]	; (8001dbc <HAL_RCC_OscConfig+0x274>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f003 030c 	and.w	r3, r3, #12
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d017      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c86:	4b4d      	ldr	r3, [pc, #308]	; (8001dbc <HAL_RCC_OscConfig+0x274>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c8e:	2b08      	cmp	r3, #8
 8001c90:	d105      	bne.n	8001c9e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c92:	4b4a      	ldr	r3, [pc, #296]	; (8001dbc <HAL_RCC_OscConfig+0x274>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d00b      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c9e:	4b47      	ldr	r3, [pc, #284]	; (8001dbc <HAL_RCC_OscConfig+0x274>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ca6:	2b0c      	cmp	r3, #12
 8001ca8:	d11c      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001caa:	4b44      	ldr	r3, [pc, #272]	; (8001dbc <HAL_RCC_OscConfig+0x274>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d116      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cb6:	4b41      	ldr	r3, [pc, #260]	; (8001dbc <HAL_RCC_OscConfig+0x274>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d005      	beq.n	8001cce <HAL_RCC_OscConfig+0x186>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d001      	beq.n	8001cce <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e1d3      	b.n	8002076 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cce:	4b3b      	ldr	r3, [pc, #236]	; (8001dbc <HAL_RCC_OscConfig+0x274>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	4937      	ldr	r1, [pc, #220]	; (8001dbc <HAL_RCC_OscConfig+0x274>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ce2:	e03a      	b.n	8001d5a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d020      	beq.n	8001d2e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cec:	4b34      	ldr	r3, [pc, #208]	; (8001dc0 <HAL_RCC_OscConfig+0x278>)
 8001cee:	2201      	movs	r2, #1
 8001cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf2:	f7ff f8b1 	bl	8000e58 <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf8:	e008      	b.n	8001d0c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cfa:	f7ff f8ad 	bl	8000e58 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e1b4      	b.n	8002076 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d0c:	4b2b      	ldr	r3, [pc, #172]	; (8001dbc <HAL_RCC_OscConfig+0x274>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d0f0      	beq.n	8001cfa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d18:	4b28      	ldr	r3, [pc, #160]	; (8001dbc <HAL_RCC_OscConfig+0x274>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	4925      	ldr	r1, [pc, #148]	; (8001dbc <HAL_RCC_OscConfig+0x274>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	600b      	str	r3, [r1, #0]
 8001d2c:	e015      	b.n	8001d5a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d2e:	4b24      	ldr	r3, [pc, #144]	; (8001dc0 <HAL_RCC_OscConfig+0x278>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d34:	f7ff f890 	bl	8000e58 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d3c:	f7ff f88c 	bl	8000e58 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e193      	b.n	8002076 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d4e:	4b1b      	ldr	r3, [pc, #108]	; (8001dbc <HAL_RCC_OscConfig+0x274>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1f0      	bne.n	8001d3c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0308 	and.w	r3, r3, #8
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d036      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d016      	beq.n	8001d9c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d6e:	4b15      	ldr	r3, [pc, #84]	; (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001d70:	2201      	movs	r2, #1
 8001d72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d74:	f7ff f870 	bl	8000e58 <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d7a:	e008      	b.n	8001d8e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d7c:	f7ff f86c 	bl	8000e58 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e173      	b.n	8002076 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d8e:	4b0b      	ldr	r3, [pc, #44]	; (8001dbc <HAL_RCC_OscConfig+0x274>)
 8001d90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d0f0      	beq.n	8001d7c <HAL_RCC_OscConfig+0x234>
 8001d9a:	e01b      	b.n	8001dd4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d9c:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da2:	f7ff f859 	bl	8000e58 <HAL_GetTick>
 8001da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001da8:	e00e      	b.n	8001dc8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001daa:	f7ff f855 	bl	8000e58 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d907      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e15c      	b.n	8002076 <HAL_RCC_OscConfig+0x52e>
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	42470000 	.word	0x42470000
 8001dc4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dc8:	4b8a      	ldr	r3, [pc, #552]	; (8001ff4 <HAL_RCC_OscConfig+0x4ac>)
 8001dca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dcc:	f003 0302 	and.w	r3, r3, #2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1ea      	bne.n	8001daa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0304 	and.w	r3, r3, #4
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f000 8097 	beq.w	8001f10 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001de2:	2300      	movs	r3, #0
 8001de4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001de6:	4b83      	ldr	r3, [pc, #524]	; (8001ff4 <HAL_RCC_OscConfig+0x4ac>)
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d10f      	bne.n	8001e12 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	4b7f      	ldr	r3, [pc, #508]	; (8001ff4 <HAL_RCC_OscConfig+0x4ac>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	4a7e      	ldr	r2, [pc, #504]	; (8001ff4 <HAL_RCC_OscConfig+0x4ac>)
 8001dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e00:	6413      	str	r3, [r2, #64]	; 0x40
 8001e02:	4b7c      	ldr	r3, [pc, #496]	; (8001ff4 <HAL_RCC_OscConfig+0x4ac>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0a:	60bb      	str	r3, [r7, #8]
 8001e0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e12:	4b79      	ldr	r3, [pc, #484]	; (8001ff8 <HAL_RCC_OscConfig+0x4b0>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d118      	bne.n	8001e50 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e1e:	4b76      	ldr	r3, [pc, #472]	; (8001ff8 <HAL_RCC_OscConfig+0x4b0>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a75      	ldr	r2, [pc, #468]	; (8001ff8 <HAL_RCC_OscConfig+0x4b0>)
 8001e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e2a:	f7ff f815 	bl	8000e58 <HAL_GetTick>
 8001e2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e30:	e008      	b.n	8001e44 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e32:	f7ff f811 	bl	8000e58 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e118      	b.n	8002076 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e44:	4b6c      	ldr	r3, [pc, #432]	; (8001ff8 <HAL_RCC_OscConfig+0x4b0>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d0f0      	beq.n	8001e32 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d106      	bne.n	8001e66 <HAL_RCC_OscConfig+0x31e>
 8001e58:	4b66      	ldr	r3, [pc, #408]	; (8001ff4 <HAL_RCC_OscConfig+0x4ac>)
 8001e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e5c:	4a65      	ldr	r2, [pc, #404]	; (8001ff4 <HAL_RCC_OscConfig+0x4ac>)
 8001e5e:	f043 0301 	orr.w	r3, r3, #1
 8001e62:	6713      	str	r3, [r2, #112]	; 0x70
 8001e64:	e01c      	b.n	8001ea0 <HAL_RCC_OscConfig+0x358>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	2b05      	cmp	r3, #5
 8001e6c:	d10c      	bne.n	8001e88 <HAL_RCC_OscConfig+0x340>
 8001e6e:	4b61      	ldr	r3, [pc, #388]	; (8001ff4 <HAL_RCC_OscConfig+0x4ac>)
 8001e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e72:	4a60      	ldr	r2, [pc, #384]	; (8001ff4 <HAL_RCC_OscConfig+0x4ac>)
 8001e74:	f043 0304 	orr.w	r3, r3, #4
 8001e78:	6713      	str	r3, [r2, #112]	; 0x70
 8001e7a:	4b5e      	ldr	r3, [pc, #376]	; (8001ff4 <HAL_RCC_OscConfig+0x4ac>)
 8001e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e7e:	4a5d      	ldr	r2, [pc, #372]	; (8001ff4 <HAL_RCC_OscConfig+0x4ac>)
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	6713      	str	r3, [r2, #112]	; 0x70
 8001e86:	e00b      	b.n	8001ea0 <HAL_RCC_OscConfig+0x358>
 8001e88:	4b5a      	ldr	r3, [pc, #360]	; (8001ff4 <HAL_RCC_OscConfig+0x4ac>)
 8001e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e8c:	4a59      	ldr	r2, [pc, #356]	; (8001ff4 <HAL_RCC_OscConfig+0x4ac>)
 8001e8e:	f023 0301 	bic.w	r3, r3, #1
 8001e92:	6713      	str	r3, [r2, #112]	; 0x70
 8001e94:	4b57      	ldr	r3, [pc, #348]	; (8001ff4 <HAL_RCC_OscConfig+0x4ac>)
 8001e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e98:	4a56      	ldr	r2, [pc, #344]	; (8001ff4 <HAL_RCC_OscConfig+0x4ac>)
 8001e9a:	f023 0304 	bic.w	r3, r3, #4
 8001e9e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d015      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea8:	f7fe ffd6 	bl	8000e58 <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eae:	e00a      	b.n	8001ec6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eb0:	f7fe ffd2 	bl	8000e58 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e0d7      	b.n	8002076 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ec6:	4b4b      	ldr	r3, [pc, #300]	; (8001ff4 <HAL_RCC_OscConfig+0x4ac>)
 8001ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d0ee      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x368>
 8001ed2:	e014      	b.n	8001efe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed4:	f7fe ffc0 	bl	8000e58 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eda:	e00a      	b.n	8001ef2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001edc:	f7fe ffbc 	bl	8000e58 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e0c1      	b.n	8002076 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ef2:	4b40      	ldr	r3, [pc, #256]	; (8001ff4 <HAL_RCC_OscConfig+0x4ac>)
 8001ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1ee      	bne.n	8001edc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001efe:	7dfb      	ldrb	r3, [r7, #23]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d105      	bne.n	8001f10 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f04:	4b3b      	ldr	r3, [pc, #236]	; (8001ff4 <HAL_RCC_OscConfig+0x4ac>)
 8001f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f08:	4a3a      	ldr	r2, [pc, #232]	; (8001ff4 <HAL_RCC_OscConfig+0x4ac>)
 8001f0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f0e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f000 80ad 	beq.w	8002074 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f1a:	4b36      	ldr	r3, [pc, #216]	; (8001ff4 <HAL_RCC_OscConfig+0x4ac>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f003 030c 	and.w	r3, r3, #12
 8001f22:	2b08      	cmp	r3, #8
 8001f24:	d060      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d145      	bne.n	8001fba <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f2e:	4b33      	ldr	r3, [pc, #204]	; (8001ffc <HAL_RCC_OscConfig+0x4b4>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f34:	f7fe ff90 	bl	8000e58 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f3c:	f7fe ff8c 	bl	8000e58 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e093      	b.n	8002076 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f4e:	4b29      	ldr	r3, [pc, #164]	; (8001ff4 <HAL_RCC_OscConfig+0x4ac>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1f0      	bne.n	8001f3c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	69da      	ldr	r2, [r3, #28]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a1b      	ldr	r3, [r3, #32]
 8001f62:	431a      	orrs	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f68:	019b      	lsls	r3, r3, #6
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f70:	085b      	lsrs	r3, r3, #1
 8001f72:	3b01      	subs	r3, #1
 8001f74:	041b      	lsls	r3, r3, #16
 8001f76:	431a      	orrs	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f7c:	061b      	lsls	r3, r3, #24
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f84:	071b      	lsls	r3, r3, #28
 8001f86:	491b      	ldr	r1, [pc, #108]	; (8001ff4 <HAL_RCC_OscConfig+0x4ac>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f8c:	4b1b      	ldr	r3, [pc, #108]	; (8001ffc <HAL_RCC_OscConfig+0x4b4>)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f92:	f7fe ff61 	bl	8000e58 <HAL_GetTick>
 8001f96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f98:	e008      	b.n	8001fac <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f9a:	f7fe ff5d 	bl	8000e58 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e064      	b.n	8002076 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fac:	4b11      	ldr	r3, [pc, #68]	; (8001ff4 <HAL_RCC_OscConfig+0x4ac>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d0f0      	beq.n	8001f9a <HAL_RCC_OscConfig+0x452>
 8001fb8:	e05c      	b.n	8002074 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fba:	4b10      	ldr	r3, [pc, #64]	; (8001ffc <HAL_RCC_OscConfig+0x4b4>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc0:	f7fe ff4a 	bl	8000e58 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fc8:	f7fe ff46 	bl	8000e58 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e04d      	b.n	8002076 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fda:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <HAL_RCC_OscConfig+0x4ac>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1f0      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x480>
 8001fe6:	e045      	b.n	8002074 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d107      	bne.n	8002000 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e040      	b.n	8002076 <HAL_RCC_OscConfig+0x52e>
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	40007000 	.word	0x40007000
 8001ffc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002000:	4b1f      	ldr	r3, [pc, #124]	; (8002080 <HAL_RCC_OscConfig+0x538>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d030      	beq.n	8002070 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002018:	429a      	cmp	r2, r3
 800201a:	d129      	bne.n	8002070 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002026:	429a      	cmp	r2, r3
 8002028:	d122      	bne.n	8002070 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002030:	4013      	ands	r3, r2
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002036:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002038:	4293      	cmp	r3, r2
 800203a:	d119      	bne.n	8002070 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002046:	085b      	lsrs	r3, r3, #1
 8002048:	3b01      	subs	r3, #1
 800204a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800204c:	429a      	cmp	r2, r3
 800204e:	d10f      	bne.n	8002070 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800205c:	429a      	cmp	r2, r3
 800205e:	d107      	bne.n	8002070 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800206c:	429a      	cmp	r2, r3
 800206e:	d001      	beq.n	8002074 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e000      	b.n	8002076 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3718      	adds	r7, #24
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	40023800 	.word	0x40023800

08002084 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e07b      	b.n	800218e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209a:	2b00      	cmp	r3, #0
 800209c:	d108      	bne.n	80020b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020a6:	d009      	beq.n	80020bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	61da      	str	r2, [r3, #28]
 80020ae:	e005      	b.n	80020bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d106      	bne.n	80020dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f7fe fd32 	bl	8000b40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2202      	movs	r2, #2
 80020e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002104:	431a      	orrs	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800210e:	431a      	orrs	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	431a      	orrs	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	431a      	orrs	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800212c:	431a      	orrs	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002136:	431a      	orrs	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002140:	ea42 0103 	orr.w	r1, r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002148:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	430a      	orrs	r2, r1
 8002152:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	0c1b      	lsrs	r3, r3, #16
 800215a:	f003 0104 	and.w	r1, r3, #4
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002162:	f003 0210 	and.w	r2, r3, #16
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	430a      	orrs	r2, r1
 800216c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	69da      	ldr	r2, [r3, #28]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800217c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b08c      	sub	sp, #48	; 0x30
 800219a:	af00      	add	r7, sp, #0
 800219c:	60f8      	str	r0, [r7, #12]
 800219e:	60b9      	str	r1, [r7, #8]
 80021a0:	607a      	str	r2, [r7, #4]
 80021a2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80021a4:	2301      	movs	r3, #1
 80021a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80021a8:	2300      	movs	r3, #0
 80021aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d101      	bne.n	80021bc <HAL_SPI_TransmitReceive+0x26>
 80021b8:	2302      	movs	r3, #2
 80021ba:	e18a      	b.n	80024d2 <HAL_SPI_TransmitReceive+0x33c>
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021c4:	f7fe fe48 	bl	8000e58 <HAL_GetTick>
 80021c8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80021da:	887b      	ldrh	r3, [r7, #2]
 80021dc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80021de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d00f      	beq.n	8002206 <HAL_SPI_TransmitReceive+0x70>
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021ec:	d107      	bne.n	80021fe <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d103      	bne.n	80021fe <HAL_SPI_TransmitReceive+0x68>
 80021f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80021fa:	2b04      	cmp	r3, #4
 80021fc:	d003      	beq.n	8002206 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80021fe:	2302      	movs	r3, #2
 8002200:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002204:	e15b      	b.n	80024be <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d005      	beq.n	8002218 <HAL_SPI_TransmitReceive+0x82>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d002      	beq.n	8002218 <HAL_SPI_TransmitReceive+0x82>
 8002212:	887b      	ldrh	r3, [r7, #2]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d103      	bne.n	8002220 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800221e:	e14e      	b.n	80024be <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002226:	b2db      	uxtb	r3, r3
 8002228:	2b04      	cmp	r3, #4
 800222a:	d003      	beq.n	8002234 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2205      	movs	r2, #5
 8002230:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2200      	movs	r2, #0
 8002238:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	887a      	ldrh	r2, [r7, #2]
 8002244:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	887a      	ldrh	r2, [r7, #2]
 800224a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	68ba      	ldr	r2, [r7, #8]
 8002250:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	887a      	ldrh	r2, [r7, #2]
 8002256:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	887a      	ldrh	r2, [r7, #2]
 800225c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2200      	movs	r2, #0
 8002262:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2200      	movs	r2, #0
 8002268:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002274:	2b40      	cmp	r3, #64	; 0x40
 8002276:	d007      	beq.n	8002288 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002286:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002290:	d178      	bne.n	8002384 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d002      	beq.n	80022a0 <HAL_SPI_TransmitReceive+0x10a>
 800229a:	8b7b      	ldrh	r3, [r7, #26]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d166      	bne.n	800236e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a4:	881a      	ldrh	r2, [r3, #0]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b0:	1c9a      	adds	r2, r3, #2
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	3b01      	subs	r3, #1
 80022be:	b29a      	uxth	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022c4:	e053      	b.n	800236e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d11b      	bne.n	800230c <HAL_SPI_TransmitReceive+0x176>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022d8:	b29b      	uxth	r3, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d016      	beq.n	800230c <HAL_SPI_TransmitReceive+0x176>
 80022de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d113      	bne.n	800230c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e8:	881a      	ldrh	r2, [r3, #0]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f4:	1c9a      	adds	r2, r3, #2
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022fe:	b29b      	uxth	r3, r3
 8002300:	3b01      	subs	r3, #1
 8002302:	b29a      	uxth	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002308:	2300      	movs	r3, #0
 800230a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b01      	cmp	r3, #1
 8002318:	d119      	bne.n	800234e <HAL_SPI_TransmitReceive+0x1b8>
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800231e:	b29b      	uxth	r3, r3
 8002320:	2b00      	cmp	r3, #0
 8002322:	d014      	beq.n	800234e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68da      	ldr	r2, [r3, #12]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800232e:	b292      	uxth	r2, r2
 8002330:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002336:	1c9a      	adds	r2, r3, #2
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002340:	b29b      	uxth	r3, r3
 8002342:	3b01      	subs	r3, #1
 8002344:	b29a      	uxth	r2, r3
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800234a:	2301      	movs	r3, #1
 800234c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800234e:	f7fe fd83 	bl	8000e58 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800235a:	429a      	cmp	r2, r3
 800235c:	d807      	bhi.n	800236e <HAL_SPI_TransmitReceive+0x1d8>
 800235e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002364:	d003      	beq.n	800236e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800236c:	e0a7      	b.n	80024be <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002372:	b29b      	uxth	r3, r3
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1a6      	bne.n	80022c6 <HAL_SPI_TransmitReceive+0x130>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800237c:	b29b      	uxth	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1a1      	bne.n	80022c6 <HAL_SPI_TransmitReceive+0x130>
 8002382:	e07c      	b.n	800247e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d002      	beq.n	8002392 <HAL_SPI_TransmitReceive+0x1fc>
 800238c:	8b7b      	ldrh	r3, [r7, #26]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d16b      	bne.n	800246a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	330c      	adds	r3, #12
 800239c:	7812      	ldrb	r2, [r2, #0]
 800239e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a4:	1c5a      	adds	r2, r3, #1
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	3b01      	subs	r3, #1
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023b8:	e057      	b.n	800246a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d11c      	bne.n	8002402 <HAL_SPI_TransmitReceive+0x26c>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d017      	beq.n	8002402 <HAL_SPI_TransmitReceive+0x26c>
 80023d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d114      	bne.n	8002402 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	330c      	adds	r3, #12
 80023e2:	7812      	ldrb	r2, [r2, #0]
 80023e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	1c5a      	adds	r2, r3, #1
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	3b01      	subs	r3, #1
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80023fe:	2300      	movs	r3, #0
 8002400:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b01      	cmp	r3, #1
 800240e:	d119      	bne.n	8002444 <HAL_SPI_TransmitReceive+0x2ae>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002414:	b29b      	uxth	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d014      	beq.n	8002444 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68da      	ldr	r2, [r3, #12]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002424:	b2d2      	uxtb	r2, r2
 8002426:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800242c:	1c5a      	adds	r2, r3, #1
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002436:	b29b      	uxth	r3, r3
 8002438:	3b01      	subs	r3, #1
 800243a:	b29a      	uxth	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002440:	2301      	movs	r3, #1
 8002442:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002444:	f7fe fd08 	bl	8000e58 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002450:	429a      	cmp	r2, r3
 8002452:	d803      	bhi.n	800245c <HAL_SPI_TransmitReceive+0x2c6>
 8002454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800245a:	d102      	bne.n	8002462 <HAL_SPI_TransmitReceive+0x2cc>
 800245c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800245e:	2b00      	cmp	r3, #0
 8002460:	d103      	bne.n	800246a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002468:	e029      	b.n	80024be <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800246e:	b29b      	uxth	r3, r3
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1a2      	bne.n	80023ba <HAL_SPI_TransmitReceive+0x224>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002478:	b29b      	uxth	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d19d      	bne.n	80023ba <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800247e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002480:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002482:	68f8      	ldr	r0, [r7, #12]
 8002484:	f000 f8b2 	bl	80025ec <SPI_EndRxTxTransaction>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d006      	beq.n	800249c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2220      	movs	r2, #32
 8002498:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800249a:	e010      	b.n	80024be <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d10b      	bne.n	80024bc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80024a4:	2300      	movs	r3, #0
 80024a6:	617b      	str	r3, [r7, #20]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	617b      	str	r3, [r7, #20]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	617b      	str	r3, [r7, #20]
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	e000      	b.n	80024be <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80024bc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80024ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3730      	adds	r7, #48	; 0x30
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
	...

080024dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b088      	sub	sp, #32
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	603b      	str	r3, [r7, #0]
 80024e8:	4613      	mov	r3, r2
 80024ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80024ec:	f7fe fcb4 	bl	8000e58 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f4:	1a9b      	subs	r3, r3, r2
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	4413      	add	r3, r2
 80024fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80024fc:	f7fe fcac 	bl	8000e58 <HAL_GetTick>
 8002500:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002502:	4b39      	ldr	r3, [pc, #228]	; (80025e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	015b      	lsls	r3, r3, #5
 8002508:	0d1b      	lsrs	r3, r3, #20
 800250a:	69fa      	ldr	r2, [r7, #28]
 800250c:	fb02 f303 	mul.w	r3, r2, r3
 8002510:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002512:	e054      	b.n	80025be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800251a:	d050      	beq.n	80025be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800251c:	f7fe fc9c 	bl	8000e58 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	69fa      	ldr	r2, [r7, #28]
 8002528:	429a      	cmp	r2, r3
 800252a:	d902      	bls.n	8002532 <SPI_WaitFlagStateUntilTimeout+0x56>
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d13d      	bne.n	80025ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002540:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800254a:	d111      	bne.n	8002570 <SPI_WaitFlagStateUntilTimeout+0x94>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002554:	d004      	beq.n	8002560 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800255e:	d107      	bne.n	8002570 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800256e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002574:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002578:	d10f      	bne.n	800259a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002598:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e017      	b.n	80025de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80025b4:	2300      	movs	r3, #0
 80025b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	3b01      	subs	r3, #1
 80025bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	4013      	ands	r3, r2
 80025c8:	68ba      	ldr	r2, [r7, #8]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	bf0c      	ite	eq
 80025ce:	2301      	moveq	r3, #1
 80025d0:	2300      	movne	r3, #0
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	461a      	mov	r2, r3
 80025d6:	79fb      	ldrb	r3, [r7, #7]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d19b      	bne.n	8002514 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3720      	adds	r7, #32
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20000000 	.word	0x20000000

080025ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b088      	sub	sp, #32
 80025f0:	af02      	add	r7, sp, #8
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80025f8:	4b1b      	ldr	r3, [pc, #108]	; (8002668 <SPI_EndRxTxTransaction+0x7c>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a1b      	ldr	r2, [pc, #108]	; (800266c <SPI_EndRxTxTransaction+0x80>)
 80025fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002602:	0d5b      	lsrs	r3, r3, #21
 8002604:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002608:	fb02 f303 	mul.w	r3, r2, r3
 800260c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002616:	d112      	bne.n	800263e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	9300      	str	r3, [sp, #0]
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	2200      	movs	r2, #0
 8002620:	2180      	movs	r1, #128	; 0x80
 8002622:	68f8      	ldr	r0, [r7, #12]
 8002624:	f7ff ff5a 	bl	80024dc <SPI_WaitFlagStateUntilTimeout>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d016      	beq.n	800265c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002632:	f043 0220 	orr.w	r2, r3, #32
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e00f      	b.n	800265e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00a      	beq.n	800265a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	3b01      	subs	r3, #1
 8002648:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002654:	2b80      	cmp	r3, #128	; 0x80
 8002656:	d0f2      	beq.n	800263e <SPI_EndRxTxTransaction+0x52>
 8002658:	e000      	b.n	800265c <SPI_EndRxTxTransaction+0x70>
        break;
 800265a:	bf00      	nop
  }

  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3718      	adds	r7, #24
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	20000000 	.word	0x20000000
 800266c:	165e9f81 	.word	0x165e9f81

08002670 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e03f      	b.n	8002702 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d106      	bne.n	800269c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7fe faca 	bl	8000c30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2224      	movs	r2, #36	; 0x24
 80026a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68da      	ldr	r2, [r3, #12]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f000 f829 	bl	800270c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	691a      	ldr	r2, [r3, #16]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	695a      	ldr	r2, [r3, #20]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68da      	ldr	r2, [r3, #12]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2220      	movs	r2, #32
 80026f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2220      	movs	r2, #32
 80026fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
	...

0800270c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800270c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002710:	b0c0      	sub	sp, #256	; 0x100
 8002712:	af00      	add	r7, sp, #0
 8002714:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002728:	68d9      	ldr	r1, [r3, #12]
 800272a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	ea40 0301 	orr.w	r3, r0, r1
 8002734:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	431a      	orrs	r2, r3
 8002744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	431a      	orrs	r2, r3
 800274c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002750:	69db      	ldr	r3, [r3, #28]
 8002752:	4313      	orrs	r3, r2
 8002754:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002764:	f021 010c 	bic.w	r1, r1, #12
 8002768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002772:	430b      	orrs	r3, r1
 8002774:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002786:	6999      	ldr	r1, [r3, #24]
 8002788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	ea40 0301 	orr.w	r3, r0, r1
 8002792:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	4b8f      	ldr	r3, [pc, #572]	; (80029d8 <UART_SetConfig+0x2cc>)
 800279c:	429a      	cmp	r2, r3
 800279e:	d005      	beq.n	80027ac <UART_SetConfig+0xa0>
 80027a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	4b8d      	ldr	r3, [pc, #564]	; (80029dc <UART_SetConfig+0x2d0>)
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d104      	bne.n	80027b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80027ac:	f7fe ff88 	bl	80016c0 <HAL_RCC_GetPCLK2Freq>
 80027b0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80027b4:	e003      	b.n	80027be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80027b6:	f7fe ff6f 	bl	8001698 <HAL_RCC_GetPCLK1Freq>
 80027ba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027c2:	69db      	ldr	r3, [r3, #28]
 80027c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027c8:	f040 810c 	bne.w	80029e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80027cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027d0:	2200      	movs	r2, #0
 80027d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80027d6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80027da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80027de:	4622      	mov	r2, r4
 80027e0:	462b      	mov	r3, r5
 80027e2:	1891      	adds	r1, r2, r2
 80027e4:	65b9      	str	r1, [r7, #88]	; 0x58
 80027e6:	415b      	adcs	r3, r3
 80027e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80027ee:	4621      	mov	r1, r4
 80027f0:	eb12 0801 	adds.w	r8, r2, r1
 80027f4:	4629      	mov	r1, r5
 80027f6:	eb43 0901 	adc.w	r9, r3, r1
 80027fa:	f04f 0200 	mov.w	r2, #0
 80027fe:	f04f 0300 	mov.w	r3, #0
 8002802:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002806:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800280a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800280e:	4690      	mov	r8, r2
 8002810:	4699      	mov	r9, r3
 8002812:	4623      	mov	r3, r4
 8002814:	eb18 0303 	adds.w	r3, r8, r3
 8002818:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800281c:	462b      	mov	r3, r5
 800281e:	eb49 0303 	adc.w	r3, r9, r3
 8002822:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002832:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002836:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800283a:	460b      	mov	r3, r1
 800283c:	18db      	adds	r3, r3, r3
 800283e:	653b      	str	r3, [r7, #80]	; 0x50
 8002840:	4613      	mov	r3, r2
 8002842:	eb42 0303 	adc.w	r3, r2, r3
 8002846:	657b      	str	r3, [r7, #84]	; 0x54
 8002848:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800284c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002850:	f7fd fcd8 	bl	8000204 <__aeabi_uldivmod>
 8002854:	4602      	mov	r2, r0
 8002856:	460b      	mov	r3, r1
 8002858:	4b61      	ldr	r3, [pc, #388]	; (80029e0 <UART_SetConfig+0x2d4>)
 800285a:	fba3 2302 	umull	r2, r3, r3, r2
 800285e:	095b      	lsrs	r3, r3, #5
 8002860:	011c      	lsls	r4, r3, #4
 8002862:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002866:	2200      	movs	r2, #0
 8002868:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800286c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002870:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002874:	4642      	mov	r2, r8
 8002876:	464b      	mov	r3, r9
 8002878:	1891      	adds	r1, r2, r2
 800287a:	64b9      	str	r1, [r7, #72]	; 0x48
 800287c:	415b      	adcs	r3, r3
 800287e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002880:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002884:	4641      	mov	r1, r8
 8002886:	eb12 0a01 	adds.w	sl, r2, r1
 800288a:	4649      	mov	r1, r9
 800288c:	eb43 0b01 	adc.w	fp, r3, r1
 8002890:	f04f 0200 	mov.w	r2, #0
 8002894:	f04f 0300 	mov.w	r3, #0
 8002898:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800289c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80028a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028a4:	4692      	mov	sl, r2
 80028a6:	469b      	mov	fp, r3
 80028a8:	4643      	mov	r3, r8
 80028aa:	eb1a 0303 	adds.w	r3, sl, r3
 80028ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80028b2:	464b      	mov	r3, r9
 80028b4:	eb4b 0303 	adc.w	r3, fp, r3
 80028b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80028bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80028c8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80028cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80028d0:	460b      	mov	r3, r1
 80028d2:	18db      	adds	r3, r3, r3
 80028d4:	643b      	str	r3, [r7, #64]	; 0x40
 80028d6:	4613      	mov	r3, r2
 80028d8:	eb42 0303 	adc.w	r3, r2, r3
 80028dc:	647b      	str	r3, [r7, #68]	; 0x44
 80028de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80028e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80028e6:	f7fd fc8d 	bl	8000204 <__aeabi_uldivmod>
 80028ea:	4602      	mov	r2, r0
 80028ec:	460b      	mov	r3, r1
 80028ee:	4611      	mov	r1, r2
 80028f0:	4b3b      	ldr	r3, [pc, #236]	; (80029e0 <UART_SetConfig+0x2d4>)
 80028f2:	fba3 2301 	umull	r2, r3, r3, r1
 80028f6:	095b      	lsrs	r3, r3, #5
 80028f8:	2264      	movs	r2, #100	; 0x64
 80028fa:	fb02 f303 	mul.w	r3, r2, r3
 80028fe:	1acb      	subs	r3, r1, r3
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002906:	4b36      	ldr	r3, [pc, #216]	; (80029e0 <UART_SetConfig+0x2d4>)
 8002908:	fba3 2302 	umull	r2, r3, r3, r2
 800290c:	095b      	lsrs	r3, r3, #5
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002914:	441c      	add	r4, r3
 8002916:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800291a:	2200      	movs	r2, #0
 800291c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002920:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002924:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002928:	4642      	mov	r2, r8
 800292a:	464b      	mov	r3, r9
 800292c:	1891      	adds	r1, r2, r2
 800292e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002930:	415b      	adcs	r3, r3
 8002932:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002934:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002938:	4641      	mov	r1, r8
 800293a:	1851      	adds	r1, r2, r1
 800293c:	6339      	str	r1, [r7, #48]	; 0x30
 800293e:	4649      	mov	r1, r9
 8002940:	414b      	adcs	r3, r1
 8002942:	637b      	str	r3, [r7, #52]	; 0x34
 8002944:	f04f 0200 	mov.w	r2, #0
 8002948:	f04f 0300 	mov.w	r3, #0
 800294c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002950:	4659      	mov	r1, fp
 8002952:	00cb      	lsls	r3, r1, #3
 8002954:	4651      	mov	r1, sl
 8002956:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800295a:	4651      	mov	r1, sl
 800295c:	00ca      	lsls	r2, r1, #3
 800295e:	4610      	mov	r0, r2
 8002960:	4619      	mov	r1, r3
 8002962:	4603      	mov	r3, r0
 8002964:	4642      	mov	r2, r8
 8002966:	189b      	adds	r3, r3, r2
 8002968:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800296c:	464b      	mov	r3, r9
 800296e:	460a      	mov	r2, r1
 8002970:	eb42 0303 	adc.w	r3, r2, r3
 8002974:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002984:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002988:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800298c:	460b      	mov	r3, r1
 800298e:	18db      	adds	r3, r3, r3
 8002990:	62bb      	str	r3, [r7, #40]	; 0x28
 8002992:	4613      	mov	r3, r2
 8002994:	eb42 0303 	adc.w	r3, r2, r3
 8002998:	62fb      	str	r3, [r7, #44]	; 0x2c
 800299a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800299e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80029a2:	f7fd fc2f 	bl	8000204 <__aeabi_uldivmod>
 80029a6:	4602      	mov	r2, r0
 80029a8:	460b      	mov	r3, r1
 80029aa:	4b0d      	ldr	r3, [pc, #52]	; (80029e0 <UART_SetConfig+0x2d4>)
 80029ac:	fba3 1302 	umull	r1, r3, r3, r2
 80029b0:	095b      	lsrs	r3, r3, #5
 80029b2:	2164      	movs	r1, #100	; 0x64
 80029b4:	fb01 f303 	mul.w	r3, r1, r3
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	3332      	adds	r3, #50	; 0x32
 80029be:	4a08      	ldr	r2, [pc, #32]	; (80029e0 <UART_SetConfig+0x2d4>)
 80029c0:	fba2 2303 	umull	r2, r3, r2, r3
 80029c4:	095b      	lsrs	r3, r3, #5
 80029c6:	f003 0207 	and.w	r2, r3, #7
 80029ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4422      	add	r2, r4
 80029d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80029d4:	e106      	b.n	8002be4 <UART_SetConfig+0x4d8>
 80029d6:	bf00      	nop
 80029d8:	40011000 	.word	0x40011000
 80029dc:	40011400 	.word	0x40011400
 80029e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029e8:	2200      	movs	r2, #0
 80029ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80029ee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80029f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80029f6:	4642      	mov	r2, r8
 80029f8:	464b      	mov	r3, r9
 80029fa:	1891      	adds	r1, r2, r2
 80029fc:	6239      	str	r1, [r7, #32]
 80029fe:	415b      	adcs	r3, r3
 8002a00:	627b      	str	r3, [r7, #36]	; 0x24
 8002a02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a06:	4641      	mov	r1, r8
 8002a08:	1854      	adds	r4, r2, r1
 8002a0a:	4649      	mov	r1, r9
 8002a0c:	eb43 0501 	adc.w	r5, r3, r1
 8002a10:	f04f 0200 	mov.w	r2, #0
 8002a14:	f04f 0300 	mov.w	r3, #0
 8002a18:	00eb      	lsls	r3, r5, #3
 8002a1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a1e:	00e2      	lsls	r2, r4, #3
 8002a20:	4614      	mov	r4, r2
 8002a22:	461d      	mov	r5, r3
 8002a24:	4643      	mov	r3, r8
 8002a26:	18e3      	adds	r3, r4, r3
 8002a28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002a2c:	464b      	mov	r3, r9
 8002a2e:	eb45 0303 	adc.w	r3, r5, r3
 8002a32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002a42:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002a46:	f04f 0200 	mov.w	r2, #0
 8002a4a:	f04f 0300 	mov.w	r3, #0
 8002a4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002a52:	4629      	mov	r1, r5
 8002a54:	008b      	lsls	r3, r1, #2
 8002a56:	4621      	mov	r1, r4
 8002a58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a5c:	4621      	mov	r1, r4
 8002a5e:	008a      	lsls	r2, r1, #2
 8002a60:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002a64:	f7fd fbce 	bl	8000204 <__aeabi_uldivmod>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	4b60      	ldr	r3, [pc, #384]	; (8002bf0 <UART_SetConfig+0x4e4>)
 8002a6e:	fba3 2302 	umull	r2, r3, r3, r2
 8002a72:	095b      	lsrs	r3, r3, #5
 8002a74:	011c      	lsls	r4, r3, #4
 8002a76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002a80:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002a84:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002a88:	4642      	mov	r2, r8
 8002a8a:	464b      	mov	r3, r9
 8002a8c:	1891      	adds	r1, r2, r2
 8002a8e:	61b9      	str	r1, [r7, #24]
 8002a90:	415b      	adcs	r3, r3
 8002a92:	61fb      	str	r3, [r7, #28]
 8002a94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a98:	4641      	mov	r1, r8
 8002a9a:	1851      	adds	r1, r2, r1
 8002a9c:	6139      	str	r1, [r7, #16]
 8002a9e:	4649      	mov	r1, r9
 8002aa0:	414b      	adcs	r3, r1
 8002aa2:	617b      	str	r3, [r7, #20]
 8002aa4:	f04f 0200 	mov.w	r2, #0
 8002aa8:	f04f 0300 	mov.w	r3, #0
 8002aac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ab0:	4659      	mov	r1, fp
 8002ab2:	00cb      	lsls	r3, r1, #3
 8002ab4:	4651      	mov	r1, sl
 8002ab6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002aba:	4651      	mov	r1, sl
 8002abc:	00ca      	lsls	r2, r1, #3
 8002abe:	4610      	mov	r0, r2
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	4642      	mov	r2, r8
 8002ac6:	189b      	adds	r3, r3, r2
 8002ac8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002acc:	464b      	mov	r3, r9
 8002ace:	460a      	mov	r2, r1
 8002ad0:	eb42 0303 	adc.w	r3, r2, r3
 8002ad4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ae2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002ae4:	f04f 0200 	mov.w	r2, #0
 8002ae8:	f04f 0300 	mov.w	r3, #0
 8002aec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002af0:	4649      	mov	r1, r9
 8002af2:	008b      	lsls	r3, r1, #2
 8002af4:	4641      	mov	r1, r8
 8002af6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002afa:	4641      	mov	r1, r8
 8002afc:	008a      	lsls	r2, r1, #2
 8002afe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002b02:	f7fd fb7f 	bl	8000204 <__aeabi_uldivmod>
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	4611      	mov	r1, r2
 8002b0c:	4b38      	ldr	r3, [pc, #224]	; (8002bf0 <UART_SetConfig+0x4e4>)
 8002b0e:	fba3 2301 	umull	r2, r3, r3, r1
 8002b12:	095b      	lsrs	r3, r3, #5
 8002b14:	2264      	movs	r2, #100	; 0x64
 8002b16:	fb02 f303 	mul.w	r3, r2, r3
 8002b1a:	1acb      	subs	r3, r1, r3
 8002b1c:	011b      	lsls	r3, r3, #4
 8002b1e:	3332      	adds	r3, #50	; 0x32
 8002b20:	4a33      	ldr	r2, [pc, #204]	; (8002bf0 <UART_SetConfig+0x4e4>)
 8002b22:	fba2 2303 	umull	r2, r3, r2, r3
 8002b26:	095b      	lsrs	r3, r3, #5
 8002b28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b2c:	441c      	add	r4, r3
 8002b2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b32:	2200      	movs	r2, #0
 8002b34:	673b      	str	r3, [r7, #112]	; 0x70
 8002b36:	677a      	str	r2, [r7, #116]	; 0x74
 8002b38:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002b3c:	4642      	mov	r2, r8
 8002b3e:	464b      	mov	r3, r9
 8002b40:	1891      	adds	r1, r2, r2
 8002b42:	60b9      	str	r1, [r7, #8]
 8002b44:	415b      	adcs	r3, r3
 8002b46:	60fb      	str	r3, [r7, #12]
 8002b48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b4c:	4641      	mov	r1, r8
 8002b4e:	1851      	adds	r1, r2, r1
 8002b50:	6039      	str	r1, [r7, #0]
 8002b52:	4649      	mov	r1, r9
 8002b54:	414b      	adcs	r3, r1
 8002b56:	607b      	str	r3, [r7, #4]
 8002b58:	f04f 0200 	mov.w	r2, #0
 8002b5c:	f04f 0300 	mov.w	r3, #0
 8002b60:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002b64:	4659      	mov	r1, fp
 8002b66:	00cb      	lsls	r3, r1, #3
 8002b68:	4651      	mov	r1, sl
 8002b6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b6e:	4651      	mov	r1, sl
 8002b70:	00ca      	lsls	r2, r1, #3
 8002b72:	4610      	mov	r0, r2
 8002b74:	4619      	mov	r1, r3
 8002b76:	4603      	mov	r3, r0
 8002b78:	4642      	mov	r2, r8
 8002b7a:	189b      	adds	r3, r3, r2
 8002b7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b7e:	464b      	mov	r3, r9
 8002b80:	460a      	mov	r2, r1
 8002b82:	eb42 0303 	adc.w	r3, r2, r3
 8002b86:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	663b      	str	r3, [r7, #96]	; 0x60
 8002b92:	667a      	str	r2, [r7, #100]	; 0x64
 8002b94:	f04f 0200 	mov.w	r2, #0
 8002b98:	f04f 0300 	mov.w	r3, #0
 8002b9c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002ba0:	4649      	mov	r1, r9
 8002ba2:	008b      	lsls	r3, r1, #2
 8002ba4:	4641      	mov	r1, r8
 8002ba6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002baa:	4641      	mov	r1, r8
 8002bac:	008a      	lsls	r2, r1, #2
 8002bae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002bb2:	f7fd fb27 	bl	8000204 <__aeabi_uldivmod>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	460b      	mov	r3, r1
 8002bba:	4b0d      	ldr	r3, [pc, #52]	; (8002bf0 <UART_SetConfig+0x4e4>)
 8002bbc:	fba3 1302 	umull	r1, r3, r3, r2
 8002bc0:	095b      	lsrs	r3, r3, #5
 8002bc2:	2164      	movs	r1, #100	; 0x64
 8002bc4:	fb01 f303 	mul.w	r3, r1, r3
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	011b      	lsls	r3, r3, #4
 8002bcc:	3332      	adds	r3, #50	; 0x32
 8002bce:	4a08      	ldr	r2, [pc, #32]	; (8002bf0 <UART_SetConfig+0x4e4>)
 8002bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd4:	095b      	lsrs	r3, r3, #5
 8002bd6:	f003 020f 	and.w	r2, r3, #15
 8002bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4422      	add	r2, r4
 8002be2:	609a      	str	r2, [r3, #8]
}
 8002be4:	bf00      	nop
 8002be6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002bea:	46bd      	mov	sp, r7
 8002bec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bf0:	51eb851f 	.word	0x51eb851f

08002bf4 <memset>:
 8002bf4:	4402      	add	r2, r0
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d100      	bne.n	8002bfe <memset+0xa>
 8002bfc:	4770      	bx	lr
 8002bfe:	f803 1b01 	strb.w	r1, [r3], #1
 8002c02:	e7f9      	b.n	8002bf8 <memset+0x4>

08002c04 <__libc_init_array>:
 8002c04:	b570      	push	{r4, r5, r6, lr}
 8002c06:	4d0d      	ldr	r5, [pc, #52]	; (8002c3c <__libc_init_array+0x38>)
 8002c08:	4c0d      	ldr	r4, [pc, #52]	; (8002c40 <__libc_init_array+0x3c>)
 8002c0a:	1b64      	subs	r4, r4, r5
 8002c0c:	10a4      	asrs	r4, r4, #2
 8002c0e:	2600      	movs	r6, #0
 8002c10:	42a6      	cmp	r6, r4
 8002c12:	d109      	bne.n	8002c28 <__libc_init_array+0x24>
 8002c14:	4d0b      	ldr	r5, [pc, #44]	; (8002c44 <__libc_init_array+0x40>)
 8002c16:	4c0c      	ldr	r4, [pc, #48]	; (8002c48 <__libc_init_array+0x44>)
 8002c18:	f000 f818 	bl	8002c4c <_init>
 8002c1c:	1b64      	subs	r4, r4, r5
 8002c1e:	10a4      	asrs	r4, r4, #2
 8002c20:	2600      	movs	r6, #0
 8002c22:	42a6      	cmp	r6, r4
 8002c24:	d105      	bne.n	8002c32 <__libc_init_array+0x2e>
 8002c26:	bd70      	pop	{r4, r5, r6, pc}
 8002c28:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c2c:	4798      	blx	r3
 8002c2e:	3601      	adds	r6, #1
 8002c30:	e7ee      	b.n	8002c10 <__libc_init_array+0xc>
 8002c32:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c36:	4798      	blx	r3
 8002c38:	3601      	adds	r6, #1
 8002c3a:	e7f2      	b.n	8002c22 <__libc_init_array+0x1e>
 8002c3c:	08002c84 	.word	0x08002c84
 8002c40:	08002c84 	.word	0x08002c84
 8002c44:	08002c84 	.word	0x08002c84
 8002c48:	08002c88 	.word	0x08002c88

08002c4c <_init>:
 8002c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c4e:	bf00      	nop
 8002c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c52:	bc08      	pop	{r3}
 8002c54:	469e      	mov	lr, r3
 8002c56:	4770      	bx	lr

08002c58 <_fini>:
 8002c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c5a:	bf00      	nop
 8002c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c5e:	bc08      	pop	{r3}
 8002c60:	469e      	mov	lr, r3
 8002c62:	4770      	bx	lr
