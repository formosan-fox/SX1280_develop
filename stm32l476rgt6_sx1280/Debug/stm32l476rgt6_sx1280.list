
stm32l476rgt6_sx1280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c58  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003de0  08003de0  00013de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e28  08003e28  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003e28  08003e28  00013e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e30  08003e30  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e30  08003e30  00013e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e34  08003e34  00013e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003e38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  08003e44  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08003e44  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d65d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c69  00000000  00000000  0002d699  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b08  00000000  00000000  0002f308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a60  00000000  00000000  0002fe10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000270c4  00000000  00000000  00030870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cc31  00000000  00000000  00057934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e65fa  00000000  00000000  00064565  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014ab5f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d04  00000000  00000000  0014abb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003dc8 	.word	0x08003dc8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003dc8 	.word	0x08003dc8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b086      	sub	sp, #24
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d2:	f000 fb01 	bl	8000ad8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d6:	f000 f835 	bl	8000544 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004da:	f000 f909 	bl	80006f0 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 80004de:	f000 f8d3 	bl	8000688 <_ZL19MX_USART2_UART_Initv>
  MX_SPI3_Init();
 80004e2:	f000 f88f 	bl	8000604 <_ZL12MX_SPI3_Initv>
  /* USER CODE BEGIN 2 */

  uint8_t status;
  sx1280 a1(&hspi3);
 80004e6:	463b      	mov	r3, r7
 80004e8:	4915      	ldr	r1, [pc, #84]	; (8000540 <main+0x74>)
 80004ea:	4618      	mov	r0, r3
 80004ec:	f003 fb9a 	bl	8003c24 <_ZN6sx1280C1EP19__SPI_HandleTypeDef>
  a1.reset();
 80004f0:	463b      	mov	r3, r7
 80004f2:	4618      	mov	r0, r3
 80004f4:	f003 fbb4 	bl	8003c60 <_ZN6sx12805resetEv>
  status = a1.getStatus();
 80004f8:	463b      	mov	r3, r7
 80004fa:	4618      	mov	r0, r3
 80004fc:	f003 fc20 	bl	8003d40 <_ZN6sx12809getStatusEv>
 8000500:	4603      	mov	r3, r0
 8000502:	75fb      	strb	r3, [r7, #23]
  a1.setStandby();
 8000504:	463b      	mov	r3, r7
 8000506:	4618      	mov	r0, r3
 8000508:	f003 fbf3 	bl	8003cf2 <_ZN6sx128010setStandbyEv>
  status = a1.getStatus();
 800050c:	463b      	mov	r3, r7
 800050e:	4618      	mov	r0, r3
 8000510:	f003 fc16 	bl	8003d40 <_ZN6sx12809getStatusEv>
 8000514:	4603      	mov	r3, r0
 8000516:	75fb      	strb	r3, [r7, #23]
  a1.setFs();
 8000518:	463b      	mov	r3, r7
 800051a:	4618      	mov	r0, r3
 800051c:	f003 fbfd 	bl	8003d1a <_ZN6sx12805setFsEv>
  status = a1.getStatus();
 8000520:	463b      	mov	r3, r7
 8000522:	4618      	mov	r0, r3
 8000524:	f003 fc0c 	bl	8003d40 <_ZN6sx12809getStatusEv>
 8000528:	4603      	mov	r3, r0
 800052a:	75fb      	strb	r3, [r7, #23]
  status = a1.readRegister8b(0x0891);
 800052c:	463b      	mov	r3, r7
 800052e:	f640 0191 	movw	r1, #2193	; 0x891
 8000532:	4618      	mov	r0, r3
 8000534:	f003 fbbd 	bl	8003cb2 <_ZN6sx128014readRegister8bEt>
 8000538:	4603      	mov	r3, r0
 800053a:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800053c:	e7fe      	b.n	800053c <main+0x70>
 800053e:	bf00      	nop
 8000540:	20000028 	.word	0x20000028

08000544 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b096      	sub	sp, #88	; 0x58
 8000548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054a:	f107 0314 	add.w	r3, r7, #20
 800054e:	2244      	movs	r2, #68	; 0x44
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f003 fc30 	bl	8003db8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000558:	463b      	mov	r3, r7
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]
 8000560:	609a      	str	r2, [r3, #8]
 8000562:	60da      	str	r2, [r3, #12]
 8000564:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000566:	f44f 7000 	mov.w	r0, #512	; 0x200
 800056a:	f000 fe0b 	bl	8001184 <HAL_PWREx_ControlVoltageScaling>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	bf14      	ite	ne
 8000574:	2301      	movne	r3, #1
 8000576:	2300      	moveq	r3, #0
 8000578:	b2db      	uxtb	r3, r3
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 800057e:	f000 f94b 	bl	8000818 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000582:	2302      	movs	r3, #2
 8000584:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000586:	f44f 7380 	mov.w	r3, #256	; 0x100
 800058a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800058c:	2310      	movs	r3, #16
 800058e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000590:	2302      	movs	r3, #2
 8000592:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000594:	2302      	movs	r3, #2
 8000596:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000598:	2301      	movs	r3, #1
 800059a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800059c:	230a      	movs	r3, #10
 800059e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005a0:	2307      	movs	r3, #7
 80005a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005a4:	2302      	movs	r3, #2
 80005a6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005a8:	2302      	movs	r3, #2
 80005aa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ac:	f107 0314 	add.w	r3, r7, #20
 80005b0:	4618      	mov	r0, r3
 80005b2:	f000 fe3d 	bl	8001230 <HAL_RCC_OscConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	bf14      	ite	ne
 80005bc:	2301      	movne	r3, #1
 80005be:	2300      	moveq	r3, #0
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <_Z18SystemClock_Configv+0x86>
  {
    Error_Handler();
 80005c6:	f000 f927 	bl	8000818 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ca:	230f      	movs	r3, #15
 80005cc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ce:	2303      	movs	r3, #3
 80005d0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005de:	463b      	mov	r3, r7
 80005e0:	2104      	movs	r1, #4
 80005e2:	4618      	mov	r0, r3
 80005e4:	f001 fa00 	bl	80019e8 <HAL_RCC_ClockConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	bf14      	ite	ne
 80005ee:	2301      	movne	r3, #1
 80005f0:	2300      	moveq	r3, #0
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <_Z18SystemClock_Configv+0xb8>
  {
    Error_Handler();
 80005f8:	f000 f90e 	bl	8000818 <Error_Handler>
  }
}
 80005fc:	bf00      	nop
 80005fe:	3758      	adds	r7, #88	; 0x58
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <_ZL12MX_SPI3_Initv>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000608:	4b1d      	ldr	r3, [pc, #116]	; (8000680 <_ZL12MX_SPI3_Initv+0x7c>)
 800060a:	4a1e      	ldr	r2, [pc, #120]	; (8000684 <_ZL12MX_SPI3_Initv+0x80>)
 800060c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800060e:	4b1c      	ldr	r3, [pc, #112]	; (8000680 <_ZL12MX_SPI3_Initv+0x7c>)
 8000610:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000614:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000616:	4b1a      	ldr	r3, [pc, #104]	; (8000680 <_ZL12MX_SPI3_Initv+0x7c>)
 8000618:	2200      	movs	r2, #0
 800061a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800061c:	4b18      	ldr	r3, [pc, #96]	; (8000680 <_ZL12MX_SPI3_Initv+0x7c>)
 800061e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000622:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000624:	4b16      	ldr	r3, [pc, #88]	; (8000680 <_ZL12MX_SPI3_Initv+0x7c>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800062a:	4b15      	ldr	r3, [pc, #84]	; (8000680 <_ZL12MX_SPI3_Initv+0x7c>)
 800062c:	2200      	movs	r2, #0
 800062e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000630:	4b13      	ldr	r3, [pc, #76]	; (8000680 <_ZL12MX_SPI3_Initv+0x7c>)
 8000632:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000636:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000638:	4b11      	ldr	r3, [pc, #68]	; (8000680 <_ZL12MX_SPI3_Initv+0x7c>)
 800063a:	2230      	movs	r2, #48	; 0x30
 800063c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800063e:	4b10      	ldr	r3, [pc, #64]	; (8000680 <_ZL12MX_SPI3_Initv+0x7c>)
 8000640:	2200      	movs	r2, #0
 8000642:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000644:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <_ZL12MX_SPI3_Initv+0x7c>)
 8000646:	2200      	movs	r2, #0
 8000648:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800064a:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <_ZL12MX_SPI3_Initv+0x7c>)
 800064c:	2200      	movs	r2, #0
 800064e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000650:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <_ZL12MX_SPI3_Initv+0x7c>)
 8000652:	2207      	movs	r2, #7
 8000654:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000656:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <_ZL12MX_SPI3_Initv+0x7c>)
 8000658:	2200      	movs	r2, #0
 800065a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800065c:	4b08      	ldr	r3, [pc, #32]	; (8000680 <_ZL12MX_SPI3_Initv+0x7c>)
 800065e:	2208      	movs	r2, #8
 8000660:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000662:	4807      	ldr	r0, [pc, #28]	; (8000680 <_ZL12MX_SPI3_Initv+0x7c>)
 8000664:	f002 f8a0 	bl	80027a8 <HAL_SPI_Init>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	bf14      	ite	ne
 800066e:	2301      	movne	r3, #1
 8000670:	2300      	moveq	r3, #0
 8000672:	b2db      	uxtb	r3, r3
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <_ZL12MX_SPI3_Initv+0x78>
  {
    Error_Handler();
 8000678:	f000 f8ce 	bl	8000818 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20000028 	.word	0x20000028
 8000684:	40003c00 	.word	0x40003c00

08000688 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800068c:	4b16      	ldr	r3, [pc, #88]	; (80006e8 <_ZL19MX_USART2_UART_Initv+0x60>)
 800068e:	4a17      	ldr	r2, [pc, #92]	; (80006ec <_ZL19MX_USART2_UART_Initv+0x64>)
 8000690:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000692:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000694:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000698:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800069a:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <_ZL19MX_USART2_UART_Initv+0x60>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006a0:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <_ZL19MX_USART2_UART_Initv+0x60>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006a6:	4b10      	ldr	r3, [pc, #64]	; (80006e8 <_ZL19MX_USART2_UART_Initv+0x60>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006ac:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <_ZL19MX_USART2_UART_Initv+0x60>)
 80006ae:	220c      	movs	r2, #12
 80006b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b2:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <_ZL19MX_USART2_UART_Initv+0x60>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b8:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <_ZL19MX_USART2_UART_Initv+0x60>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006be:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <_ZL19MX_USART2_UART_Initv+0x60>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006c4:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <_ZL19MX_USART2_UART_Initv+0x60>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ca:	4807      	ldr	r0, [pc, #28]	; (80006e8 <_ZL19MX_USART2_UART_Initv+0x60>)
 80006cc:	f002 fdf4 	bl	80032b8 <HAL_UART_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	bf14      	ite	ne
 80006d6:	2301      	movne	r3, #1
 80006d8:	2300      	moveq	r3, #0
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 80006e0:	f000 f89a 	bl	8000818 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	2000008c 	.word	0x2000008c
 80006ec:	40004400 	.word	0x40004400

080006f0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08a      	sub	sp, #40	; 0x28
 80006f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f6:	f107 0314 	add.w	r3, r7, #20
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
 8000704:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000706:	4b41      	ldr	r3, [pc, #260]	; (800080c <_ZL12MX_GPIO_Initv+0x11c>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070a:	4a40      	ldr	r2, [pc, #256]	; (800080c <_ZL12MX_GPIO_Initv+0x11c>)
 800070c:	f043 0304 	orr.w	r3, r3, #4
 8000710:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000712:	4b3e      	ldr	r3, [pc, #248]	; (800080c <_ZL12MX_GPIO_Initv+0x11c>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000716:	f003 0304 	and.w	r3, r3, #4
 800071a:	613b      	str	r3, [r7, #16]
 800071c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800071e:	4b3b      	ldr	r3, [pc, #236]	; (800080c <_ZL12MX_GPIO_Initv+0x11c>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000722:	4a3a      	ldr	r2, [pc, #232]	; (800080c <_ZL12MX_GPIO_Initv+0x11c>)
 8000724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000728:	64d3      	str	r3, [r2, #76]	; 0x4c
 800072a:	4b38      	ldr	r3, [pc, #224]	; (800080c <_ZL12MX_GPIO_Initv+0x11c>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000736:	4b35      	ldr	r3, [pc, #212]	; (800080c <_ZL12MX_GPIO_Initv+0x11c>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	4a34      	ldr	r2, [pc, #208]	; (800080c <_ZL12MX_GPIO_Initv+0x11c>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000742:	4b32      	ldr	r3, [pc, #200]	; (800080c <_ZL12MX_GPIO_Initv+0x11c>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800074e:	4b2f      	ldr	r3, [pc, #188]	; (800080c <_ZL12MX_GPIO_Initv+0x11c>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	4a2e      	ldr	r2, [pc, #184]	; (800080c <_ZL12MX_GPIO_Initv+0x11c>)
 8000754:	f043 0308 	orr.w	r3, r3, #8
 8000758:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075a:	4b2c      	ldr	r3, [pc, #176]	; (800080c <_ZL12MX_GPIO_Initv+0x11c>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	f003 0308 	and.w	r3, r3, #8
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000766:	4b29      	ldr	r3, [pc, #164]	; (800080c <_ZL12MX_GPIO_Initv+0x11c>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	4a28      	ldr	r2, [pc, #160]	; (800080c <_ZL12MX_GPIO_Initv+0x11c>)
 800076c:	f043 0302 	orr.w	r3, r3, #2
 8000770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000772:	4b26      	ldr	r3, [pc, #152]	; (800080c <_ZL12MX_GPIO_Initv+0x11c>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	f003 0302 	and.w	r3, r3, #2
 800077a:	603b      	str	r3, [r7, #0]
 800077c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	2120      	movs	r1, #32
 8000782:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000786:	f000 fcd7 	bl	8001138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	2104      	movs	r1, #4
 800078e:	4820      	ldr	r0, [pc, #128]	; (8000810 <_ZL12MX_GPIO_Initv+0x120>)
 8000790:	f000 fcd2 	bl	8001138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000794:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000798:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800079a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800079e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007a4:	f107 0314 	add.w	r3, r7, #20
 80007a8:	4619      	mov	r1, r3
 80007aa:	481a      	ldr	r0, [pc, #104]	; (8000814 <_ZL12MX_GPIO_Initv+0x124>)
 80007ac:	f000 fb1a 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007b0:	2301      	movs	r3, #1
 80007b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	4619      	mov	r1, r3
 80007c2:	4814      	ldr	r0, [pc, #80]	; (8000814 <_ZL12MX_GPIO_Initv+0x124>)
 80007c4:	f000 fb0e 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007c8:	2320      	movs	r3, #32
 80007ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007cc:	2301      	movs	r3, #1
 80007ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d4:	2300      	movs	r3, #0
 80007d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	4619      	mov	r1, r3
 80007de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e2:	f000 faff 	bl	8000de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007e6:	2304      	movs	r3, #4
 80007e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ea:	2301      	movs	r3, #1
 80007ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f2:	2300      	movs	r3, #0
 80007f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	4619      	mov	r1, r3
 80007fc:	4804      	ldr	r0, [pc, #16]	; (8000810 <_ZL12MX_GPIO_Initv+0x120>)
 80007fe:	f000 faf1 	bl	8000de4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000802:	bf00      	nop
 8000804:	3728      	adds	r7, #40	; 0x28
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40021000 	.word	0x40021000
 8000810:	48000c00 	.word	0x48000c00
 8000814:	48000800 	.word	0x48000800

08000818 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800081c:	b672      	cpsid	i
}
 800081e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000820:	e7fe      	b.n	8000820 <Error_Handler+0x8>
	...

08000824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082a:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <HAL_MspInit+0x44>)
 800082c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800082e:	4a0e      	ldr	r2, [pc, #56]	; (8000868 <HAL_MspInit+0x44>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6613      	str	r3, [r2, #96]	; 0x60
 8000836:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <HAL_MspInit+0x44>)
 8000838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <HAL_MspInit+0x44>)
 8000844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000846:	4a08      	ldr	r2, [pc, #32]	; (8000868 <HAL_MspInit+0x44>)
 8000848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800084c:	6593      	str	r3, [r2, #88]	; 0x58
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <HAL_MspInit+0x44>)
 8000850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000856:	603b      	str	r3, [r7, #0]
 8000858:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085a:	bf00      	nop
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	40021000 	.word	0x40021000

0800086c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08a      	sub	sp, #40	; 0x28
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a2f      	ldr	r2, [pc, #188]	; (8000948 <HAL_SPI_MspInit+0xdc>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d157      	bne.n	800093e <HAL_SPI_MspInit+0xd2>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800088e:	4b2f      	ldr	r3, [pc, #188]	; (800094c <HAL_SPI_MspInit+0xe0>)
 8000890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000892:	4a2e      	ldr	r2, [pc, #184]	; (800094c <HAL_SPI_MspInit+0xe0>)
 8000894:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000898:	6593      	str	r3, [r2, #88]	; 0x58
 800089a:	4b2c      	ldr	r3, [pc, #176]	; (800094c <HAL_SPI_MspInit+0xe0>)
 800089c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800089e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	4b29      	ldr	r3, [pc, #164]	; (800094c <HAL_SPI_MspInit+0xe0>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008aa:	4a28      	ldr	r2, [pc, #160]	; (800094c <HAL_SPI_MspInit+0xe0>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b2:	4b26      	ldr	r3, [pc, #152]	; (800094c <HAL_SPI_MspInit+0xe0>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008be:	4b23      	ldr	r3, [pc, #140]	; (800094c <HAL_SPI_MspInit+0xe0>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c2:	4a22      	ldr	r2, [pc, #136]	; (800094c <HAL_SPI_MspInit+0xe0>)
 80008c4:	f043 0304 	orr.w	r3, r3, #4
 80008c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ca:	4b20      	ldr	r3, [pc, #128]	; (800094c <HAL_SPI_MspInit+0xe0>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ce:	f003 0304 	and.w	r3, r3, #4
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	68bb      	ldr	r3, [r7, #8]
    PA15 (JTDI)     ------> SPI3_NSS
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80008d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008dc:	2302      	movs	r3, #2
 80008de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e4:	2303      	movs	r3, #3
 80008e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008e8:	2306      	movs	r3, #6
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	4619      	mov	r1, r3
 80008f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f6:	f000 fa75 	bl	8000de4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80008fa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80008fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000900:	2302      	movs	r3, #2
 8000902:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000904:	2301      	movs	r3, #1
 8000906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000908:	2303      	movs	r3, #3
 800090a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800090c:	2306      	movs	r3, #6
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	4619      	mov	r1, r3
 8000916:	480e      	ldr	r0, [pc, #56]	; (8000950 <HAL_SPI_MspInit+0xe4>)
 8000918:	f000 fa64 	bl	8000de4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800091c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000920:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000922:	2302      	movs	r3, #2
 8000924:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000926:	2302      	movs	r3, #2
 8000928:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092a:	2303      	movs	r3, #3
 800092c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800092e:	2306      	movs	r3, #6
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000932:	f107 0314 	add.w	r3, r7, #20
 8000936:	4619      	mov	r1, r3
 8000938:	4805      	ldr	r0, [pc, #20]	; (8000950 <HAL_SPI_MspInit+0xe4>)
 800093a:	f000 fa53 	bl	8000de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800093e:	bf00      	nop
 8000940:	3728      	adds	r7, #40	; 0x28
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40003c00 	.word	0x40003c00
 800094c:	40021000 	.word	0x40021000
 8000950:	48000800 	.word	0x48000800

08000954 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b0ac      	sub	sp, #176	; 0xb0
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	2288      	movs	r2, #136	; 0x88
 8000972:	2100      	movs	r1, #0
 8000974:	4618      	mov	r0, r3
 8000976:	f003 fa1f 	bl	8003db8 <memset>
  if(huart->Instance==USART2)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4a21      	ldr	r2, [pc, #132]	; (8000a04 <HAL_UART_MspInit+0xb0>)
 8000980:	4293      	cmp	r3, r2
 8000982:	d13b      	bne.n	80009fc <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000984:	2302      	movs	r3, #2
 8000986:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000988:	2300      	movs	r3, #0
 800098a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	4618      	mov	r0, r3
 8000992:	f001 fa4d 	bl	8001e30 <HAL_RCCEx_PeriphCLKConfig>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800099c:	f7ff ff3c 	bl	8000818 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009a0:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <HAL_UART_MspInit+0xb4>)
 80009a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009a4:	4a18      	ldr	r2, [pc, #96]	; (8000a08 <HAL_UART_MspInit+0xb4>)
 80009a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009aa:	6593      	str	r3, [r2, #88]	; 0x58
 80009ac:	4b16      	ldr	r3, [pc, #88]	; (8000a08 <HAL_UART_MspInit+0xb4>)
 80009ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009b4:	613b      	str	r3, [r7, #16]
 80009b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b8:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <HAL_UART_MspInit+0xb4>)
 80009ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009bc:	4a12      	ldr	r2, [pc, #72]	; (8000a08 <HAL_UART_MspInit+0xb4>)
 80009be:	f043 0301 	orr.w	r3, r3, #1
 80009c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009c4:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <HAL_UART_MspInit+0xb4>)
 80009c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c8:	f003 0301 	and.w	r3, r3, #1
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009d0:	230c      	movs	r3, #12
 80009d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d6:	2302      	movs	r3, #2
 80009d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e2:	2303      	movs	r3, #3
 80009e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009e8:	2307      	movs	r3, #7
 80009ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009f2:	4619      	mov	r1, r3
 80009f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f8:	f000 f9f4 	bl	8000de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009fc:	bf00      	nop
 80009fe:	37b0      	adds	r7, #176	; 0xb0
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40004400 	.word	0x40004400
 8000a08:	40021000 	.word	0x40021000

08000a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <NMI_Handler+0x4>

08000a12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a16:	e7fe      	b.n	8000a16 <HardFault_Handler+0x4>

08000a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <MemManage_Handler+0x4>

08000a1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a22:	e7fe      	b.n	8000a22 <BusFault_Handler+0x4>

08000a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <UsageFault_Handler+0x4>

08000a2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a58:	f000 f89a 	bl	8000b90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <SystemInit+0x20>)
 8000a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a6a:	4a05      	ldr	r2, [pc, #20]	; (8000a80 <SystemInit+0x20>)
 8000a6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000abc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a88:	f7ff ffea 	bl	8000a60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a8c:	480c      	ldr	r0, [pc, #48]	; (8000ac0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a8e:	490d      	ldr	r1, [pc, #52]	; (8000ac4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a90:	4a0d      	ldr	r2, [pc, #52]	; (8000ac8 <LoopForever+0xe>)
  movs r3, #0
 8000a92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a94:	e002      	b.n	8000a9c <LoopCopyDataInit>

08000a96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a9a:	3304      	adds	r3, #4

08000a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aa0:	d3f9      	bcc.n	8000a96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aa2:	4a0a      	ldr	r2, [pc, #40]	; (8000acc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000aa4:	4c0a      	ldr	r4, [pc, #40]	; (8000ad0 <LoopForever+0x16>)
  movs r3, #0
 8000aa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa8:	e001      	b.n	8000aae <LoopFillZerobss>

08000aaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aac:	3204      	adds	r2, #4

08000aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ab0:	d3fb      	bcc.n	8000aaa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ab2:	f003 f95d 	bl	8003d70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ab6:	f7ff fd09 	bl	80004cc <main>

08000aba <LoopForever>:

LoopForever:
    b LoopForever
 8000aba:	e7fe      	b.n	8000aba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000abc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ac0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ac8:	08003e38 	.word	0x08003e38
  ldr r2, =_sbss
 8000acc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ad0:	20000114 	.word	0x20000114

08000ad4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ad4:	e7fe      	b.n	8000ad4 <ADC1_2_IRQHandler>
	...

08000ad8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <HAL_Init+0x3c>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a0b      	ldr	r2, [pc, #44]	; (8000b14 <HAL_Init+0x3c>)
 8000ae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aec:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aee:	2003      	movs	r0, #3
 8000af0:	f000 f944 	bl	8000d7c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000af4:	2000      	movs	r0, #0
 8000af6:	f000 f80f 	bl	8000b18 <HAL_InitTick>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d002      	beq.n	8000b06 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b00:	2301      	movs	r3, #1
 8000b02:	71fb      	strb	r3, [r7, #7]
 8000b04:	e001      	b.n	8000b0a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b06:	f7ff fe8d 	bl	8000824 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40022000 	.word	0x40022000

08000b18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b20:	2300      	movs	r3, #0
 8000b22:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b24:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <HAL_InitTick+0x6c>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d023      	beq.n	8000b74 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b2c:	4b16      	ldr	r3, [pc, #88]	; (8000b88 <HAL_InitTick+0x70>)
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <HAL_InitTick+0x6c>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	4619      	mov	r1, r3
 8000b36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b42:	4618      	mov	r0, r3
 8000b44:	f000 f941 	bl	8000dca <HAL_SYSTICK_Config>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d10f      	bne.n	8000b6e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2b0f      	cmp	r3, #15
 8000b52:	d809      	bhi.n	8000b68 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b54:	2200      	movs	r2, #0
 8000b56:	6879      	ldr	r1, [r7, #4]
 8000b58:	f04f 30ff 	mov.w	r0, #4294967295
 8000b5c:	f000 f919 	bl	8000d92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b60:	4a0a      	ldr	r2, [pc, #40]	; (8000b8c <HAL_InitTick+0x74>)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6013      	str	r3, [r2, #0]
 8000b66:	e007      	b.n	8000b78 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	73fb      	strb	r3, [r7, #15]
 8000b6c:	e004      	b.n	8000b78 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	73fb      	strb	r3, [r7, #15]
 8000b72:	e001      	b.n	8000b78 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b74:	2301      	movs	r3, #1
 8000b76:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3710      	adds	r7, #16
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20000008 	.word	0x20000008
 8000b88:	20000000 	.word	0x20000000
 8000b8c:	20000004 	.word	0x20000004

08000b90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b94:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_IncTick+0x20>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	461a      	mov	r2, r3
 8000b9a:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <HAL_IncTick+0x24>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	4a04      	ldr	r2, [pc, #16]	; (8000bb4 <HAL_IncTick+0x24>)
 8000ba2:	6013      	str	r3, [r2, #0]
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	20000008 	.word	0x20000008
 8000bb4:	20000110 	.word	0x20000110

08000bb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  return uwTick;
 8000bbc:	4b03      	ldr	r3, [pc, #12]	; (8000bcc <HAL_GetTick+0x14>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	20000110 	.word	0x20000110

08000bd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bd8:	f7ff ffee 	bl	8000bb8 <HAL_GetTick>
 8000bdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000be8:	d005      	beq.n	8000bf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000bea:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <HAL_Delay+0x44>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	461a      	mov	r2, r3
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bf6:	bf00      	nop
 8000bf8:	f7ff ffde 	bl	8000bb8 <HAL_GetTick>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d8f7      	bhi.n	8000bf8 <HAL_Delay+0x28>
  {
  }
}
 8000c08:	bf00      	nop
 8000c0a:	bf00      	nop
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000008 	.word	0x20000008

08000c18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f003 0307 	and.w	r3, r3, #7
 8000c26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c28:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <__NVIC_SetPriorityGrouping+0x44>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c2e:	68ba      	ldr	r2, [r7, #8]
 8000c30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c34:	4013      	ands	r3, r2
 8000c36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c4a:	4a04      	ldr	r2, [pc, #16]	; (8000c5c <__NVIC_SetPriorityGrouping+0x44>)
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	60d3      	str	r3, [r2, #12]
}
 8000c50:	bf00      	nop
 8000c52:	3714      	adds	r7, #20
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c64:	4b04      	ldr	r3, [pc, #16]	; (8000c78 <__NVIC_GetPriorityGrouping+0x18>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	0a1b      	lsrs	r3, r3, #8
 8000c6a:	f003 0307 	and.w	r3, r3, #7
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	6039      	str	r1, [r7, #0]
 8000c86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	db0a      	blt.n	8000ca6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	b2da      	uxtb	r2, r3
 8000c94:	490c      	ldr	r1, [pc, #48]	; (8000cc8 <__NVIC_SetPriority+0x4c>)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	0112      	lsls	r2, r2, #4
 8000c9c:	b2d2      	uxtb	r2, r2
 8000c9e:	440b      	add	r3, r1
 8000ca0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ca4:	e00a      	b.n	8000cbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	4908      	ldr	r1, [pc, #32]	; (8000ccc <__NVIC_SetPriority+0x50>)
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	f003 030f 	and.w	r3, r3, #15
 8000cb2:	3b04      	subs	r3, #4
 8000cb4:	0112      	lsls	r2, r2, #4
 8000cb6:	b2d2      	uxtb	r2, r2
 8000cb8:	440b      	add	r3, r1
 8000cba:	761a      	strb	r2, [r3, #24]
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000e100 	.word	0xe000e100
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b089      	sub	sp, #36	; 0x24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	f1c3 0307 	rsb	r3, r3, #7
 8000cea:	2b04      	cmp	r3, #4
 8000cec:	bf28      	it	cs
 8000cee:	2304      	movcs	r3, #4
 8000cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	3304      	adds	r3, #4
 8000cf6:	2b06      	cmp	r3, #6
 8000cf8:	d902      	bls.n	8000d00 <NVIC_EncodePriority+0x30>
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	3b03      	subs	r3, #3
 8000cfe:	e000      	b.n	8000d02 <NVIC_EncodePriority+0x32>
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	f04f 32ff 	mov.w	r2, #4294967295
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43da      	mvns	r2, r3
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	401a      	ands	r2, r3
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d18:	f04f 31ff 	mov.w	r1, #4294967295
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d22:	43d9      	mvns	r1, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d28:	4313      	orrs	r3, r2
         );
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3724      	adds	r7, #36	; 0x24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
	...

08000d38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d48:	d301      	bcc.n	8000d4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e00f      	b.n	8000d6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d4e:	4a0a      	ldr	r2, [pc, #40]	; (8000d78 <SysTick_Config+0x40>)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	3b01      	subs	r3, #1
 8000d54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d56:	210f      	movs	r1, #15
 8000d58:	f04f 30ff 	mov.w	r0, #4294967295
 8000d5c:	f7ff ff8e 	bl	8000c7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d60:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <SysTick_Config+0x40>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d66:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <SysTick_Config+0x40>)
 8000d68:	2207      	movs	r2, #7
 8000d6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d6c:	2300      	movs	r3, #0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	e000e010 	.word	0xe000e010

08000d7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f7ff ff47 	bl	8000c18 <__NVIC_SetPriorityGrouping>
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b086      	sub	sp, #24
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	4603      	mov	r3, r0
 8000d9a:	60b9      	str	r1, [r7, #8]
 8000d9c:	607a      	str	r2, [r7, #4]
 8000d9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000da4:	f7ff ff5c 	bl	8000c60 <__NVIC_GetPriorityGrouping>
 8000da8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	68b9      	ldr	r1, [r7, #8]
 8000dae:	6978      	ldr	r0, [r7, #20]
 8000db0:	f7ff ff8e 	bl	8000cd0 <NVIC_EncodePriority>
 8000db4:	4602      	mov	r2, r0
 8000db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dba:	4611      	mov	r1, r2
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff ff5d 	bl	8000c7c <__NVIC_SetPriority>
}
 8000dc2:	bf00      	nop
 8000dc4:	3718      	adds	r7, #24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b082      	sub	sp, #8
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f7ff ffb0 	bl	8000d38 <SysTick_Config>
 8000dd8:	4603      	mov	r3, r0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b087      	sub	sp, #28
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000df2:	e17f      	b.n	80010f4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	2101      	movs	r1, #1
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8000e00:	4013      	ands	r3, r2
 8000e02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	f000 8171 	beq.w	80010ee <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f003 0303 	and.w	r3, r3, #3
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d005      	beq.n	8000e24 <HAL_GPIO_Init+0x40>
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f003 0303 	and.w	r3, r3, #3
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d130      	bne.n	8000e86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	2203      	movs	r2, #3
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	68da      	ldr	r2, [r3, #12]
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43db      	mvns	r3, r3
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	4013      	ands	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	091b      	lsrs	r3, r3, #4
 8000e70:	f003 0201 	and.w	r2, r3, #1
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f003 0303 	and.w	r3, r3, #3
 8000e8e:	2b03      	cmp	r3, #3
 8000e90:	d118      	bne.n	8000ec4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000e98:	2201      	movs	r2, #1
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	08db      	lsrs	r3, r3, #3
 8000eae:	f003 0201 	and.w	r2, r3, #1
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f003 0303 	and.w	r3, r3, #3
 8000ecc:	2b03      	cmp	r3, #3
 8000ece:	d017      	beq.n	8000f00 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	2203      	movs	r2, #3
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	689a      	ldr	r2, [r3, #8]
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f003 0303 	and.w	r3, r3, #3
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	d123      	bne.n	8000f54 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	08da      	lsrs	r2, r3, #3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3208      	adds	r2, #8
 8000f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f18:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	f003 0307 	and.w	r3, r3, #7
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	220f      	movs	r2, #15
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	691a      	ldr	r2, [r3, #16]
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	08da      	lsrs	r2, r3, #3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	3208      	adds	r2, #8
 8000f4e:	6939      	ldr	r1, [r7, #16]
 8000f50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	2203      	movs	r2, #3
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f003 0203 	and.w	r2, r3, #3
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	f000 80ac 	beq.w	80010ee <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f96:	4b5f      	ldr	r3, [pc, #380]	; (8001114 <HAL_GPIO_Init+0x330>)
 8000f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f9a:	4a5e      	ldr	r2, [pc, #376]	; (8001114 <HAL_GPIO_Init+0x330>)
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	6613      	str	r3, [r2, #96]	; 0x60
 8000fa2:	4b5c      	ldr	r3, [pc, #368]	; (8001114 <HAL_GPIO_Init+0x330>)
 8000fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	60bb      	str	r3, [r7, #8]
 8000fac:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fae:	4a5a      	ldr	r2, [pc, #360]	; (8001118 <HAL_GPIO_Init+0x334>)
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	089b      	lsrs	r3, r3, #2
 8000fb4:	3302      	adds	r3, #2
 8000fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fba:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	f003 0303 	and.w	r3, r3, #3
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	220f      	movs	r2, #15
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fd8:	d025      	beq.n	8001026 <HAL_GPIO_Init+0x242>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a4f      	ldr	r2, [pc, #316]	; (800111c <HAL_GPIO_Init+0x338>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d01f      	beq.n	8001022 <HAL_GPIO_Init+0x23e>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a4e      	ldr	r2, [pc, #312]	; (8001120 <HAL_GPIO_Init+0x33c>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d019      	beq.n	800101e <HAL_GPIO_Init+0x23a>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a4d      	ldr	r2, [pc, #308]	; (8001124 <HAL_GPIO_Init+0x340>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d013      	beq.n	800101a <HAL_GPIO_Init+0x236>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a4c      	ldr	r2, [pc, #304]	; (8001128 <HAL_GPIO_Init+0x344>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d00d      	beq.n	8001016 <HAL_GPIO_Init+0x232>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a4b      	ldr	r2, [pc, #300]	; (800112c <HAL_GPIO_Init+0x348>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d007      	beq.n	8001012 <HAL_GPIO_Init+0x22e>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a4a      	ldr	r2, [pc, #296]	; (8001130 <HAL_GPIO_Init+0x34c>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d101      	bne.n	800100e <HAL_GPIO_Init+0x22a>
 800100a:	2306      	movs	r3, #6
 800100c:	e00c      	b.n	8001028 <HAL_GPIO_Init+0x244>
 800100e:	2307      	movs	r3, #7
 8001010:	e00a      	b.n	8001028 <HAL_GPIO_Init+0x244>
 8001012:	2305      	movs	r3, #5
 8001014:	e008      	b.n	8001028 <HAL_GPIO_Init+0x244>
 8001016:	2304      	movs	r3, #4
 8001018:	e006      	b.n	8001028 <HAL_GPIO_Init+0x244>
 800101a:	2303      	movs	r3, #3
 800101c:	e004      	b.n	8001028 <HAL_GPIO_Init+0x244>
 800101e:	2302      	movs	r3, #2
 8001020:	e002      	b.n	8001028 <HAL_GPIO_Init+0x244>
 8001022:	2301      	movs	r3, #1
 8001024:	e000      	b.n	8001028 <HAL_GPIO_Init+0x244>
 8001026:	2300      	movs	r3, #0
 8001028:	697a      	ldr	r2, [r7, #20]
 800102a:	f002 0203 	and.w	r2, r2, #3
 800102e:	0092      	lsls	r2, r2, #2
 8001030:	4093      	lsls	r3, r2
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	4313      	orrs	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001038:	4937      	ldr	r1, [pc, #220]	; (8001118 <HAL_GPIO_Init+0x334>)
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	089b      	lsrs	r3, r3, #2
 800103e:	3302      	adds	r3, #2
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001046:	4b3b      	ldr	r3, [pc, #236]	; (8001134 <HAL_GPIO_Init+0x350>)
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	43db      	mvns	r3, r3
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	4013      	ands	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d003      	beq.n	800106a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	4313      	orrs	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800106a:	4a32      	ldr	r2, [pc, #200]	; (8001134 <HAL_GPIO_Init+0x350>)
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001070:	4b30      	ldr	r3, [pc, #192]	; (8001134 <HAL_GPIO_Init+0x350>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	43db      	mvns	r3, r3
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	4013      	ands	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d003      	beq.n	8001094 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	4313      	orrs	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001094:	4a27      	ldr	r2, [pc, #156]	; (8001134 <HAL_GPIO_Init+0x350>)
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800109a:	4b26      	ldr	r3, [pc, #152]	; (8001134 <HAL_GPIO_Init+0x350>)
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	43db      	mvns	r3, r3
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	4013      	ands	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d003      	beq.n	80010be <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010be:	4a1d      	ldr	r2, [pc, #116]	; (8001134 <HAL_GPIO_Init+0x350>)
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80010c4:	4b1b      	ldr	r3, [pc, #108]	; (8001134 <HAL_GPIO_Init+0x350>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	43db      	mvns	r3, r3
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	4013      	ands	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d003      	beq.n	80010e8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010e8:	4a12      	ldr	r2, [pc, #72]	; (8001134 <HAL_GPIO_Init+0x350>)
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	3301      	adds	r3, #1
 80010f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	fa22 f303 	lsr.w	r3, r2, r3
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f47f ae78 	bne.w	8000df4 <HAL_GPIO_Init+0x10>
  }
}
 8001104:	bf00      	nop
 8001106:	bf00      	nop
 8001108:	371c      	adds	r7, #28
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	40021000 	.word	0x40021000
 8001118:	40010000 	.word	0x40010000
 800111c:	48000400 	.word	0x48000400
 8001120:	48000800 	.word	0x48000800
 8001124:	48000c00 	.word	0x48000c00
 8001128:	48001000 	.word	0x48001000
 800112c:	48001400 	.word	0x48001400
 8001130:	48001800 	.word	0x48001800
 8001134:	40010400 	.word	0x40010400

08001138 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	460b      	mov	r3, r1
 8001142:	807b      	strh	r3, [r7, #2]
 8001144:	4613      	mov	r3, r2
 8001146:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001148:	787b      	ldrb	r3, [r7, #1]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d003      	beq.n	8001156 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800114e:	887a      	ldrh	r2, [r7, #2]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001154:	e002      	b.n	800115c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001156:	887a      	ldrh	r2, [r7, #2]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800116c:	4b04      	ldr	r3, [pc, #16]	; (8001180 <HAL_PWREx_GetVoltageRange+0x18>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001174:	4618      	mov	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	40007000 	.word	0x40007000

08001184 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001192:	d130      	bne.n	80011f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001194:	4b23      	ldr	r3, [pc, #140]	; (8001224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800119c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011a0:	d038      	beq.n	8001214 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011a2:	4b20      	ldr	r3, [pc, #128]	; (8001224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011aa:	4a1e      	ldr	r2, [pc, #120]	; (8001224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011b2:	4b1d      	ldr	r3, [pc, #116]	; (8001228 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2232      	movs	r2, #50	; 0x32
 80011b8:	fb02 f303 	mul.w	r3, r2, r3
 80011bc:	4a1b      	ldr	r2, [pc, #108]	; (800122c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80011be:	fba2 2303 	umull	r2, r3, r2, r3
 80011c2:	0c9b      	lsrs	r3, r3, #18
 80011c4:	3301      	adds	r3, #1
 80011c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011c8:	e002      	b.n	80011d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	3b01      	subs	r3, #1
 80011ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011d0:	4b14      	ldr	r3, [pc, #80]	; (8001224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011d2:	695b      	ldr	r3, [r3, #20]
 80011d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011dc:	d102      	bne.n	80011e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d1f2      	bne.n	80011ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011e4:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011e6:	695b      	ldr	r3, [r3, #20]
 80011e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011f0:	d110      	bne.n	8001214 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e00f      	b.n	8001216 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80011f6:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001202:	d007      	beq.n	8001214 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001204:	4b07      	ldr	r3, [pc, #28]	; (8001224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800120c:	4a05      	ldr	r2, [pc, #20]	; (8001224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800120e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001212:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	3714      	adds	r7, #20
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	40007000 	.word	0x40007000
 8001228:	20000000 	.word	0x20000000
 800122c:	431bde83 	.word	0x431bde83

08001230 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d101      	bne.n	8001242 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e3ca      	b.n	80019d8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001242:	4b97      	ldr	r3, [pc, #604]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	f003 030c 	and.w	r3, r3, #12
 800124a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800124c:	4b94      	ldr	r3, [pc, #592]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	f003 0303 	and.w	r3, r3, #3
 8001254:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0310 	and.w	r3, r3, #16
 800125e:	2b00      	cmp	r3, #0
 8001260:	f000 80e4 	beq.w	800142c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d007      	beq.n	800127a <HAL_RCC_OscConfig+0x4a>
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	2b0c      	cmp	r3, #12
 800126e:	f040 808b 	bne.w	8001388 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	2b01      	cmp	r3, #1
 8001276:	f040 8087 	bne.w	8001388 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800127a:	4b89      	ldr	r3, [pc, #548]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d005      	beq.n	8001292 <HAL_RCC_OscConfig+0x62>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	699b      	ldr	r3, [r3, #24]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d101      	bne.n	8001292 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e3a2      	b.n	80019d8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6a1a      	ldr	r2, [r3, #32]
 8001296:	4b82      	ldr	r3, [pc, #520]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0308 	and.w	r3, r3, #8
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d004      	beq.n	80012ac <HAL_RCC_OscConfig+0x7c>
 80012a2:	4b7f      	ldr	r3, [pc, #508]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012aa:	e005      	b.n	80012b8 <HAL_RCC_OscConfig+0x88>
 80012ac:	4b7c      	ldr	r3, [pc, #496]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 80012ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012b2:	091b      	lsrs	r3, r3, #4
 80012b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d223      	bcs.n	8001304 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6a1b      	ldr	r3, [r3, #32]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f000 fd55 	bl	8001d70 <RCC_SetFlashLatencyFromMSIRange>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e383      	b.n	80019d8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012d0:	4b73      	ldr	r3, [pc, #460]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a72      	ldr	r2, [pc, #456]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 80012d6:	f043 0308 	orr.w	r3, r3, #8
 80012da:	6013      	str	r3, [r2, #0]
 80012dc:	4b70      	ldr	r3, [pc, #448]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6a1b      	ldr	r3, [r3, #32]
 80012e8:	496d      	ldr	r1, [pc, #436]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 80012ea:	4313      	orrs	r3, r2
 80012ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012ee:	4b6c      	ldr	r3, [pc, #432]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	021b      	lsls	r3, r3, #8
 80012fc:	4968      	ldr	r1, [pc, #416]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 80012fe:	4313      	orrs	r3, r2
 8001300:	604b      	str	r3, [r1, #4]
 8001302:	e025      	b.n	8001350 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001304:	4b66      	ldr	r3, [pc, #408]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a65      	ldr	r2, [pc, #404]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 800130a:	f043 0308 	orr.w	r3, r3, #8
 800130e:	6013      	str	r3, [r2, #0]
 8001310:	4b63      	ldr	r3, [pc, #396]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6a1b      	ldr	r3, [r3, #32]
 800131c:	4960      	ldr	r1, [pc, #384]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 800131e:	4313      	orrs	r3, r2
 8001320:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001322:	4b5f      	ldr	r3, [pc, #380]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	021b      	lsls	r3, r3, #8
 8001330:	495b      	ldr	r1, [pc, #364]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 8001332:	4313      	orrs	r3, r2
 8001334:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d109      	bne.n	8001350 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6a1b      	ldr	r3, [r3, #32]
 8001340:	4618      	mov	r0, r3
 8001342:	f000 fd15 	bl	8001d70 <RCC_SetFlashLatencyFromMSIRange>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e343      	b.n	80019d8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001350:	f000 fc4a 	bl	8001be8 <HAL_RCC_GetSysClockFreq>
 8001354:	4602      	mov	r2, r0
 8001356:	4b52      	ldr	r3, [pc, #328]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	091b      	lsrs	r3, r3, #4
 800135c:	f003 030f 	and.w	r3, r3, #15
 8001360:	4950      	ldr	r1, [pc, #320]	; (80014a4 <HAL_RCC_OscConfig+0x274>)
 8001362:	5ccb      	ldrb	r3, [r1, r3]
 8001364:	f003 031f 	and.w	r3, r3, #31
 8001368:	fa22 f303 	lsr.w	r3, r2, r3
 800136c:	4a4e      	ldr	r2, [pc, #312]	; (80014a8 <HAL_RCC_OscConfig+0x278>)
 800136e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001370:	4b4e      	ldr	r3, [pc, #312]	; (80014ac <HAL_RCC_OscConfig+0x27c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fbcf 	bl	8000b18 <HAL_InitTick>
 800137a:	4603      	mov	r3, r0
 800137c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800137e:	7bfb      	ldrb	r3, [r7, #15]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d052      	beq.n	800142a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001384:	7bfb      	ldrb	r3, [r7, #15]
 8001386:	e327      	b.n	80019d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d032      	beq.n	80013f6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001390:	4b43      	ldr	r3, [pc, #268]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a42      	ldr	r2, [pc, #264]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 8001396:	f043 0301 	orr.w	r3, r3, #1
 800139a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800139c:	f7ff fc0c 	bl	8000bb8 <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013a4:	f7ff fc08 	bl	8000bb8 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e310      	b.n	80019d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013b6:	4b3a      	ldr	r3, [pc, #232]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d0f0      	beq.n	80013a4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013c2:	4b37      	ldr	r3, [pc, #220]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a36      	ldr	r2, [pc, #216]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 80013c8:	f043 0308 	orr.w	r3, r3, #8
 80013cc:	6013      	str	r3, [r2, #0]
 80013ce:	4b34      	ldr	r3, [pc, #208]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6a1b      	ldr	r3, [r3, #32]
 80013da:	4931      	ldr	r1, [pc, #196]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 80013dc:	4313      	orrs	r3, r2
 80013de:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013e0:	4b2f      	ldr	r3, [pc, #188]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	69db      	ldr	r3, [r3, #28]
 80013ec:	021b      	lsls	r3, r3, #8
 80013ee:	492c      	ldr	r1, [pc, #176]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 80013f0:	4313      	orrs	r3, r2
 80013f2:	604b      	str	r3, [r1, #4]
 80013f4:	e01a      	b.n	800142c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013f6:	4b2a      	ldr	r3, [pc, #168]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a29      	ldr	r2, [pc, #164]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 80013fc:	f023 0301 	bic.w	r3, r3, #1
 8001400:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001402:	f7ff fbd9 	bl	8000bb8 <HAL_GetTick>
 8001406:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001408:	e008      	b.n	800141c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800140a:	f7ff fbd5 	bl	8000bb8 <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d901      	bls.n	800141c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e2dd      	b.n	80019d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800141c:	4b20      	ldr	r3, [pc, #128]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1f0      	bne.n	800140a <HAL_RCC_OscConfig+0x1da>
 8001428:	e000      	b.n	800142c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800142a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0301 	and.w	r3, r3, #1
 8001434:	2b00      	cmp	r3, #0
 8001436:	d074      	beq.n	8001522 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	2b08      	cmp	r3, #8
 800143c:	d005      	beq.n	800144a <HAL_RCC_OscConfig+0x21a>
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	2b0c      	cmp	r3, #12
 8001442:	d10e      	bne.n	8001462 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	2b03      	cmp	r3, #3
 8001448:	d10b      	bne.n	8001462 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800144a:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d064      	beq.n	8001520 <HAL_RCC_OscConfig+0x2f0>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d160      	bne.n	8001520 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e2ba      	b.n	80019d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800146a:	d106      	bne.n	800147a <HAL_RCC_OscConfig+0x24a>
 800146c:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a0b      	ldr	r2, [pc, #44]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 8001472:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001476:	6013      	str	r3, [r2, #0]
 8001478:	e026      	b.n	80014c8 <HAL_RCC_OscConfig+0x298>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001482:	d115      	bne.n	80014b0 <HAL_RCC_OscConfig+0x280>
 8001484:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a05      	ldr	r2, [pc, #20]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 800148a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800148e:	6013      	str	r3, [r2, #0]
 8001490:	4b03      	ldr	r3, [pc, #12]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a02      	ldr	r2, [pc, #8]	; (80014a0 <HAL_RCC_OscConfig+0x270>)
 8001496:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800149a:	6013      	str	r3, [r2, #0]
 800149c:	e014      	b.n	80014c8 <HAL_RCC_OscConfig+0x298>
 800149e:	bf00      	nop
 80014a0:	40021000 	.word	0x40021000
 80014a4:	08003de0 	.word	0x08003de0
 80014a8:	20000000 	.word	0x20000000
 80014ac:	20000004 	.word	0x20000004
 80014b0:	4ba0      	ldr	r3, [pc, #640]	; (8001734 <HAL_RCC_OscConfig+0x504>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a9f      	ldr	r2, [pc, #636]	; (8001734 <HAL_RCC_OscConfig+0x504>)
 80014b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ba:	6013      	str	r3, [r2, #0]
 80014bc:	4b9d      	ldr	r3, [pc, #628]	; (8001734 <HAL_RCC_OscConfig+0x504>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a9c      	ldr	r2, [pc, #624]	; (8001734 <HAL_RCC_OscConfig+0x504>)
 80014c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d013      	beq.n	80014f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d0:	f7ff fb72 	bl	8000bb8 <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014d8:	f7ff fb6e 	bl	8000bb8 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b64      	cmp	r3, #100	; 0x64
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e276      	b.n	80019d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014ea:	4b92      	ldr	r3, [pc, #584]	; (8001734 <HAL_RCC_OscConfig+0x504>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d0f0      	beq.n	80014d8 <HAL_RCC_OscConfig+0x2a8>
 80014f6:	e014      	b.n	8001522 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f8:	f7ff fb5e 	bl	8000bb8 <HAL_GetTick>
 80014fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014fe:	e008      	b.n	8001512 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001500:	f7ff fb5a 	bl	8000bb8 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b64      	cmp	r3, #100	; 0x64
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e262      	b.n	80019d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001512:	4b88      	ldr	r3, [pc, #544]	; (8001734 <HAL_RCC_OscConfig+0x504>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1f0      	bne.n	8001500 <HAL_RCC_OscConfig+0x2d0>
 800151e:	e000      	b.n	8001522 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001520:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d060      	beq.n	80015f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	2b04      	cmp	r3, #4
 8001532:	d005      	beq.n	8001540 <HAL_RCC_OscConfig+0x310>
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	2b0c      	cmp	r3, #12
 8001538:	d119      	bne.n	800156e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	2b02      	cmp	r3, #2
 800153e:	d116      	bne.n	800156e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001540:	4b7c      	ldr	r3, [pc, #496]	; (8001734 <HAL_RCC_OscConfig+0x504>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001548:	2b00      	cmp	r3, #0
 800154a:	d005      	beq.n	8001558 <HAL_RCC_OscConfig+0x328>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d101      	bne.n	8001558 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e23f      	b.n	80019d8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001558:	4b76      	ldr	r3, [pc, #472]	; (8001734 <HAL_RCC_OscConfig+0x504>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	691b      	ldr	r3, [r3, #16]
 8001564:	061b      	lsls	r3, r3, #24
 8001566:	4973      	ldr	r1, [pc, #460]	; (8001734 <HAL_RCC_OscConfig+0x504>)
 8001568:	4313      	orrs	r3, r2
 800156a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800156c:	e040      	b.n	80015f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d023      	beq.n	80015be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001576:	4b6f      	ldr	r3, [pc, #444]	; (8001734 <HAL_RCC_OscConfig+0x504>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a6e      	ldr	r2, [pc, #440]	; (8001734 <HAL_RCC_OscConfig+0x504>)
 800157c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001580:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001582:	f7ff fb19 	bl	8000bb8 <HAL_GetTick>
 8001586:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800158a:	f7ff fb15 	bl	8000bb8 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e21d      	b.n	80019d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800159c:	4b65      	ldr	r3, [pc, #404]	; (8001734 <HAL_RCC_OscConfig+0x504>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d0f0      	beq.n	800158a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a8:	4b62      	ldr	r3, [pc, #392]	; (8001734 <HAL_RCC_OscConfig+0x504>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	691b      	ldr	r3, [r3, #16]
 80015b4:	061b      	lsls	r3, r3, #24
 80015b6:	495f      	ldr	r1, [pc, #380]	; (8001734 <HAL_RCC_OscConfig+0x504>)
 80015b8:	4313      	orrs	r3, r2
 80015ba:	604b      	str	r3, [r1, #4]
 80015bc:	e018      	b.n	80015f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015be:	4b5d      	ldr	r3, [pc, #372]	; (8001734 <HAL_RCC_OscConfig+0x504>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a5c      	ldr	r2, [pc, #368]	; (8001734 <HAL_RCC_OscConfig+0x504>)
 80015c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ca:	f7ff faf5 	bl	8000bb8 <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015d0:	e008      	b.n	80015e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015d2:	f7ff faf1 	bl	8000bb8 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e1f9      	b.n	80019d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015e4:	4b53      	ldr	r3, [pc, #332]	; (8001734 <HAL_RCC_OscConfig+0x504>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1f0      	bne.n	80015d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0308 	and.w	r3, r3, #8
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d03c      	beq.n	8001676 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	695b      	ldr	r3, [r3, #20]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d01c      	beq.n	800163e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001604:	4b4b      	ldr	r3, [pc, #300]	; (8001734 <HAL_RCC_OscConfig+0x504>)
 8001606:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800160a:	4a4a      	ldr	r2, [pc, #296]	; (8001734 <HAL_RCC_OscConfig+0x504>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001614:	f7ff fad0 	bl	8000bb8 <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800161c:	f7ff facc 	bl	8000bb8 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e1d4      	b.n	80019d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800162e:	4b41      	ldr	r3, [pc, #260]	; (8001734 <HAL_RCC_OscConfig+0x504>)
 8001630:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001634:	f003 0302 	and.w	r3, r3, #2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d0ef      	beq.n	800161c <HAL_RCC_OscConfig+0x3ec>
 800163c:	e01b      	b.n	8001676 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800163e:	4b3d      	ldr	r3, [pc, #244]	; (8001734 <HAL_RCC_OscConfig+0x504>)
 8001640:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001644:	4a3b      	ldr	r2, [pc, #236]	; (8001734 <HAL_RCC_OscConfig+0x504>)
 8001646:	f023 0301 	bic.w	r3, r3, #1
 800164a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800164e:	f7ff fab3 	bl	8000bb8 <HAL_GetTick>
 8001652:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001654:	e008      	b.n	8001668 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001656:	f7ff faaf 	bl	8000bb8 <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d901      	bls.n	8001668 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e1b7      	b.n	80019d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001668:	4b32      	ldr	r3, [pc, #200]	; (8001734 <HAL_RCC_OscConfig+0x504>)
 800166a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1ef      	bne.n	8001656 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0304 	and.w	r3, r3, #4
 800167e:	2b00      	cmp	r3, #0
 8001680:	f000 80a6 	beq.w	80017d0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001684:	2300      	movs	r3, #0
 8001686:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001688:	4b2a      	ldr	r3, [pc, #168]	; (8001734 <HAL_RCC_OscConfig+0x504>)
 800168a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d10d      	bne.n	80016b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001694:	4b27      	ldr	r3, [pc, #156]	; (8001734 <HAL_RCC_OscConfig+0x504>)
 8001696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001698:	4a26      	ldr	r2, [pc, #152]	; (8001734 <HAL_RCC_OscConfig+0x504>)
 800169a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800169e:	6593      	str	r3, [r2, #88]	; 0x58
 80016a0:	4b24      	ldr	r3, [pc, #144]	; (8001734 <HAL_RCC_OscConfig+0x504>)
 80016a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a8:	60bb      	str	r3, [r7, #8]
 80016aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016ac:	2301      	movs	r3, #1
 80016ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016b0:	4b21      	ldr	r3, [pc, #132]	; (8001738 <HAL_RCC_OscConfig+0x508>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d118      	bne.n	80016ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016bc:	4b1e      	ldr	r3, [pc, #120]	; (8001738 <HAL_RCC_OscConfig+0x508>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a1d      	ldr	r2, [pc, #116]	; (8001738 <HAL_RCC_OscConfig+0x508>)
 80016c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016c8:	f7ff fa76 	bl	8000bb8 <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016ce:	e008      	b.n	80016e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016d0:	f7ff fa72 	bl	8000bb8 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e17a      	b.n	80019d8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016e2:	4b15      	ldr	r3, [pc, #84]	; (8001738 <HAL_RCC_OscConfig+0x508>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d0f0      	beq.n	80016d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d108      	bne.n	8001708 <HAL_RCC_OscConfig+0x4d8>
 80016f6:	4b0f      	ldr	r3, [pc, #60]	; (8001734 <HAL_RCC_OscConfig+0x504>)
 80016f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016fc:	4a0d      	ldr	r2, [pc, #52]	; (8001734 <HAL_RCC_OscConfig+0x504>)
 80016fe:	f043 0301 	orr.w	r3, r3, #1
 8001702:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001706:	e029      	b.n	800175c <HAL_RCC_OscConfig+0x52c>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	2b05      	cmp	r3, #5
 800170e:	d115      	bne.n	800173c <HAL_RCC_OscConfig+0x50c>
 8001710:	4b08      	ldr	r3, [pc, #32]	; (8001734 <HAL_RCC_OscConfig+0x504>)
 8001712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001716:	4a07      	ldr	r2, [pc, #28]	; (8001734 <HAL_RCC_OscConfig+0x504>)
 8001718:	f043 0304 	orr.w	r3, r3, #4
 800171c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001720:	4b04      	ldr	r3, [pc, #16]	; (8001734 <HAL_RCC_OscConfig+0x504>)
 8001722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001726:	4a03      	ldr	r2, [pc, #12]	; (8001734 <HAL_RCC_OscConfig+0x504>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001730:	e014      	b.n	800175c <HAL_RCC_OscConfig+0x52c>
 8001732:	bf00      	nop
 8001734:	40021000 	.word	0x40021000
 8001738:	40007000 	.word	0x40007000
 800173c:	4b9c      	ldr	r3, [pc, #624]	; (80019b0 <HAL_RCC_OscConfig+0x780>)
 800173e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001742:	4a9b      	ldr	r2, [pc, #620]	; (80019b0 <HAL_RCC_OscConfig+0x780>)
 8001744:	f023 0301 	bic.w	r3, r3, #1
 8001748:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800174c:	4b98      	ldr	r3, [pc, #608]	; (80019b0 <HAL_RCC_OscConfig+0x780>)
 800174e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001752:	4a97      	ldr	r2, [pc, #604]	; (80019b0 <HAL_RCC_OscConfig+0x780>)
 8001754:	f023 0304 	bic.w	r3, r3, #4
 8001758:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d016      	beq.n	8001792 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001764:	f7ff fa28 	bl	8000bb8 <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800176a:	e00a      	b.n	8001782 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800176c:	f7ff fa24 	bl	8000bb8 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	f241 3288 	movw	r2, #5000	; 0x1388
 800177a:	4293      	cmp	r3, r2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e12a      	b.n	80019d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001782:	4b8b      	ldr	r3, [pc, #556]	; (80019b0 <HAL_RCC_OscConfig+0x780>)
 8001784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d0ed      	beq.n	800176c <HAL_RCC_OscConfig+0x53c>
 8001790:	e015      	b.n	80017be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001792:	f7ff fa11 	bl	8000bb8 <HAL_GetTick>
 8001796:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001798:	e00a      	b.n	80017b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800179a:	f7ff fa0d 	bl	8000bb8 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e113      	b.n	80019d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017b0:	4b7f      	ldr	r3, [pc, #508]	; (80019b0 <HAL_RCC_OscConfig+0x780>)
 80017b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1ed      	bne.n	800179a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017be:	7ffb      	ldrb	r3, [r7, #31]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d105      	bne.n	80017d0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017c4:	4b7a      	ldr	r3, [pc, #488]	; (80019b0 <HAL_RCC_OscConfig+0x780>)
 80017c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c8:	4a79      	ldr	r2, [pc, #484]	; (80019b0 <HAL_RCC_OscConfig+0x780>)
 80017ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017ce:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f000 80fe 	beq.w	80019d6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017de:	2b02      	cmp	r3, #2
 80017e0:	f040 80d0 	bne.w	8001984 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80017e4:	4b72      	ldr	r3, [pc, #456]	; (80019b0 <HAL_RCC_OscConfig+0x780>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	f003 0203 	and.w	r2, r3, #3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d130      	bne.n	800185a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	3b01      	subs	r3, #1
 8001804:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001806:	429a      	cmp	r2, r3
 8001808:	d127      	bne.n	800185a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001814:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001816:	429a      	cmp	r2, r3
 8001818:	d11f      	bne.n	800185a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001824:	2a07      	cmp	r2, #7
 8001826:	bf14      	ite	ne
 8001828:	2201      	movne	r2, #1
 800182a:	2200      	moveq	r2, #0
 800182c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800182e:	4293      	cmp	r3, r2
 8001830:	d113      	bne.n	800185a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800183c:	085b      	lsrs	r3, r3, #1
 800183e:	3b01      	subs	r3, #1
 8001840:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001842:	429a      	cmp	r2, r3
 8001844:	d109      	bne.n	800185a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001850:	085b      	lsrs	r3, r3, #1
 8001852:	3b01      	subs	r3, #1
 8001854:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001856:	429a      	cmp	r2, r3
 8001858:	d06e      	beq.n	8001938 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	2b0c      	cmp	r3, #12
 800185e:	d069      	beq.n	8001934 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001860:	4b53      	ldr	r3, [pc, #332]	; (80019b0 <HAL_RCC_OscConfig+0x780>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d105      	bne.n	8001878 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800186c:	4b50      	ldr	r3, [pc, #320]	; (80019b0 <HAL_RCC_OscConfig+0x780>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e0ad      	b.n	80019d8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800187c:	4b4c      	ldr	r3, [pc, #304]	; (80019b0 <HAL_RCC_OscConfig+0x780>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a4b      	ldr	r2, [pc, #300]	; (80019b0 <HAL_RCC_OscConfig+0x780>)
 8001882:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001886:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001888:	f7ff f996 	bl	8000bb8 <HAL_GetTick>
 800188c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001890:	f7ff f992 	bl	8000bb8 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b02      	cmp	r3, #2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e09a      	b.n	80019d8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018a2:	4b43      	ldr	r3, [pc, #268]	; (80019b0 <HAL_RCC_OscConfig+0x780>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1f0      	bne.n	8001890 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018ae:	4b40      	ldr	r3, [pc, #256]	; (80019b0 <HAL_RCC_OscConfig+0x780>)
 80018b0:	68da      	ldr	r2, [r3, #12]
 80018b2:	4b40      	ldr	r3, [pc, #256]	; (80019b4 <HAL_RCC_OscConfig+0x784>)
 80018b4:	4013      	ands	r3, r2
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80018be:	3a01      	subs	r2, #1
 80018c0:	0112      	lsls	r2, r2, #4
 80018c2:	4311      	orrs	r1, r2
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80018c8:	0212      	lsls	r2, r2, #8
 80018ca:	4311      	orrs	r1, r2
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80018d0:	0852      	lsrs	r2, r2, #1
 80018d2:	3a01      	subs	r2, #1
 80018d4:	0552      	lsls	r2, r2, #21
 80018d6:	4311      	orrs	r1, r2
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80018dc:	0852      	lsrs	r2, r2, #1
 80018de:	3a01      	subs	r2, #1
 80018e0:	0652      	lsls	r2, r2, #25
 80018e2:	4311      	orrs	r1, r2
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018e8:	0912      	lsrs	r2, r2, #4
 80018ea:	0452      	lsls	r2, r2, #17
 80018ec:	430a      	orrs	r2, r1
 80018ee:	4930      	ldr	r1, [pc, #192]	; (80019b0 <HAL_RCC_OscConfig+0x780>)
 80018f0:	4313      	orrs	r3, r2
 80018f2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80018f4:	4b2e      	ldr	r3, [pc, #184]	; (80019b0 <HAL_RCC_OscConfig+0x780>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a2d      	ldr	r2, [pc, #180]	; (80019b0 <HAL_RCC_OscConfig+0x780>)
 80018fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018fe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001900:	4b2b      	ldr	r3, [pc, #172]	; (80019b0 <HAL_RCC_OscConfig+0x780>)
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	4a2a      	ldr	r2, [pc, #168]	; (80019b0 <HAL_RCC_OscConfig+0x780>)
 8001906:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800190a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800190c:	f7ff f954 	bl	8000bb8 <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001914:	f7ff f950 	bl	8000bb8 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e058      	b.n	80019d8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001926:	4b22      	ldr	r3, [pc, #136]	; (80019b0 <HAL_RCC_OscConfig+0x780>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d0f0      	beq.n	8001914 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001932:	e050      	b.n	80019d6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e04f      	b.n	80019d8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001938:	4b1d      	ldr	r3, [pc, #116]	; (80019b0 <HAL_RCC_OscConfig+0x780>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d148      	bne.n	80019d6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001944:	4b1a      	ldr	r3, [pc, #104]	; (80019b0 <HAL_RCC_OscConfig+0x780>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a19      	ldr	r2, [pc, #100]	; (80019b0 <HAL_RCC_OscConfig+0x780>)
 800194a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800194e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001950:	4b17      	ldr	r3, [pc, #92]	; (80019b0 <HAL_RCC_OscConfig+0x780>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	4a16      	ldr	r2, [pc, #88]	; (80019b0 <HAL_RCC_OscConfig+0x780>)
 8001956:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800195a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800195c:	f7ff f92c 	bl	8000bb8 <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001964:	f7ff f928 	bl	8000bb8 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e030      	b.n	80019d8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001976:	4b0e      	ldr	r3, [pc, #56]	; (80019b0 <HAL_RCC_OscConfig+0x780>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d0f0      	beq.n	8001964 <HAL_RCC_OscConfig+0x734>
 8001982:	e028      	b.n	80019d6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	2b0c      	cmp	r3, #12
 8001988:	d023      	beq.n	80019d2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800198a:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <HAL_RCC_OscConfig+0x780>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a08      	ldr	r2, [pc, #32]	; (80019b0 <HAL_RCC_OscConfig+0x780>)
 8001990:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001994:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001996:	f7ff f90f 	bl	8000bb8 <HAL_GetTick>
 800199a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800199c:	e00c      	b.n	80019b8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800199e:	f7ff f90b 	bl	8000bb8 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d905      	bls.n	80019b8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e013      	b.n	80019d8 <HAL_RCC_OscConfig+0x7a8>
 80019b0:	40021000 	.word	0x40021000
 80019b4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019b8:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <HAL_RCC_OscConfig+0x7b0>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d1ec      	bne.n	800199e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80019c4:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <HAL_RCC_OscConfig+0x7b0>)
 80019c6:	68da      	ldr	r2, [r3, #12]
 80019c8:	4905      	ldr	r1, [pc, #20]	; (80019e0 <HAL_RCC_OscConfig+0x7b0>)
 80019ca:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <HAL_RCC_OscConfig+0x7b4>)
 80019cc:	4013      	ands	r3, r2
 80019ce:	60cb      	str	r3, [r1, #12]
 80019d0:	e001      	b.n	80019d6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e000      	b.n	80019d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3720      	adds	r7, #32
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40021000 	.word	0x40021000
 80019e4:	feeefffc 	.word	0xfeeefffc

080019e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d101      	bne.n	80019fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e0e7      	b.n	8001bcc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019fc:	4b75      	ldr	r3, [pc, #468]	; (8001bd4 <HAL_RCC_ClockConfig+0x1ec>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0307 	and.w	r3, r3, #7
 8001a04:	683a      	ldr	r2, [r7, #0]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d910      	bls.n	8001a2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a0a:	4b72      	ldr	r3, [pc, #456]	; (8001bd4 <HAL_RCC_ClockConfig+0x1ec>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f023 0207 	bic.w	r2, r3, #7
 8001a12:	4970      	ldr	r1, [pc, #448]	; (8001bd4 <HAL_RCC_ClockConfig+0x1ec>)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a1a:	4b6e      	ldr	r3, [pc, #440]	; (8001bd4 <HAL_RCC_ClockConfig+0x1ec>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d001      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e0cf      	b.n	8001bcc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d010      	beq.n	8001a5a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689a      	ldr	r2, [r3, #8]
 8001a3c:	4b66      	ldr	r3, [pc, #408]	; (8001bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d908      	bls.n	8001a5a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a48:	4b63      	ldr	r3, [pc, #396]	; (8001bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	4960      	ldr	r1, [pc, #384]	; (8001bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d04c      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b03      	cmp	r3, #3
 8001a6c:	d107      	bne.n	8001a7e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a6e:	4b5a      	ldr	r3, [pc, #360]	; (8001bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d121      	bne.n	8001abe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e0a6      	b.n	8001bcc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d107      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a86:	4b54      	ldr	r3, [pc, #336]	; (8001bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d115      	bne.n	8001abe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e09a      	b.n	8001bcc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d107      	bne.n	8001aae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a9e:	4b4e      	ldr	r3, [pc, #312]	; (8001bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d109      	bne.n	8001abe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e08e      	b.n	8001bcc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aae:	4b4a      	ldr	r3, [pc, #296]	; (8001bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d101      	bne.n	8001abe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e086      	b.n	8001bcc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001abe:	4b46      	ldr	r3, [pc, #280]	; (8001bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f023 0203 	bic.w	r2, r3, #3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	4943      	ldr	r1, [pc, #268]	; (8001bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001acc:	4313      	orrs	r3, r2
 8001ace:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ad0:	f7ff f872 	bl	8000bb8 <HAL_GetTick>
 8001ad4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ad6:	e00a      	b.n	8001aee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ad8:	f7ff f86e 	bl	8000bb8 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e06e      	b.n	8001bcc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aee:	4b3a      	ldr	r3, [pc, #232]	; (8001bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f003 020c 	and.w	r2, r3, #12
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d1eb      	bne.n	8001ad8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d010      	beq.n	8001b2e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	4b31      	ldr	r3, [pc, #196]	; (8001bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d208      	bcs.n	8001b2e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b1c:	4b2e      	ldr	r3, [pc, #184]	; (8001bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	492b      	ldr	r1, [pc, #172]	; (8001bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b2e:	4b29      	ldr	r3, [pc, #164]	; (8001bd4 <HAL_RCC_ClockConfig+0x1ec>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d210      	bcs.n	8001b5e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b3c:	4b25      	ldr	r3, [pc, #148]	; (8001bd4 <HAL_RCC_ClockConfig+0x1ec>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f023 0207 	bic.w	r2, r3, #7
 8001b44:	4923      	ldr	r1, [pc, #140]	; (8001bd4 <HAL_RCC_ClockConfig+0x1ec>)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b4c:	4b21      	ldr	r3, [pc, #132]	; (8001bd4 <HAL_RCC_ClockConfig+0x1ec>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0307 	and.w	r3, r3, #7
 8001b54:	683a      	ldr	r2, [r7, #0]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d001      	beq.n	8001b5e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e036      	b.n	8001bcc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0304 	and.w	r3, r3, #4
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d008      	beq.n	8001b7c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b6a:	4b1b      	ldr	r3, [pc, #108]	; (8001bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	4918      	ldr	r1, [pc, #96]	; (8001bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0308 	and.w	r3, r3, #8
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d009      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b88:	4b13      	ldr	r3, [pc, #76]	; (8001bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	4910      	ldr	r1, [pc, #64]	; (8001bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b9c:	f000 f824 	bl	8001be8 <HAL_RCC_GetSysClockFreq>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	4b0d      	ldr	r3, [pc, #52]	; (8001bd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	091b      	lsrs	r3, r3, #4
 8001ba8:	f003 030f 	and.w	r3, r3, #15
 8001bac:	490b      	ldr	r1, [pc, #44]	; (8001bdc <HAL_RCC_ClockConfig+0x1f4>)
 8001bae:	5ccb      	ldrb	r3, [r1, r3]
 8001bb0:	f003 031f 	and.w	r3, r3, #31
 8001bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb8:	4a09      	ldr	r2, [pc, #36]	; (8001be0 <HAL_RCC_ClockConfig+0x1f8>)
 8001bba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001bbc:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <HAL_RCC_ClockConfig+0x1fc>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7fe ffa9 	bl	8000b18 <HAL_InitTick>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	72fb      	strb	r3, [r7, #11]

  return status;
 8001bca:	7afb      	ldrb	r3, [r7, #11]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3710      	adds	r7, #16
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40022000 	.word	0x40022000
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	08003de0 	.word	0x08003de0
 8001be0:	20000000 	.word	0x20000000
 8001be4:	20000004 	.word	0x20000004

08001be8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b089      	sub	sp, #36	; 0x24
 8001bec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	61fb      	str	r3, [r7, #28]
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bf6:	4b3e      	ldr	r3, [pc, #248]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f003 030c 	and.w	r3, r3, #12
 8001bfe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c00:	4b3b      	ldr	r3, [pc, #236]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	f003 0303 	and.w	r3, r3, #3
 8001c08:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d005      	beq.n	8001c1c <HAL_RCC_GetSysClockFreq+0x34>
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	2b0c      	cmp	r3, #12
 8001c14:	d121      	bne.n	8001c5a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d11e      	bne.n	8001c5a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c1c:	4b34      	ldr	r3, [pc, #208]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0308 	and.w	r3, r3, #8
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d107      	bne.n	8001c38 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c28:	4b31      	ldr	r3, [pc, #196]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c2e:	0a1b      	lsrs	r3, r3, #8
 8001c30:	f003 030f 	and.w	r3, r3, #15
 8001c34:	61fb      	str	r3, [r7, #28]
 8001c36:	e005      	b.n	8001c44 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c38:	4b2d      	ldr	r3, [pc, #180]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	091b      	lsrs	r3, r3, #4
 8001c3e:	f003 030f 	and.w	r3, r3, #15
 8001c42:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c44:	4a2b      	ldr	r2, [pc, #172]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c4c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d10d      	bne.n	8001c70 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c58:	e00a      	b.n	8001c70 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	2b04      	cmp	r3, #4
 8001c5e:	d102      	bne.n	8001c66 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c60:	4b25      	ldr	r3, [pc, #148]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c62:	61bb      	str	r3, [r7, #24]
 8001c64:	e004      	b.n	8001c70 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	2b08      	cmp	r3, #8
 8001c6a:	d101      	bne.n	8001c70 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c6c:	4b23      	ldr	r3, [pc, #140]	; (8001cfc <HAL_RCC_GetSysClockFreq+0x114>)
 8001c6e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	2b0c      	cmp	r3, #12
 8001c74:	d134      	bne.n	8001ce0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c76:	4b1e      	ldr	r3, [pc, #120]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	f003 0303 	and.w	r3, r3, #3
 8001c7e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d003      	beq.n	8001c8e <HAL_RCC_GetSysClockFreq+0xa6>
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	2b03      	cmp	r3, #3
 8001c8a:	d003      	beq.n	8001c94 <HAL_RCC_GetSysClockFreq+0xac>
 8001c8c:	e005      	b.n	8001c9a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c8e:	4b1a      	ldr	r3, [pc, #104]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c90:	617b      	str	r3, [r7, #20]
      break;
 8001c92:	e005      	b.n	8001ca0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c94:	4b19      	ldr	r3, [pc, #100]	; (8001cfc <HAL_RCC_GetSysClockFreq+0x114>)
 8001c96:	617b      	str	r3, [r7, #20]
      break;
 8001c98:	e002      	b.n	8001ca0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	617b      	str	r3, [r7, #20]
      break;
 8001c9e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ca0:	4b13      	ldr	r3, [pc, #76]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	091b      	lsrs	r3, r3, #4
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	3301      	adds	r3, #1
 8001cac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001cae:	4b10      	ldr	r3, [pc, #64]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	0a1b      	lsrs	r3, r3, #8
 8001cb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	fb03 f202 	mul.w	r2, r3, r2
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cc6:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	0e5b      	lsrs	r3, r3, #25
 8001ccc:	f003 0303 	and.w	r3, r3, #3
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cde:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ce0:	69bb      	ldr	r3, [r7, #24]
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3724      	adds	r7, #36	; 0x24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	08003df8 	.word	0x08003df8
 8001cf8:	00f42400 	.word	0x00f42400
 8001cfc:	007a1200 	.word	0x007a1200

08001d00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d04:	4b03      	ldr	r3, [pc, #12]	; (8001d14 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d06:	681b      	ldr	r3, [r3, #0]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	20000000 	.word	0x20000000

08001d18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d1c:	f7ff fff0 	bl	8001d00 <HAL_RCC_GetHCLKFreq>
 8001d20:	4602      	mov	r2, r0
 8001d22:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	0a1b      	lsrs	r3, r3, #8
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	4904      	ldr	r1, [pc, #16]	; (8001d40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d2e:	5ccb      	ldrb	r3, [r1, r3]
 8001d30:	f003 031f 	and.w	r3, r3, #31
 8001d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	08003df0 	.word	0x08003df0

08001d44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d48:	f7ff ffda 	bl	8001d00 <HAL_RCC_GetHCLKFreq>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	0adb      	lsrs	r3, r3, #11
 8001d54:	f003 0307 	and.w	r3, r3, #7
 8001d58:	4904      	ldr	r1, [pc, #16]	; (8001d6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d5a:	5ccb      	ldrb	r3, [r1, r3]
 8001d5c:	f003 031f 	and.w	r3, r3, #31
 8001d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	08003df0 	.word	0x08003df0

08001d70 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d78:	2300      	movs	r3, #0
 8001d7a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d7c:	4b2a      	ldr	r3, [pc, #168]	; (8001e28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d003      	beq.n	8001d90 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d88:	f7ff f9ee 	bl	8001168 <HAL_PWREx_GetVoltageRange>
 8001d8c:	6178      	str	r0, [r7, #20]
 8001d8e:	e014      	b.n	8001dba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d90:	4b25      	ldr	r3, [pc, #148]	; (8001e28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d94:	4a24      	ldr	r2, [pc, #144]	; (8001e28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d9a:	6593      	str	r3, [r2, #88]	; 0x58
 8001d9c:	4b22      	ldr	r3, [pc, #136]	; (8001e28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001da8:	f7ff f9de 	bl	8001168 <HAL_PWREx_GetVoltageRange>
 8001dac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001dae:	4b1e      	ldr	r3, [pc, #120]	; (8001e28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db2:	4a1d      	ldr	r2, [pc, #116]	; (8001e28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001db4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001db8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dc0:	d10b      	bne.n	8001dda <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b80      	cmp	r3, #128	; 0x80
 8001dc6:	d919      	bls.n	8001dfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2ba0      	cmp	r3, #160	; 0xa0
 8001dcc:	d902      	bls.n	8001dd4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001dce:	2302      	movs	r3, #2
 8001dd0:	613b      	str	r3, [r7, #16]
 8001dd2:	e013      	b.n	8001dfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	613b      	str	r3, [r7, #16]
 8001dd8:	e010      	b.n	8001dfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b80      	cmp	r3, #128	; 0x80
 8001dde:	d902      	bls.n	8001de6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001de0:	2303      	movs	r3, #3
 8001de2:	613b      	str	r3, [r7, #16]
 8001de4:	e00a      	b.n	8001dfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b80      	cmp	r3, #128	; 0x80
 8001dea:	d102      	bne.n	8001df2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001dec:	2302      	movs	r3, #2
 8001dee:	613b      	str	r3, [r7, #16]
 8001df0:	e004      	b.n	8001dfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2b70      	cmp	r3, #112	; 0x70
 8001df6:	d101      	bne.n	8001dfc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001df8:	2301      	movs	r3, #1
 8001dfa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001dfc:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f023 0207 	bic.w	r2, r3, #7
 8001e04:	4909      	ldr	r1, [pc, #36]	; (8001e2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e0c:	4b07      	ldr	r3, [pc, #28]	; (8001e2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0307 	and.w	r3, r3, #7
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d001      	beq.n	8001e1e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e000      	b.n	8001e20 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3718      	adds	r7, #24
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	40022000 	.word	0x40022000

08001e30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e38:	2300      	movs	r3, #0
 8001e3a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d041      	beq.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e50:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e54:	d02a      	beq.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001e56:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e5a:	d824      	bhi.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e5c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e60:	d008      	beq.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001e62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e66:	d81e      	bhi.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d00a      	beq.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001e6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e70:	d010      	beq.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001e72:	e018      	b.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e74:	4b86      	ldr	r3, [pc, #536]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	4a85      	ldr	r2, [pc, #532]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e7e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e80:	e015      	b.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	3304      	adds	r3, #4
 8001e86:	2100      	movs	r1, #0
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f000 fabb 	bl	8002404 <RCCEx_PLLSAI1_Config>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e92:	e00c      	b.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3320      	adds	r3, #32
 8001e98:	2100      	movs	r1, #0
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f000 fba6 	bl	80025ec <RCCEx_PLLSAI2_Config>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ea4:	e003      	b.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	74fb      	strb	r3, [r7, #19]
      break;
 8001eaa:	e000      	b.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001eac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001eae:	7cfb      	ldrb	r3, [r7, #19]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d10b      	bne.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001eb4:	4b76      	ldr	r3, [pc, #472]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ec2:	4973      	ldr	r1, [pc, #460]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001eca:	e001      	b.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ecc:	7cfb      	ldrb	r3, [r7, #19]
 8001ece:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d041      	beq.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ee0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001ee4:	d02a      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001ee6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001eea:	d824      	bhi.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001eec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ef0:	d008      	beq.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001ef2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ef6:	d81e      	bhi.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00a      	beq.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001efc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f00:	d010      	beq.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f02:	e018      	b.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f04:	4b62      	ldr	r3, [pc, #392]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	4a61      	ldr	r2, [pc, #388]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f0e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f10:	e015      	b.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	3304      	adds	r3, #4
 8001f16:	2100      	movs	r1, #0
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f000 fa73 	bl	8002404 <RCCEx_PLLSAI1_Config>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f22:	e00c      	b.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	3320      	adds	r3, #32
 8001f28:	2100      	movs	r1, #0
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f000 fb5e 	bl	80025ec <RCCEx_PLLSAI2_Config>
 8001f30:	4603      	mov	r3, r0
 8001f32:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f34:	e003      	b.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	74fb      	strb	r3, [r7, #19]
      break;
 8001f3a:	e000      	b.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001f3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f3e:	7cfb      	ldrb	r3, [r7, #19]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d10b      	bne.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f44:	4b52      	ldr	r3, [pc, #328]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f4a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f52:	494f      	ldr	r1, [pc, #316]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f5a:	e001      	b.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f5c:	7cfb      	ldrb	r3, [r7, #19]
 8001f5e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f000 80a0 	beq.w	80020ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f72:	4b47      	ldr	r3, [pc, #284]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e000      	b.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001f82:	2300      	movs	r3, #0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d00d      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f88:	4b41      	ldr	r3, [pc, #260]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8c:	4a40      	ldr	r2, [pc, #256]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f92:	6593      	str	r3, [r2, #88]	; 0x58
 8001f94:	4b3e      	ldr	r3, [pc, #248]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9c:	60bb      	str	r3, [r7, #8]
 8001f9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fa4:	4b3b      	ldr	r3, [pc, #236]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a3a      	ldr	r2, [pc, #232]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001faa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001fb0:	f7fe fe02 	bl	8000bb8 <HAL_GetTick>
 8001fb4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001fb6:	e009      	b.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fb8:	f7fe fdfe 	bl	8000bb8 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d902      	bls.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	74fb      	strb	r3, [r7, #19]
        break;
 8001fca:	e005      	b.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001fcc:	4b31      	ldr	r3, [pc, #196]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d0ef      	beq.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001fd8:	7cfb      	ldrb	r3, [r7, #19]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d15c      	bne.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001fde:	4b2c      	ldr	r3, [pc, #176]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fe8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d01f      	beq.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ff6:	697a      	ldr	r2, [r7, #20]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d019      	beq.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ffc:	4b24      	ldr	r3, [pc, #144]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002002:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002006:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002008:	4b21      	ldr	r3, [pc, #132]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800200a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800200e:	4a20      	ldr	r2, [pc, #128]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002014:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002018:	4b1d      	ldr	r3, [pc, #116]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800201a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800201e:	4a1c      	ldr	r2, [pc, #112]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002020:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002024:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002028:	4a19      	ldr	r2, [pc, #100]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b00      	cmp	r3, #0
 8002038:	d016      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800203a:	f7fe fdbd 	bl	8000bb8 <HAL_GetTick>
 800203e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002040:	e00b      	b.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002042:	f7fe fdb9 	bl	8000bb8 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002050:	4293      	cmp	r3, r2
 8002052:	d902      	bls.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	74fb      	strb	r3, [r7, #19]
            break;
 8002058:	e006      	b.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800205a:	4b0d      	ldr	r3, [pc, #52]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800205c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d0ec      	beq.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002068:	7cfb      	ldrb	r3, [r7, #19]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d10c      	bne.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800206e:	4b08      	ldr	r3, [pc, #32]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002074:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800207e:	4904      	ldr	r1, [pc, #16]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002080:	4313      	orrs	r3, r2
 8002082:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002086:	e009      	b.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002088:	7cfb      	ldrb	r3, [r7, #19]
 800208a:	74bb      	strb	r3, [r7, #18]
 800208c:	e006      	b.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800208e:	bf00      	nop
 8002090:	40021000 	.word	0x40021000
 8002094:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002098:	7cfb      	ldrb	r3, [r7, #19]
 800209a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800209c:	7c7b      	ldrb	r3, [r7, #17]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d105      	bne.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020a2:	4b9e      	ldr	r3, [pc, #632]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a6:	4a9d      	ldr	r2, [pc, #628]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00a      	beq.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020ba:	4b98      	ldr	r3, [pc, #608]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c0:	f023 0203 	bic.w	r2, r3, #3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c8:	4994      	ldr	r1, [pc, #592]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d00a      	beq.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020dc:	4b8f      	ldr	r3, [pc, #572]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e2:	f023 020c 	bic.w	r2, r3, #12
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ea:	498c      	ldr	r1, [pc, #560]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0304 	and.w	r3, r3, #4
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00a      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020fe:	4b87      	ldr	r3, [pc, #540]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002104:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210c:	4983      	ldr	r1, [pc, #524]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800210e:	4313      	orrs	r3, r2
 8002110:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0308 	and.w	r3, r3, #8
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00a      	beq.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002120:	4b7e      	ldr	r3, [pc, #504]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002126:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212e:	497b      	ldr	r1, [pc, #492]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002130:	4313      	orrs	r3, r2
 8002132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0310 	and.w	r3, r3, #16
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00a      	beq.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002142:	4b76      	ldr	r3, [pc, #472]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002148:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002150:	4972      	ldr	r1, [pc, #456]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002152:	4313      	orrs	r3, r2
 8002154:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0320 	and.w	r3, r3, #32
 8002160:	2b00      	cmp	r3, #0
 8002162:	d00a      	beq.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002164:	4b6d      	ldr	r3, [pc, #436]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800216a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002172:	496a      	ldr	r1, [pc, #424]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002174:	4313      	orrs	r3, r2
 8002176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00a      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002186:	4b65      	ldr	r3, [pc, #404]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800218c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002194:	4961      	ldr	r1, [pc, #388]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002196:	4313      	orrs	r3, r2
 8002198:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00a      	beq.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80021a8:	4b5c      	ldr	r3, [pc, #368]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021b6:	4959      	ldr	r1, [pc, #356]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00a      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021ca:	4b54      	ldr	r3, [pc, #336]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021d8:	4950      	ldr	r1, [pc, #320]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d00a      	beq.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021ec:	4b4b      	ldr	r3, [pc, #300]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021fa:	4948      	ldr	r1, [pc, #288]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00a      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800220e:	4b43      	ldr	r3, [pc, #268]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002214:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221c:	493f      	ldr	r1, [pc, #252]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800221e:	4313      	orrs	r3, r2
 8002220:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d028      	beq.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002230:	4b3a      	ldr	r3, [pc, #232]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002236:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800223e:	4937      	ldr	r1, [pc, #220]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002240:	4313      	orrs	r3, r2
 8002242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800224a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800224e:	d106      	bne.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002250:	4b32      	ldr	r3, [pc, #200]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	4a31      	ldr	r2, [pc, #196]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002256:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800225a:	60d3      	str	r3, [r2, #12]
 800225c:	e011      	b.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002262:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002266:	d10c      	bne.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3304      	adds	r3, #4
 800226c:	2101      	movs	r1, #1
 800226e:	4618      	mov	r0, r3
 8002270:	f000 f8c8 	bl	8002404 <RCCEx_PLLSAI1_Config>
 8002274:	4603      	mov	r3, r0
 8002276:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002278:	7cfb      	ldrb	r3, [r7, #19]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800227e:	7cfb      	ldrb	r3, [r7, #19]
 8002280:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d028      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800228e:	4b23      	ldr	r3, [pc, #140]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002294:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800229c:	491f      	ldr	r1, [pc, #124]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022ac:	d106      	bne.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022ae:	4b1b      	ldr	r3, [pc, #108]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	4a1a      	ldr	r2, [pc, #104]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022b8:	60d3      	str	r3, [r2, #12]
 80022ba:	e011      	b.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022c4:	d10c      	bne.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	3304      	adds	r3, #4
 80022ca:	2101      	movs	r1, #1
 80022cc:	4618      	mov	r0, r3
 80022ce:	f000 f899 	bl	8002404 <RCCEx_PLLSAI1_Config>
 80022d2:	4603      	mov	r3, r0
 80022d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022d6:	7cfb      	ldrb	r3, [r7, #19]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80022dc:	7cfb      	ldrb	r3, [r7, #19]
 80022de:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d02b      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022ec:	4b0b      	ldr	r3, [pc, #44]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022fa:	4908      	ldr	r1, [pc, #32]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002306:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800230a:	d109      	bne.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800230c:	4b03      	ldr	r3, [pc, #12]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	4a02      	ldr	r2, [pc, #8]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002312:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002316:	60d3      	str	r3, [r2, #12]
 8002318:	e014      	b.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800231a:	bf00      	nop
 800231c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002324:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002328:	d10c      	bne.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	3304      	adds	r3, #4
 800232e:	2101      	movs	r1, #1
 8002330:	4618      	mov	r0, r3
 8002332:	f000 f867 	bl	8002404 <RCCEx_PLLSAI1_Config>
 8002336:	4603      	mov	r3, r0
 8002338:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800233a:	7cfb      	ldrb	r3, [r7, #19]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002340:	7cfb      	ldrb	r3, [r7, #19]
 8002342:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d02f      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002350:	4b2b      	ldr	r3, [pc, #172]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002356:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800235e:	4928      	ldr	r1, [pc, #160]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002360:	4313      	orrs	r3, r2
 8002362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800236a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800236e:	d10d      	bne.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3304      	adds	r3, #4
 8002374:	2102      	movs	r1, #2
 8002376:	4618      	mov	r0, r3
 8002378:	f000 f844 	bl	8002404 <RCCEx_PLLSAI1_Config>
 800237c:	4603      	mov	r3, r0
 800237e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002380:	7cfb      	ldrb	r3, [r7, #19]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d014      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002386:	7cfb      	ldrb	r3, [r7, #19]
 8002388:	74bb      	strb	r3, [r7, #18]
 800238a:	e011      	b.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002390:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002394:	d10c      	bne.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	3320      	adds	r3, #32
 800239a:	2102      	movs	r1, #2
 800239c:	4618      	mov	r0, r3
 800239e:	f000 f925 	bl	80025ec <RCCEx_PLLSAI2_Config>
 80023a2:	4603      	mov	r3, r0
 80023a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023a6:	7cfb      	ldrb	r3, [r7, #19]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80023ac:	7cfb      	ldrb	r3, [r7, #19]
 80023ae:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d00a      	beq.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80023bc:	4b10      	ldr	r3, [pc, #64]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023ca:	490d      	ldr	r1, [pc, #52]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00b      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80023de:	4b08      	ldr	r3, [pc, #32]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023ee:	4904      	ldr	r1, [pc, #16]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80023f6:	7cbb      	ldrb	r3, [r7, #18]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40021000 	.word	0x40021000

08002404 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800240e:	2300      	movs	r3, #0
 8002410:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002412:	4b75      	ldr	r3, [pc, #468]	; (80025e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	f003 0303 	and.w	r3, r3, #3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d018      	beq.n	8002450 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800241e:	4b72      	ldr	r3, [pc, #456]	; (80025e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	f003 0203 	and.w	r2, r3, #3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	429a      	cmp	r2, r3
 800242c:	d10d      	bne.n	800244a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
       ||
 8002432:	2b00      	cmp	r3, #0
 8002434:	d009      	beq.n	800244a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002436:	4b6c      	ldr	r3, [pc, #432]	; (80025e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	091b      	lsrs	r3, r3, #4
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	1c5a      	adds	r2, r3, #1
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
       ||
 8002446:	429a      	cmp	r2, r3
 8002448:	d047      	beq.n	80024da <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	73fb      	strb	r3, [r7, #15]
 800244e:	e044      	b.n	80024da <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2b03      	cmp	r3, #3
 8002456:	d018      	beq.n	800248a <RCCEx_PLLSAI1_Config+0x86>
 8002458:	2b03      	cmp	r3, #3
 800245a:	d825      	bhi.n	80024a8 <RCCEx_PLLSAI1_Config+0xa4>
 800245c:	2b01      	cmp	r3, #1
 800245e:	d002      	beq.n	8002466 <RCCEx_PLLSAI1_Config+0x62>
 8002460:	2b02      	cmp	r3, #2
 8002462:	d009      	beq.n	8002478 <RCCEx_PLLSAI1_Config+0x74>
 8002464:	e020      	b.n	80024a8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002466:	4b60      	ldr	r3, [pc, #384]	; (80025e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d11d      	bne.n	80024ae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002476:	e01a      	b.n	80024ae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002478:	4b5b      	ldr	r3, [pc, #364]	; (80025e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002480:	2b00      	cmp	r3, #0
 8002482:	d116      	bne.n	80024b2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002488:	e013      	b.n	80024b2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800248a:	4b57      	ldr	r3, [pc, #348]	; (80025e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10f      	bne.n	80024b6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002496:	4b54      	ldr	r3, [pc, #336]	; (80025e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d109      	bne.n	80024b6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80024a6:	e006      	b.n	80024b6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	73fb      	strb	r3, [r7, #15]
      break;
 80024ac:	e004      	b.n	80024b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024ae:	bf00      	nop
 80024b0:	e002      	b.n	80024b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024b2:	bf00      	nop
 80024b4:	e000      	b.n	80024b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80024b8:	7bfb      	ldrb	r3, [r7, #15]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10d      	bne.n	80024da <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80024be:	4b4a      	ldr	r3, [pc, #296]	; (80025e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6819      	ldr	r1, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	3b01      	subs	r3, #1
 80024d0:	011b      	lsls	r3, r3, #4
 80024d2:	430b      	orrs	r3, r1
 80024d4:	4944      	ldr	r1, [pc, #272]	; (80025e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80024da:	7bfb      	ldrb	r3, [r7, #15]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d17d      	bne.n	80025dc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80024e0:	4b41      	ldr	r3, [pc, #260]	; (80025e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a40      	ldr	r2, [pc, #256]	; (80025e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80024ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024ec:	f7fe fb64 	bl	8000bb8 <HAL_GetTick>
 80024f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024f2:	e009      	b.n	8002508 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024f4:	f7fe fb60 	bl	8000bb8 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d902      	bls.n	8002508 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	73fb      	strb	r3, [r7, #15]
        break;
 8002506:	e005      	b.n	8002514 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002508:	4b37      	ldr	r3, [pc, #220]	; (80025e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1ef      	bne.n	80024f4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002514:	7bfb      	ldrb	r3, [r7, #15]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d160      	bne.n	80025dc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d111      	bne.n	8002544 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002520:	4b31      	ldr	r3, [pc, #196]	; (80025e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002528:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	6892      	ldr	r2, [r2, #8]
 8002530:	0211      	lsls	r1, r2, #8
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	68d2      	ldr	r2, [r2, #12]
 8002536:	0912      	lsrs	r2, r2, #4
 8002538:	0452      	lsls	r2, r2, #17
 800253a:	430a      	orrs	r2, r1
 800253c:	492a      	ldr	r1, [pc, #168]	; (80025e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800253e:	4313      	orrs	r3, r2
 8002540:	610b      	str	r3, [r1, #16]
 8002542:	e027      	b.n	8002594 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d112      	bne.n	8002570 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800254a:	4b27      	ldr	r3, [pc, #156]	; (80025e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002552:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	6892      	ldr	r2, [r2, #8]
 800255a:	0211      	lsls	r1, r2, #8
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6912      	ldr	r2, [r2, #16]
 8002560:	0852      	lsrs	r2, r2, #1
 8002562:	3a01      	subs	r2, #1
 8002564:	0552      	lsls	r2, r2, #21
 8002566:	430a      	orrs	r2, r1
 8002568:	491f      	ldr	r1, [pc, #124]	; (80025e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800256a:	4313      	orrs	r3, r2
 800256c:	610b      	str	r3, [r1, #16]
 800256e:	e011      	b.n	8002594 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002570:	4b1d      	ldr	r3, [pc, #116]	; (80025e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002578:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	6892      	ldr	r2, [r2, #8]
 8002580:	0211      	lsls	r1, r2, #8
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	6952      	ldr	r2, [r2, #20]
 8002586:	0852      	lsrs	r2, r2, #1
 8002588:	3a01      	subs	r2, #1
 800258a:	0652      	lsls	r2, r2, #25
 800258c:	430a      	orrs	r2, r1
 800258e:	4916      	ldr	r1, [pc, #88]	; (80025e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002590:	4313      	orrs	r3, r2
 8002592:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002594:	4b14      	ldr	r3, [pc, #80]	; (80025e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a13      	ldr	r2, [pc, #76]	; (80025e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800259a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800259e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a0:	f7fe fb0a 	bl	8000bb8 <HAL_GetTick>
 80025a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025a6:	e009      	b.n	80025bc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025a8:	f7fe fb06 	bl	8000bb8 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d902      	bls.n	80025bc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	73fb      	strb	r3, [r7, #15]
          break;
 80025ba:	e005      	b.n	80025c8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025bc:	4b0a      	ldr	r3, [pc, #40]	; (80025e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d0ef      	beq.n	80025a8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80025c8:	7bfb      	ldrb	r3, [r7, #15]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d106      	bne.n	80025dc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80025ce:	4b06      	ldr	r3, [pc, #24]	; (80025e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025d0:	691a      	ldr	r2, [r3, #16]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	4904      	ldr	r1, [pc, #16]	; (80025e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80025dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	40021000 	.word	0x40021000

080025ec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025f6:	2300      	movs	r3, #0
 80025f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025fa:	4b6a      	ldr	r3, [pc, #424]	; (80027a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	f003 0303 	and.w	r3, r3, #3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d018      	beq.n	8002638 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002606:	4b67      	ldr	r3, [pc, #412]	; (80027a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	f003 0203 	and.w	r2, r3, #3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	429a      	cmp	r2, r3
 8002614:	d10d      	bne.n	8002632 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
       ||
 800261a:	2b00      	cmp	r3, #0
 800261c:	d009      	beq.n	8002632 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800261e:	4b61      	ldr	r3, [pc, #388]	; (80027a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	091b      	lsrs	r3, r3, #4
 8002624:	f003 0307 	and.w	r3, r3, #7
 8002628:	1c5a      	adds	r2, r3, #1
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
       ||
 800262e:	429a      	cmp	r2, r3
 8002630:	d047      	beq.n	80026c2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	73fb      	strb	r3, [r7, #15]
 8002636:	e044      	b.n	80026c2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2b03      	cmp	r3, #3
 800263e:	d018      	beq.n	8002672 <RCCEx_PLLSAI2_Config+0x86>
 8002640:	2b03      	cmp	r3, #3
 8002642:	d825      	bhi.n	8002690 <RCCEx_PLLSAI2_Config+0xa4>
 8002644:	2b01      	cmp	r3, #1
 8002646:	d002      	beq.n	800264e <RCCEx_PLLSAI2_Config+0x62>
 8002648:	2b02      	cmp	r3, #2
 800264a:	d009      	beq.n	8002660 <RCCEx_PLLSAI2_Config+0x74>
 800264c:	e020      	b.n	8002690 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800264e:	4b55      	ldr	r3, [pc, #340]	; (80027a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d11d      	bne.n	8002696 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800265e:	e01a      	b.n	8002696 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002660:	4b50      	ldr	r3, [pc, #320]	; (80027a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002668:	2b00      	cmp	r3, #0
 800266a:	d116      	bne.n	800269a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002670:	e013      	b.n	800269a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002672:	4b4c      	ldr	r3, [pc, #304]	; (80027a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d10f      	bne.n	800269e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800267e:	4b49      	ldr	r3, [pc, #292]	; (80027a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d109      	bne.n	800269e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800268e:	e006      	b.n	800269e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	73fb      	strb	r3, [r7, #15]
      break;
 8002694:	e004      	b.n	80026a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002696:	bf00      	nop
 8002698:	e002      	b.n	80026a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800269a:	bf00      	nop
 800269c:	e000      	b.n	80026a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800269e:	bf00      	nop
    }

    if(status == HAL_OK)
 80026a0:	7bfb      	ldrb	r3, [r7, #15]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10d      	bne.n	80026c2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80026a6:	4b3f      	ldr	r3, [pc, #252]	; (80027a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6819      	ldr	r1, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	3b01      	subs	r3, #1
 80026b8:	011b      	lsls	r3, r3, #4
 80026ba:	430b      	orrs	r3, r1
 80026bc:	4939      	ldr	r1, [pc, #228]	; (80027a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80026c2:	7bfb      	ldrb	r3, [r7, #15]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d167      	bne.n	8002798 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80026c8:	4b36      	ldr	r3, [pc, #216]	; (80027a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a35      	ldr	r2, [pc, #212]	; (80027a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026d4:	f7fe fa70 	bl	8000bb8 <HAL_GetTick>
 80026d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80026da:	e009      	b.n	80026f0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80026dc:	f7fe fa6c 	bl	8000bb8 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d902      	bls.n	80026f0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	73fb      	strb	r3, [r7, #15]
        break;
 80026ee:	e005      	b.n	80026fc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80026f0:	4b2c      	ldr	r3, [pc, #176]	; (80027a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1ef      	bne.n	80026dc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80026fc:	7bfb      	ldrb	r3, [r7, #15]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d14a      	bne.n	8002798 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d111      	bne.n	800272c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002708:	4b26      	ldr	r3, [pc, #152]	; (80027a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800270a:	695b      	ldr	r3, [r3, #20]
 800270c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002710:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	6892      	ldr	r2, [r2, #8]
 8002718:	0211      	lsls	r1, r2, #8
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	68d2      	ldr	r2, [r2, #12]
 800271e:	0912      	lsrs	r2, r2, #4
 8002720:	0452      	lsls	r2, r2, #17
 8002722:	430a      	orrs	r2, r1
 8002724:	491f      	ldr	r1, [pc, #124]	; (80027a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002726:	4313      	orrs	r3, r2
 8002728:	614b      	str	r3, [r1, #20]
 800272a:	e011      	b.n	8002750 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800272c:	4b1d      	ldr	r3, [pc, #116]	; (80027a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800272e:	695b      	ldr	r3, [r3, #20]
 8002730:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002734:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6892      	ldr	r2, [r2, #8]
 800273c:	0211      	lsls	r1, r2, #8
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	6912      	ldr	r2, [r2, #16]
 8002742:	0852      	lsrs	r2, r2, #1
 8002744:	3a01      	subs	r2, #1
 8002746:	0652      	lsls	r2, r2, #25
 8002748:	430a      	orrs	r2, r1
 800274a:	4916      	ldr	r1, [pc, #88]	; (80027a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800274c:	4313      	orrs	r3, r2
 800274e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002750:	4b14      	ldr	r3, [pc, #80]	; (80027a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a13      	ldr	r2, [pc, #76]	; (80027a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800275a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800275c:	f7fe fa2c 	bl	8000bb8 <HAL_GetTick>
 8002760:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002762:	e009      	b.n	8002778 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002764:	f7fe fa28 	bl	8000bb8 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d902      	bls.n	8002778 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	73fb      	strb	r3, [r7, #15]
          break;
 8002776:	e005      	b.n	8002784 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002778:	4b0a      	ldr	r3, [pc, #40]	; (80027a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d0ef      	beq.n	8002764 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002784:	7bfb      	ldrb	r3, [r7, #15]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d106      	bne.n	8002798 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800278a:	4b06      	ldr	r3, [pc, #24]	; (80027a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800278c:	695a      	ldr	r2, [r3, #20]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	4904      	ldr	r1, [pc, #16]	; (80027a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002794:	4313      	orrs	r3, r2
 8002796:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002798:	7bfb      	ldrb	r3, [r7, #15]
}
 800279a:	4618      	mov	r0, r3
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	40021000 	.word	0x40021000

080027a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e095      	b.n	80028e6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d108      	bne.n	80027d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027ca:	d009      	beq.n	80027e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	61da      	str	r2, [r3, #28]
 80027d2:	e005      	b.n	80027e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d106      	bne.n	8002800 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f7fe f836 	bl	800086c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2202      	movs	r2, #2
 8002804:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002816:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002820:	d902      	bls.n	8002828 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002822:	2300      	movs	r3, #0
 8002824:	60fb      	str	r3, [r7, #12]
 8002826:	e002      	b.n	800282e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002828:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800282c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002836:	d007      	beq.n	8002848 <HAL_SPI_Init+0xa0>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002840:	d002      	beq.n	8002848 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002858:	431a      	orrs	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	431a      	orrs	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	431a      	orrs	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002876:	431a      	orrs	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	69db      	ldr	r3, [r3, #28]
 800287c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002880:	431a      	orrs	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800288a:	ea42 0103 	orr.w	r1, r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002892:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	430a      	orrs	r2, r1
 800289c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	0c1b      	lsrs	r3, r3, #16
 80028a4:	f003 0204 	and.w	r2, r3, #4
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ac:	f003 0310 	and.w	r3, r3, #16
 80028b0:	431a      	orrs	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b6:	f003 0308 	and.w	r3, r3, #8
 80028ba:	431a      	orrs	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80028c4:	ea42 0103 	orr.w	r1, r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	430a      	orrs	r2, r1
 80028d4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b088      	sub	sp, #32
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	60f8      	str	r0, [r7, #12]
 80028f6:	60b9      	str	r1, [r7, #8]
 80028f8:	603b      	str	r3, [r7, #0]
 80028fa:	4613      	mov	r3, r2
 80028fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80028fe:	2300      	movs	r3, #0
 8002900:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002908:	2b01      	cmp	r3, #1
 800290a:	d101      	bne.n	8002910 <HAL_SPI_Transmit+0x22>
 800290c:	2302      	movs	r3, #2
 800290e:	e158      	b.n	8002bc2 <HAL_SPI_Transmit+0x2d4>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002918:	f7fe f94e 	bl	8000bb8 <HAL_GetTick>
 800291c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800291e:	88fb      	ldrh	r3, [r7, #6]
 8002920:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b01      	cmp	r3, #1
 800292c:	d002      	beq.n	8002934 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800292e:	2302      	movs	r3, #2
 8002930:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002932:	e13d      	b.n	8002bb0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d002      	beq.n	8002940 <HAL_SPI_Transmit+0x52>
 800293a:	88fb      	ldrh	r3, [r7, #6]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d102      	bne.n	8002946 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002944:	e134      	b.n	8002bb0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2203      	movs	r2, #3
 800294a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	68ba      	ldr	r2, [r7, #8]
 8002958:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	88fa      	ldrh	r2, [r7, #6]
 800295e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	88fa      	ldrh	r2, [r7, #6]
 8002964:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002990:	d10f      	bne.n	80029b2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029bc:	2b40      	cmp	r3, #64	; 0x40
 80029be:	d007      	beq.n	80029d0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80029d8:	d94b      	bls.n	8002a72 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d002      	beq.n	80029e8 <HAL_SPI_Transmit+0xfa>
 80029e2:	8afb      	ldrh	r3, [r7, #22]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d13e      	bne.n	8002a66 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ec:	881a      	ldrh	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f8:	1c9a      	adds	r2, r3, #2
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	3b01      	subs	r3, #1
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a0c:	e02b      	b.n	8002a66 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d112      	bne.n	8002a42 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a20:	881a      	ldrh	r2, [r3, #0]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a2c:	1c9a      	adds	r2, r3, #2
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a40:	e011      	b.n	8002a66 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a42:	f7fe f8b9 	bl	8000bb8 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d803      	bhi.n	8002a5a <HAL_SPI_Transmit+0x16c>
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a58:	d102      	bne.n	8002a60 <HAL_SPI_Transmit+0x172>
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d102      	bne.n	8002a66 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002a64:	e0a4      	b.n	8002bb0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d1ce      	bne.n	8002a0e <HAL_SPI_Transmit+0x120>
 8002a70:	e07c      	b.n	8002b6c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d002      	beq.n	8002a80 <HAL_SPI_Transmit+0x192>
 8002a7a:	8afb      	ldrh	r3, [r7, #22]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d170      	bne.n	8002b62 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d912      	bls.n	8002ab0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a8e:	881a      	ldrh	r2, [r3, #0]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a9a:	1c9a      	adds	r2, r3, #2
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	3b02      	subs	r3, #2
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002aae:	e058      	b.n	8002b62 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	330c      	adds	r3, #12
 8002aba:	7812      	ldrb	r2, [r2, #0]
 8002abc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac2:	1c5a      	adds	r2, r3, #1
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002ad6:	e044      	b.n	8002b62 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d12b      	bne.n	8002b3e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d912      	bls.n	8002b16 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af4:	881a      	ldrh	r2, [r3, #0]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b00:	1c9a      	adds	r2, r3, #2
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	3b02      	subs	r3, #2
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b14:	e025      	b.n	8002b62 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	330c      	adds	r3, #12
 8002b20:	7812      	ldrb	r2, [r2, #0]
 8002b22:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b28:	1c5a      	adds	r2, r3, #1
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	3b01      	subs	r3, #1
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b3c:	e011      	b.n	8002b62 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b3e:	f7fe f83b 	bl	8000bb8 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	683a      	ldr	r2, [r7, #0]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d803      	bhi.n	8002b56 <HAL_SPI_Transmit+0x268>
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b54:	d102      	bne.n	8002b5c <HAL_SPI_Transmit+0x26e>
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d102      	bne.n	8002b62 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002b60:	e026      	b.n	8002bb0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d1b5      	bne.n	8002ad8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	6839      	ldr	r1, [r7, #0]
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f000 fb5b 	bl	800322c <SPI_EndRxTxTransaction>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d002      	beq.n	8002b82 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2220      	movs	r2, #32
 8002b80:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10a      	bne.n	8002ba0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	613b      	str	r3, [r7, #16]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	613b      	str	r3, [r7, #16]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	613b      	str	r3, [r7, #16]
 8002b9e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d002      	beq.n	8002bae <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	77fb      	strb	r3, [r7, #31]
 8002bac:	e000      	b.n	8002bb0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002bae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002bc0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3720      	adds	r7, #32
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b08a      	sub	sp, #40	; 0x28
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	60f8      	str	r0, [r7, #12]
 8002bd2:	60b9      	str	r1, [r7, #8]
 8002bd4:	607a      	str	r2, [r7, #4]
 8002bd6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d101      	bne.n	8002bf0 <HAL_SPI_TransmitReceive+0x26>
 8002bec:	2302      	movs	r3, #2
 8002bee:	e1fb      	b.n	8002fe8 <HAL_SPI_TransmitReceive+0x41e>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bf8:	f7fd ffde 	bl	8000bb8 <HAL_GetTick>
 8002bfc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c04:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002c0c:	887b      	ldrh	r3, [r7, #2]
 8002c0e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002c10:	887b      	ldrh	r3, [r7, #2]
 8002c12:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002c14:	7efb      	ldrb	r3, [r7, #27]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d00e      	beq.n	8002c38 <HAL_SPI_TransmitReceive+0x6e>
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c20:	d106      	bne.n	8002c30 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d102      	bne.n	8002c30 <HAL_SPI_TransmitReceive+0x66>
 8002c2a:	7efb      	ldrb	r3, [r7, #27]
 8002c2c:	2b04      	cmp	r3, #4
 8002c2e:	d003      	beq.n	8002c38 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002c30:	2302      	movs	r3, #2
 8002c32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002c36:	e1cd      	b.n	8002fd4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d005      	beq.n	8002c4a <HAL_SPI_TransmitReceive+0x80>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d002      	beq.n	8002c4a <HAL_SPI_TransmitReceive+0x80>
 8002c44:	887b      	ldrh	r3, [r7, #2]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d103      	bne.n	8002c52 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002c50:	e1c0      	b.n	8002fd4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b04      	cmp	r3, #4
 8002c5c:	d003      	beq.n	8002c66 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2205      	movs	r2, #5
 8002c62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	887a      	ldrh	r2, [r7, #2]
 8002c76:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	887a      	ldrh	r2, [r7, #2]
 8002c7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	68ba      	ldr	r2, [r7, #8]
 8002c86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	887a      	ldrh	r2, [r7, #2]
 8002c8c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	887a      	ldrh	r2, [r7, #2]
 8002c92:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ca8:	d802      	bhi.n	8002cb0 <HAL_SPI_TransmitReceive+0xe6>
 8002caa:	8a3b      	ldrh	r3, [r7, #16]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d908      	bls.n	8002cc2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	685a      	ldr	r2, [r3, #4]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002cbe:	605a      	str	r2, [r3, #4]
 8002cc0:	e007      	b.n	8002cd2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	685a      	ldr	r2, [r3, #4]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002cd0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cdc:	2b40      	cmp	r3, #64	; 0x40
 8002cde:	d007      	beq.n	8002cf0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002cf8:	d97c      	bls.n	8002df4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d002      	beq.n	8002d08 <HAL_SPI_TransmitReceive+0x13e>
 8002d02:	8a7b      	ldrh	r3, [r7, #18]
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d169      	bne.n	8002ddc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0c:	881a      	ldrh	r2, [r3, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d18:	1c9a      	adds	r2, r3, #2
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	3b01      	subs	r3, #1
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d2c:	e056      	b.n	8002ddc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d11b      	bne.n	8002d74 <HAL_SPI_TransmitReceive+0x1aa>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d016      	beq.n	8002d74 <HAL_SPI_TransmitReceive+0x1aa>
 8002d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d113      	bne.n	8002d74 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d50:	881a      	ldrh	r2, [r3, #0]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5c:	1c9a      	adds	r2, r3, #2
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d70:	2300      	movs	r3, #0
 8002d72:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d11c      	bne.n	8002dbc <HAL_SPI_TransmitReceive+0x1f2>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d016      	beq.n	8002dbc <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68da      	ldr	r2, [r3, #12]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d98:	b292      	uxth	r2, r2
 8002d9a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da0:	1c9a      	adds	r2, r3, #2
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	3b01      	subs	r3, #1
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002db8:	2301      	movs	r3, #1
 8002dba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002dbc:	f7fd fefc 	bl	8000bb8 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d807      	bhi.n	8002ddc <HAL_SPI_TransmitReceive+0x212>
 8002dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd2:	d003      	beq.n	8002ddc <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002dda:	e0fb      	b.n	8002fd4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1a3      	bne.n	8002d2e <HAL_SPI_TransmitReceive+0x164>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d19d      	bne.n	8002d2e <HAL_SPI_TransmitReceive+0x164>
 8002df2:	e0df      	b.n	8002fb4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d003      	beq.n	8002e04 <HAL_SPI_TransmitReceive+0x23a>
 8002dfc:	8a7b      	ldrh	r3, [r7, #18]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	f040 80cb 	bne.w	8002f9a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d912      	bls.n	8002e34 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e12:	881a      	ldrh	r2, [r3, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1e:	1c9a      	adds	r2, r3, #2
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	3b02      	subs	r3, #2
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e32:	e0b2      	b.n	8002f9a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	330c      	adds	r3, #12
 8002e3e:	7812      	ldrb	r2, [r2, #0]
 8002e40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e46:	1c5a      	adds	r2, r3, #1
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	3b01      	subs	r3, #1
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e5a:	e09e      	b.n	8002f9a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d134      	bne.n	8002ed4 <HAL_SPI_TransmitReceive+0x30a>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d02f      	beq.n	8002ed4 <HAL_SPI_TransmitReceive+0x30a>
 8002e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d12c      	bne.n	8002ed4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d912      	bls.n	8002eaa <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e88:	881a      	ldrh	r2, [r3, #0]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e94:	1c9a      	adds	r2, r3, #2
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	3b02      	subs	r3, #2
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ea8:	e012      	b.n	8002ed0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	330c      	adds	r3, #12
 8002eb4:	7812      	ldrb	r2, [r2, #0]
 8002eb6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ebc:	1c5a      	adds	r2, r3, #1
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d148      	bne.n	8002f74 <HAL_SPI_TransmitReceive+0x3aa>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d042      	beq.n	8002f74 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d923      	bls.n	8002f42 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68da      	ldr	r2, [r3, #12]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f04:	b292      	uxth	r2, r2
 8002f06:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0c:	1c9a      	adds	r2, r3, #2
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	3b02      	subs	r3, #2
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d81f      	bhi.n	8002f70 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	685a      	ldr	r2, [r3, #4]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f3e:	605a      	str	r2, [r3, #4]
 8002f40:	e016      	b.n	8002f70 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f103 020c 	add.w	r2, r3, #12
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	7812      	ldrb	r2, [r2, #0]
 8002f50:	b2d2      	uxtb	r2, r2
 8002f52:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f58:	1c5a      	adds	r2, r3, #1
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	3b01      	subs	r3, #1
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f70:	2301      	movs	r3, #1
 8002f72:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002f74:	f7fd fe20 	bl	8000bb8 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d803      	bhi.n	8002f8c <HAL_SPI_TransmitReceive+0x3c2>
 8002f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f8a:	d102      	bne.n	8002f92 <HAL_SPI_TransmitReceive+0x3c8>
 8002f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d103      	bne.n	8002f9a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002f98:	e01c      	b.n	8002fd4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f47f af5b 	bne.w	8002e5c <HAL_SPI_TransmitReceive+0x292>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f47f af54 	bne.w	8002e5c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fb4:	69fa      	ldr	r2, [r7, #28]
 8002fb6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fb8:	68f8      	ldr	r0, [r7, #12]
 8002fba:	f000 f937 	bl	800322c <SPI_EndRxTxTransaction>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d006      	beq.n	8002fd2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2220      	movs	r2, #32
 8002fce:	661a      	str	r2, [r3, #96]	; 0x60
 8002fd0:	e000      	b.n	8002fd4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8002fd2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002fe4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3728      	adds	r7, #40	; 0x28
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b088      	sub	sp, #32
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	603b      	str	r3, [r7, #0]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003000:	f7fd fdda 	bl	8000bb8 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003008:	1a9b      	subs	r3, r3, r2
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	4413      	add	r3, r2
 800300e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003010:	f7fd fdd2 	bl	8000bb8 <HAL_GetTick>
 8003014:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003016:	4b39      	ldr	r3, [pc, #228]	; (80030fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	015b      	lsls	r3, r3, #5
 800301c:	0d1b      	lsrs	r3, r3, #20
 800301e:	69fa      	ldr	r2, [r7, #28]
 8003020:	fb02 f303 	mul.w	r3, r2, r3
 8003024:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003026:	e054      	b.n	80030d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302e:	d050      	beq.n	80030d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003030:	f7fd fdc2 	bl	8000bb8 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	69fa      	ldr	r2, [r7, #28]
 800303c:	429a      	cmp	r2, r3
 800303e:	d902      	bls.n	8003046 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d13d      	bne.n	80030c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	685a      	ldr	r2, [r3, #4]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003054:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800305e:	d111      	bne.n	8003084 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003068:	d004      	beq.n	8003074 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003072:	d107      	bne.n	8003084 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003082:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003088:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800308c:	d10f      	bne.n	80030ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800309c:	601a      	str	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e017      	b.n	80030f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80030c8:	2300      	movs	r3, #0
 80030ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	3b01      	subs	r3, #1
 80030d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	4013      	ands	r3, r2
 80030dc:	68ba      	ldr	r2, [r7, #8]
 80030de:	429a      	cmp	r2, r3
 80030e0:	bf0c      	ite	eq
 80030e2:	2301      	moveq	r3, #1
 80030e4:	2300      	movne	r3, #0
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	461a      	mov	r2, r3
 80030ea:	79fb      	ldrb	r3, [r7, #7]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d19b      	bne.n	8003028 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3720      	adds	r7, #32
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	20000000 	.word	0x20000000

08003100 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b08a      	sub	sp, #40	; 0x28
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
 800310c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800310e:	2300      	movs	r3, #0
 8003110:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003112:	f7fd fd51 	bl	8000bb8 <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800311a:	1a9b      	subs	r3, r3, r2
 800311c:	683a      	ldr	r2, [r7, #0]
 800311e:	4413      	add	r3, r2
 8003120:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003122:	f7fd fd49 	bl	8000bb8 <HAL_GetTick>
 8003126:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	330c      	adds	r3, #12
 800312e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003130:	4b3d      	ldr	r3, [pc, #244]	; (8003228 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	4613      	mov	r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4413      	add	r3, r2
 800313a:	00da      	lsls	r2, r3, #3
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	0d1b      	lsrs	r3, r3, #20
 8003140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003142:	fb02 f303 	mul.w	r3, r2, r3
 8003146:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003148:	e060      	b.n	800320c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003150:	d107      	bne.n	8003162 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d104      	bne.n	8003162 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	b2db      	uxtb	r3, r3
 800315e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003160:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003168:	d050      	beq.n	800320c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800316a:	f7fd fd25 	bl	8000bb8 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	6a3b      	ldr	r3, [r7, #32]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003176:	429a      	cmp	r2, r3
 8003178:	d902      	bls.n	8003180 <SPI_WaitFifoStateUntilTimeout+0x80>
 800317a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317c:	2b00      	cmp	r3, #0
 800317e:	d13d      	bne.n	80031fc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800318e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003198:	d111      	bne.n	80031be <SPI_WaitFifoStateUntilTimeout+0xbe>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031a2:	d004      	beq.n	80031ae <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ac:	d107      	bne.n	80031be <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031bc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031c6:	d10f      	bne.n	80031e8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031e6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e010      	b.n	800321e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003202:	2300      	movs	r3, #0
 8003204:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	3b01      	subs	r3, #1
 800320a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	689a      	ldr	r2, [r3, #8]
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	4013      	ands	r3, r2
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	429a      	cmp	r2, r3
 800321a:	d196      	bne.n	800314a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3728      	adds	r7, #40	; 0x28
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	20000000 	.word	0x20000000

0800322c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b086      	sub	sp, #24
 8003230:	af02      	add	r7, sp, #8
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	9300      	str	r3, [sp, #0]
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	2200      	movs	r2, #0
 8003240:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	f7ff ff5b 	bl	8003100 <SPI_WaitFifoStateUntilTimeout>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d007      	beq.n	8003260 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003254:	f043 0220 	orr.w	r2, r3, #32
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e027      	b.n	80032b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	9300      	str	r3, [sp, #0]
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	2200      	movs	r2, #0
 8003268:	2180      	movs	r1, #128	; 0x80
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f7ff fec0 	bl	8002ff0 <SPI_WaitFlagStateUntilTimeout>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d007      	beq.n	8003286 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800327a:	f043 0220 	orr.w	r2, r3, #32
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e014      	b.n	80032b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	9300      	str	r3, [sp, #0]
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	2200      	movs	r2, #0
 800328e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f7ff ff34 	bl	8003100 <SPI_WaitFifoStateUntilTimeout>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d007      	beq.n	80032ae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032a2:	f043 0220 	orr.w	r2, r3, #32
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e000      	b.n	80032b0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e040      	b.n	800334c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d106      	bne.n	80032e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f7fd fb3a 	bl	8000954 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2224      	movs	r2, #36	; 0x24
 80032e4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f022 0201 	bic.w	r2, r2, #1
 80032f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 f82c 	bl	8003354 <UART_SetConfig>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d101      	bne.n	8003306 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e022      	b.n	800334c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330a:	2b00      	cmp	r3, #0
 800330c:	d002      	beq.n	8003314 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 fad8 	bl	80038c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003322:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689a      	ldr	r2, [r3, #8]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003332:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f042 0201 	orr.w	r2, r2, #1
 8003342:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 fb5f 	bl	8003a08 <UART_CheckIdleState>
 800334a:	4603      	mov	r3, r0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3708      	adds	r7, #8
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003354:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003358:	b08a      	sub	sp, #40	; 0x28
 800335a:	af00      	add	r7, sp, #0
 800335c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800335e:	2300      	movs	r3, #0
 8003360:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	689a      	ldr	r2, [r3, #8]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	431a      	orrs	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	431a      	orrs	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	69db      	ldr	r3, [r3, #28]
 8003378:	4313      	orrs	r3, r2
 800337a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	4ba4      	ldr	r3, [pc, #656]	; (8003614 <UART_SetConfig+0x2c0>)
 8003384:	4013      	ands	r3, r2
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	6812      	ldr	r2, [r2, #0]
 800338a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800338c:	430b      	orrs	r3, r1
 800338e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	68da      	ldr	r2, [r3, #12]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	430a      	orrs	r2, r1
 80033a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a99      	ldr	r2, [pc, #612]	; (8003618 <UART_SetConfig+0x2c4>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d004      	beq.n	80033c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033bc:	4313      	orrs	r3, r2
 80033be:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033d0:	430a      	orrs	r2, r1
 80033d2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a90      	ldr	r2, [pc, #576]	; (800361c <UART_SetConfig+0x2c8>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d126      	bne.n	800342c <UART_SetConfig+0xd8>
 80033de:	4b90      	ldr	r3, [pc, #576]	; (8003620 <UART_SetConfig+0x2cc>)
 80033e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e4:	f003 0303 	and.w	r3, r3, #3
 80033e8:	2b03      	cmp	r3, #3
 80033ea:	d81b      	bhi.n	8003424 <UART_SetConfig+0xd0>
 80033ec:	a201      	add	r2, pc, #4	; (adr r2, 80033f4 <UART_SetConfig+0xa0>)
 80033ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f2:	bf00      	nop
 80033f4:	08003405 	.word	0x08003405
 80033f8:	08003415 	.word	0x08003415
 80033fc:	0800340d 	.word	0x0800340d
 8003400:	0800341d 	.word	0x0800341d
 8003404:	2301      	movs	r3, #1
 8003406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800340a:	e116      	b.n	800363a <UART_SetConfig+0x2e6>
 800340c:	2302      	movs	r3, #2
 800340e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003412:	e112      	b.n	800363a <UART_SetConfig+0x2e6>
 8003414:	2304      	movs	r3, #4
 8003416:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800341a:	e10e      	b.n	800363a <UART_SetConfig+0x2e6>
 800341c:	2308      	movs	r3, #8
 800341e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003422:	e10a      	b.n	800363a <UART_SetConfig+0x2e6>
 8003424:	2310      	movs	r3, #16
 8003426:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800342a:	e106      	b.n	800363a <UART_SetConfig+0x2e6>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a7c      	ldr	r2, [pc, #496]	; (8003624 <UART_SetConfig+0x2d0>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d138      	bne.n	80034a8 <UART_SetConfig+0x154>
 8003436:	4b7a      	ldr	r3, [pc, #488]	; (8003620 <UART_SetConfig+0x2cc>)
 8003438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800343c:	f003 030c 	and.w	r3, r3, #12
 8003440:	2b0c      	cmp	r3, #12
 8003442:	d82d      	bhi.n	80034a0 <UART_SetConfig+0x14c>
 8003444:	a201      	add	r2, pc, #4	; (adr r2, 800344c <UART_SetConfig+0xf8>)
 8003446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800344a:	bf00      	nop
 800344c:	08003481 	.word	0x08003481
 8003450:	080034a1 	.word	0x080034a1
 8003454:	080034a1 	.word	0x080034a1
 8003458:	080034a1 	.word	0x080034a1
 800345c:	08003491 	.word	0x08003491
 8003460:	080034a1 	.word	0x080034a1
 8003464:	080034a1 	.word	0x080034a1
 8003468:	080034a1 	.word	0x080034a1
 800346c:	08003489 	.word	0x08003489
 8003470:	080034a1 	.word	0x080034a1
 8003474:	080034a1 	.word	0x080034a1
 8003478:	080034a1 	.word	0x080034a1
 800347c:	08003499 	.word	0x08003499
 8003480:	2300      	movs	r3, #0
 8003482:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003486:	e0d8      	b.n	800363a <UART_SetConfig+0x2e6>
 8003488:	2302      	movs	r3, #2
 800348a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800348e:	e0d4      	b.n	800363a <UART_SetConfig+0x2e6>
 8003490:	2304      	movs	r3, #4
 8003492:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003496:	e0d0      	b.n	800363a <UART_SetConfig+0x2e6>
 8003498:	2308      	movs	r3, #8
 800349a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800349e:	e0cc      	b.n	800363a <UART_SetConfig+0x2e6>
 80034a0:	2310      	movs	r3, #16
 80034a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034a6:	e0c8      	b.n	800363a <UART_SetConfig+0x2e6>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a5e      	ldr	r2, [pc, #376]	; (8003628 <UART_SetConfig+0x2d4>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d125      	bne.n	80034fe <UART_SetConfig+0x1aa>
 80034b2:	4b5b      	ldr	r3, [pc, #364]	; (8003620 <UART_SetConfig+0x2cc>)
 80034b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80034bc:	2b30      	cmp	r3, #48	; 0x30
 80034be:	d016      	beq.n	80034ee <UART_SetConfig+0x19a>
 80034c0:	2b30      	cmp	r3, #48	; 0x30
 80034c2:	d818      	bhi.n	80034f6 <UART_SetConfig+0x1a2>
 80034c4:	2b20      	cmp	r3, #32
 80034c6:	d00a      	beq.n	80034de <UART_SetConfig+0x18a>
 80034c8:	2b20      	cmp	r3, #32
 80034ca:	d814      	bhi.n	80034f6 <UART_SetConfig+0x1a2>
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d002      	beq.n	80034d6 <UART_SetConfig+0x182>
 80034d0:	2b10      	cmp	r3, #16
 80034d2:	d008      	beq.n	80034e6 <UART_SetConfig+0x192>
 80034d4:	e00f      	b.n	80034f6 <UART_SetConfig+0x1a2>
 80034d6:	2300      	movs	r3, #0
 80034d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034dc:	e0ad      	b.n	800363a <UART_SetConfig+0x2e6>
 80034de:	2302      	movs	r3, #2
 80034e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034e4:	e0a9      	b.n	800363a <UART_SetConfig+0x2e6>
 80034e6:	2304      	movs	r3, #4
 80034e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034ec:	e0a5      	b.n	800363a <UART_SetConfig+0x2e6>
 80034ee:	2308      	movs	r3, #8
 80034f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034f4:	e0a1      	b.n	800363a <UART_SetConfig+0x2e6>
 80034f6:	2310      	movs	r3, #16
 80034f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034fc:	e09d      	b.n	800363a <UART_SetConfig+0x2e6>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a4a      	ldr	r2, [pc, #296]	; (800362c <UART_SetConfig+0x2d8>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d125      	bne.n	8003554 <UART_SetConfig+0x200>
 8003508:	4b45      	ldr	r3, [pc, #276]	; (8003620 <UART_SetConfig+0x2cc>)
 800350a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800350e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003512:	2bc0      	cmp	r3, #192	; 0xc0
 8003514:	d016      	beq.n	8003544 <UART_SetConfig+0x1f0>
 8003516:	2bc0      	cmp	r3, #192	; 0xc0
 8003518:	d818      	bhi.n	800354c <UART_SetConfig+0x1f8>
 800351a:	2b80      	cmp	r3, #128	; 0x80
 800351c:	d00a      	beq.n	8003534 <UART_SetConfig+0x1e0>
 800351e:	2b80      	cmp	r3, #128	; 0x80
 8003520:	d814      	bhi.n	800354c <UART_SetConfig+0x1f8>
 8003522:	2b00      	cmp	r3, #0
 8003524:	d002      	beq.n	800352c <UART_SetConfig+0x1d8>
 8003526:	2b40      	cmp	r3, #64	; 0x40
 8003528:	d008      	beq.n	800353c <UART_SetConfig+0x1e8>
 800352a:	e00f      	b.n	800354c <UART_SetConfig+0x1f8>
 800352c:	2300      	movs	r3, #0
 800352e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003532:	e082      	b.n	800363a <UART_SetConfig+0x2e6>
 8003534:	2302      	movs	r3, #2
 8003536:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800353a:	e07e      	b.n	800363a <UART_SetConfig+0x2e6>
 800353c:	2304      	movs	r3, #4
 800353e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003542:	e07a      	b.n	800363a <UART_SetConfig+0x2e6>
 8003544:	2308      	movs	r3, #8
 8003546:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800354a:	e076      	b.n	800363a <UART_SetConfig+0x2e6>
 800354c:	2310      	movs	r3, #16
 800354e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003552:	e072      	b.n	800363a <UART_SetConfig+0x2e6>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a35      	ldr	r2, [pc, #212]	; (8003630 <UART_SetConfig+0x2dc>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d12a      	bne.n	80035b4 <UART_SetConfig+0x260>
 800355e:	4b30      	ldr	r3, [pc, #192]	; (8003620 <UART_SetConfig+0x2cc>)
 8003560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003564:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003568:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800356c:	d01a      	beq.n	80035a4 <UART_SetConfig+0x250>
 800356e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003572:	d81b      	bhi.n	80035ac <UART_SetConfig+0x258>
 8003574:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003578:	d00c      	beq.n	8003594 <UART_SetConfig+0x240>
 800357a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800357e:	d815      	bhi.n	80035ac <UART_SetConfig+0x258>
 8003580:	2b00      	cmp	r3, #0
 8003582:	d003      	beq.n	800358c <UART_SetConfig+0x238>
 8003584:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003588:	d008      	beq.n	800359c <UART_SetConfig+0x248>
 800358a:	e00f      	b.n	80035ac <UART_SetConfig+0x258>
 800358c:	2300      	movs	r3, #0
 800358e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003592:	e052      	b.n	800363a <UART_SetConfig+0x2e6>
 8003594:	2302      	movs	r3, #2
 8003596:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800359a:	e04e      	b.n	800363a <UART_SetConfig+0x2e6>
 800359c:	2304      	movs	r3, #4
 800359e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035a2:	e04a      	b.n	800363a <UART_SetConfig+0x2e6>
 80035a4:	2308      	movs	r3, #8
 80035a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035aa:	e046      	b.n	800363a <UART_SetConfig+0x2e6>
 80035ac:	2310      	movs	r3, #16
 80035ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035b2:	e042      	b.n	800363a <UART_SetConfig+0x2e6>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a17      	ldr	r2, [pc, #92]	; (8003618 <UART_SetConfig+0x2c4>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d13a      	bne.n	8003634 <UART_SetConfig+0x2e0>
 80035be:	4b18      	ldr	r3, [pc, #96]	; (8003620 <UART_SetConfig+0x2cc>)
 80035c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80035c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035cc:	d01a      	beq.n	8003604 <UART_SetConfig+0x2b0>
 80035ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035d2:	d81b      	bhi.n	800360c <UART_SetConfig+0x2b8>
 80035d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035d8:	d00c      	beq.n	80035f4 <UART_SetConfig+0x2a0>
 80035da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035de:	d815      	bhi.n	800360c <UART_SetConfig+0x2b8>
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d003      	beq.n	80035ec <UART_SetConfig+0x298>
 80035e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035e8:	d008      	beq.n	80035fc <UART_SetConfig+0x2a8>
 80035ea:	e00f      	b.n	800360c <UART_SetConfig+0x2b8>
 80035ec:	2300      	movs	r3, #0
 80035ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035f2:	e022      	b.n	800363a <UART_SetConfig+0x2e6>
 80035f4:	2302      	movs	r3, #2
 80035f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035fa:	e01e      	b.n	800363a <UART_SetConfig+0x2e6>
 80035fc:	2304      	movs	r3, #4
 80035fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003602:	e01a      	b.n	800363a <UART_SetConfig+0x2e6>
 8003604:	2308      	movs	r3, #8
 8003606:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800360a:	e016      	b.n	800363a <UART_SetConfig+0x2e6>
 800360c:	2310      	movs	r3, #16
 800360e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003612:	e012      	b.n	800363a <UART_SetConfig+0x2e6>
 8003614:	efff69f3 	.word	0xefff69f3
 8003618:	40008000 	.word	0x40008000
 800361c:	40013800 	.word	0x40013800
 8003620:	40021000 	.word	0x40021000
 8003624:	40004400 	.word	0x40004400
 8003628:	40004800 	.word	0x40004800
 800362c:	40004c00 	.word	0x40004c00
 8003630:	40005000 	.word	0x40005000
 8003634:	2310      	movs	r3, #16
 8003636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a9f      	ldr	r2, [pc, #636]	; (80038bc <UART_SetConfig+0x568>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d17a      	bne.n	800373a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003644:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003648:	2b08      	cmp	r3, #8
 800364a:	d824      	bhi.n	8003696 <UART_SetConfig+0x342>
 800364c:	a201      	add	r2, pc, #4	; (adr r2, 8003654 <UART_SetConfig+0x300>)
 800364e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003652:	bf00      	nop
 8003654:	08003679 	.word	0x08003679
 8003658:	08003697 	.word	0x08003697
 800365c:	08003681 	.word	0x08003681
 8003660:	08003697 	.word	0x08003697
 8003664:	08003687 	.word	0x08003687
 8003668:	08003697 	.word	0x08003697
 800366c:	08003697 	.word	0x08003697
 8003670:	08003697 	.word	0x08003697
 8003674:	0800368f 	.word	0x0800368f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003678:	f7fe fb4e 	bl	8001d18 <HAL_RCC_GetPCLK1Freq>
 800367c:	61f8      	str	r0, [r7, #28]
        break;
 800367e:	e010      	b.n	80036a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003680:	4b8f      	ldr	r3, [pc, #572]	; (80038c0 <UART_SetConfig+0x56c>)
 8003682:	61fb      	str	r3, [r7, #28]
        break;
 8003684:	e00d      	b.n	80036a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003686:	f7fe faaf 	bl	8001be8 <HAL_RCC_GetSysClockFreq>
 800368a:	61f8      	str	r0, [r7, #28]
        break;
 800368c:	e009      	b.n	80036a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800368e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003692:	61fb      	str	r3, [r7, #28]
        break;
 8003694:	e005      	b.n	80036a2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003696:	2300      	movs	r3, #0
 8003698:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80036a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f000 80fb 	beq.w	80038a0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	685a      	ldr	r2, [r3, #4]
 80036ae:	4613      	mov	r3, r2
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	4413      	add	r3, r2
 80036b4:	69fa      	ldr	r2, [r7, #28]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d305      	bcc.n	80036c6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80036c0:	69fa      	ldr	r2, [r7, #28]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d903      	bls.n	80036ce <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80036cc:	e0e8      	b.n	80038a0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	2200      	movs	r2, #0
 80036d2:	461c      	mov	r4, r3
 80036d4:	4615      	mov	r5, r2
 80036d6:	f04f 0200 	mov.w	r2, #0
 80036da:	f04f 0300 	mov.w	r3, #0
 80036de:	022b      	lsls	r3, r5, #8
 80036e0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80036e4:	0222      	lsls	r2, r4, #8
 80036e6:	68f9      	ldr	r1, [r7, #12]
 80036e8:	6849      	ldr	r1, [r1, #4]
 80036ea:	0849      	lsrs	r1, r1, #1
 80036ec:	2000      	movs	r0, #0
 80036ee:	4688      	mov	r8, r1
 80036f0:	4681      	mov	r9, r0
 80036f2:	eb12 0a08 	adds.w	sl, r2, r8
 80036f6:	eb43 0b09 	adc.w	fp, r3, r9
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	603b      	str	r3, [r7, #0]
 8003702:	607a      	str	r2, [r7, #4]
 8003704:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003708:	4650      	mov	r0, sl
 800370a:	4659      	mov	r1, fp
 800370c:	f7fc fd5c 	bl	80001c8 <__aeabi_uldivmod>
 8003710:	4602      	mov	r2, r0
 8003712:	460b      	mov	r3, r1
 8003714:	4613      	mov	r3, r2
 8003716:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800371e:	d308      	bcc.n	8003732 <UART_SetConfig+0x3de>
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003726:	d204      	bcs.n	8003732 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	60da      	str	r2, [r3, #12]
 8003730:	e0b6      	b.n	80038a0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003738:	e0b2      	b.n	80038a0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003742:	d15e      	bne.n	8003802 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003744:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003748:	2b08      	cmp	r3, #8
 800374a:	d828      	bhi.n	800379e <UART_SetConfig+0x44a>
 800374c:	a201      	add	r2, pc, #4	; (adr r2, 8003754 <UART_SetConfig+0x400>)
 800374e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003752:	bf00      	nop
 8003754:	08003779 	.word	0x08003779
 8003758:	08003781 	.word	0x08003781
 800375c:	08003789 	.word	0x08003789
 8003760:	0800379f 	.word	0x0800379f
 8003764:	0800378f 	.word	0x0800378f
 8003768:	0800379f 	.word	0x0800379f
 800376c:	0800379f 	.word	0x0800379f
 8003770:	0800379f 	.word	0x0800379f
 8003774:	08003797 	.word	0x08003797
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003778:	f7fe face 	bl	8001d18 <HAL_RCC_GetPCLK1Freq>
 800377c:	61f8      	str	r0, [r7, #28]
        break;
 800377e:	e014      	b.n	80037aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003780:	f7fe fae0 	bl	8001d44 <HAL_RCC_GetPCLK2Freq>
 8003784:	61f8      	str	r0, [r7, #28]
        break;
 8003786:	e010      	b.n	80037aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003788:	4b4d      	ldr	r3, [pc, #308]	; (80038c0 <UART_SetConfig+0x56c>)
 800378a:	61fb      	str	r3, [r7, #28]
        break;
 800378c:	e00d      	b.n	80037aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800378e:	f7fe fa2b 	bl	8001be8 <HAL_RCC_GetSysClockFreq>
 8003792:	61f8      	str	r0, [r7, #28]
        break;
 8003794:	e009      	b.n	80037aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003796:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800379a:	61fb      	str	r3, [r7, #28]
        break;
 800379c:	e005      	b.n	80037aa <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800379e:	2300      	movs	r3, #0
 80037a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80037a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d077      	beq.n	80038a0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	005a      	lsls	r2, r3, #1
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	085b      	lsrs	r3, r3, #1
 80037ba:	441a      	add	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	2b0f      	cmp	r3, #15
 80037ca:	d916      	bls.n	80037fa <UART_SetConfig+0x4a6>
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037d2:	d212      	bcs.n	80037fa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	f023 030f 	bic.w	r3, r3, #15
 80037dc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	085b      	lsrs	r3, r3, #1
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	f003 0307 	and.w	r3, r3, #7
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	8afb      	ldrh	r3, [r7, #22]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	8afa      	ldrh	r2, [r7, #22]
 80037f6:	60da      	str	r2, [r3, #12]
 80037f8:	e052      	b.n	80038a0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003800:	e04e      	b.n	80038a0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003802:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003806:	2b08      	cmp	r3, #8
 8003808:	d827      	bhi.n	800385a <UART_SetConfig+0x506>
 800380a:	a201      	add	r2, pc, #4	; (adr r2, 8003810 <UART_SetConfig+0x4bc>)
 800380c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003810:	08003835 	.word	0x08003835
 8003814:	0800383d 	.word	0x0800383d
 8003818:	08003845 	.word	0x08003845
 800381c:	0800385b 	.word	0x0800385b
 8003820:	0800384b 	.word	0x0800384b
 8003824:	0800385b 	.word	0x0800385b
 8003828:	0800385b 	.word	0x0800385b
 800382c:	0800385b 	.word	0x0800385b
 8003830:	08003853 	.word	0x08003853
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003834:	f7fe fa70 	bl	8001d18 <HAL_RCC_GetPCLK1Freq>
 8003838:	61f8      	str	r0, [r7, #28]
        break;
 800383a:	e014      	b.n	8003866 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800383c:	f7fe fa82 	bl	8001d44 <HAL_RCC_GetPCLK2Freq>
 8003840:	61f8      	str	r0, [r7, #28]
        break;
 8003842:	e010      	b.n	8003866 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003844:	4b1e      	ldr	r3, [pc, #120]	; (80038c0 <UART_SetConfig+0x56c>)
 8003846:	61fb      	str	r3, [r7, #28]
        break;
 8003848:	e00d      	b.n	8003866 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800384a:	f7fe f9cd 	bl	8001be8 <HAL_RCC_GetSysClockFreq>
 800384e:	61f8      	str	r0, [r7, #28]
        break;
 8003850:	e009      	b.n	8003866 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003852:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003856:	61fb      	str	r3, [r7, #28]
        break;
 8003858:	e005      	b.n	8003866 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800385a:	2300      	movs	r3, #0
 800385c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003864:	bf00      	nop
    }

    if (pclk != 0U)
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d019      	beq.n	80038a0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	085a      	lsrs	r2, r3, #1
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	441a      	add	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	fbb2 f3f3 	udiv	r3, r2, r3
 800387e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	2b0f      	cmp	r3, #15
 8003884:	d909      	bls.n	800389a <UART_SetConfig+0x546>
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800388c:	d205      	bcs.n	800389a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	b29a      	uxth	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	60da      	str	r2, [r3, #12]
 8003898:	e002      	b.n	80038a0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80038ac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3728      	adds	r7, #40	; 0x28
 80038b4:	46bd      	mov	sp, r7
 80038b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038ba:	bf00      	nop
 80038bc:	40008000 	.word	0x40008000
 80038c0:	00f42400 	.word	0x00f42400

080038c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00a      	beq.n	80038ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00a      	beq.n	8003910 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	430a      	orrs	r2, r1
 800390e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003914:	f003 0304 	and.w	r3, r3, #4
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00a      	beq.n	8003932 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	430a      	orrs	r2, r1
 8003930:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003936:	f003 0308 	and.w	r3, r3, #8
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00a      	beq.n	8003954 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	430a      	orrs	r2, r1
 8003952:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003958:	f003 0310 	and.w	r3, r3, #16
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00a      	beq.n	8003976 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	430a      	orrs	r2, r1
 8003974:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397a:	f003 0320 	and.w	r3, r3, #32
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00a      	beq.n	8003998 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	430a      	orrs	r2, r1
 8003996:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d01a      	beq.n	80039da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039c2:	d10a      	bne.n	80039da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00a      	beq.n	80039fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	430a      	orrs	r2, r1
 80039fa:	605a      	str	r2, [r3, #4]
  }
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af02      	add	r7, sp, #8
 8003a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a18:	f7fd f8ce 	bl	8000bb8 <HAL_GetTick>
 8003a1c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0308 	and.w	r3, r3, #8
 8003a28:	2b08      	cmp	r3, #8
 8003a2a:	d10e      	bne.n	8003a4a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 f82d 	bl	8003a9a <UART_WaitOnFlagUntilTimeout>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e023      	b.n	8003a92 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0304 	and.w	r3, r3, #4
 8003a54:	2b04      	cmp	r3, #4
 8003a56:	d10e      	bne.n	8003a76 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 f817 	bl	8003a9a <UART_WaitOnFlagUntilTimeout>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e00d      	b.n	8003a92 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2220      	movs	r2, #32
 8003a7a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2220      	movs	r2, #32
 8003a80:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b09c      	sub	sp, #112	; 0x70
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	60f8      	str	r0, [r7, #12]
 8003aa2:	60b9      	str	r1, [r7, #8]
 8003aa4:	603b      	str	r3, [r7, #0]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aaa:	e0a5      	b.n	8003bf8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab2:	f000 80a1 	beq.w	8003bf8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ab6:	f7fd f87f 	bl	8000bb8 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d302      	bcc.n	8003acc <UART_WaitOnFlagUntilTimeout+0x32>
 8003ac6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d13e      	bne.n	8003b4a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ad4:	e853 3f00 	ldrex	r3, [r3]
 8003ad8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003ada:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003adc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ae0:	667b      	str	r3, [r7, #100]	; 0x64
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003aea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003aec:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003af0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003af2:	e841 2300 	strex	r3, r2, [r1]
 8003af6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003af8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1e6      	bne.n	8003acc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	3308      	adds	r3, #8
 8003b04:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b08:	e853 3f00 	ldrex	r3, [r3]
 8003b0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b10:	f023 0301 	bic.w	r3, r3, #1
 8003b14:	663b      	str	r3, [r7, #96]	; 0x60
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	3308      	adds	r3, #8
 8003b1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003b1e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003b20:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b22:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003b24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b26:	e841 2300 	strex	r3, r2, [r1]
 8003b2a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003b2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1e5      	bne.n	8003afe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2220      	movs	r2, #32
 8003b36:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e067      	b.n	8003c1a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0304 	and.w	r3, r3, #4
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d04f      	beq.n	8003bf8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	69db      	ldr	r3, [r3, #28]
 8003b5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b66:	d147      	bne.n	8003bf8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b70:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b7a:	e853 3f00 	ldrex	r3, [r3]
 8003b7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b82:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b86:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b90:	637b      	str	r3, [r7, #52]	; 0x34
 8003b92:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b98:	e841 2300 	strex	r3, r2, [r1]
 8003b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1e6      	bne.n	8003b72 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	3308      	adds	r3, #8
 8003baa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	e853 3f00 	ldrex	r3, [r3]
 8003bb2:	613b      	str	r3, [r7, #16]
   return(result);
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	f023 0301 	bic.w	r3, r3, #1
 8003bba:	66bb      	str	r3, [r7, #104]	; 0x68
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	3308      	adds	r3, #8
 8003bc2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003bc4:	623a      	str	r2, [r7, #32]
 8003bc6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc8:	69f9      	ldr	r1, [r7, #28]
 8003bca:	6a3a      	ldr	r2, [r7, #32]
 8003bcc:	e841 2300 	strex	r3, r2, [r1]
 8003bd0:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1e5      	bne.n	8003ba4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2220      	movs	r2, #32
 8003bdc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2220      	movs	r2, #32
 8003be2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2220      	movs	r2, #32
 8003be8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e010      	b.n	8003c1a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	69da      	ldr	r2, [r3, #28]
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	4013      	ands	r3, r2
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	bf0c      	ite	eq
 8003c08:	2301      	moveq	r3, #1
 8003c0a:	2300      	movne	r3, #0
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	461a      	mov	r2, r3
 8003c10:	79fb      	ldrb	r3, [r7, #7]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	f43f af4a 	beq.w	8003aac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3770      	adds	r7, #112	; 0x70
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
	...

08003c24 <_ZN6sx1280C1EP19__SPI_HandleTypeDef>:
#include "sx1280.hpp"
#include "main.h"

extern SPI_HandleTypeDef hspi3;

sx1280::sx1280(SPI_HandleTypeDef* hspi)
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
{
	this->hspi = hspi;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	683a      	ldr	r2, [r7, #0]
 8003c32:	601a      	str	r2, [r3, #0]
	this->rst_gpiob = LD2_GPIO_Port;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003c3a:	605a      	str	r2, [r3, #4]
	this->rst_gpiop = LD2_Pin;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2220      	movs	r2, #32
 8003c40:	811a      	strh	r2, [r3, #8]
	this->busy_gpiob = GPIOC;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a05      	ldr	r2, [pc, #20]	; (8003c5c <_ZN6sx1280C1EP19__SPI_HandleTypeDef+0x38>)
 8003c46:	60da      	str	r2, [r3, #12]
	this->busy_gpiop = GPIO_PIN_0;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	821a      	strh	r2, [r3, #16]
}
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4618      	mov	r0, r3
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr
 8003c5c:	48000800 	.word	0x48000800

08003c60 <_ZN6sx12805resetEv>:
sx1280::~sx1280()
{
}

void sx1280::reset()
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->rst_gpiob, this->rst_gpiop, GPIO_PIN_SET);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6858      	ldr	r0, [r3, #4]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	891b      	ldrh	r3, [r3, #8]
 8003c70:	2201      	movs	r2, #1
 8003c72:	4619      	mov	r1, r3
 8003c74:	f7fd fa60 	bl	8001138 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8003c78:	200a      	movs	r0, #10
 8003c7a:	f7fc ffa9 	bl	8000bd0 <HAL_Delay>
	HAL_GPIO_WritePin(this->rst_gpiob, this->rst_gpiop, GPIO_PIN_RESET);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6858      	ldr	r0, [r3, #4]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	891b      	ldrh	r3, [r3, #8]
 8003c86:	2200      	movs	r2, #0
 8003c88:	4619      	mov	r1, r3
 8003c8a:	f7fd fa55 	bl	8001138 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8003c8e:	200a      	movs	r0, #10
 8003c90:	f7fc ff9e 	bl	8000bd0 <HAL_Delay>
	HAL_GPIO_WritePin(this->rst_gpiob, this->rst_gpiop, GPIO_PIN_SET);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6858      	ldr	r0, [r3, #4]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	891b      	ldrh	r3, [r3, #8]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	f7fd fa4a 	bl	8001138 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8003ca4:	200a      	movs	r0, #10
 8003ca6:	f7fc ff93 	bl	8000bd0 <HAL_Delay>
}
 8003caa:	bf00      	nop
 8003cac:	3708      	adds	r7, #8
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}

08003cb2 <_ZN6sx128014readRegister8bEt>:
	buff[4] = data & 0xff;
	HAL_SPI_Transmit(hspi, buff, 5, 10);
}

uint8_t sx1280::readRegister8b(uint16_t address)
{
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b088      	sub	sp, #32
 8003cb6:	af02      	add	r7, sp, #8
 8003cb8:	6078      	str	r0, [r7, #4]
 8003cba:	460b      	mov	r3, r1
 8003cbc:	807b      	strh	r3, [r7, #2]
	uint8_t txbuff[6];
	uint8_t rxbuff[6];
	txbuff[0] = 0x19;
 8003cbe:	2319      	movs	r3, #25
 8003cc0:	743b      	strb	r3, [r7, #16]
	txbuff[1] = address >> 8;
 8003cc2:	887b      	ldrh	r3, [r7, #2]
 8003cc4:	0a1b      	lsrs	r3, r3, #8
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	747b      	strb	r3, [r7, #17]
	txbuff[2] = address & 0xff;
 8003ccc:	887b      	ldrh	r3, [r7, #2]
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	74bb      	strb	r3, [r7, #18]
	HAL_SPI_TransmitReceive(hspi, txbuff, rxbuff, 6, 10);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6818      	ldr	r0, [r3, #0]
 8003cd6:	f107 0208 	add.w	r2, r7, #8
 8003cda:	f107 0110 	add.w	r1, r7, #16
 8003cde:	230a      	movs	r3, #10
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	2306      	movs	r3, #6
 8003ce4:	f7fe ff71 	bl	8002bca <HAL_SPI_TransmitReceive>
	return rxbuff[5];
 8003ce8:	7b7b      	ldrb	r3, [r7, #13]
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3718      	adds	r7, #24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <_ZN6sx128010setStandbyEv>:
	delete txbuff;
	delete rxbuff;
}

void sx1280::setStandby()
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b084      	sub	sp, #16
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
	uint8_t txbuff[2];
	txbuff[0] = 0x80;
 8003cfa:	2380      	movs	r3, #128	; 0x80
 8003cfc:	733b      	strb	r3, [r7, #12]
	txbuff[1] = 0x00;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(hspi, txbuff, 2, 10);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6818      	ldr	r0, [r3, #0]
 8003d06:	f107 010c 	add.w	r1, r7, #12
 8003d0a:	230a      	movs	r3, #10
 8003d0c:	2202      	movs	r2, #2
 8003d0e:	f7fe fdee 	bl	80028ee <HAL_SPI_Transmit>
}
 8003d12:	bf00      	nop
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <_ZN6sx12805setFsEv>:

void sx1280::setFs()
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b084      	sub	sp, #16
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
	uint8_t txbuff[1];
	txbuff[0] = 0xC1;
 8003d22:	23c1      	movs	r3, #193	; 0xc1
 8003d24:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(hspi, txbuff, 1, 10);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6818      	ldr	r0, [r3, #0]
 8003d2a:	f107 010c 	add.w	r1, r7, #12
 8003d2e:	230a      	movs	r3, #10
 8003d30:	2201      	movs	r2, #1
 8003d32:	f7fe fddc 	bl	80028ee <HAL_SPI_Transmit>
}
 8003d36:	bf00      	nop
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
	...

08003d40 <_ZN6sx12809getStatusEv>:
	txbuff[3] = 0x00;
	HAL_SPI_Transmit(hspi, txbuff, 4, 10);
}

uint8_t sx1280::getStatus()
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af02      	add	r7, sp, #8
 8003d46:	6078      	str	r0, [r7, #4]
	uint8_t txbuff[1], rxbuff[1];
	txbuff[0] = 0xC0;
 8003d48:	23c0      	movs	r3, #192	; 0xc0
 8003d4a:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&hspi3, txbuff, rxbuff, 1, 10);
 8003d4c:	f107 0208 	add.w	r2, r7, #8
 8003d50:	f107 010c 	add.w	r1, r7, #12
 8003d54:	230a      	movs	r3, #10
 8003d56:	9300      	str	r3, [sp, #0]
 8003d58:	2301      	movs	r3, #1
 8003d5a:	4804      	ldr	r0, [pc, #16]	; (8003d6c <_ZN6sx12809getStatusEv+0x2c>)
 8003d5c:	f7fe ff35 	bl	8002bca <HAL_SPI_TransmitReceive>
	return rxbuff[0];
 8003d60:	7a3b      	ldrb	r3, [r7, #8]
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	20000028 	.word	0x20000028

08003d70 <__libc_init_array>:
 8003d70:	b570      	push	{r4, r5, r6, lr}
 8003d72:	4d0d      	ldr	r5, [pc, #52]	; (8003da8 <__libc_init_array+0x38>)
 8003d74:	4c0d      	ldr	r4, [pc, #52]	; (8003dac <__libc_init_array+0x3c>)
 8003d76:	1b64      	subs	r4, r4, r5
 8003d78:	10a4      	asrs	r4, r4, #2
 8003d7a:	2600      	movs	r6, #0
 8003d7c:	42a6      	cmp	r6, r4
 8003d7e:	d109      	bne.n	8003d94 <__libc_init_array+0x24>
 8003d80:	4d0b      	ldr	r5, [pc, #44]	; (8003db0 <__libc_init_array+0x40>)
 8003d82:	4c0c      	ldr	r4, [pc, #48]	; (8003db4 <__libc_init_array+0x44>)
 8003d84:	f000 f820 	bl	8003dc8 <_init>
 8003d88:	1b64      	subs	r4, r4, r5
 8003d8a:	10a4      	asrs	r4, r4, #2
 8003d8c:	2600      	movs	r6, #0
 8003d8e:	42a6      	cmp	r6, r4
 8003d90:	d105      	bne.n	8003d9e <__libc_init_array+0x2e>
 8003d92:	bd70      	pop	{r4, r5, r6, pc}
 8003d94:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d98:	4798      	blx	r3
 8003d9a:	3601      	adds	r6, #1
 8003d9c:	e7ee      	b.n	8003d7c <__libc_init_array+0xc>
 8003d9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003da2:	4798      	blx	r3
 8003da4:	3601      	adds	r6, #1
 8003da6:	e7f2      	b.n	8003d8e <__libc_init_array+0x1e>
 8003da8:	08003e30 	.word	0x08003e30
 8003dac:	08003e30 	.word	0x08003e30
 8003db0:	08003e30 	.word	0x08003e30
 8003db4:	08003e34 	.word	0x08003e34

08003db8 <memset>:
 8003db8:	4402      	add	r2, r0
 8003dba:	4603      	mov	r3, r0
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d100      	bne.n	8003dc2 <memset+0xa>
 8003dc0:	4770      	bx	lr
 8003dc2:	f803 1b01 	strb.w	r1, [r3], #1
 8003dc6:	e7f9      	b.n	8003dbc <memset+0x4>

08003dc8 <_init>:
 8003dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dca:	bf00      	nop
 8003dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dce:	bc08      	pop	{r3}
 8003dd0:	469e      	mov	lr, r3
 8003dd2:	4770      	bx	lr

08003dd4 <_fini>:
 8003dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dd6:	bf00      	nop
 8003dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dda:	bc08      	pop	{r3}
 8003ddc:	469e      	mov	lr, r3
 8003dde:	4770      	bx	lr
